
LwIP_HTTP_Server_Socket_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb48  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014f8c  0801ee18  0801ee18  0001fe18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033da4  08033da4  000350a0  2**0
                  CONTENTS
  4 .ARM          00000008  08033da4  08033da4  00034da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033dac  08033dac  000350a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033dac  08033dac  00034dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08033db0  08033db0  00034db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08033db4  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fac0  200000a0  08033e54  000350a0  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  2000fb60  08033e54  00035b60  2**0
                  ALLOC
 11 .lwip_sec     00003283  30000000  08033e54  00036000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000350a0  2**0
                  CONTENTS, READONLY
 13 .debug_line   00042b2f  00000000  00000000  000350ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000075  00000000  00000000  00077bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00041b6d  00000000  00000000  00077c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000090eb  00000000  00000000  000b97df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002eb0  00000000  00000000  000c28d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176208  00000000  00000000  000c5780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002524  00000000  00000000  0023b988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0004406a  00000000  00000000  0023deac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00281f16  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ce50  00000000  00000000  00281f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000a0 	.word	0x200000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ee00 	.word	0x0801ee00

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000a4 	.word	0x200000a4
 800030c:	0801ee00 	.word	0x0801ee00

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b96a 	b.w	80006cc <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	460c      	mov	r4, r1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d14e      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041c:	4694      	mov	ip, r2
 800041e:	458c      	cmp	ip, r1
 8000420:	4686      	mov	lr, r0
 8000422:	fab2 f282 	clz	r2, r2
 8000426:	d962      	bls.n	80004ee <__udivmoddi4+0xde>
 8000428:	b14a      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	4091      	lsls	r1, r2
 8000430:	fa20 f303 	lsr.w	r3, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	4319      	orrs	r1, r3
 800043a:	fa00 fe02 	lsl.w	lr, r0, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f f68c 	uxth.w	r6, ip
 8000446:	fbb1 f4f7 	udiv	r4, r1, r7
 800044a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f104 30ff 	add.w	r0, r4, #4294967295
 8000466:	f080 8112 	bcs.w	800068e <__udivmoddi4+0x27e>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 810f 	bls.w	800068e <__udivmoddi4+0x27e>
 8000470:	3c02      	subs	r4, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	fa1f f38e 	uxth.w	r3, lr
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1110 	mls	r1, r7, r0, r1
 8000482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000486:	fb00 f606 	mul.w	r6, r0, r6
 800048a:	429e      	cmp	r6, r3
 800048c:	d90a      	bls.n	80004a4 <__udivmoddi4+0x94>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 31ff 	add.w	r1, r0, #4294967295
 8000496:	f080 80fc 	bcs.w	8000692 <__udivmoddi4+0x282>
 800049a:	429e      	cmp	r6, r3
 800049c:	f240 80f9 	bls.w	8000692 <__udivmoddi4+0x282>
 80004a0:	4463      	add	r3, ip
 80004a2:	3802      	subs	r0, #2
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004aa:	2100      	movs	r1, #0
 80004ac:	b11d      	cbz	r5, 80004b6 <__udivmoddi4+0xa6>
 80004ae:	40d3      	lsrs	r3, r2
 80004b0:	2200      	movs	r2, #0
 80004b2:	e9c5 3200 	strd	r3, r2, [r5]
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d905      	bls.n	80004ca <__udivmoddi4+0xba>
 80004be:	b10d      	cbz	r5, 80004c4 <__udivmoddi4+0xb4>
 80004c0:	e9c5 0100 	strd	r0, r1, [r5]
 80004c4:	2100      	movs	r1, #0
 80004c6:	4608      	mov	r0, r1
 80004c8:	e7f5      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ca:	fab3 f183 	clz	r1, r3
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d146      	bne.n	8000560 <__udivmoddi4+0x150>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0xcc>
 80004d6:	4290      	cmp	r0, r2
 80004d8:	f0c0 80f0 	bcc.w	80006bc <__udivmoddi4+0x2ac>
 80004dc:	1a86      	subs	r6, r0, r2
 80004de:	eb64 0303 	sbc.w	r3, r4, r3
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d0e6      	beq.n	80004b6 <__udivmoddi4+0xa6>
 80004e8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ec:	e7e3      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	f040 8090 	bne.w	8000614 <__udivmoddi4+0x204>
 80004f4:	eba1 040c 	sub.w	r4, r1, ip
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa1f f78c 	uxth.w	r7, ip
 8000500:	2101      	movs	r1, #1
 8000502:	fbb4 f6f8 	udiv	r6, r4, r8
 8000506:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800050a:	fb08 4416 	mls	r4, r8, r6, r4
 800050e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000512:	fb07 f006 	mul.w	r0, r7, r6
 8000516:	4298      	cmp	r0, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x11c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x11a>
 8000524:	4298      	cmp	r0, r3
 8000526:	f200 80cd 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 800052a:	4626      	mov	r6, r4
 800052c:	1a1c      	subs	r4, r3, r0
 800052e:	fa1f f38e 	uxth.w	r3, lr
 8000532:	fbb4 f0f8 	udiv	r0, r4, r8
 8000536:	fb08 4410 	mls	r4, r8, r0, r4
 800053a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800053e:	fb00 f707 	mul.w	r7, r0, r7
 8000542:	429f      	cmp	r7, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x148>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 34ff 	add.w	r4, r0, #4294967295
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0x146>
 8000550:	429f      	cmp	r7, r3
 8000552:	f200 80b0 	bhi.w	80006b6 <__udivmoddi4+0x2a6>
 8000556:	4620      	mov	r0, r4
 8000558:	1bdb      	subs	r3, r3, r7
 800055a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800055e:	e7a5      	b.n	80004ac <__udivmoddi4+0x9c>
 8000560:	f1c1 0620 	rsb	r6, r1, #32
 8000564:	408b      	lsls	r3, r1
 8000566:	fa22 f706 	lsr.w	r7, r2, r6
 800056a:	431f      	orrs	r7, r3
 800056c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000570:	fa04 f301 	lsl.w	r3, r4, r1
 8000574:	ea43 030c 	orr.w	r3, r3, ip
 8000578:	40f4      	lsrs	r4, r6
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	0c38      	lsrs	r0, r7, #16
 8000580:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000584:	fbb4 fef0 	udiv	lr, r4, r0
 8000588:	fa1f fc87 	uxth.w	ip, r7
 800058c:	fb00 441e 	mls	r4, r0, lr, r4
 8000590:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000594:	fb0e f90c 	mul.w	r9, lr, ip
 8000598:	45a1      	cmp	r9, r4
 800059a:	fa02 f201 	lsl.w	r2, r2, r1
 800059e:	d90a      	bls.n	80005b6 <__udivmoddi4+0x1a6>
 80005a0:	193c      	adds	r4, r7, r4
 80005a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005a6:	f080 8084 	bcs.w	80006b2 <__udivmoddi4+0x2a2>
 80005aa:	45a1      	cmp	r9, r4
 80005ac:	f240 8081 	bls.w	80006b2 <__udivmoddi4+0x2a2>
 80005b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b4:	443c      	add	r4, r7
 80005b6:	eba4 0409 	sub.w	r4, r4, r9
 80005ba:	fa1f f983 	uxth.w	r9, r3
 80005be:	fbb4 f3f0 	udiv	r3, r4, r0
 80005c2:	fb00 4413 	mls	r4, r0, r3, r4
 80005c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ce:	45a4      	cmp	ip, r4
 80005d0:	d907      	bls.n	80005e2 <__udivmoddi4+0x1d2>
 80005d2:	193c      	adds	r4, r7, r4
 80005d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005d8:	d267      	bcs.n	80006aa <__udivmoddi4+0x29a>
 80005da:	45a4      	cmp	ip, r4
 80005dc:	d965      	bls.n	80006aa <__udivmoddi4+0x29a>
 80005de:	3b02      	subs	r3, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005e6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ea:	eba4 040c 	sub.w	r4, r4, ip
 80005ee:	429c      	cmp	r4, r3
 80005f0:	46ce      	mov	lr, r9
 80005f2:	469c      	mov	ip, r3
 80005f4:	d351      	bcc.n	800069a <__udivmoddi4+0x28a>
 80005f6:	d04e      	beq.n	8000696 <__udivmoddi4+0x286>
 80005f8:	b155      	cbz	r5, 8000610 <__udivmoddi4+0x200>
 80005fa:	ebb8 030e 	subs.w	r3, r8, lr
 80005fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000602:	fa04 f606 	lsl.w	r6, r4, r6
 8000606:	40cb      	lsrs	r3, r1
 8000608:	431e      	orrs	r6, r3
 800060a:	40cc      	lsrs	r4, r1
 800060c:	e9c5 6400 	strd	r6, r4, [r5]
 8000610:	2100      	movs	r1, #0
 8000612:	e750      	b.n	80004b6 <__udivmoddi4+0xa6>
 8000614:	f1c2 0320 	rsb	r3, r2, #32
 8000618:	fa20 f103 	lsr.w	r1, r0, r3
 800061c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000620:	fa24 f303 	lsr.w	r3, r4, r3
 8000624:	4094      	lsls	r4, r2
 8000626:	430c      	orrs	r4, r1
 8000628:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800062c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000630:	fa1f f78c 	uxth.w	r7, ip
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3110 	mls	r1, r8, r0, r3
 800063c:	0c23      	lsrs	r3, r4, #16
 800063e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000642:	fb00 f107 	mul.w	r1, r0, r7
 8000646:	4299      	cmp	r1, r3
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x24c>
 800064a:	eb1c 0303 	adds.w	r3, ip, r3
 800064e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000652:	d22c      	bcs.n	80006ae <__udivmoddi4+0x29e>
 8000654:	4299      	cmp	r1, r3
 8000656:	d92a      	bls.n	80006ae <__udivmoddi4+0x29e>
 8000658:	3802      	subs	r0, #2
 800065a:	4463      	add	r3, ip
 800065c:	1a5b      	subs	r3, r3, r1
 800065e:	b2a4      	uxth	r4, r4
 8000660:	fbb3 f1f8 	udiv	r1, r3, r8
 8000664:	fb08 3311 	mls	r3, r8, r1, r3
 8000668:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800066c:	fb01 f307 	mul.w	r3, r1, r7
 8000670:	42a3      	cmp	r3, r4
 8000672:	d908      	bls.n	8000686 <__udivmoddi4+0x276>
 8000674:	eb1c 0404 	adds.w	r4, ip, r4
 8000678:	f101 36ff 	add.w	r6, r1, #4294967295
 800067c:	d213      	bcs.n	80006a6 <__udivmoddi4+0x296>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d911      	bls.n	80006a6 <__udivmoddi4+0x296>
 8000682:	3902      	subs	r1, #2
 8000684:	4464      	add	r4, ip
 8000686:	1ae4      	subs	r4, r4, r3
 8000688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800068c:	e739      	b.n	8000502 <__udivmoddi4+0xf2>
 800068e:	4604      	mov	r4, r0
 8000690:	e6f0      	b.n	8000474 <__udivmoddi4+0x64>
 8000692:	4608      	mov	r0, r1
 8000694:	e706      	b.n	80004a4 <__udivmoddi4+0x94>
 8000696:	45c8      	cmp	r8, r9
 8000698:	d2ae      	bcs.n	80005f8 <__udivmoddi4+0x1e8>
 800069a:	ebb9 0e02 	subs.w	lr, r9, r2
 800069e:	eb63 0c07 	sbc.w	ip, r3, r7
 80006a2:	3801      	subs	r0, #1
 80006a4:	e7a8      	b.n	80005f8 <__udivmoddi4+0x1e8>
 80006a6:	4631      	mov	r1, r6
 80006a8:	e7ed      	b.n	8000686 <__udivmoddi4+0x276>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e799      	b.n	80005e2 <__udivmoddi4+0x1d2>
 80006ae:	4630      	mov	r0, r6
 80006b0:	e7d4      	b.n	800065c <__udivmoddi4+0x24c>
 80006b2:	46d6      	mov	lr, sl
 80006b4:	e77f      	b.n	80005b6 <__udivmoddi4+0x1a6>
 80006b6:	4463      	add	r3, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	e74d      	b.n	8000558 <__udivmoddi4+0x148>
 80006bc:	4606      	mov	r6, r0
 80006be:	4623      	mov	r3, r4
 80006c0:	4608      	mov	r0, r1
 80006c2:	e70f      	b.n	80004e4 <__udivmoddi4+0xd4>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	4463      	add	r3, ip
 80006c8:	e730      	b.n	800052c <__udivmoddi4+0x11c>
 80006ca:	bf00      	nop

080006cc <__aeabi_idiv0>:
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000708 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006d6:	e003      	b.n	80006e0 <LoopCopyDataInit>

080006d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006de:	3104      	adds	r1, #4

080006e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006e0:	480b      	ldr	r0, [pc, #44]	@ (8000710 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006e8:	d3f6      	bcc.n	80006d8 <CopyDataInit>
  ldr  r2, =_sbss
 80006ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000718 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006ec:	e002      	b.n	80006f4 <LoopFillZerobss>

080006ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006f0:	f842 3b04 	str.w	r3, [r2], #4

080006f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006f8:	d3f9      	bcc.n	80006ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006fa:	f001 fe93 	bl	8002424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fe:	f01d fb93 	bl	801de28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000702:	f001 f95b 	bl	80019bc <main>
  bx  lr    
 8000706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000708:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800070c:	08033db4 	.word	0x08033db4
  ldr  r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000714:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 8000718:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 800071c:	2000fb60 	.word	0x2000fb60

08000720 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC3_IRQHandler>
	...

08000724 <Log_Init>:
#include <stdio.h>

static UART_HandleTypeDef uart_handle;

void Log_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

	// Enable clocks
	__GPIOD_CLK_ENABLE();
 800072a:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <Log_Init+0xa8>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a26      	ldr	r2, [pc, #152]	@ (80007cc <Log_Init+0xa8>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <Log_Init+0xa8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 0308 	and.w	r3, r3, #8
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
	__USART3_CLK_ENABLE();
 8000748:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <Log_Init+0xa8>)
 800074a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800074e:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <Log_Init+0xa8>)
 8000750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000754:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <Log_Init+0xa8>)
 800075a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800075e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

	// Configure GPIO
	GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin       = GPIO_PIN_8;
 8000772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000776:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000778:	2307      	movs	r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4619      	mov	r1, r3
 8000782:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <Log_Init+0xac>)
 8000784:	f003 ff10 	bl	80045a8 <HAL_GPIO_Init>

	// Configure the USART peripheral
	uart_handle.Instance          = USART3;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <Log_Init+0xb0>)
 800078a:	4a13      	ldr	r2, [pc, #76]	@ (80007d8 <Log_Init+0xb4>)
 800078c:	601a      	str	r2, [r3, #0]
	uart_handle.Init.BaudRate     = 4000000;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <Log_Init+0xb0>)
 8000790:	4a12      	ldr	r2, [pc, #72]	@ (80007dc <Log_Init+0xb8>)
 8000792:	605a      	str	r2, [r3, #4]
	uart_handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <Log_Init+0xb0>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	uart_handle.Init.StopBits     = UART_STOPBITS_1;
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <Log_Init+0xb0>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
	uart_handle.Init.Parity       = UART_PARITY_NONE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <Log_Init+0xb0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
	uart_handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <Log_Init+0xb0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
	uart_handle.Init.Mode         = UART_MODE_TX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <Log_Init+0xb0>)
 80007ae:	2208      	movs	r2, #8
 80007b0:	615a      	str	r2, [r3, #20]

	// Commit the USART
	if (HAL_UART_Init(&uart_handle) != HAL_OK)
 80007b2:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <Log_Init+0xb0>)
 80007b4:	f005 fe42 	bl	800643c <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <Log_Init+0x9e>
	{
		while (1);
 80007be:	bf00      	nop
 80007c0:	e7fd      	b.n	80007be <Log_Init+0x9a>
	}
}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020c00 	.word	0x58020c00
 80007d4:	200000bc 	.word	0x200000bc
 80007d8:	40004800 	.word	0x40004800
 80007dc:	003d0900 	.word	0x003d0900

080007e0 <_write>:

int _write(int file, char *ptr, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&uart_handle, (uint8_t*)ptr, len, 0xFFFF);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <_write+0x28>)
 80007f8:	f005 fe7a 	bl	80064f0 <HAL_UART_Transmit>
	return len;
 80007fc:	687b      	ldr	r3, [r7, #4]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000bc 	.word	0x200000bc

0800080c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d003      	beq.n	800082c <ethernet_link_status_updated+0x20>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <ethernet_link_status_updated+0x34>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
#else
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3);
#endif /* LWIP_DHCP */
  }
}
 800082a:	e002      	b.n	8000832 <ethernet_link_status_updated+0x26>
    DHCP_state = DHCP_LINK_DOWN;
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <ethernet_link_status_updated+0x34>)
 800082e:	2205      	movs	r2, #5
 8000830:	701a      	strb	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000150 	.word	0x20000150

08000844 <DHCP_Thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_Thread(void* argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	61fb      	str	r3, [r7, #28]
  ip_addr_t gw;
  struct dhcp *dhcp;

  for (;;)
  {
    switch (DHCP_state)
 8000850:	4b33      	ldr	r3, [pc, #204]	@ (8000920 <DHCP_Thread+0xdc>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b05      	cmp	r3, #5
 8000858:	d04f      	beq.n	80008fa <DHCP_Thread+0xb6>
 800085a:	2b05      	cmp	r3, #5
 800085c:	dc57      	bgt.n	800090e <DHCP_Thread+0xca>
 800085e:	2b01      	cmp	r3, #1
 8000860:	d002      	beq.n	8000868 <DHCP_Thread+0x24>
 8000862:	2b02      	cmp	r3, #2
 8000864:	d018      	beq.n	8000898 <DHCP_Thread+0x54>

      BSP_LED_Off(LED2);
      BSP_LED_On(LED3);
    }
    break;
    default: break;
 8000866:	e052      	b.n	800090e <DHCP_Thread+0xca>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
        DHCP_state = DHCP_WAIT_ADDRESS;
 800087a:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <DHCP_Thread+0xdc>)
 800087c:	2202      	movs	r2, #2
 800087e:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED2);
 8000880:	2001      	movs	r0, #1
 8000882:	f001 fda5 	bl	80023d0 <BSP_LED_Off>
        BSP_LED_Off(LED3);
 8000886:	2002      	movs	r0, #2
 8000888:	f001 fda2 	bl	80023d0 <BSP_LED_Off>
        netifapi_dhcp_start(netif);
 800088c:	4a25      	ldr	r2, [pc, #148]	@ (8000924 <DHCP_Thread+0xe0>)
 800088e:	2100      	movs	r1, #0
 8000890:	69f8      	ldr	r0, [r7, #28]
 8000892:	f00b f9dd 	bl	800bc50 <netifapi_netif_common>
      break;
 8000896:	e03d      	b.n	8000914 <DHCP_Thread+0xd0>
        if (dhcp_supplied_address(netif))
 8000898:	69f8      	ldr	r0, [r7, #28]
 800089a:	f010 ff45 	bl	8011728 <dhcp_supplied_address>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d009      	beq.n	80008b8 <DHCP_Thread+0x74>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <DHCP_Thread+0xdc>)
 80008a6:	2203      	movs	r2, #3
 80008a8:	701a      	strb	r2, [r3, #0]
          BSP_LED_On(LED2);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f001 fd66 	bl	800237c <BSP_LED_On>
          BSP_LED_Off(LED3);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f001 fd8d 	bl	80023d0 <BSP_LED_Off>
      break;
 80008b6:	e02c      	b.n	8000912 <DHCP_Thread+0xce>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	799b      	ldrb	r3, [r3, #6]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d925      	bls.n	8000912 <DHCP_Thread+0xce>
            DHCP_state = DHCP_TIMEOUT;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <DHCP_Thread+0xdc>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	701a      	strb	r2, [r3, #0]
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 80008cc:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <DHCP_Thread+0xe4>)
 80008ce:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 80008d0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80008d4:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <DHCP_Thread+0xe8>)
 80008d8:	60fb      	str	r3, [r7, #12]
            netifapi_netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	f107 0210 	add.w	r2, r7, #16
 80008e2:	f107 0114 	add.w	r1, r7, #20
 80008e6:	69f8      	ldr	r0, [r7, #28]
 80008e8:	f00b f980 	bl	800bbec <netifapi_netif_set_addr>
            BSP_LED_On(LED2);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f001 fd45 	bl	800237c <BSP_LED_On>
            BSP_LED_Off(LED3);
 80008f2:	2002      	movs	r0, #2
 80008f4:	f001 fd6c 	bl	80023d0 <BSP_LED_Off>
      break;
 80008f8:	e00b      	b.n	8000912 <DHCP_Thread+0xce>
      DHCP_state = DHCP_OFF;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <DHCP_Thread+0xdc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED2);
 8000900:	2001      	movs	r0, #1
 8000902:	f001 fd65 	bl	80023d0 <BSP_LED_Off>
      BSP_LED_On(LED3);
 8000906:	2002      	movs	r0, #2
 8000908:	f001 fd38 	bl	800237c <BSP_LED_On>
    break;
 800090c:	e002      	b.n	8000914 <DHCP_Thread+0xd0>
    default: break;
 800090e:	bf00      	nop
 8000910:	e000      	b.n	8000914 <DHCP_Thread+0xd0>
      break;
 8000912:	bf00      	nop
    }

    /* wait 500 ms */
    osDelay(500);
 8000914:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000918:	f00a f8bf 	bl	800aa9a <osDelay>
    switch (DHCP_state)
 800091c:	e798      	b.n	8000850 <DHCP_Thread+0xc>
 800091e:	bf00      	nop
 8000920:	20000150 	.word	0x20000150
 8000924:	08010155 	.word	0x08010155
 8000928:	0a00a8c0 	.word	0x0a00a8c0
 800092c:	0100a8c0 	.word	0x0100a8c0

08000930 <SubsecondToNanosecond>:
static uint32_t SubsecondToNanosecond(const uint32_t subsecond_value);
static uint32_t NanosecondToSubsecond(const uint32_t nanosecond_value);
static void InitMac1588v2(void);

static uint32_t SubsecondToNanosecond(const uint32_t subsecond_value)
{
 8000930:	b4b0      	push	{r4, r5, r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint64_t val = subsecond_value * 1000000000ll;
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	2000      	movs	r0, #0
 800093c:	460c      	mov	r4, r1
 800093e:	4605      	mov	r5, r0
 8000940:	490f      	ldr	r1, [pc, #60]	@ (8000980 <SubsecondToNanosecond+0x50>)
 8000942:	fb01 f005 	mul.w	r0, r1, r5
 8000946:	2100      	movs	r1, #0
 8000948:	fb04 f101 	mul.w	r1, r4, r1
 800094c:	4401      	add	r1, r0
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <SubsecondToNanosecond+0x50>)
 8000950:	fba4 2300 	umull	r2, r3, r4, r0
 8000954:	4419      	add	r1, r3
 8000956:	460b      	mov	r3, r1
 8000958:	e9c7 2302 	strd	r2, r3, [r7, #8]
  val >>= 31;
 800095c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000960:	f04f 0200 	mov.w	r2, #0
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	0fc2      	lsrs	r2, r0, #31
 800096a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800096e:	0fcb      	lsrs	r3, r1, #31
 8000970:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return val;
 8000974:	68bb      	ldr	r3, [r7, #8]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bcb0      	pop	{r4, r5, r7}
 800097e:	4770      	bx	lr
 8000980:	3b9aca00 	.word	0x3b9aca00

08000984 <InitMac1588v2>:
  WRITE_REG(EthHandle.Instance->MACTSAR, addend);
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
}

static void InitMac1588v2(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  // RM0468 Rev 3 2925/3357

  // 1. Mask the Timestamp Trigger interrupt by clearing bit 12 of Interrupt enable register (ETH_MACIER).
  //__HAL_ETH_MAC_DISABLE_IT(&EthHandle, ETH_MAC_TIMESTAMP_IT);
  CLEAR_BIT(EthHandle.Instance->MACIER, ETH_MACIER_TSIE);
 8000988:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <InitMac1588v2+0xcc>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8000990:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000998:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  // 2. Set bit 0 of Timestamp control Register (ETH_MACTSCR) to enable timestamping.
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSENA);
 800099c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a50 <InitMac1588v2+0xcc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80009a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f042 0201 	orr.w	r2, r2, #1
 80009ac:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // Enable timestamping of all packets
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSENALL);
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80009b8:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009c0:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
  //SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSIPV6ENA);
  //CLEAR_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSIPV4ENA);*/
  //SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSVER2ENA);

  // 3. Program Subsecond increment register (ETH_MACSSIR) based on the PTP clock frequency.
  WRITE_REG(EthHandle.Instance->MACSSIR, 43 << 16);
 80009c4:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f44f 122c 	mov.w	r2, #2818048	@ 0x2b0000
 80009cc:	f8c3 2b04 	str.w	r2, [r3, #2820]	@ 0xb04

  // 4. If you use the Fine Correction method,
  // program Timestamp addend register (ETH_MACTSAR) and set bit 5 of Timestamp control Register (ETH_MACTSCR)
  WRITE_REG(EthHandle.Instance->MACTSAR, PTP_ADDEND);
 80009d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a54 <InitMac1588v2+0xd0>)
 80009d6:	f8c3 2b18 	str.w	r2, [r3, #2840]	@ 0xb18
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG);
 80009da:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f042 0220 	orr.w	r2, r2, #32
 80009ea:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // 5. Poll the Timestamp control Register (ETH_MACTSCR) until bit 5 is cleared.
  while (READ_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSADDREG))
 80009ee:	bf00      	nop
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <InitMac1588v2+0xcc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 80009f8:	f003 0320 	and.w	r3, r3, #32
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f7      	bne.n	80009f0 <InitMac1588v2+0x6c>
  {
  }

  // 6. Program bit 1 of Timestamp control Register (ETH_MACTSCR) to select the Fine Update method (if required).
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSCFUPDT);
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f042 0202 	orr.w	r2, r2, #2
 8000a10:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  // 7. Program System time seconds update register (ETH_MACSTSUR) and System time
  // nanoseconds update register (ETH_MACSTNUR) with the appropriate time value.
  EthHandle.Instance->MACSTSUR = 0;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  EthHandle.Instance->MACSTNUR = 0;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14

  // 8. Set bit 2 in Timestamp control Register (ETH_MACTSCR).
  SET_BIT(EthHandle.Instance->MACTSCR, ETH_MACTSCR_TSINIT);
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	@ 0xb00
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0204 	orr.w	r2, r2, #4
 8000a38:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  EthHandle.IsPtpConfigured = HAL_ETH_PTP_CONFIGURED;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	@ (8000a50 <InitMac1588v2+0xcc>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000168 	.word	0x20000168
 8000a54:	2e84b2f4 	.word	0x2e84b2f4

08000a58 <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0b6      	sub	sp, #216	@ 0xd8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t duplex, speed = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  int32_t PHYLinkState = 0U;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  ETH_MACConfigTypeDef MACConf = {0};
 8000a6c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a70:	2264      	movs	r2, #100	@ 0x64
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f01d f962 	bl	801dd3e <memset>
  ETH_DMAConfigTypeDef dma_config = {0};
 8000a7a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000a7e:	2224      	movs	r2, #36	@ 0x24
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f01d f95b 	bl	801dd3e <memset>
  ETH_MACFilterConfigTypeDef pFilterConfig = {0};
 8000a88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 8000a96:	4aa2      	ldr	r2, [pc, #648]	@ (8000d20 <low_level_init+0x2c8>)
 8000a98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aa0:	6018      	str	r0, [r3, #0]
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	8019      	strh	r1, [r3, #0]
  osThreadAttr_t attributes;
  EthHandle.Instance = ETH;
 8000aa6:	4b9f      	ldr	r3, [pc, #636]	@ (8000d24 <low_level_init+0x2cc>)
 8000aa8:	4a9f      	ldr	r2, [pc, #636]	@ (8000d28 <low_level_init+0x2d0>)
 8000aaa:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000aac:	4a9d      	ldr	r2, [pc, #628]	@ (8000d24 <low_level_init+0x2cc>)
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ab4:	4b9b      	ldr	r3, [pc, #620]	@ (8000d24 <low_level_init+0x2cc>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000aba:	4b9a      	ldr	r3, [pc, #616]	@ (8000d24 <low_level_init+0x2cc>)
 8000abc:	4a9b      	ldr	r2, [pc, #620]	@ (8000d2c <low_level_init+0x2d4>)
 8000abe:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000ac0:	4b98      	ldr	r3, [pc, #608]	@ (8000d24 <low_level_init+0x2cc>)
 8000ac2:	4a9b      	ldr	r2, [pc, #620]	@ (8000d30 <low_level_init+0x2d8>)
 8000ac4:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 8000ac6:	4b97      	ldr	r3, [pc, #604]	@ (8000d24 <low_level_init+0x2cc>)
 8000ac8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000acc:	615a      	str	r2, [r3, #20]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000ace:	4895      	ldr	r0, [pc, #596]	@ (8000d24 <low_level_init+0x2cc>)
 8000ad0:	f001 fee0 	bl	8002894 <HAL_ETH_Init>

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2206      	movs	r2, #6
 8000ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2202      	movs	r2, #2
 8000ae0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000b12:	859a      	strh	r2, [r3, #44]	@ 0x2c

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000b1a:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35


  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000b26:	4883      	ldr	r0, [pc, #524]	@ (8000d34 <low_level_init+0x2dc>)
 8000b28:	f014 fa3e 	bl	8014fa8 <memp_init_pool>

  // Configure MAC filter
  pFilterConfig.PromiscuousMode = ENABLE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pFilterConfig.ReceiveAllMode = ENABLE;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pFilterConfig.HachOrPerfectFilter = DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  pFilterConfig.HashUnicast = DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  pFilterConfig.HashMulticast = DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  pFilterConfig.PassAllMulticast = ENABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  pFilterConfig.SrcAddrFiltering = DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  pFilterConfig.SrcAddrInverseFiltering = DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  pFilterConfig.DestAddrInverseFiltering = DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  pFilterConfig.BroadcastFilter = DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  pFilterConfig.ControlPacketsFilter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_ETH_SetMACFilterConfig(&EthHandle, &pFilterConfig);
 8000b6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b70:	4619      	mov	r1, r3
 8000b72:	486c      	ldr	r0, [pc, #432]	@ (8000d24 <low_level_init+0x2cc>)
 8000b74:	f002 ff30 	bl	80039d8 <HAL_ETH_SetMACFilterConfig>

  InitMac1588v2();
 8000b78:	f7ff ff04 	bl	8000984 <InitMac1588v2>

  // Enable enhanced descriptors for timestamp reception
  dma_config.DMAArbitration = ETH_DMAARBITRATION_TX1_RX1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  dma_config.AddressAlignedBeats = ENABLE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  dma_config.BurstMode = ETH_BURSTLENGTH_UNSPECIFIED;
 8000b86:	2300      	movs	r3, #0
 8000b88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  dma_config.RebuildINCRxBurst = ENABLE;  /// ???
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  dma_config.PBLx8Mode = DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  dma_config.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000b96:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b9a:	657b      	str	r3, [r7, #84]	@ 0x54
  dma_config.SecondPacketOperate = ENABLE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  dma_config.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000ba2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  dma_config.FlushRxPacket = ENABLE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
  dma_config.TCPSegmentation = DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
  dma_config.MaximumSegmentSize = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	667b      	str	r3, [r7, #100]	@ 0x64
  HAL_ETH_SetDMAConfig(&EthHandle, &dma_config);
 8000bb8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4859      	ldr	r0, [pc, #356]	@ (8000d24 <low_level_init+0x2cc>)
 8000bc0:	f002 fea0 	bl	8003904 <HAL_ETH_SetDMAConfig>


  /* Set Tx packet config common parameters */
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bc4:	2238      	movs	r2, #56	@ 0x38
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	485b      	ldr	r0, [pc, #364]	@ (8000d38 <low_level_init+0x2e0>)
 8000bca:	f01d f8b8 	bl	801dd3e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bce:	4b5a      	ldr	r3, [pc, #360]	@ (8000d38 <low_level_init+0x2e0>)
 8000bd0:	2221      	movs	r2, #33	@ 0x21
 8000bd2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bd4:	4b58      	ldr	r3, [pc, #352]	@ (8000d38 <low_level_init+0x2e0>)
 8000bd6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000bda:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bdc:	4b56      	ldr	r3, [pc, #344]	@ (8000d38 <low_level_init+0x2e0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2001      	movs	r0, #1
 8000be8:	f00a f880 	bl	800acec <osSemaphoreNew>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a53      	ldr	r2, [pc, #332]	@ (8000d3c <low_level_init+0x2e4>)
 8000bf0:	6013      	str	r3, [r2, #0]
  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore =  osSemaphoreNew(1, 0, NULL);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f00a f878 	bl	800acec <osSemaphoreNew>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4a50      	ldr	r2, [pc, #320]	@ (8000d40 <low_level_init+0x2e8>)
 8000c00:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
  memset(&attributes,0x0,sizeof(osThreadAttr_t));
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	2224      	movs	r2, #36	@ 0x24
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f01d f897 	bl	801dd3e <memset>
  attributes.name = "EthIf";
 8000c10:	4b4c      	ldr	r3, [pc, #304]	@ (8000d44 <low_level_init+0x2ec>)
 8000c12:	60bb      	str	r3, [r7, #8]
  attributes.stack_size = 4 * INTERFACE_THREAD_STACK_SIZE;
 8000c14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c18:	61fb      	str	r3, [r7, #28]
  attributes.priority = osPriorityRealtime;
 8000c1a:	2330      	movs	r3, #48	@ 0x30
 8000c1c:	623b      	str	r3, [r7, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	461a      	mov	r2, r3
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	4848      	ldr	r0, [pc, #288]	@ (8000d48 <low_level_init+0x2f0>)
 8000c28:	f009 fe77 	bl	800a91a <osThreadNew>

  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000c2c:	4947      	ldr	r1, [pc, #284]	@ (8000d4c <low_level_init+0x2f4>)
 8000c2e:	4848      	ldr	r0, [pc, #288]	@ (8000d50 <low_level_init+0x2f8>)
 8000c30:	f001 fa28 	bl	8002084 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8000c34:	4846      	ldr	r0, [pc, #280]	@ (8000d50 <low_level_init+0x2f8>)
 8000c36:	f001 fa57 	bl	80020e8 <LAN8742_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <low_level_init+0x1f6>
  {
    netif_set_link_down(netif);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f014 fdad 	bl	80157a0 <netif_set_link_down>
    netif_set_down(netif);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f014 fd40 	bl	80156cc <netif_set_down>
 8000c4c:	e065      	b.n	8000d1a <low_level_init+0x2c2>
    return;
  }

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c4e:	4840      	ldr	r0, [pc, #256]	@ (8000d50 <low_level_init+0x2f8>)
 8000c50:	f001 fa97 	bl	8002182 <LAN8742_GetLinkState>
 8000c54:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

  /* Get link state */
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	dc06      	bgt.n	8000c6e <low_level_init+0x216>
  {
    netif_set_link_down(netif);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f014 fd9d 	bl	80157a0 <netif_set_link_down>
    netif_set_down(netif);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f014 fd30 	bl	80156cc <netif_set_down>
 8000c6c:	e055      	b.n	8000d1a <low_level_init+0x2c2>
  }
  else
  {
    switch (PHYLinkState)
 8000c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c72:	3b02      	subs	r3, #2
 8000c74:	2b03      	cmp	r3, #3
 8000c76:	d82b      	bhi.n	8000cd0 <low_level_init+0x278>
 8000c78:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <low_level_init+0x228>)
 8000c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7e:	bf00      	nop
 8000c80:	08000c91 	.word	0x08000c91
 8000c84:	08000ca3 	.word	0x08000ca3
 8000c88:	08000cb3 	.word	0x08000cb3
 8000c8c:	08000cc3 	.word	0x08000cc3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8000c90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000c98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000ca0:	e01f      	b.n	8000ce2 <low_level_init+0x28a>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000ca8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000cb0:	e017      	b.n	8000ce2 <low_level_init+0x28a>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8000cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_10M;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000cc0:	e00f      	b.n	8000ce2 <low_level_init+0x28a>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_10M;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000cce:	e008      	b.n	8000ce2 <low_level_init+0x28a>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 8000cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      speed = ETH_SPEED_100M;
 8000cd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      break;
 8000ce0:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000ce2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480e      	ldr	r0, [pc, #56]	@ (8000d24 <low_level_init+0x2cc>)
 8000cea:	f002 fc1d 	bl	8003528 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8000cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000cf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    MACConf.Speed = speed;
 8000cf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000cfc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000d00:	4619      	mov	r1, r3
 8000d02:	4808      	ldr	r0, [pc, #32]	@ (8000d24 <low_level_init+0x2cc>)
 8000d04:	f002 fde4 	bl	80038d0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000d08:	4806      	ldr	r0, [pc, #24]	@ (8000d24 <low_level_init+0x2cc>)
 8000d0a:	f001 fec1 	bl	8002a90 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f014 fc66 	bl	80155e0 <netif_set_up>
    netif_set_link_up(netif);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f014 fd0b 	bl	8015730 <netif_set_link_up>
  }
}
 8000d1a:	37d8      	adds	r7, #216	@ 0xd8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	0801ee20 	.word	0x0801ee20
 8000d24:	20000168 	.word	0x20000168
 8000d28:	40028000 	.word	0x40028000
 8000d2c:	30000000 	.word	0x30000000
 8000d30:	30000080 	.word	0x30000080
 8000d34:	080233ec 	.word	0x080233ec
 8000d38:	20000220 	.word	0x20000220
 8000d3c:	20000160 	.word	0x20000160
 8000d40:	20000164 	.word	0x20000164
 8000d44:	0801ee18 	.word	0x0801ee18
 8000d48:	08000f29 	.word	0x08000f29
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000258 	.word	0x20000258

08000d54 <low_level_output>:
 *
 * @note ERR_OK means the packet was sent (but not necessarily transmit complete),
 * and ERR_IF means the packet has more chained buffers than what the interface supports.
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	@ 0x50
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  struct pbuf *q = NULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	64bb      	str	r3, [r7, #72]	@ 0x48
  err_t errval = ERR_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  TxTimestampRecord_t new_timestamp_record;
  bool is_timestamp_requested = false;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (p->timestamp_sec == PTP_TIMESTAMP_RECORD_MAGIC)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	4a5a      	ldr	r2, [pc, #360]	@ (8000ee0 <low_level_output+0x18c>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d102      	bne.n	8000d82 <low_level_output+0x2e>
  {
    is_timestamp_requested = true;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  }

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	2230      	movs	r2, #48	@ 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f01c ffd7 	bl	801dd3e <memset>

  for(q = p; q != NULL; q = q->next)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d94:	e045      	b.n	8000e22 <low_level_output+0xce>
  {
    if(i >= ETH_TX_DESC_CNT)
 8000d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	d902      	bls.n	8000da2 <low_level_output+0x4e>
      return ERR_IF;
 8000d9c:	f06f 030b 	mvn.w	r3, #11
 8000da0:	e09a      	b.n	8000ed8 <low_level_output+0x184>

    Txbuffer[i].buffer = q->payload;
 8000da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000da4:	6859      	ldr	r1, [r3, #4]
 8000da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	3350      	adds	r3, #80	@ 0x50
 8000db2:	443b      	add	r3, r7
 8000db4:	3b3c      	subs	r3, #60	@ 0x3c
 8000db6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8000db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dba:	895b      	ldrh	r3, [r3, #10]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	3350      	adds	r3, #80	@ 0x50
 8000dca:	443b      	add	r3, r7
 8000dcc:	3b38      	subs	r3, #56	@ 0x38
 8000dce:	6019      	str	r1, [r3, #0]

    if(i>0)
 8000dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d011      	beq.n	8000dfa <low_level_output+0xa6>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8000dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dd8:	1e5a      	subs	r2, r3, #1
 8000dda:	f107 0014 	add.w	r0, r7, #20
 8000dde:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000de0:	460b      	mov	r3, r1
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	440b      	add	r3, r1
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18c1      	adds	r1, r0, r3
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	3350      	adds	r3, #80	@ 0x50
 8000df4:	443b      	add	r3, r7
 8000df6:	3b34      	subs	r3, #52	@ 0x34
 8000df8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8000dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d109      	bne.n	8000e16 <low_level_output+0xc2>
    {
      Txbuffer[i].next = NULL;
 8000e02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	3350      	adds	r3, #80	@ 0x50
 8000e0e:	443b      	add	r3, r7
 8000e10:	3b34      	subs	r3, #52	@ 0x34
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
    }

    i++;
 8000e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  for(q = p; q != NULL; q = q->next)
 8000e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1b6      	bne.n	8000d96 <low_level_output+0x42>
  }

  TxConfig.Length = p->tot_len;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	891b      	ldrh	r3, [r3, #8]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee4 <low_level_output+0x190>)
 8000e30:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8000e32:	4a2c      	ldr	r2, [pc, #176]	@ (8000ee4 <low_level_output+0x190>)
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8000e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee4 <low_level_output+0x190>)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8000e40:	6838      	ldr	r0, [r7, #0]
 8000e42:	f015 f963 	bl	801610c <pbuf_ref>

  do
  {
    HAL_ETH_PTP_InsertTxTimestamp(&EthHandle);
 8000e46:	4828      	ldr	r0, [pc, #160]	@ (8000ee8 <low_level_output+0x194>)
 8000e48:	f002 f96b 	bl	8003122 <HAL_ETH_PTP_InsertTxTimestamp>
    if(HAL_ETH_Transmit_IT(&EthHandle, &TxConfig) == HAL_OK)
 8000e4c:	4925      	ldr	r1, [pc, #148]	@ (8000ee4 <low_level_output+0x190>)
 8000e4e:	4826      	ldr	r0, [pc, #152]	@ (8000ee8 <low_level_output+0x194>)
 8000e50:	f001 ff0a 	bl	8002c68 <HAL_ETH_Transmit_IT>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d11b      	bne.n	8000e92 <low_level_output+0x13e>
    {
      if (is_timestamp_requested)
 8000e5a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d013      	beq.n	8000e8a <low_level_output+0x136>
      {
        new_timestamp_record.timestamp.tv_sec = EthHandle.TxTimestamp.TimeStampHigh;
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <low_level_output+0x194>)
 8000e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e68:	60fb      	str	r3, [r7, #12]
        new_timestamp_record.timestamp.tv_nsec = SubsecondToNanosecond(EthHandle.TxTimestamp.TimeStampLow);
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <low_level_output+0x194>)
 8000e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fd5d 	bl	8000930 <SubsecondToNanosecond>
 8000e76:	4603      	mov	r3, r0
 8000e78:	613b      	str	r3, [r7, #16]
        xQueueOverwrite(timestamp_queue, &new_timestamp_record);
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eec <low_level_output+0x198>)
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	f107 010c 	add.w	r1, r7, #12
 8000e82:	2302      	movs	r3, #2
 8000e84:	2200      	movs	r2, #0
 8000e86:	f006 ff6d 	bl	8007d64 <xQueueGenericSend>
      }

      errval = ERR_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000e90:	e01b      	b.n	8000eca <low_level_output+0x176>
    }
    else
    {

      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 8000e92:	4815      	ldr	r0, [pc, #84]	@ (8000ee8 <low_level_output+0x194>)
 8000e94:	f002 fdec 	bl	8003a70 <HAL_ETH_GetError>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00d      	beq.n	8000ebe <low_level_output+0x16a>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <low_level_output+0x19c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f009 ffa8 	bl	800ae00 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&EthHandle);
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <low_level_output+0x194>)
 8000eb2:	f002 f86c 	bl	8002f8e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8000eb6:	23fe      	movs	r3, #254	@ 0xfe
 8000eb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000ebc:	e005      	b.n	8000eca <low_level_output+0x176>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8000ebe:	6838      	ldr	r0, [r7, #0]
 8000ec0:	f015 f87e 	bl	8015fc0 <pbuf_free>
        errval =  ERR_IF;
 8000ec4:	23f4      	movs	r3, #244	@ 0xf4
 8000ec6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }while(errval == ERR_BUF);
 8000eca:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8000ece:	f113 0f02 	cmn.w	r3, #2
 8000ed2:	d0b8      	beq.n	8000e46 <low_level_output+0xf2>



  return errval;
 8000ed4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3750      	adds	r7, #80	@ 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	55667788 	.word	0x55667788
 8000ee4:	20000220 	.word	0x20000220
 8000ee8:	20000168 	.word	0x20000168
 8000eec:	20000154 	.word	0x20000154
 8000ef0:	20000164 	.word	0x20000164

08000ef4 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <low_level_input+0x2c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d105      	bne.n	8000f14 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <low_level_input+0x30>)
 8000f10:	f001 fefb 	bl	8002d0a <HAL_ETH_ReadData>
  }

  return p;
 8000f14:	68fb      	ldr	r3, [r7, #12]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000015c 	.word	0x2000015c
 8000f24:	20000168 	.word	0x20000168

08000f28 <ethernetif_input>:
 * from the interface.
 *
 * @param argument the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void* argument )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  struct netif *netif = (struct netif *) argument;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	613b      	str	r3, [r7, #16]
  ETH_TimeStampTypeDef eth_timestamp;

  for( ;; )
  {
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000f38:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <ethernetif_input+0x70>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 ff5d 	bl	800ae00 <osSemaphoreAcquire>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f5      	bne.n	8000f38 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8000f4c:	6938      	ldr	r0, [r7, #16]
 8000f4e:	f7ff ffd1 	bl	8000ef4 <low_level_input>
 8000f52:	6178      	str	r0, [r7, #20]
        if (p != NULL)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d01a      	beq.n	8000f90 <ethernetif_input+0x68>
        {
          // Collect the timestamp of the new packet
          HAL_ETH_PTP_GetRxTimestamp(&EthHandle, &eth_timestamp);
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480e      	ldr	r0, [pc, #56]	@ (8000f9c <ethernetif_input+0x74>)
 8000f62:	f002 f901 	bl	8003168 <HAL_ETH_PTP_GetRxTimestamp>
          p->timestamp_sec = eth_timestamp.TimeStampHigh;
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	611a      	str	r2, [r3, #16]
          p->timestamp_nsec = SubsecondToNanosecond(eth_timestamp.TimeStampLow);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fcde 	bl	8000930 <SubsecondToNanosecond>
 8000f74:	4602      	mov	r2, r0
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	615a      	str	r2, [r3, #20]

          if (netif->input( p, netif) != ERR_OK )
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	6939      	ldr	r1, [r7, #16]
 8000f80:	6978      	ldr	r0, [r7, #20]
 8000f82:	4798      	blx	r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <ethernetif_input+0x68>
          {
            pbuf_free(p);
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f015 f818 	bl	8015fc0 <pbuf_free>
          }
        }

      }while(p!=NULL);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1da      	bne.n	8000f4c <ethernetif_input+0x24>
    if (osSemaphoreAcquire( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000f96:	e7cf      	b.n	8000f38 <ethernetif_input+0x10>
 8000f98:	20000160 	.word	0x20000160
 8000f9c:	20000168 	.word	0x20000168

08000fa0 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d106      	bne.n	8000fbc <ethernetif_init+0x1c>
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <ethernetif_init+0x48>)
 8000fb0:	f240 227d 	movw	r2, #637	@ 0x27d
 8000fb4:	490d      	ldr	r1, [pc, #52]	@ (8000fec <ethernetif_init+0x4c>)
 8000fb6:	480e      	ldr	r0, [pc, #56]	@ (8000ff0 <ethernetif_init+0x50>)
 8000fb8:	f01c fe22 	bl	801dc00 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2273      	movs	r2, #115	@ 0x73
 8000fc0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->name[1] = IFNAME1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2274      	movs	r2, #116	@ 0x74
 8000fc8:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <ethernetif_init+0x54>)
 8000fd0:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <ethernetif_init+0x58>)
 8000fd6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff fd3d 	bl	8000a58 <low_level_init>

  return ERR_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	0801ee28 	.word	0x0801ee28
 8000fec:	0801ee6c 	.word	0x0801ee6c
 8000ff0:	0801ee7c 	.word	0x0801ee7c
 8000ff4:	08012015 	.word	0x08012015
 8000ff8:	08000d55 	.word	0x08000d55

08000ffc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	4809      	ldr	r0, [pc, #36]	@ (8001030 <pbuf_free_custom+0x34>)
 800100c:	f014 f8bc 	bl	8015188 <memp_free_pool>

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <pbuf_free_custom+0x38>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d107      	bne.n	8001028 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <pbuf_free_custom+0x38>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <pbuf_free_custom+0x3c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f009 ff3e 	bl	800aea4 <osSemaphoreRelease>
  }
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	080233ec 	.word	0x080233ec
 8001034:	2000015c 	.word	0x2000015c
 8001038:	20000160 	.word	0x20000160

0800103c <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001040:	f001 faa0 	bl	8002584 <HAL_GetTick>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	@ 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /* Ethernett MSP init: RMII Mode */

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b4f      	ldr	r3, [pc, #316]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	4a4e      	ldr	r2, [pc, #312]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001074:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	623b      	str	r3, [r7, #32]
 8001080:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b48      	ldr	r3, [pc, #288]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	4a46      	ldr	r2, [pc, #280]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001092:	4b44      	ldr	r3, [pc, #272]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a0:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	4a3f      	ldr	r2, [pc, #252]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b0:	4b3c      	ldr	r3, [pc, #240]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010be:	4b39      	ldr	r3, [pc, #228]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	4a37      	ldr	r2, [pc, #220]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 80010c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ce:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2302      	movs	r3, #2
 80010de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 80010e8:	230b      	movs	r3, #11
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80010ec:	2386      	movs	r3, #134	@ 0x86
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	482c      	ldr	r0, [pc, #176]	@ (80011a8 <HAL_ETH_MspInit+0x15c>)
 80010f8:	f003 fa56 	bl	80045a8 <HAL_GPIO_Init>

  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80010fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	4828      	ldr	r0, [pc, #160]	@ (80011ac <HAL_ETH_MspInit+0x160>)
 800110a:	f003 fa4d 	bl	80045a8 <HAL_GPIO_Init>

  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800110e:	2332      	movs	r3, #50	@ 0x32
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	4825      	ldr	r0, [pc, #148]	@ (80011b0 <HAL_ETH_MspInit+0x164>)
 800111a:	f003 fa45 	bl	80045a8 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 800111e:	f642 0304 	movw	r3, #10244	@ 0x2804
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	4822      	ldr	r0, [pc, #136]	@ (80011b4 <HAL_ETH_MspInit+0x168>)
 800112c:	f003 fa3c 	bl	80045a8 <HAL_GPIO_Init>

  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2107      	movs	r1, #7
 8001134:	203d      	movs	r0, #61	@ 0x3d
 8001136:	f001 fb0d 	bl	8002754 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800113a:	203d      	movs	r0, #61	@ 0x3d
 800113c:	f001 fb24 	bl	8002788 <HAL_NVIC_EnableIRQ>

  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001140:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001142:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001150:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001152:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001164:	4a0f      	ldr	r2, [pc, #60]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800116a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 800117e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001182:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001188:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_ETH_MspInit+0x158>)
 800118e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
}
 800119a:	bf00      	nop
 800119c:	3738      	adds	r7, #56	@ 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020000 	.word	0x58020000
 80011ac:	58020400 	.word	0x58020400
 80011b0:	58020800 	.word	0x58020800
 80011b4:	58021800 	.word	0x58021800

080011b8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80011c0:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <HAL_ETH_RxCpltCallback+0x1c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f009 fe6d 	bl	800aea4 <osSemaphoreRelease>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000160 	.word	0x20000160

080011d8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HAL_ETH_TxCpltCallback+0x1c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f009 fe5d 	bl	800aea4 <osSemaphoreRelease>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000164 	.word	0x20000164

080011f8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(heth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f002 fc42 	bl	8003a8a <HAL_ETH_GetDMAError>
 8001206:	4603      	mov	r3, r0
 8001208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120c:	2b80      	cmp	r3, #128	@ 0x80
 800120e:	d104      	bne.n	800121a <HAL_ETH_ErrorCallback+0x22>
  {
    osSemaphoreRelease(RxPktSemaphore);
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_ETH_ErrorCallback+0x44>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f009 fe45 	bl	800aea4 <osSemaphoreRelease>
  }

  if((HAL_ETH_GetDMAError(heth) & ETH_DMACSR_TBU) == ETH_DMACSR_TBU)
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f002 fc35 	bl	8003a8a <HAL_ETH_GetDMAError>
 8001220:	4603      	mov	r3, r0
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b04      	cmp	r3, #4
 8001228:	d104      	bne.n	8001234 <HAL_ETH_ErrorCallback+0x3c>
  {
    osSemaphoreRelease(TxPktSemaphore);
 800122a:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <HAL_ETH_ErrorCallback+0x48>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f009 fe38 	bl	800aea4 <osSemaphoreRelease>
  }
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000160 	.word	0x20000160
 8001240:	20000164 	.word	0x20000164

08001244 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <ETH_PHY_IO_Init+0x10>)
 800124a:	f002 fb75 	bl	8003938 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000168 	.word	0x20000168

08001258 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	68f9      	ldr	r1, [r7, #12]
 800127a:	4807      	ldr	r0, [pc, #28]	@ (8001298 <ETH_PHY_IO_ReadReg+0x30>)
 800127c:	f002 f8ac 	bl	80033d8 <HAL_ETH_ReadPHYRegister>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e000      	b.n	800128e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000168 	.word	0x20000168

0800129c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	4807      	ldr	r0, [pc, #28]	@ (80012cc <ETH_PHY_IO_WriteReg+0x30>)
 80012b0:	f002 f8e6 	bl	8003480 <HAL_ETH_WritePHYRegister>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e000      	b.n	80012c2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000168 	.word	0x20000168

080012d0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012d4:	f001 f956 	bl	8002584 <HAL_GetTick>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void* argument )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0a0      	sub	sp, #128	@ 0x80
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	2264      	movs	r2, #100	@ 0x64
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f01c fd24 	bl	801dd3e <memset>
  int32_t PHYLinkState = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80012fe:	2300      	movs	r3, #0
 8001300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001302:	2300      	movs	r3, #0
 8001304:	677b      	str	r3, [r7, #116]	@ 0x74
  struct netif *netif = (struct netif *) argument;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	66fb      	str	r3, [r7, #108]	@ 0x6c

  for(;;)
  {

    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800130a:	483e      	ldr	r0, [pc, #248]	@ (8001404 <ethernet_link_thread+0x124>)
 800130c:	f000 ff39 	bl	8002182 <LAN8742_GetLinkState>
 8001310:	6738      	str	r0, [r7, #112]	@ 0x70

    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8001312:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001314:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d010      	beq.n	8001346 <ethernet_link_thread+0x66>
 8001324:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001326:	2b01      	cmp	r3, #1
 8001328:	dc0d      	bgt.n	8001346 <ethernet_link_thread+0x66>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 800132a:	4837      	ldr	r0, [pc, #220]	@ (8001408 <ethernet_link_thread+0x128>)
 800132c:	f001 fc24 	bl	8002b78 <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 8001330:	2200      	movs	r2, #0
 8001332:	4936      	ldr	r1, [pc, #216]	@ (800140c <ethernet_link_thread+0x12c>)
 8001334:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001336:	f00a fc8b 	bl	800bc50 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 800133a:	2200      	movs	r2, #0
 800133c:	4934      	ldr	r1, [pc, #208]	@ (8001410 <ethernet_link_thread+0x130>)
 800133e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001340:	f00a fc86 	bl	800bc50 <netifapi_netif_common>
 8001344:	e059      	b.n	80013fa <ethernet_link_thread+0x11a>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8001346:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d152      	bne.n	80013fa <ethernet_link_thread+0x11a>
 8001354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001356:	2b01      	cmp	r3, #1
 8001358:	dd4f      	ble.n	80013fa <ethernet_link_thread+0x11a>
    {
      switch (PHYLinkState)
 800135a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800135c:	3b02      	subs	r3, #2
 800135e:	2b03      	cmp	r3, #3
 8001360:	d82a      	bhi.n	80013b8 <ethernet_link_thread+0xd8>
 8001362:	a201      	add	r2, pc, #4	@ (adr r2, 8001368 <ethernet_link_thread+0x88>)
 8001364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001368:	08001379 	.word	0x08001379
 800136c:	0800138b 	.word	0x0800138b
 8001370:	0800139b 	.word	0x0800139b
 8001374:	080013ab 	.word	0x080013ab
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8001378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137c:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_100M;
 800137e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001382:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 8001384:	2301      	movs	r3, #1
 8001386:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 8001388:	e017      	b.n	80013ba <ethernet_link_thread+0xda>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800138a:	2300      	movs	r3, #0
 800138c:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_100M;
 800138e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001392:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 8001394:	2301      	movs	r3, #1
 8001396:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 8001398:	e00f      	b.n	80013ba <ethernet_link_thread+0xda>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800139a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800139e:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_10M;
 80013a0:	2300      	movs	r3, #0
 80013a2:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 80013a8:	e007      	b.n	80013ba <ethernet_link_thread+0xda>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	677b      	str	r3, [r7, #116]	@ 0x74
        speed = ETH_SPEED_10M;
 80013ae:	2300      	movs	r3, #0
 80013b0:	67bb      	str	r3, [r7, #120]	@ 0x78
        linkchanged = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
        break;
 80013b6:	e000      	b.n	80013ba <ethernet_link_thread+0xda>
      default:
        break;
 80013b8:	bf00      	nop
      }

      if(linkchanged)
 80013ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01c      	beq.n	80013fa <ethernet_link_thread+0x11a>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4619      	mov	r1, r3
 80013c6:	4810      	ldr	r0, [pc, #64]	@ (8001408 <ethernet_link_thread+0x128>)
 80013c8:	f002 f8ae 	bl	8003528 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 80013cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013ce:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 80013d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80013d2:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <ethernet_link_thread+0x128>)
 80013dc:	f002 fa78 	bl	80038d0 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 80013e0:	4809      	ldr	r0, [pc, #36]	@ (8001408 <ethernet_link_thread+0x128>)
 80013e2:	f001 fb55 	bl	8002a90 <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 80013e6:	2200      	movs	r2, #0
 80013e8:	490a      	ldr	r1, [pc, #40]	@ (8001414 <ethernet_link_thread+0x134>)
 80013ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80013ec:	f00a fc30 	bl	800bc50 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 80013f0:	2200      	movs	r2, #0
 80013f2:	4909      	ldr	r1, [pc, #36]	@ (8001418 <ethernet_link_thread+0x138>)
 80013f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80013f6:	f00a fc2b 	bl	800bc50 <netifapi_netif_common>
      }
    }

    osDelay(100);
 80013fa:	2064      	movs	r0, #100	@ 0x64
 80013fc:	f009 fb4d 	bl	800aa9a <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8001400:	e783      	b.n	800130a <ethernet_link_thread+0x2a>
 8001402:	bf00      	nop
 8001404:	20000258 	.word	0x20000258
 8001408:	20000168 	.word	0x20000168
 800140c:	080156cd 	.word	0x080156cd
 8001410:	080157a1 	.word	0x080157a1
 8001414:	080155e1 	.word	0x080155e1
 8001418:	08015731 	.word	0x08015731

0800141c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af02      	add	r7, sp, #8
 8001422:	6078      	str	r0, [r7, #4]
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8001424:	4812      	ldr	r0, [pc, #72]	@ (8001470 <HAL_ETH_RxAllocateCallback+0x54>)
 8001426:	f013 fe3b 	bl	80150a0 <memp_malloc_pool>
 800142a:	60f8      	str	r0, [r7, #12]
  if (p)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d014      	beq.n	800145c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f103 0220 	add.w	r2, r3, #32
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <HAL_ETH_RxAllocateCallback+0x58>)
 8001440:	619a      	str	r2, [r3, #24]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2241      	movs	r2, #65	@ 0x41
 8001452:	2100      	movs	r1, #0
 8001454:	2000      	movs	r0, #0
 8001456:	f014 fbc7 	bl	8015be8 <pbuf_alloced_custom>
  else
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
}
 800145a:	e005      	b.n	8001468 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_ETH_RxAllocateCallback+0x5c>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	080233ec 	.word	0x080233ec
 8001474:	08000ffd 	.word	0x08000ffd
 8001478:	2000015c 	.word	0x2000015c

0800147c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800147c:	b480      	push	{r7}
 800147e:	b08d      	sub	sp, #52	@ 0x34
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	807b      	strh	r3, [r7, #2]
  struct pbuf **ppStart = (struct pbuf **)pStart;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3b20      	subs	r3, #32
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800149c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80014a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a4:	2200      	movs	r2, #0
 80014a6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80014a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80014ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80014b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e003      	b.n	80014c6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014c4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014ca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80014cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d2:	e009      	b.n	80014e8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	891a      	ldrh	r2, [r3, #8]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	4413      	add	r3, r2
 80014dc:	b29a      	uxth	r2, r3
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80014e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f2      	bne.n	80014d4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	623a      	str	r2, [r7, #32]
 80014f4:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	dd1d      	ble.n	8001538 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f003 021f 	and.w	r2, r3, #31
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	4413      	add	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	617b      	str	r3, [r7, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800150c:	f3bf 8f4f 	dsb	sy
}
 8001510:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8001512:	4a0d      	ldr	r2, [pc, #52]	@ (8001548 <HAL_ETH_RxLinkCallback+0xcc>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3320      	adds	r3, #32
 800151e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	3b20      	subs	r3, #32
 8001524:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dcf2      	bgt.n	8001512 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800152c:	f3bf 8f4f 	dsb	sy
}
 8001530:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001532:	f3bf 8f6f 	isb	sy
}
 8001536:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8001538:	bf00      	nop
}
 800153a:	bf00      	nop
 800153c:	3734      	adds	r7, #52	@ 0x34
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  pbuf_free((struct pbuf *)buff);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f014 fd33 	bl	8015fc0 <pbuf_free>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: connection socket 
  * @retval None
  */
void http_server_serve(int conn) 
{
 8001564:	b580      	push	{r7, lr}
 8001566:	f5ad 6dc0 	sub.w	sp, sp, #1536	@ 0x600
 800156a:	af00      	add	r7, sp, #0
 800156c:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001570:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001574:	6018      	str	r0, [r3, #0]
  int buflen = 1500;
 8001576:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800157a:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
  int ret;
  struct fs_file file;
  unsigned char recv_buffer[1500];
				
  /* Read in the request */
  ret = read(conn, recv_buffer, buflen); 
 800157e:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 8001582:	f107 0108 	add.w	r1, r7, #8
 8001586:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 800158a:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	f00d fd10 	bl	800efb4 <lwip_read>
 8001594:	f8c7 05f8 	str.w	r0, [r7, #1528]	@ 0x5f8
  if(ret < 0) return;
 8001598:	f8d7 35f8 	ldr.w	r3, [r7, #1528]	@ 0x5f8
 800159c:	2b00      	cmp	r3, #0
 800159e:	f2c0 80c3 	blt.w	8001728 <http_server_serve+0x1c4>

  /* Check if request to get ST.gif */
  if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/ST.gif",27)==0)
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	221b      	movs	r2, #27
 80015a8:	4962      	ldr	r1, [pc, #392]	@ (8001734 <http_server_serve+0x1d0>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f01c fbde 	bl	801dd6c <strncmp>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d117      	bne.n	80015e6 <http_server_serve+0x82>
  {
    fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 80015b6:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80015ba:	495f      	ldr	r1, [pc, #380]	@ (8001738 <http_server_serve+0x1d4>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f01c f9d7 	bl	801d970 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 80015c2:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 80015c6:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80015ca:	461a      	mov	r2, r3
 80015cc:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80015d0:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	f00d fe71 	bl	800f2bc <lwip_write>
    fs_close(&file);
 80015da:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80015de:	4618      	mov	r0, r3
 80015e0:	f01c fa04 	bl	801d9ec <fs_close>
 80015e4:	e098      	b.n	8001718 <http_server_serve+0x1b4>
  }
  /* Check if request to get stm32.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	221e      	movs	r2, #30
 80015ec:	4953      	ldr	r1, [pc, #332]	@ (800173c <http_server_serve+0x1d8>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f01c fbbc 	bl	801dd6c <strncmp>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d117      	bne.n	800162a <http_server_serve+0xc6>
  {
    fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 80015fa:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80015fe:	4950      	ldr	r1, [pc, #320]	@ (8001740 <http_server_serve+0x1dc>)
 8001600:	4618      	mov	r0, r3
 8001602:	f01c f9b5 	bl	801d970 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 8001606:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800160a:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 800160e:	461a      	mov	r2, r3
 8001610:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001614:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f00d fe4f 	bl	800f2bc <lwip_write>
    fs_close(&file);
 800161e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001622:	4618      	mov	r0, r3
 8001624:	f01c f9e2 	bl	801d9ec <fs_close>
 8001628:	e076      	b.n	8001718 <http_server_serve+0x1b4>
  }
  /* Check if request to get ST logo.jpeg */
  else if (strncmp((char *)recv_buffer,"GET /STM32H7xx_files/logo.jpg", 29) == 0)
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	221d      	movs	r2, #29
 8001630:	4944      	ldr	r1, [pc, #272]	@ (8001744 <http_server_serve+0x1e0>)
 8001632:	4618      	mov	r0, r3
 8001634:	f01c fb9a 	bl	801dd6c <strncmp>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d117      	bne.n	800166e <http_server_serve+0x10a>
  {
    fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 800163e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001642:	4941      	ldr	r1, [pc, #260]	@ (8001748 <http_server_serve+0x1e4>)
 8001644:	4618      	mov	r0, r3
 8001646:	f01c f993 	bl	801d970 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 800164a:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 800164e:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 8001652:	461a      	mov	r2, r3
 8001654:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001658:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 800165c:	6818      	ldr	r0, [r3, #0]
 800165e:	f00d fe2d 	bl	800f2bc <lwip_write>
    fs_close(&file);
 8001662:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001666:	4618      	mov	r0, r3
 8001668:	f01c f9c0 	bl	801d9ec <fs_close>
 800166c:	e054      	b.n	8001718 <http_server_serve+0x1b4>
  }
  else if(strncmp((char *)recv_buffer, "GET /STM32H7xxTASKS.html", 24) == 0)
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	2218      	movs	r2, #24
 8001674:	4935      	ldr	r1, [pc, #212]	@ (800174c <http_server_serve+0x1e8>)
 8001676:	4618      	mov	r0, r3
 8001678:	f01c fb78 	bl	801dd6c <strncmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d107      	bne.n	8001692 <http_server_serve+0x12e>
  {
    /* Load dynamic page */
    DynWebPage(conn);
 8001682:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001686:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f000 f8b6 	bl	80017fc <DynWebPage>
 8001690:	e042      	b.n	8001718 <http_server_serve+0x1b4>
  }
  else if((strncmp((char *)recv_buffer, "GET /STM32H7xx.html", 19) == 0)||(strncmp((char *)recv_buffer, "GET / ", 6) == 0))
 8001692:	f107 0308 	add.w	r3, r7, #8
 8001696:	2213      	movs	r2, #19
 8001698:	492d      	ldr	r1, [pc, #180]	@ (8001750 <http_server_serve+0x1ec>)
 800169a:	4618      	mov	r0, r3
 800169c:	f01c fb66 	bl	801dd6c <strncmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d009      	beq.n	80016ba <http_server_serve+0x156>
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2206      	movs	r2, #6
 80016ac:	4929      	ldr	r1, [pc, #164]	@ (8001754 <http_server_serve+0x1f0>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f01c fb5c 	bl	801dd6c <strncmp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d117      	bne.n	80016ea <http_server_serve+0x186>
  {
    /* Load STM32H7xxpage */
    fs_open(&file, "/STM32H7xx.html"); 
 80016ba:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80016be:	4926      	ldr	r1, [pc, #152]	@ (8001758 <http_server_serve+0x1f4>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f01c f955 	bl	801d970 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 80016c6:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 80016ca:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80016ce:	461a      	mov	r2, r3
 80016d0:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 80016d4:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	f00d fdef 	bl	800f2bc <lwip_write>
    fs_close(&file);
 80016de:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f01c f982 	bl	801d9ec <fs_close>
 80016e8:	e016      	b.n	8001718 <http_server_serve+0x1b4>
  }
  else
  {
    /* Load 404 page */
    fs_open(&file, "/404.html");
 80016ea:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 80016ee:	491b      	ldr	r1, [pc, #108]	@ (800175c <http_server_serve+0x1f8>)
 80016f0:	4618      	mov	r0, r3
 80016f2:	f01c f93d 	bl	801d970 <fs_open>
    write(conn, (const unsigned char*)(file.data), (size_t)file.len);
 80016f6:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 80016fa:	f8d7 35e8 	ldr.w	r3, [r7, #1512]	@ 0x5e8
 80016fe:	461a      	mov	r2, r3
 8001700:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 8001704:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	f00d fdd7 	bl	800f2bc <lwip_write>
    fs_close(&file);
 800170e:	f207 53e4 	addw	r3, r7, #1508	@ 0x5e4
 8001712:	4618      	mov	r0, r3
 8001714:	f01c f96a 	bl	801d9ec <fs_close>
  }
  /* Close connection socket */
  close(conn);
 8001718:	f507 63c0 	add.w	r3, r7, #1536	@ 0x600
 800171c:	f2a3 53fc 	subw	r3, r3, #1532	@ 0x5fc
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	f00d f883 	bl	800e82c <lwip_close>
 8001726:	e000      	b.n	800172a <http_server_serve+0x1c6>
  if(ret < 0) return;
 8001728:	bf00      	nop
}
 800172a:	f507 67c0 	add.w	r7, r7, #1536	@ 0x600
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0801eea4 	.word	0x0801eea4
 8001738:	0801eec0 	.word	0x0801eec0
 800173c:	0801eed8 	.word	0x0801eed8
 8001740:	0801eef8 	.word	0x0801eef8
 8001744:	0801ef14 	.word	0x0801ef14
 8001748:	0801ef34 	.word	0x0801ef34
 800174c:	0801ef50 	.word	0x0801ef50
 8001750:	0801ef6c 	.word	0x0801ef6c
 8001754:	0801ef80 	.word	0x0801ef80
 8001758:	0801ef88 	.word	0x0801ef88
 800175c:	0801ef98 	.word	0x0801ef98

08001760 <http_server_socket_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_socket_thread(void *arg)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08e      	sub	sp, #56	@ 0x38
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  int sock, newconn, size;
  struct sockaddr_in address, remotehost;

 /* create a TCP socket */
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
 8001768:	2200      	movs	r2, #0
 800176a:	2101      	movs	r1, #1
 800176c:	2002      	movs	r0, #2
 800176e:	f00d fd47 	bl	800f200 <lwip_socket>
 8001772:	6378      	str	r0, [r7, #52]	@ 0x34
 8001774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001776:	2b00      	cmp	r3, #0
 8001778:	db26      	blt.n	80017c8 <http_server_socket_thread+0x68>
  {
    return;
  }
  
  /* bind to port 80 at any interface */
  address.sin_family = AF_INET;
 800177a:	2302      	movs	r3, #2
 800177c:	777b      	strb	r3, [r7, #29]
  address.sin_port = htons(80);
 800177e:	2050      	movs	r0, #80	@ 0x50
 8001780:	f012 ff6c 	bl	801465c <lwip_htons>
 8001784:	4603      	mov	r3, r0
 8001786:	83fb      	strh	r3, [r7, #30]
  address.sin_addr.s_addr = INADDR_ANY;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]

  if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	2210      	movs	r2, #16
 8001792:	4619      	mov	r1, r3
 8001794:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001796:	f00c ffdb 	bl	800e750 <lwip_bind>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	db15      	blt.n	80017cc <http_server_socket_thread+0x6c>
  {
    return;
  }
  
  /* listen for incoming connections (TCP listen backlog = 5) */
  listen(sock, 5);
 80017a0:	2105      	movs	r1, #5
 80017a2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80017a4:	f00d f89c 	bl	800e8e0 <lwip_listen>
  
  size = sizeof(remotehost);
 80017a8:	2310      	movs	r3, #16
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  while (1) 
  {
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 80017ac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80017b8:	f00c feac 	bl	800e514 <lwip_accept>
 80017bc:	6338      	str	r0, [r7, #48]	@ 0x30
    http_server_serve(newconn);
 80017be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80017c0:	f7ff fed0 	bl	8001564 <http_server_serve>
    newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
 80017c4:	bf00      	nop
 80017c6:	e7f1      	b.n	80017ac <http_server_socket_thread+0x4c>
    return;
 80017c8:	bf00      	nop
 80017ca:	e000      	b.n	80017ce <http_server_socket_thread+0x6e>
    return;
 80017cc:	bf00      	nop
  }
}
 80017ce:	3738      	adds	r7, #56	@ 0x38
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <http_server_socket_init>:
  * @brief  Initialize the HTTP server (start its thread) 
  * @param  none
  * @retval None
  */
void http_server_socket_init()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_socket_thread, NULL, DEFAULT_THREAD_STACKSIZE * 4, WEBSERVER_THREAD_PRIO);
 80017da:	2320      	movs	r3, #32
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e2:	2200      	movs	r2, #0
 80017e4:	4903      	ldr	r1, [pc, #12]	@ (80017f4 <http_server_socket_init+0x20>)
 80017e6:	4804      	ldr	r0, [pc, #16]	@ (80017f8 <http_server_socket_init+0x24>)
 80017e8:	f01c f884 	bl	801d8f4 <sys_thread_new>
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08001761 	.word	0x08001761
 80017f8:	0801efa4 	.word	0x0801efa4

080017fc <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn connection socket
  * @retval None
  */
void DynWebPage(int conn)
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	f5ad 7d07 	sub.w	sp, sp, #540	@ 0x21c
 8001802:	af00      	add	r7, sp, #0
 8001804:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001808:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800180c:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 800180e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001812:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	3304      	adds	r3, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f01c fa86 	bl	801dd3e <memset>

  /* Update the hit count */
  nPageHits++;
 8001832:	4b5b      	ldr	r3, [pc, #364]	@ (80019a0 <DynWebPage+0x1a4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a59      	ldr	r2, [pc, #356]	@ (80019a0 <DynWebPage+0x1a4>)
 800183a:	6013      	str	r3, [r2, #0]
  sprintf( pagehits, "%d", (int)nPageHits );
 800183c:	4b58      	ldr	r3, [pc, #352]	@ (80019a0 <DynWebPage+0x1a4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4957      	ldr	r1, [pc, #348]	@ (80019a4 <DynWebPage+0x1a8>)
 8001848:	4618      	mov	r0, r3
 800184a:	f01c f9eb 	bl	801dc24 <siprintf>
  strcat(PAGE_BODY, pagehits);
 800184e:	f107 020c 	add.w	r2, r7, #12
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f01c fa78 	bl	801dd4e <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Prio  Stack  Num" );
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fd5e 	bl	8000324 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	f107 0318 	add.w	r3, r7, #24
 8001870:	4413      	add	r3, r2
 8001872:	4a4d      	ldr	r2, [pc, #308]	@ (80019a8 <DynWebPage+0x1ac>)
 8001874:	4615      	mov	r5, r2
 8001876:	469c      	mov	ip, r3
 8001878:	f105 0e20 	add.w	lr, r5, #32
 800187c:	4664      	mov	r4, ip
 800187e:	462e      	mov	r6, r5
 8001880:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001882:	6020      	str	r0, [r4, #0]
 8001884:	6061      	str	r1, [r4, #4]
 8001886:	60a2      	str	r2, [r4, #8]
 8001888:	60e3      	str	r3, [r4, #12]
 800188a:	3510      	adds	r5, #16
 800188c:	f10c 0c10 	add.w	ip, ip, #16
 8001890:	4575      	cmp	r5, lr
 8001892:	d1f3      	bne.n	800187c <DynWebPage+0x80>
 8001894:	4664      	mov	r4, ip
 8001896:	462b      	mov	r3, r5
 8001898:	cb07      	ldmia	r3!, {r0, r1, r2}
 800189a:	6020      	str	r0, [r4, #0]
 800189c:	6061      	str	r1, [r4, #4]
 800189e:	60a2      	str	r2, [r4, #8]
 80018a0:	881a      	ldrh	r2, [r3, #0]
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	81a2      	strh	r2, [r4, #12]
 80018a6:	73a3      	strb	r3, [r4, #14]
  strcat((char *)PAGE_BODY, "<br>--------------------------------------------<br>");
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fd39 	bl	8000324 <strlen>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	f107 0318 	add.w	r3, r7, #24
 80018ba:	4413      	add	r3, r2
 80018bc:	4a3b      	ldr	r2, [pc, #236]	@ (80019ac <DynWebPage+0x1b0>)
 80018be:	4614      	mov	r4, r2
 80018c0:	469c      	mov	ip, r3
 80018c2:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80018c6:	4665      	mov	r5, ip
 80018c8:	4626      	mov	r6, r4
 80018ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018cc:	6028      	str	r0, [r5, #0]
 80018ce:	6069      	str	r1, [r5, #4]
 80018d0:	60aa      	str	r2, [r5, #8]
 80018d2:	60eb      	str	r3, [r5, #12]
 80018d4:	3410      	adds	r4, #16
 80018d6:	f10c 0c10 	add.w	ip, ip, #16
 80018da:	4574      	cmp	r4, lr
 80018dc:	d1f3      	bne.n	80018c6 <DynWebPage+0xca>
 80018de:	4663      	mov	r3, ip
 80018e0:	4622      	mov	r2, r4
 80018e2:	6810      	ldr	r0, [r2, #0]
 80018e4:	6018      	str	r0, [r3, #0]
 80018e6:	7912      	ldrb	r2, [r2, #4]
 80018e8:	711a      	strb	r2, [r3, #4]
    
  /* The list of tasks and their status */
  vTaskList((char *)(PAGE_BODY + strlen(PAGE_BODY)));
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fd18 	bl	8000324 <strlen>
 80018f4:	4602      	mov	r2, r0
 80018f6:	f107 0318 	add.w	r3, r7, #24
 80018fa:	4413      	add	r3, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f008 fb11 	bl	8009f24 <vTaskList>
  strcat((char *) PAGE_BODY, "<br><br>-------------------------------------------"); 
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fd0c 	bl	8000324 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	f107 0318 	add.w	r3, r7, #24
 8001914:	4413      	add	r3, r2
 8001916:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <DynWebPage+0x1b4>)
 8001918:	4614      	mov	r4, r2
 800191a:	469c      	mov	ip, r3
 800191c:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 8001920:	4665      	mov	r5, ip
 8001922:	4626      	mov	r6, r4
 8001924:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001926:	6028      	str	r0, [r5, #0]
 8001928:	6069      	str	r1, [r5, #4]
 800192a:	60aa      	str	r2, [r5, #8]
 800192c:	60eb      	str	r3, [r5, #12]
 800192e:	3410      	adds	r4, #16
 8001930:	f10c 0c10 	add.w	ip, ip, #16
 8001934:	4574      	cmp	r4, lr
 8001936:	d1f3      	bne.n	8001920 <DynWebPage+0x124>
 8001938:	4663      	mov	r3, ip
 800193a:	4622      	mov	r2, r4
 800193c:	6810      	ldr	r0, [r2, #0]
 800193e:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>X : Running, B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fced 	bl	8000324 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	4413      	add	r3, r2
 8001954:	4a17      	ldr	r2, [pc, #92]	@ (80019b4 <DynWebPage+0x1b8>)
 8001956:	4618      	mov	r0, r3
 8001958:	4611      	mov	r1, r2
 800195a:	2348      	movs	r3, #72	@ 0x48
 800195c:	461a      	mov	r2, r3
 800195e:	f01c fa92 	bl	801de86 <memcpy>
  
  /* Send the dynamically generated page */
  write(conn, PAGE_START, strlen((char*)PAGE_START));
 8001962:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001966:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800196a:	f240 624a 	movw	r2, #1610	@ 0x64a
 800196e:	4912      	ldr	r1, [pc, #72]	@ (80019b8 <DynWebPage+0x1bc>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	f00d fca3 	bl	800f2bc <lwip_write>
  write(conn, PAGE_BODY, strlen(PAGE_BODY));
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fcd2 	bl	8000324 <strlen>
 8001980:	4602      	mov	r2, r0
 8001982:	f107 0118 	add.w	r1, r7, #24
 8001986:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800198a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	f00d fc94 	bl	800f2bc <lwip_write>
}
 8001994:	bf00      	nop
 8001996:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 800199a:	46bd      	mov	sp, r7
 800199c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000278 	.word	0x20000278
 80019a4:	0801efac 	.word	0x0801efac
 80019a8:	0801efb0 	.word	0x0801efb0
 80019ac:	0801efe0 	.word	0x0801efe0
 80019b0:	0801f018 	.word	0x0801f018
 80019b4:	0801f04c 	.word	0x0801f04c
 80019b8:	080233f8 	.word	0x080233f8

080019bc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 80019c0:	f000 f942 	bl	8001c48 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 80019c4:	f000 f99e 	bl	8001d04 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80019c8:	f000 fd84 	bl	80024d4 <HAL_Init>

  /* Configure the system clock to 520 MHz */
  SystemClock_Config();
 80019cc:	f000 f8a2 	bl	8001b14 <SystemClock_Config>

  Log_Init();
 80019d0:	f7fe fea8 	bl	8000724 <Log_Init>

  /* Configure the LEDs ...*/
  BSP_Config();
 80019d4:	f000 f834 	bl	8001a40 <BSP_Config>

  /* Init thread */
  osKernelInitialize();
 80019d8:	f008 ff40 	bl	800a85c <osKernelInitialize>
  
  attr.name = "Start";
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <main+0x4c>)
 80019de:	4a0b      	ldr	r2, [pc, #44]	@ (8001a0c <main+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <main+0x4c>)
 80019e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019e8:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <main+0x4c>)
 80019ec:	2218      	movs	r2, #24
 80019ee:	619a      	str	r2, [r3, #24]
  StartHandle = osThreadNew(StartThread, NULL, &attr);
 80019f0:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <main+0x4c>)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4806      	ldr	r0, [pc, #24]	@ (8001a10 <main+0x54>)
 80019f6:	f008 ff90 	bl	800a91a <osThreadNew>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <main+0x58>)
 80019fe:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 8001a00:	f008 ff50 	bl	800a8a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <main+0x48>
 8001a08:	200002bc 	.word	0x200002bc
 8001a0c:	0801f094 	.word	0x0801f094
 8001a10:	08001a19 	.word	0x08001a19
 8001a14:	200002e0 	.word	0x200002e0

08001a18 <StartThread>:
  * @brief  Start Thread
  * @param  argument not used
  * @retval None
  */
void StartThread(void* argument)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001a20:	2100      	movs	r1, #0
 8001a22:	2000      	movs	r0, #0
 8001a24:	f00d ffce 	bl	800f9c4 <tcpip_init>

  /* Initialize the LwIP stack */
  Netif_Config();
 8001a28:	f000 f814 	bl	8001a54 <Netif_Config>

  /* Initialize webserver demo */
  http_server_socket_init();
 8001a2c:	f7ff fed2 	bl	80017d4 <http_server_socket_init>

  for( ;; )
  {
    /* Delete the Init Thread */
    osThreadTerminate(StartHandle);
 8001a30:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <StartThread+0x24>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f009 f803 	bl	800aa40 <osThreadTerminate>
 8001a3a:	e7f9      	b.n	8001a30 <StartThread+0x18>
 8001a3c:	200002e0 	.word	0x200002e0

08001a40 <BSP_Config>:
  * @brief  BSP Configuration
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f000 fc23 	bl	8002290 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f000 fc20 	bl	8002290 <BSP_LED_Init>
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af04      	add	r7, sp, #16
  ip_addr_t ipaddr;
  ip_addr_t netmask;
  ip_addr_t gw;

#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  ip_addr_set_zero_ip4(&netmask);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  ip_addr_set_zero_ip4(&gw);
 8001a62:	2300      	movs	r3, #0
 8001a64:	607b      	str	r3, [r7, #4]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* LWIP_DHCP */

  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	f107 0208 	add.w	r2, r7, #8
 8001a6c:	f107 010c 	add.w	r1, r7, #12
 8001a70:	481d      	ldr	r0, [pc, #116]	@ (8001ae8 <Netif_Config+0x94>)
 8001a72:	9002      	str	r0, [sp, #8]
 8001a74:	481d      	ldr	r0, [pc, #116]	@ (8001aec <Netif_Config+0x98>)
 8001a76:	9001      	str	r0, [sp, #4]
 8001a78:	2000      	movs	r0, #0
 8001a7a:	9000      	str	r0, [sp, #0]
 8001a7c:	481c      	ldr	r0, [pc, #112]	@ (8001af0 <Netif_Config+0x9c>)
 8001a7e:	f013 fbd9 	bl	8015234 <netif_add>

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8001a82:	481b      	ldr	r0, [pc, #108]	@ (8001af0 <Netif_Config+0x9c>)
 8001a84:	f013 fd9c 	bl	80155c0 <netif_set_default>

  ethernet_link_status_updated(&gnetif);
 8001a88:	4819      	ldr	r0, [pc, #100]	@ (8001af0 <Netif_Config+0x9c>)
 8001a8a:	f7fe febf 	bl	800080c <ethernet_link_status_updated>

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001a8e:	4919      	ldr	r1, [pc, #100]	@ (8001af4 <Netif_Config+0xa0>)
 8001a90:	4817      	ldr	r0, [pc, #92]	@ (8001af0 <Netif_Config+0x9c>)
 8001a92:	f013 feb5 	bl	8015800 <netif_set_link_callback>

  attr.name = "EthLink";
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <Netif_Config+0xa4>)
 8001a98:	4a18      	ldr	r2, [pc, #96]	@ (8001afc <Netif_Config+0xa8>)
 8001a9a:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <Netif_Config+0xa4>)
 8001a9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aa2:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityNormal;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <Netif_Config+0xa4>)
 8001aa6:	2218      	movs	r2, #24
 8001aa8:	619a      	str	r2, [r3, #24]
  LinkHandle = osThreadNew(ethernet_link_thread, &gnetif, &attr);
 8001aaa:	4a13      	ldr	r2, [pc, #76]	@ (8001af8 <Netif_Config+0xa4>)
 8001aac:	4910      	ldr	r1, [pc, #64]	@ (8001af0 <Netif_Config+0x9c>)
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <Netif_Config+0xac>)
 8001ab0:	f008 ff33 	bl	800a91a <osThreadNew>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4a13      	ldr	r2, [pc, #76]	@ (8001b04 <Netif_Config+0xb0>)
 8001ab8:	6013      	str	r3, [r2, #0]
#endif

#if LWIP_DHCP
  /* Start DHCPClient */
  attr.name = "DHCP";
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <Netif_Config+0xa4>)
 8001abc:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <Netif_Config+0xb4>)
 8001abe:	601a      	str	r2, [r3, #0]
  attr.stack_size = 4 * configMINIMAL_STACK_SIZE;
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <Netif_Config+0xa4>)
 8001ac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ac6:	615a      	str	r2, [r3, #20]
  attr.priority = osPriorityBelowNormal;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <Netif_Config+0xa4>)
 8001aca:	2210      	movs	r2, #16
 8001acc:	619a      	str	r2, [r3, #24]
  DHCPHandle = osThreadNew(DHCP_Thread, &gnetif, &attr);
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <Netif_Config+0xa4>)
 8001ad0:	4907      	ldr	r1, [pc, #28]	@ (8001af0 <Netif_Config+0x9c>)
 8001ad2:	480e      	ldr	r0, [pc, #56]	@ (8001b0c <Netif_Config+0xb8>)
 8001ad4:	f008 ff21 	bl	800a91a <osThreadNew>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <Netif_Config+0xbc>)
 8001adc:	6013      	str	r3, [r2, #0]
#endif
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	0800f8a5 	.word	0x0800f8a5
 8001aec:	08000fa1 	.word	0x08000fa1
 8001af0:	2000027c 	.word	0x2000027c
 8001af4:	0800080d 	.word	0x0800080d
 8001af8:	200002bc 	.word	0x200002bc
 8001afc:	0801f09c 	.word	0x0801f09c
 8001b00:	080012e1 	.word	0x080012e1
 8001b04:	200002e4 	.word	0x200002e4
 8001b08:	0801f0a4 	.word	0x0801f0a4
 8001b0c:	08000845 	.word	0x08000845
 8001b10:	200002e8 	.word	0x200002e8

08001b14 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0a0      	sub	sp, #128	@ 0x80
 8001b18:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b20:	2002      	movs	r0, #2
 8001b22:	f002 ff03 	bl	800492c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <SystemClock_Config+0x12c>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	4a44      	ldr	r2, [pc, #272]	@ (8001c40 <SystemClock_Config+0x12c>)
 8001b30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b34:	6193      	str	r3, [r2, #24]
 8001b36:	4b42      	ldr	r3, [pc, #264]	@ (8001c40 <SystemClock_Config+0x12c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b42:	bf00      	nop
 8001b44:	4b3e      	ldr	r3, [pc, #248]	@ (8001c40 <SystemClock_Config+0x12c>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b50:	d1f8      	bne.n	8001b44 <SystemClock_Config+0x30>

  /* Enable D2 domain SRAM1 Clock (0x30000000 AXI)*/
  __HAL_RCC_D2SRAM1_CLK_ENABLE();
 8001b52:	4b3c      	ldr	r3, [pc, #240]	@ (8001c44 <SystemClock_Config+0x130>)
 8001b54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b58:	4a3a      	ldr	r2, [pc, #232]	@ (8001c44 <SystemClock_Config+0x130>)
 8001b5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001b5e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <SystemClock_Config+0x130>)
 8001b64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001b74:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001b78:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b82:	2302      	movs	r3, #2
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b86:	2302      	movs	r3, #2
 8001b88:	63bb      	str	r3, [r7, #56]	@ 0x38

  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 260;
 8001b8e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001b92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	64bb      	str	r3, [r7, #72]	@ 0x48

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	653b      	str	r3, [r7, #80]	@ 0x50
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fef5 	bl	80049a0 <HAL_RCC_OscConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  if(ret != HAL_OK)
 8001bbc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SystemClock_Config+0xb4>
  {
    while(1);
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <SystemClock_Config+0xb0>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8001bc8:	233f      	movs	r3, #63	@ 0x3f
 8001bca:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001bd8:	2340      	movs	r3, #64	@ 0x40
 8001bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001bdc:	2340      	movs	r3, #64	@ 0x40
 8001bde:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be4:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001be6:	2340      	movs	r3, #64	@ 0x40
 8001be8:	67bb      	str	r3, [r7, #120]	@ 0x78
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 8001bea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bee:	2103      	movs	r1, #3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 faaf 	bl	8005154 <HAL_RCC_ClockConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  if(ret != HAL_OK)
 8001bfc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0xf4>
  {
    while(1);
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <SystemClock_Config+0xf0>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <SystemClock_Config+0x130>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <SystemClock_Config+0x130>)
 8001c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c12:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <SystemClock_Config+0x130>)
 8001c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <SystemClock_Config+0x130>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c24:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <SystemClock_Config+0x130>)
 8001c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  HAL_EnableCompensationCell();
 8001c32:	f000 fcc7 	bl	80025c4 <HAL_EnableCompensationCell>
}
 8001c36:	bf00      	nop
 8001c38:	3780      	adds	r7, #128	@ 0x80
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	58024800 	.word	0x58024800
 8001c44:	58024400 	.word	0x58024400

08001c48 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8001c4e:	f000 fda9 	bl	80027a4 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c76:	2387      	movs	r3, #135	@ 0x87
 8001c78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	733b      	strb	r3, [r7, #12]
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c7e:	463b      	mov	r3, r7
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fdc7 	bl	8002814 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Device not cacheable
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001c8a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c8e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8001c90:	2307      	movs	r3, #7
 8001c92:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001c94:	2303      	movs	r3, #3
 8001c96:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001cac:	2300      	movs	r3, #0
 8001cae:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cb4:	463b      	mov	r3, r7
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fdac 	bl	8002814 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MPU_Config+0xb8>)
 8001cc2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001cc4:	230d      	movs	r3, #13
 8001cc6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ce8:	463b      	mov	r3, r7
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 fd92 	bl	8002814 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001cf0:	2004      	movs	r0, #4
 8001cf2:	f000 fd6f 	bl	80027d4 <HAL_MPU_Enable>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	30004000 	.word	0x30004000

08001d04 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d0a:	4b34      	ldr	r3, [pc, #208]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11b      	bne.n	8001d4e <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001d16:	f3bf 8f4f 	dsb	sy
}
 8001d1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d1c:	f3bf 8f6f 	isb	sy
}
 8001d20:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d22:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2a:	f3bf 8f4f 	dsb	sy
}
 8001d2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d30:	f3bf 8f6f 	isb	sy
}
 8001d34:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4a28      	ldr	r2, [pc, #160]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d40:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d42:	f3bf 8f4f 	dsb	sy
}
 8001d46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d48:	f3bf 8f6f 	isb	sy
}
 8001d4c:	e000      	b.n	8001d50 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d4e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001d50:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d138      	bne.n	8001dce <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001d64:	f3bf 8f4f 	dsb	sy
}
 8001d68:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d70:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	0b5b      	lsrs	r3, r3, #13
 8001d76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d7a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d84:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001d8e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d94:	4911      	ldr	r1, [pc, #68]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ef      	bne.n	8001d86 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	60ba      	str	r2, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001db0:	f3bf 8f4f 	dsb	sy
}
 8001db4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001db6:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	4a08      	ldr	r2, [pc, #32]	@ (8001ddc <CPU_CACHE_Enable+0xd8>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dc2:	f3bf 8f4f 	dsb	sy
}
 8001dc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dc8:	f3bf 8f6f 	isb	sy
}
 8001dcc:	e000      	b.n	8001dd0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001dce:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b090      	sub	sp, #64	@ 0x40
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	d827      	bhi.n	8001e3e <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001dee:	2200      	movs	r2, #0
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	2036      	movs	r0, #54	@ 0x36
 8001df4:	f000 fcae 	bl	8002754 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001df8:	2036      	movs	r0, #54	@ 0x36
 8001dfa:	f000 fcc5 	bl	8002788 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001dfe:	4a29      	ldr	r2, [pc, #164]	@ (8001ea4 <HAL_InitTick+0xc4>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e04:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_InitTick+0xc8>)
 8001e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <HAL_InitTick+0xc8>)
 8001e0c:	f043 0310 	orr.w	r3, r3, #16
 8001e10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_InitTick+0xc8>)
 8001e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e22:	f107 0210 	add.w	r2, r7, #16
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fd1d 	bl	800586c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e34:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <HAL_InitTick+0x6a>
 8001e3c:	e001      	b.n	8001e42 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e02b      	b.n	8001e9a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e42:	f003 fce7 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8001e46:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001e48:	e004      	b.n	8001e54 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e4a:	f003 fce3 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e56:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <HAL_InitTick+0xcc>)
 8001e58:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5c:	0c9b      	lsrs	r3, r3, #18
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	637b      	str	r3, [r7, #52]	@ 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001e62:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e64:	4a13      	ldr	r2, [pc, #76]	@ (8001eb4 <HAL_InitTick+0xd4>)
 8001e66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e6e:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001e70:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e74:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001e82:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e84:	f003 fff2 	bl	8005e6c <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d104      	bne.n	8001e98 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8001e8e:	4808      	ldr	r0, [pc, #32]	@ (8001eb0 <HAL_InitTick+0xd0>)
 8001e90:	f004 f84e 	bl	8005f30 <HAL_TIM_Base_Start_IT>
 8001e94:	4603      	mov	r3, r0
 8001e96:	e000      	b.n	8001e9a <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3740      	adds	r7, #64	@ 0x40
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000028 	.word	0x20000028
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	431bde83 	.word	0x431bde83
 8001eb0:	200002ec 	.word	0x200002ec
 8001eb4:	40001000 	.word	0x40001000

08001eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8001ec0:	f000 fb4c 	bl	800255c <HAL_IncTick>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8001ed0:	4802      	ldr	r0, [pc, #8]	@ (8001edc <TIM6_DAC_IRQHandler+0x10>)
 8001ed2:	f004 f8b3 	bl	800603c <HAL_TIM_IRQHandler>
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200002ec 	.word	0x200002ec

08001ee0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001ef2:	bf00      	nop
 8001ef4:	e7fd      	b.n	8001ef2 <HardFault_Handler+0x4>

08001ef6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001efa:	bf00      	nop
 8001efc:	e7fd      	b.n	8001efa <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f02:	bf00      	nop
 8001f04:	e7fd      	b.n	8001f02 <BusFault_Handler+0x4>

08001f06 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f0a:	bf00      	nop
 8001f0c:	e7fd      	b.n	8001f0a <UsageFault_Handler+0x4>

08001f0e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 8001f20:	4802      	ldr	r0, [pc, #8]	@ (8001f2c <ETH_IRQHandler+0x10>)
 8001f22:	f001 f947 	bl	80031b4 <HAL_ETH_IRQHandler>
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000168 	.word	0x20000168

08001f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_kill>:

int _kill(int pid, int sig)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f4a:	f01b ff67 	bl	801de1c <__errno>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2216      	movs	r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
  return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_exit>:

void _exit (int status)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe7 	bl	8001f40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <_exit+0x12>

08001f76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e00a      	b.n	8001f9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f88:	f3af 8000 	nop.w
 8001f8c:	4601      	mov	r1, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	60ba      	str	r2, [r7, #8]
 8001f94:	b2ca      	uxtb	r2, r1
 8001f96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	dbf0      	blt.n	8001f88 <_read+0x12>
  }

  return len;
 8001fa6:	687b      	ldr	r3, [r7, #4]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_close>:
  }
  return len;
}*/

int _close(int file)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd8:	605a      	str	r2, [r3, #4]
  return 0;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_isatty>:

int _isatty(int file)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	@ (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	@ (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	@ (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	@ (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	@ (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f01b fee8 	bl	801de1c <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	@ (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20020000 	.word	0x20020000
 8002078:	00001000 	.word	0x00001000
 800207c:	20000338 	.word	0x20000338
 8002080:	2000fb60 	.word	0x2000fb60

08002084 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <LAN8742_RegisterBusIO+0x28>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <LAN8742_RegisterBusIO+0x28>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <LAN8742_RegisterBusIO+0x28>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
 80020b0:	e014      	b.n	80020dc <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d139      	bne.n	8002178 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2220      	movs	r2, #32
 8002116:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e01c      	b.n	8002158 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	2112      	movs	r1, #18
 8002128:	6978      	ldr	r0, [r7, #20]
 800212a:	4798      	blx	r3
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	da03      	bge.n	800213a <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002132:	f06f 0304 	mvn.w	r3, #4
 8002136:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002138:	e00b      	b.n	8002152 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	429a      	cmp	r2, r3
 8002144:	d105      	bne.n	8002152 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
         break;
 8002150:	e005      	b.n	800215e <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b1f      	cmp	r3, #31
 800215c:	d9df      	bls.n	800211e <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b1f      	cmp	r3, #31
 8002164:	d902      	bls.n	800216c <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002166:	f06f 0302 	mvn.w	r3, #2
 800216a:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002178:	693b      	ldr	r3, [r7, #16]
 }
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6810      	ldr	r0, [r2, #0]
 8002196:	f107 020c 	add.w	r2, r7, #12
 800219a:	2101      	movs	r1, #1
 800219c:	4798      	blx	r3
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	da02      	bge.n	80021aa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021a4:	f06f 0304 	mvn.w	r3, #4
 80021a8:	e06e      	b.n	8002288 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6810      	ldr	r0, [r2, #0]
 80021b2:	f107 020c 	add.w	r2, r7, #12
 80021b6:	2101      	movs	r1, #1
 80021b8:	4798      	blx	r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da02      	bge.n	80021c6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021c0:	f06f 0304 	mvn.w	r3, #4
 80021c4:	e060      	b.n	8002288 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e059      	b.n	8002288 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6810      	ldr	r0, [r2, #0]
 80021dc:	f107 020c 	add.w	r2, r7, #12
 80021e0:	2100      	movs	r1, #0
 80021e2:	4798      	blx	r3
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	da02      	bge.n	80021f0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80021ea:	f06f 0304 	mvn.w	r3, #4
 80021ee:	e04b      	b.n	8002288 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11b      	bne.n	8002232 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <LAN8742_GetLinkState+0x90>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800220e:	2302      	movs	r3, #2
 8002210:	e03a      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800221c:	2303      	movs	r3, #3
 800221e:	e033      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800222a:	2304      	movs	r3, #4
 800222c:	e02c      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800222e:	2305      	movs	r3, #5
 8002230:	e02a      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6810      	ldr	r0, [r2, #0]
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	211f      	movs	r1, #31
 8002240:	4798      	blx	r3
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	da02      	bge.n	800224e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002248:	f06f 0304 	mvn.w	r3, #4
 800224c:	e01c      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002258:	2306      	movs	r3, #6
 800225a:	e015      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 031c 	and.w	r3, r3, #28
 8002262:	2b18      	cmp	r3, #24
 8002264:	d101      	bne.n	800226a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002266:	2302      	movs	r3, #2
 8002268:	e00e      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 031c 	and.w	r3, r3, #28
 8002270:	2b08      	cmp	r3, #8
 8002272:	d101      	bne.n	8002278 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002274:	2303      	movs	r3, #3
 8002276:	e007      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 031c 	and.w	r3, r3, #28
 800227e:	2b14      	cmp	r3, #20
 8002280:	d101      	bne.n	8002286 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002282:	2304      	movs	r3, #4
 8002284:	e000      	b.n	8002288 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002286:	2305      	movs	r3, #5
    }
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	@ 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d009      	beq.n	80022b8 <BSP_LED_Init+0x28>
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d006      	beq.n	80022b8 <BSP_LED_Init+0x28>
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d003      	beq.n	80022b8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022b0:	f06f 0301 	mvn.w	r3, #1
 80022b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022b6:	e055      	b.n	8002364 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80022be:	4b2c      	ldr	r3, [pc, #176]	@ (8002370 <BSP_LED_Init+0xe0>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002370 <BSP_LED_Init+0xe0>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ce:	4b28      	ldr	r3, [pc, #160]	@ (8002370 <BSP_LED_Init+0xe0>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	e021      	b.n	8002322 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10f      	bne.n	8002304 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <BSP_LED_Init+0xe0>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ea:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <BSP_LED_Init+0xe0>)
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <BSP_LED_Init+0xe0>)
 80022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	e00e      	b.n	8002322 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002304:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <BSP_LED_Init+0xe0>)
 8002306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800230a:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <BSP_LED_Init+0xe0>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002314:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <BSP_LED_Init+0xe0>)
 8002316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4a13      	ldr	r2, [pc, #76]	@ (8002374 <BSP_LED_Init+0xe4>)
 8002326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800232a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	4a0f      	ldr	r2, [pc, #60]	@ (8002378 <BSP_LED_Init+0xe8>)
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	f107 0218 	add.w	r2, r7, #24
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f002 f92e 	bl	80045a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <BSP_LED_Init+0xe8>)
 8002350:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	4a07      	ldr	r2, [pc, #28]	@ (8002374 <BSP_LED_Init+0xe4>)
 8002358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800235c:	2200      	movs	r2, #0
 800235e:	4619      	mov	r1, r3
 8002360:	f002 faca 	bl	80048f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8002364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002366:	4618      	mov	r0, r3
 8002368:	3730      	adds	r7, #48	@ 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	58024400 	.word	0x58024400
 8002374:	08023a44 	.word	0x08023a44
 8002378:	20000014 	.word	0x20000014

0800237c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <BSP_LED_On+0x28>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d006      	beq.n	80023a4 <BSP_LED_On+0x28>
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d003      	beq.n	80023a4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800239c:	f06f 0301 	mvn.w	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e00b      	b.n	80023bc <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4a08      	ldr	r2, [pc, #32]	@ (80023c8 <BSP_LED_On+0x4c>)
 80023a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4a07      	ldr	r2, [pc, #28]	@ (80023cc <BSP_LED_On+0x50>)
 80023b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023b4:	2201      	movs	r2, #1
 80023b6:	4619      	mov	r1, r3
 80023b8:	f002 fa9e 	bl	80048f8 <HAL_GPIO_WritePin>
  }

  return ret;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000014 	.word	0x20000014
 80023cc:	08023a44 	.word	0x08023a44

080023d0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <BSP_LED_Off+0x28>
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d006      	beq.n	80023f8 <BSP_LED_Off+0x28>
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d003      	beq.n	80023f8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023f0:	f06f 0301 	mvn.w	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e00b      	b.n	8002410 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4a08      	ldr	r2, [pc, #32]	@ (800241c <BSP_LED_Off+0x4c>)
 80023fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <BSP_LED_Off+0x50>)
 8002404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002408:	2200      	movs	r2, #0
 800240a:	4619      	mov	r1, r3
 800240c:	f002 fa74 	bl	80048f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8002410:	68fb      	ldr	r3, [r7, #12]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000014 	.word	0x20000014
 8002420:	08023a44 	.word	0x08023a44

08002424 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002428:	4b26      	ldr	r3, [pc, #152]	@ (80024c4 <SystemInit+0xa0>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	4a25      	ldr	r2, [pc, #148]	@ (80024c4 <SystemInit+0xa0>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002438:	4b23      	ldr	r3, [pc, #140]	@ (80024c8 <SystemInit+0xa4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a22      	ldr	r2, [pc, #136]	@ (80024c8 <SystemInit+0xa4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002444:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <SystemInit+0xa4>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800244a:	4b1f      	ldr	r3, [pc, #124]	@ (80024c8 <SystemInit+0xa4>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	491e      	ldr	r1, [pc, #120]	@ (80024c8 <SystemInit+0xa4>)
 8002450:	4b1e      	ldr	r3, [pc, #120]	@ (80024cc <SystemInit+0xa8>)
 8002452:	4013      	ands	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002456:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <SystemInit+0xa4>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <SystemInit+0xa4>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002462:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <SystemInit+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002468:	4b17      	ldr	r3, [pc, #92]	@ (80024c8 <SystemInit+0xa4>)
 800246a:	2200      	movs	r2, #0
 800246c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <SystemInit+0xa4>)
 8002470:	2200      	movs	r2, #0
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002474:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <SystemInit+0xa4>)
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <SystemInit+0xa4>)
 800247c:	2200      	movs	r2, #0
 800247e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <SystemInit+0xa4>)
 8002482:	2200      	movs	r2, #0
 8002484:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8002486:	4b10      	ldr	r3, [pc, #64]	@ (80024c8 <SystemInit+0xa4>)
 8002488:	2200      	movs	r2, #0
 800248a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <SystemInit+0xa4>)
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002492:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <SystemInit+0xa4>)
 8002494:	2200      	movs	r2, #0
 8002496:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <SystemInit+0xa4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <SystemInit+0xa4>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024a4:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <SystemInit+0xa4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	661a      	str	r2, [r3, #96]	@ 0x60
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <SystemInit+0xac>)
 80024ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024b0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80024b2:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <SystemInit+0xa0>)
 80024b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024b8:	609a      	str	r2, [r3, #8]
#endif  


}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00
 80024c8:	58024400 	.word	0x58024400
 80024cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80024d0:	52004000 	.word	0x52004000

080024d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024da:	2003      	movs	r0, #3
 80024dc:	f000 f92f 	bl	800273e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024e0:	f002 ffee 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_Init+0x68>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	4913      	ldr	r1, [pc, #76]	@ (8002540 <HAL_Init+0x6c>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024fe:	4b0f      	ldr	r3, [pc, #60]	@ (800253c <HAL_Init+0x68>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a0e      	ldr	r2, [pc, #56]	@ (8002540 <HAL_Init+0x6c>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	4a0b      	ldr	r2, [pc, #44]	@ (8002544 <HAL_Init+0x70>)
 8002516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002518:	4a0b      	ldr	r2, [pc, #44]	@ (8002548 <HAL_Init+0x74>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800251e:	200f      	movs	r0, #15
 8002520:	f7ff fc5e 	bl	8001de0 <HAL_InitTick>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e002      	b.n	8002534 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800252e:	f000 f80d 	bl	800254c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	58024400 	.word	0x58024400
 8002540:	08023a4c 	.word	0x08023a4c
 8002544:	20000024 	.word	0x20000024
 8002548:	20000020 	.word	0x20000020

0800254c <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000002c 	.word	0x2000002c
 8002580:	2000033c 	.word	0x2000033c

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000033c 	.word	0x2000033c

0800259c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80025ac:	4904      	ldr	r1, [pc, #16]	@ (80025c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	58000400 	.word	0x58000400

080025c4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_EnableCompensationCell+0x1c>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <HAL_EnableCompensationCell+0x1c>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	58000400 	.word	0x58000400

080025e4 <__NVIC_SetPriorityGrouping>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <__NVIC_SetPriorityGrouping+0x40>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002600:	4013      	ands	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	4313      	orrs	r3, r2
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <__NVIC_SetPriorityGrouping+0x40>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	05fa0000 	.word	0x05fa0000

0800262c <__NVIC_GetPriorityGrouping>:
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <__NVIC_GetPriorityGrouping+0x18>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	f003 0307 	and.w	r3, r3, #7
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_EnableIRQ>:
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db0b      	blt.n	8002672 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	4907      	ldr	r1, [pc, #28]	@ (8002680 <__NVIC_EnableIRQ+0x38>)
 8002662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2001      	movs	r0, #1
 800266a:	fa00 f202 	lsl.w	r2, r0, r2
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	@ (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	@ (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	@ 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ff4c 	bl	80025e4 <__NVIC_SetPriorityGrouping>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002762:	f7ff ff63 	bl	800262c <__NVIC_GetPriorityGrouping>
 8002766:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6978      	ldr	r0, [r7, #20]
 800276e:	f7ff ffb3 	bl	80026d8 <NVIC_EncodePriority>
 8002772:	4602      	mov	r2, r0
 8002774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff82 	bl	8002684 <__NVIC_SetPriority>
}
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff56 	bl	8002648 <__NVIC_EnableIRQ>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80027a8:	f3bf 8f5f 	dmb	sy
}
 80027ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <HAL_MPU_Disable+0x28>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	4a06      	ldr	r2, [pc, #24]	@ (80027cc <HAL_MPU_Disable+0x28>)
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80027ba:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <HAL_MPU_Disable+0x2c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	e000ed90 	.word	0xe000ed90

080027d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027dc:	4a0b      	ldr	r2, [pc, #44]	@ (800280c <HAL_MPU_Enable+0x38>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_MPU_Enable+0x3c>)
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <HAL_MPU_Enable+0x3c>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027f2:	f3bf 8f4f 	dsb	sy
}
 80027f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027f8:	f3bf 8f6f 	isb	sy
}
 80027fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed90 	.word	0xe000ed90
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	785a      	ldrb	r2, [r3, #1]
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HAL_MPU_ConfigRegion+0x7c>)
 8002822:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002824:	4b1a      	ldr	r3, [pc, #104]	@ (8002890 <HAL_MPU_ConfigRegion+0x7c>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <HAL_MPU_ConfigRegion+0x7c>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002830:	4a17      	ldr	r2, [pc, #92]	@ (8002890 <HAL_MPU_ConfigRegion+0x7c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7b1b      	ldrb	r3, [r3, #12]
 800283c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7adb      	ldrb	r3, [r3, #11]
 8002842:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002844:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7a9b      	ldrb	r3, [r3, #10]
 800284a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800284c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7b5b      	ldrb	r3, [r3, #13]
 8002852:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002854:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7b9b      	ldrb	r3, [r3, #14]
 800285a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800285c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7bdb      	ldrb	r3, [r3, #15]
 8002862:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002864:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7a5b      	ldrb	r3, [r3, #9]
 800286a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800286c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7a1b      	ldrb	r3, [r3, #8]
 8002872:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002874:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800287c:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800287e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002880:	6113      	str	r3, [r2, #16]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed90 	.word	0xe000ed90

08002894 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0e3      	b.n	8002a6e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d106      	bne.n	80028be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2223      	movs	r2, #35	@ 0x23
 80028b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fe fbc7 	bl	800104c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	4b6e      	ldr	r3, [pc, #440]	@ (8002a78 <HAL_ETH_Init+0x1e4>)
 80028c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028c4:	4a6c      	ldr	r2, [pc, #432]	@ (8002a78 <HAL_ETH_Init+0x1e4>)
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002a78 <HAL_ETH_Init+0x1e4>)
 80028d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7a1b      	ldrb	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff fe59 	bl	800259c <HAL_SYSCFG_ETHInterfaceSelect>
 80028ea:	e003      	b.n	80028f4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80028ec:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80028f0:	f7ff fe54 	bl	800259c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80028f4:	4b61      	ldr	r3, [pc, #388]	@ (8002a7c <HAL_ETH_Init+0x1e8>)
 80028f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800290e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002910:	f7ff fe38 	bl	8002584 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002916:	e011      	b.n	800293c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002918:	f7ff fe34 	bl	8002584 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002926:	d909      	bls.n	800293c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	22e0      	movs	r2, #224	@ 0xe0
 8002934:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      /* Return Error */
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e098      	b.n	8002a6e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e4      	bne.n	8002918 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fff2 	bl	8003938 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002954:	f002 ff2e 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 8002958:	4603      	mov	r3, r0
 800295a:	4a49      	ldr	r2, [pc, #292]	@ (8002a80 <HAL_ETH_Init+0x1ec>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	0c9a      	lsrs	r2, r3, #18
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3a01      	subs	r2, #1
 8002968:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f001 fa3b 	bl	8003de8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800297e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800298a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800298e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	22e0      	movs	r2, #224	@ 0xe0
 80029aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    /* Return Error */
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e05d      	b.n	8002a6e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80029be:	4b31      	ldr	r3, [pc, #196]	@ (8002a84 <HAL_ETH_Init+0x1f0>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6952      	ldr	r2, [r2, #20]
 80029c6:	0051      	lsls	r1, r2, #1
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029d2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f001 faa3 	bl	8003f22 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f001 fae9 	bl	8003fb4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	3305      	adds	r3, #5
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	021a      	lsls	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	3303      	adds	r3, #3
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	061a      	lsls	r2, r3, #24
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	3302      	adds	r3, #2
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a30:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_ETH_Init+0x1f4>)
 8002a42:	430b      	orrs	r3, r1
 8002a44:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b0d      	ldr	r3, [pc, #52]	@ (8002a8c <HAL_ETH_Init+0x1f8>)
 8002a56:	430b      	orrs	r3, r1
 8002a58:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  heth->gState = HAL_ETH_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2210      	movs	r2, #16
 8002a68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	58000400 	.word	0x58000400
 8002a80:	431bde83 	.word	0x431bde83
 8002a84:	ffff8001 	.word	0xffff8001
 8002a88:	0c020060 	.word	0x0c020060
 8002a8c:	0c20c000 	.word	0x0c20c000

08002a90 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d165      	bne.n	8002b6e <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2223      	movs	r2, #35	@ 0x23
 8002aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f9f0 	bl	8002e9c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ac4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ad4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ae0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002af0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002afc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8002b08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b0c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0202 	orr.w	r2, r2, #2
 8002b32:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b4c:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b5e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2223      	movs	r2, #35	@ 0x23
 8002b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b86:	2b23      	cmp	r3, #35	@ 0x23
 8002b88:	d165      	bne.n	8002c56 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2223      	movs	r2, #35	@ 0x23
 8002b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b9a:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <HAL_ETH_Stop_IT+0xec>)
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002baa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6812      	ldr	r2, [r2, #0]
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bc6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002be2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0202 	bic.w	r2, r2, #2
 8002c18:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e00e      	b.n	8002c3e <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	3212      	adds	r2, #18
 8002c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2a:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	d9ed      	bls.n	8002c20 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Return function status */
    return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
  }
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	ffff2f3e 	.word	0xffff2f3e

08002c68 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e03a      	b.n	8002d02 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c92:	2b23      	cmp	r3, #35	@ 0x23
 8002c94:	d134      	bne.n	8002d00 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f001 f9e4 	bl	8004070 <ETH_Prepare_Tx_Descriptors>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb4:	f043 0202 	orr.w	r2, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e01f      	b.n	8002d02 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002cc2:	f3bf 8f4f 	dsb	sy
}
 8002cc6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d904      	bls.n	8002ce4 <HAL_ETH_Transmit_IT+0x7c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	1f1a      	subs	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3106      	adds	r1, #6
 8002cf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cf4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002cf8:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b088      	sub	sp, #32
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint8_t expecting_ts = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73bb      	strb	r3, [r7, #14]

  if (pAppBuff == NULL)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_ETH_ReadData+0x30>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0ac      	b.n	8002e94 <HAL_ETH_ReadData+0x18a>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d40:	2b23      	cmp	r3, #35	@ 0x23
 8002d42:	d001      	beq.n	8002d48 <HAL_ETH_ReadData+0x3e>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0a5      	b.n	8002e94 <HAL_ETH_ReadData+0x18a>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	3212      	adds	r2, #18
 8002d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d58:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d5e:	f1c3 0304 	rsb	r3, r3, #4
 8002d62:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 8002d64:	e06e      	b.n	8002e44 <HAL_ETH_ReadData+0x13a>
    && desccnt < desccntmax
    && !rxdataready)
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <HAL_ETH_ReadData+0x84>
    {
      if (expecting_ts)
 8002d72:	7bbb      	ldrb	r3, [r7, #14]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d053      	beq.n	8002e20 <HAL_ETH_ReadData+0x116>
      {
        /* Get timestamp high */
        heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	679a      	str	r2, [r3, #120]	@ 0x78
        /* Get timestamp low */
        heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	675a      	str	r2, [r3, #116]	@ 0x74
        rxdataready = 1;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e048      	b.n	8002e20 <HAL_ETH_ReadData+0x116>
      }
    }
    else
    {
      if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <HAL_ETH_ReadData+0x98>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d028      	beq.n	8002df4 <HAL_ETH_ReadData+0xea>
      {
        /* Check if first descriptor */
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_ETH_ReadData+0xaa>
        {
          heth->RxDescList.RxDataLength = 0;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Check if last descriptor */
        bufflength = heth->Init.RxBuffLen;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	613b      	str	r3, [r7, #16]
        if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_ETH_ReadData+0xea>
        {
          bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	613b      	str	r3, [r7, #16]

          /* Save Last descriptor index */
          heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	671a      	str	r2, [r3, #112]	@ 0x70

          /* Packet ready */
          if (!READ_BIT(dmarxdesc->DESC1, (1 << 14)))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d102      	bne.n	8002df0 <HAL_ETH_ReadData+0xe6>
          {
            rxdataready = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e001      	b.n	8002df4 <HAL_ETH_ReadData+0xea>
          }
          else
          {
            expecting_ts = 1;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73bb      	strb	r3, [r7, #14]
          }
        }
      }

      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
        &heth->RxDescList.pRxEnd,
        (uint8_t *)dmarxdesc->BackupAddr0,
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart,
 8002e04:	461a      	mov	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f7fe fb37 	bl	800147c <HAL_ETH_RxLinkCallback>
        (uint16_t) bufflength);

      heth->RxDescList.RxDataLength += bufflength;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	441a      	add	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	3301      	adds	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d902      	bls.n	8002e32 <HAL_ETH_ReadData+0x128>
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	61fb      	str	r3, [r7, #28]

    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	3212      	adds	r2, #18
 8002e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
  while (!READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	68db      	ldr	r3, [r3, #12]
    && !rxdataready)
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db06      	blt.n	8002e5a <HAL_ETH_ReadData+0x150>
    && desccnt < desccntmax
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d202      	bcs.n	8002e5a <HAL_ETH_ReadData+0x150>
    && !rxdataready)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d085      	beq.n	8002d66 <HAL_ETH_ReadData+0x5c>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	441a      	add	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	66da      	str	r2, [r3, #108]	@ 0x6c

  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_ETH_ReadData+0x16a>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f814 	bl	8002e9c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_ETH_ReadData+0x188>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <HAL_ETH_ReadData+0x18a>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	3212      	adds	r2, #18
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002ec4:	e038      	b.n	8002f38 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d112      	bne.n	8002ef4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002ece:	f107 0308 	add.w	r3, r7, #8
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe faa2 	bl	800141c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	74fb      	strb	r3, [r7, #19]
 8002ee2:	e007      	b.n	8002ef4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01e      	beq.n	8002f38 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	e003      	b.n	8002f14 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002f12:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	3301      	adds	r3, #1
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d902      	bls.n	8002f26 <ETH_UpdateDescriptor+0x8a>
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3b04      	subs	r3, #4
 8002f24:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	3212      	adds	r2, #18
 8002f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f30:	617b      	str	r3, [r7, #20]
      desccount--;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <ETH_UpdateDescriptor+0xa8>
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1c0      	bne.n	8002ec6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d01b      	beq.n	8002f86 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3301      	adds	r3, #1
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f58:	f3bf 8f5f 	dmb	sy
}
 8002f5c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6919      	ldr	r1, [r3, #16]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4613      	mov	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	4413      	add	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	18ca      	adds	r2, r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f76:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002f86:	bf00      	nop
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b088      	sub	sp, #32
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3318      	adds	r3, #24
 8002f9a:	613b      	str	r3, [r7, #16]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa0:	61fb      	str	r3, [r7, #28]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa6:	61bb      	str	r3, [r7, #24]
  uint8_t pktTxStatus = 1U;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
  uint8_t pktInUse;
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3384      	adds	r3, #132	@ 0x84
 8002fb0:	60fb      	str	r3, [r7, #12]
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002fb2:	e0aa      	b.n	800310a <HAL_ETH_ReleaseTxPacket+0x17c>
  {
    pktInUse = 1U;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75bb      	strb	r3, [r7, #22]
    numOfBuf--;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10a      	bne.n	8002fe4 <HAL_ETH_ReleaseTxPacket+0x56>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d902      	bls.n	8002fe0 <HAL_ETH_ReleaseTxPacket+0x52>
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3b04      	subs	r3, #4
 8002fde:	61bb      	str	r3, [r7, #24]
      pktInUse = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	75bb      	strb	r3, [r7, #22]
    }

    if (pktInUse != 0U)
 8002fe4:	7dbb      	ldrb	r3, [r7, #22]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 808f 	beq.w	800310a <HAL_ETH_ReleaseTxPacket+0x17c>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68d9      	ldr	r1, [r3, #12]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f2c0 8081 	blt.w	8003106 <HAL_ETH_ReleaseTxPacket+0x178>
      {
#ifdef HAL_ETH_USE_PTP

        /* Disable Ptp transmission */
        CLEAR_BIT(heth->Init.TxDesc[idx].DESC3, (0x40000000U));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68d9      	ldr	r1, [r3, #12]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68d8      	ldr	r0, [r3, #12]
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4403      	add	r3, r0
 8003026:	f021 4280 	bic.w	r2, r1, #1073741824	@ 0x40000000
 800302a:	60da      	str	r2, [r3, #12]

        if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_LD)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	440b      	add	r3, r1
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d023      	beq.n	800308e <HAL_ETH_ReleaseTxPacket+0x100>
            && (heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCWBF_TTSS))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68d9      	ldr	r1, [r3, #12]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	440b      	add	r3, r1
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d016      	beq.n	800308e <HAL_ETH_ReleaseTxPacket+0x100>
        {
          /* Get timestamp low */
          timestamp->TimeStampLow = heth->Init.TxDesc[idx].DESC0;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68d9      	ldr	r1, [r3, #12]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	440b      	add	r3, r1
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	601a      	str	r2, [r3, #0]
          /* Get timestamp high */
          timestamp->TimeStampHigh = heth->Init.TxDesc[idx].DESC1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68d9      	ldr	r1, [r3, #12]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	e007      	b.n	800309e <HAL_ETH_ReleaseTxPacket+0x110>
        }
        else
        {
          timestamp->TimeStampHigh = timestamp->TimeStampLow = UINT32_MAX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f04f 32ff 	mov.w	r2, #4294967295
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
        heth->txFreeCallback(dmatxdesclist->PacketAddress[idx]);
#else
        /* Call callbacks */
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        if (timestamp->TimeStampHigh != UINT32_MAX && timestamp->TimeStampLow != UINT32_MAX)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d00e      	beq.n	80030c6 <HAL_ETH_ReleaseTxPacket+0x138>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d009      	beq.n	80030c6 <HAL_ETH_ReleaseTxPacket+0x138>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	3304      	adds	r3, #4
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f86c 	bl	800319e <HAL_ETH_TxPtpCallback>
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	3304      	adds	r3, #4
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fa3a 	bl	800154c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	3304      	adds	r3, #4
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	2200      	movs	r2, #0
 80030e4:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d902      	bls.n	80030f8 <HAL_ETH_ReleaseTxPacket+0x16a>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	3b04      	subs	r3, #4
 80030f6:	61bb      	str	r3, [r7, #24]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003104:	e001      	b.n	800310a <HAL_ETH_ReleaseTxPacket+0x17c>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_ETH_ReleaseTxPacket+0x18a>
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f47f af4e 	bne.w	8002fb4 <HAL_ETH_ReleaseTxPacket+0x26>
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_ETH_PTP_InsertTxTimestamp>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_InsertTxTimestamp(ETH_HandleTypeDef *heth)
{
 8003122:	b480      	push	{r7}
 8003124:	b087      	sub	sp, #28
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3318      	adds	r3, #24
 800312e:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	613b      	str	r3, [r7, #16]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800313e:	60fb      	str	r3, [r7, #12]

  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_ETH_PTP_InsertTxTimestamp+0x38>
  {
    /* Enable Time Stamp transmission */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_TTSE);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	609a      	str	r2, [r3, #8]

    /* Return function status */
    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_ETH_PTP_InsertTxTimestamp+0x3a>
  }
  else
  {
    /* Return function status */
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_ETH_PTP_GetRxTimestamp>:
  * @param  timestamp: pointer to ETH_TIMESTAMPTypeDef structure that contains
  *         receive timestamp
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_PTP_GetRxTimestamp(ETH_HandleTypeDef *heth, ETH_TimeStampTypeDef *timestamp)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  if (heth->IsPtpConfigured == HAL_ETH_PTP_CONFIGURED)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003178:	2b01      	cmp	r3, #1
 800317a:	d109      	bne.n	8003190 <HAL_ETH_PTP_GetRxTimestamp+0x28>
  {
    /* Get timestamp low */
    timestamp->TimeStampLow = heth->RxDescList.TimeStamp.TimeStampLow;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	601a      	str	r2, [r3, #0]
    /* Get timestamp high */
    timestamp->TimeStampHigh = heth->RxDescList.TimeStamp.TimeStampHigh;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	605a      	str	r2, [r3, #4]

    /* Return function status */
    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_ETH_PTP_GetRxTimestamp+0x2a>
  }
  else
  {
    /* Return function status */
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_ETH_TxPtpCallback>:
  * @param  timestamp: pointer to ETH_TimeStampTypeDef structure that contains
  *         transmission timestamp
  * @retval None
  */
__weak void HAL_ETH_TxPtpCallback(uint32_t *buff, ETH_TimeStampTypeDef *timestamp)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(buff);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxPtpCallback could be implemented in the user file
  */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80031c4:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031ce:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80031d2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031dc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80031e0:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 80031e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003398 <HAL_ETH_IRQHandler+0x1e4>)
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_ETH_IRQHandler+0x60>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003204:	461a      	mov	r2, r3
 8003206:	f248 0340 	movw	r3, #32832	@ 0x8040
 800320a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fd ffd2 	bl	80011b8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_ETH_IRQHandler+0x8c>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003230:	461a      	mov	r2, r3
 8003232:	f248 0301 	movw	r3, #32769	@ 0x8001
 8003236:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fd ffcc 	bl	80011d8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d047      	beq.n	80032da <HAL_ETH_IRQHandler+0x126>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d042      	beq.n	80032da <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325a:	f043 0208 	orr.w	r2, r3, #8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d01e      	beq.n	80032ac <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003276:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 800327a:	f241 1302 	movw	r3, #4354	@ 0x1102
 800327e:	4013      	ands	r3, r2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800328e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800329a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800329e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	22e0      	movs	r2, #224	@ 0xe0
 80032a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80032aa:	e013      	b.n	80032d4 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032b4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80032b8:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ca:	461a      	mov	r2, r3
 80032cc:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80032d0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7fd ff8f 	bl	80011f8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f4:	f043 0210 	orr.w	r2, r3, #16
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    heth->gState = HAL_ETH_STATE_ERROR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	22e0      	movs	r2, #224	@ 0xe0
 8003310:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fd ff6f 	bl	80011f8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00f      	beq.n	800334c <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003334:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f82c 	bl	800339c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00f      	beq.n	8003376 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f821 	bl	80033b0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_ETH_IRQHandler+0x1e4>)
 8003382:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f81b 	bl	80033c4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	58000080 	.word	0x58000080

0800339c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e03e      	b.n	8003478 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003402:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	055b      	lsls	r3, r3, #21
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f043 030c 	orr.w	r3, r3, #12
 8003426:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800343a:	f7ff f8a3 	bl	8002584 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003440:	e009      	b.n	8003456 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8003442:	f7ff f89f 	bl	8002584 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003450:	d901      	bls.n	8003456 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e010      	b.n	8003478 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ed      	bne.n	8003442 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800346e:	b29b      	uxth	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e03c      	b.n	800351c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80034aa:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	055b      	lsls	r3, r3, #21
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	041b      	lsls	r3, r3, #16
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 030c 	bic.w	r3, r3, #12
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	4b10      	ldr	r3, [pc, #64]	@ (8003524 <HAL_ETH_WritePHYRegister+0xa4>)
 80034e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80034e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003524 <HAL_ETH_WritePHYRegister+0xa4>)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 80034ee:	f7ff f849 	bl	8002584 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80034f4:	e009      	b.n	800350a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80034f6:	f7ff f845 	bl	8002584 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003504:	d901      	bls.n	800350a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e008      	b.n	800351c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1ed      	bne.n	80034f6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40028000 	.word	0x40028000

08003528 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e1c3      	b.n	80038c4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	bf0c      	ite	eq
 8003582:	2301      	moveq	r3, #1
 8003584:	2300      	movne	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80035ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	bf14      	ite	ne
 8003622:	2301      	movne	r3, #1
 8003624:	2300      	moveq	r3, #0
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf14      	ite	ne
 800368a:	2301      	movne	r3, #1
 800368c:	2300      	moveq	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2300      	moveq	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80036b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	bf14      	ite	ne
 80036be:	2301      	movne	r3, #1
 80036c0:	2300      	moveq	r3, #0
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bf14      	ite	ne
 80036e6:	2301      	movne	r3, #1
 80036e8:	2300      	moveq	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800374c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	0e5b      	lsrs	r3, r3, #25
 8003786:	f003 021f 	and.w	r2, r3, #31
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf14      	ite	ne
 800379c:	2301      	movne	r3, #1
 800379e:	2300      	moveq	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bf14      	ite	ne
 80037c6:	2301      	movne	r3, #1
 80037c8:	2300      	moveq	r3, #0
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b29a      	uxth	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003850:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003860:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80038ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e00b      	b.n	80038fc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d105      	bne.n	80038fa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80038ee:	6839      	ldr	r1, [r7, #0]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8d7 	bl	8003aa4 <ETH_SetMACConfig>

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e00b      	b.n	8003930 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391e:	2b10      	cmp	r3, #16
 8003920:	d105      	bne.n	800392e <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f9d9 	bl	8003cdc <ETH_SetDMAConfig>

    return HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	e000      	b.n	8003930 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003948:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003950:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003952:	f001 ff2f 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 8003956:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4a1a      	ldr	r2, [pc, #104]	@ (80039c4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d804      	bhi.n	800396a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e022      	b.n	80039b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a16      	ldr	r2, [pc, #88]	@ (80039c8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d204      	bcs.n	800397c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	e019      	b.n	80039b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4a13      	ldr	r2, [pc, #76]	@ (80039cc <HAL_ETH_SetMDIOClockRange+0x94>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d915      	bls.n	80039b0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4a12      	ldr	r2, [pc, #72]	@ (80039d0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d804      	bhi.n	8003996 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e00c      	b.n	80039b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4a0e      	ldr	r2, [pc, #56]	@ (80039d4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d804      	bhi.n	80039a8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e003      	b.n	80039b0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	02160ebf 	.word	0x02160ebf
 80039c8:	03938700 	.word	0x03938700
 80039cc:	05f5e0ff 	.word	0x05f5e0ff
 80039d0:	08f0d17f 	.word	0x08f0d17f
 80039d4:	0ee6b27f 	.word	0x0ee6b27f

080039d8 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;

  if (pFilterConfig == NULL)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e039      	b.n	8003a60 <HAL_ETH_SetMACFilterConfig+0x88>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	78db      	ldrb	r3, [r3, #3]
 80039f6:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80039f8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	791b      	ldrb	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003a00:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	7a1b      	ldrb	r3, [r3, #8]
 8003a06:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8003a08:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	795b      	ldrb	r3, [r3, #5]
 8003a0e:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003a10:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	7a52      	ldrb	r2, [r2, #9]
 8003a16:	2a00      	cmp	r2, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ETH_SetMACFilterConfig+0x46>
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	e000      	b.n	8003a20 <HAL_ETH_SetMACFilterConfig+0x48>
 8003a1e:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 8003a20:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	79db      	ldrb	r3, [r3, #7]
 8003a26:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8003a28:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	799b      	ldrb	r3, [r3, #6]
 8003a2e:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 8003a30:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	789b      	ldrb	r3, [r3, #2]
 8003a36:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 8003a38:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 8003a40:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACPFR, ETH_MACPFR_MASK, filterconfig);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <HAL_ETH_SetMACFilterConfig+0x94>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	68f9      	ldr	r1, [r7, #12]
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	6093      	str	r3, [r2, #8]

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	7ffff800 	.word	0x7ffff800

08003a70 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003ab6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	791b      	ldrb	r3, [r3, #4]
 8003abc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003abe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	7b1b      	ldrb	r3, [r3, #12]
 8003ac4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003ac6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	7b5b      	ldrb	r3, [r3, #13]
 8003acc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	7b9b      	ldrb	r3, [r3, #14]
 8003ad4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003ad6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	7bdb      	ldrb	r3, [r3, #15]
 8003adc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003ade:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	7c12      	ldrb	r2, [r2, #16]
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	d102      	bne.n	8003aee <ETH_SetMACConfig+0x4a>
 8003ae8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003aec:	e000      	b.n	8003af0 <ETH_SetMACConfig+0x4c>
 8003aee:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003af0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	7c52      	ldrb	r2, [r2, #17]
 8003af6:	2a00      	cmp	r2, #0
 8003af8:	d102      	bne.n	8003b00 <ETH_SetMACConfig+0x5c>
 8003afa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003afe:	e000      	b.n	8003b02 <ETH_SetMACConfig+0x5e>
 8003b00:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003b02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	7c9b      	ldrb	r3, [r3, #18]
 8003b08:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003b0a:	431a      	orrs	r2, r3
               macconf->Speed |
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003b10:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003b16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	7f1b      	ldrb	r3, [r3, #28]
 8003b1c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003b1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	7f5b      	ldrb	r3, [r3, #29]
 8003b24:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003b26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	7f92      	ldrb	r2, [r2, #30]
 8003b2c:	2a00      	cmp	r2, #0
 8003b2e:	d102      	bne.n	8003b36 <ETH_SetMACConfig+0x92>
 8003b30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b34:	e000      	b.n	8003b38 <ETH_SetMACConfig+0x94>
 8003b36:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	7fdb      	ldrb	r3, [r3, #31]
 8003b3e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b40:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	d102      	bne.n	8003b52 <ETH_SetMACConfig+0xae>
 8003b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b50:	e000      	b.n	8003b54 <ETH_SetMACConfig+0xb0>
 8003b52:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b54:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b62:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003b64:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b56      	ldr	r3, [pc, #344]	@ (8003cd0 <ETH_SetMACConfig+0x22c>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b86:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b8e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003b90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b98:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003b9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ba2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003ba4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	d102      	bne.n	8003bb6 <ETH_SetMACConfig+0x112>
 8003bb0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003bb4:	e000      	b.n	8003bb8 <ETH_SetMACConfig+0x114>
 8003bb6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003bb8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	4b42      	ldr	r3, [pc, #264]	@ (8003cd4 <ETH_SetMACConfig+0x230>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	68f9      	ldr	r1, [r7, #12]
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bdc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd8 <ETH_SetMACConfig+0x234>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	68f9      	ldr	r1, [r7, #12]
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003c00:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c06:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003c0e:	2a00      	cmp	r2, #0
 8003c10:	d101      	bne.n	8003c16 <ETH_SetMACConfig+0x172>
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	e000      	b.n	8003c18 <ETH_SetMACConfig+0x174>
 8003c16:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003c18:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c2a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	430b      	orrs	r3, r1
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003c40:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003c48:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f023 0103 	bic.w	r1, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003c6e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003c8a:	2a00      	cmp	r2, #0
 8003c8c:	d101      	bne.n	8003c92 <ETH_SetMACConfig+0x1ee>
 8003c8e:	2240      	movs	r2, #64	@ 0x40
 8003c90:	e000      	b.n	8003c94 <ETH_SetMACConfig+0x1f0>
 8003c92:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003c94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003c9c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003ca6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003cb4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	00048083 	.word	0x00048083
 8003cd4:	c0f88000 	.word	0xc0f88000
 8003cd8:	fffffef0 	.word	0xfffffef0

08003cdc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <ETH_SetDMAConfig+0xf8>)
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	6811      	ldr	r1, [r2, #0]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d02:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	791b      	ldrb	r3, [r3, #4]
 8003d08:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d0e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	7b1b      	ldrb	r3, [r3, #12]
 8003d14:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	4b2c      	ldr	r3, [pc, #176]	@ (8003dd8 <ETH_SetDMAConfig+0xfc>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	68f9      	ldr	r1, [r7, #12]
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d34:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	7b5b      	ldrb	r3, [r3, #13]
 8003d3a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d4c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003d50:	4b22      	ldr	r3, [pc, #136]	@ (8003ddc <ETH_SetDMAConfig+0x100>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d60:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	7d1b      	ldrb	r3, [r3, #20]
 8003d6c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d6e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	7f5b      	ldrb	r3, [r3, #29]
 8003d74:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d82:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003d86:	4b16      	ldr	r3, [pc, #88]	@ (8003de0 <ETH_SetDMAConfig+0x104>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d96:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	7f1b      	ldrb	r3, [r3, #28]
 8003d9e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <ETH_SetDMAConfig+0x108>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dc4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	ffff87fd 	.word	0xffff87fd
 8003dd8:	ffff2ffe 	.word	0xffff2ffe
 8003ddc:	fffec000 	.word	0xfffec000
 8003de0:	ffc0efef 	.word	0xffc0efef
 8003de4:	7fc0ffff 	.word	0x7fc0ffff

08003de8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b0a4      	sub	sp, #144	@ 0x90
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003df6:	2300      	movs	r3, #0
 8003df8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e28:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003e40:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003e44:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003e56:	2300      	movs	r3, #0
 8003e58:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003e62:	2300      	movs	r3, #0
 8003e64:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003e80:	2320      	movs	r3, #32
 8003e82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003e92:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fde6 	bl	8003aa4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003edc:	2301      	movs	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ef2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ef6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003efc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003f00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003f08:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f0e:	f107 0308 	add.w	r3, r7, #8
 8003f12:	4619      	mov	r1, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff fee1 	bl	8003cdc <ETH_SetDMAConfig>
}
 8003f1a:	bf00      	nop
 8003f1c:	3790      	adds	r7, #144	@ 0x90
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e01d      	b.n	8003f6c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68d9      	ldr	r1, [r3, #12]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	440b      	add	r3, r1
 8003f40:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	3206      	adds	r2, #6
 8003f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d9de      	bls.n	8003f30 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f80:	461a      	mov	r2, r3
 8003f82:	2303      	movs	r3, #3
 8003f84:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f94:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e023      	b.n	800400a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6919      	ldr	r1, [r3, #16]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	3212      	adds	r2, #18
 8004000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3301      	adds	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d9d8      	bls.n	8003fc2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004036:	461a      	mov	r2, r3
 8004038:	2303      	movs	r3, #3
 800403a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800404a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004070:	b480      	push	{r7}
 8004072:	b091      	sub	sp, #68	@ 0x44
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3318      	adds	r3, #24
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040b2:	d007      	beq.n	80040c4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b8:	3304      	adds	r3, #4
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	e266      	b.n	8004596 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d044      	beq.n	800415e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4b75      	ldr	r3, [pc, #468]	@ (80042b0 <ETH_Prepare_Tx_Descriptors+0x240>)
 80040da:	4013      	ands	r3, r2
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040e0:	431a      	orrs	r2, r3
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004100:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d027      	beq.n	800415e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	b29a      	uxth	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	431a      	orrs	r2, r3
 800411c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	431a      	orrs	r2, r3
 800413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800414c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800415c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00e      	beq.n	8004188 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	4b51      	ldr	r3, [pc, #324]	@ (80042b4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8004170:	4013      	ands	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	6992      	ldr	r2, [r2, #24]
 8004176:	431a      	orrs	r2, r3
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 800417c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d036      	beq.n	800420e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80041a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041aa:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80041ac:	f3bf 8f5f 	dmb	sy
}
 80041b0:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80041b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80041be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c0:	3301      	adds	r3, #1
 80041c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	d902      	bls.n	80041d0 <ETH_Prepare_Tx_Descriptors+0x160>
 80041ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041cc:	3b04      	subs	r3, #4
 80041ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80041da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041dc:	3301      	adds	r3, #1
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80041e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041ec:	d10f      	bne.n	800420e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	6a3a      	ldr	r2, [r7, #32]
 80041f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80041f8:	f3bf 8f5f 	dmb	sy
}
 80041fc:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004208:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	e1c3      	b.n	8004596 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800420e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004210:	3301      	adds	r3, #1
 8004212:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8004224:	4013      	ands	r3, r2
 8004226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004228:	6852      	ldr	r2, [r2, #4]
 800422a:	431a      	orrs	r2, r3
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8004230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d012      	beq.n	800425e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8004238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004246:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800424e:	4013      	ands	r3, r2
 8004250:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004252:	6852      	ldr	r2, [r2, #4]
 8004254:	0412      	lsls	r2, r2, #16
 8004256:	431a      	orrs	r2, r3
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	e008      	b.n	8004270 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <ETH_Prepare_Tx_Descriptors+0x248>)
 800426a:	4013      	ands	r3, r2
 800426c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d021      	beq.n	80042c0 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800427c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	04db      	lsls	r3, r3, #19
 800428a:	431a      	orrs	r2, r3
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	4b09      	ldr	r3, [pc, #36]	@ (80042bc <ETH_Prepare_Tx_Descriptors+0x24c>)
 8004296:	4013      	ands	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	69d2      	ldr	r2, [r2, #28]
 800429c:	431a      	orrs	r2, r3
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80042aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	e02e      	b.n	800430e <ETH_Prepare_Tx_Descriptors+0x29e>
 80042b0:	ffff0000 	.word	0xffff0000
 80042b4:	ffffc000 	.word	0xffffc000
 80042b8:	c000ffff 	.word	0xc000ffff
 80042bc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4b7b      	ldr	r3, [pc, #492]	@ (80044b4 <ETH_Prepare_Tx_Descriptors+0x444>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	6852      	ldr	r2, [r2, #4]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0320 	and.w	r3, r3, #32
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	431a      	orrs	r2, r3
 800430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	431a      	orrs	r2, r3
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004336:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004344:	f3bf 8f5f 	dmb	sy
}
 8004348:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80da 	beq.w	8004518 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	431a      	orrs	r2, r3
 8004372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004374:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004376:	e0cf      	b.n	8004518 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004382:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004386:	3301      	adds	r3, #1
 8004388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800438a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438c:	2b03      	cmp	r3, #3
 800438e:	d902      	bls.n	8004396 <ETH_Prepare_Tx_Descriptors+0x326>
 8004390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004392:	3b04      	subs	r3, #4
 8004394:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800439a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80043a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80043ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043b8:	d007      	beq.n	80043ca <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80043ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043be:	3304      	adds	r3, #4
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d029      	beq.n	800441e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80043d8:	2300      	movs	r3, #0
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043dc:	e019      	b.n	8004412 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 80043de:	f3bf 8f5f 	dmb	sy
}
 80043e2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80043f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f2:	3301      	adds	r3, #1
 80043f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d902      	bls.n	8004402 <ETH_Prepare_Tx_Descriptors+0x392>
 80043fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fe:	3b04      	subs	r3, #4
 8004400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800440c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440e:	3301      	adds	r3, #1
 8004410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004412:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004416:	429a      	cmp	r2, r3
 8004418:	d3e1      	bcc.n	80043de <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800441a:	2302      	movs	r3, #2
 800441c:	e0bb      	b.n	8004596 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800441e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004420:	3301      	adds	r3, #1
 8004422:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b1f      	ldr	r3, [pc, #124]	@ (80044b8 <ETH_Prepare_Tx_Descriptors+0x448>)
 800443a:	4013      	ands	r3, r2
 800443c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443e:	6852      	ldr	r2, [r2, #4]
 8004440:	431a      	orrs	r2, r3
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d012      	beq.n	8004474 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800444e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800445e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	4b16      	ldr	r3, [pc, #88]	@ (80044bc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004464:	4013      	ands	r3, r2
 8004466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004468:	6852      	ldr	r2, [r2, #4]
 800446a:	0412      	lsls	r2, r2, #16
 800446c:	431a      	orrs	r2, r3
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	609a      	str	r2, [r3, #8]
 8004472:	e008      	b.n	8004486 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004476:	2200      	movs	r2, #0
 8004478:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <ETH_Prepare_Tx_Descriptors+0x44c>)
 8004480:	4013      	ands	r3, r2
 8004482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004484:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d018      	beq.n	80044c4 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <ETH_Prepare_Tx_Descriptors+0x450>)
 8004498:	4013      	ands	r3, r2
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	69d2      	ldr	r2, [r2, #28]
 800449e:	431a      	orrs	r2, r3
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80044a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	60da      	str	r2, [r3, #12]
 80044b0:	e020      	b.n	80044f4 <ETH_Prepare_Tx_Descriptors+0x484>
 80044b2:	bf00      	nop
 80044b4:	ffff8000 	.word	0xffff8000
 80044b8:	ffffc000 	.word	0xffffc000
 80044bc:	c000ffff 	.word	0xc000ffff
 80044c0:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80044c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	4b36      	ldr	r3, [pc, #216]	@ (80045a4 <ETH_Prepare_Tx_Descriptors+0x534>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	6852      	ldr	r2, [r2, #4]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	3301      	adds	r3, #1
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80044fa:	f3bf 8f5f 	dmb	sy
}
 80044fe:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f47f af2b 	bne.w	8004378 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	609a      	str	r2, [r3, #8]
 8004534:	e005      	b.n	8004542 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004552:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004556:	3304      	adds	r3, #4
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004562:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004564:	f3ef 8310 	mrs	r3, PRIMASK
 8004568:	613b      	str	r3, [r7, #16]
  return(result);
 800456a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	2301      	movs	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	4413      	add	r3, r2
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	629a      	str	r2, [r3, #40]	@ 0x28
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3744      	adds	r7, #68	@ 0x44
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	ffff8000 	.word	0xffff8000

080045a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	@ 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80045b6:	4b86      	ldr	r3, [pc, #536]	@ (80047d0 <HAL_GPIO_Init+0x228>)
 80045b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80045ba:	e18c      	b.n	80048d6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	2101      	movs	r1, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 817e 	beq.w	80048d0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0303 	and.w	r3, r3, #3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d005      	beq.n	80045ec <HAL_GPIO_Init+0x44>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d130      	bne.n	800464e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2203      	movs	r2, #3
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4013      	ands	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004622:	2201      	movs	r2, #1
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43db      	mvns	r3, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4013      	ands	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0201 	and.w	r2, r3, #1
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b03      	cmp	r3, #3
 8004658:	d017      	beq.n	800468a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d123      	bne.n	80046de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	220f      	movs	r2, #15
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	08da      	lsrs	r2, r3, #3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3208      	adds	r2, #8
 80046d8:	69b9      	ldr	r1, [r7, #24]
 80046da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	2203      	movs	r2, #3
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80d8 	beq.w	80048d0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004720:	4b2c      	ldr	r3, [pc, #176]	@ (80047d4 <HAL_GPIO_Init+0x22c>)
 8004722:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004726:	4a2b      	ldr	r2, [pc, #172]	@ (80047d4 <HAL_GPIO_Init+0x22c>)
 8004728:	f043 0302 	orr.w	r3, r3, #2
 800472c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004730:	4b28      	ldr	r3, [pc, #160]	@ (80047d4 <HAL_GPIO_Init+0x22c>)
 8004732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800473e:	4a26      	ldr	r2, [pc, #152]	@ (80047d8 <HAL_GPIO_Init+0x230>)
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3302      	adds	r3, #2
 8004746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	220f      	movs	r2, #15
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <HAL_GPIO_Init+0x234>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_GPIO_Init+0x258>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a1c      	ldr	r2, [pc, #112]	@ (80047e0 <HAL_GPIO_Init+0x238>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02b      	beq.n	80047ca <HAL_GPIO_Init+0x222>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1b      	ldr	r2, [pc, #108]	@ (80047e4 <HAL_GPIO_Init+0x23c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d025      	beq.n	80047c6 <HAL_GPIO_Init+0x21e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1a      	ldr	r2, [pc, #104]	@ (80047e8 <HAL_GPIO_Init+0x240>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01f      	beq.n	80047c2 <HAL_GPIO_Init+0x21a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a19      	ldr	r2, [pc, #100]	@ (80047ec <HAL_GPIO_Init+0x244>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d019      	beq.n	80047be <HAL_GPIO_Init+0x216>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <HAL_GPIO_Init+0x248>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_GPIO_Init+0x212>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <HAL_GPIO_Init+0x24c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00d      	beq.n	80047b6 <HAL_GPIO_Init+0x20e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a16      	ldr	r2, [pc, #88]	@ (80047f8 <HAL_GPIO_Init+0x250>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <HAL_GPIO_Init+0x20a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <HAL_GPIO_Init+0x254>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_GPIO_Init+0x206>
 80047aa:	2309      	movs	r3, #9
 80047ac:	e029      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047ae:	230a      	movs	r3, #10
 80047b0:	e027      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047b2:	2307      	movs	r3, #7
 80047b4:	e025      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047b6:	2306      	movs	r3, #6
 80047b8:	e023      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047ba:	2305      	movs	r3, #5
 80047bc:	e021      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047be:	2304      	movs	r3, #4
 80047c0:	e01f      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047c2:	2303      	movs	r3, #3
 80047c4:	e01d      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e01b      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e019      	b.n	8004802 <HAL_GPIO_Init+0x25a>
 80047ce:	bf00      	nop
 80047d0:	58000080 	.word	0x58000080
 80047d4:	58024400 	.word	0x58024400
 80047d8:	58000400 	.word	0x58000400
 80047dc:	58020000 	.word	0x58020000
 80047e0:	58020400 	.word	0x58020400
 80047e4:	58020800 	.word	0x58020800
 80047e8:	58020c00 	.word	0x58020c00
 80047ec:	58021000 	.word	0x58021000
 80047f0:	58021400 	.word	0x58021400
 80047f4:	58021800 	.word	0x58021800
 80047f8:	58021c00 	.word	0x58021c00
 80047fc:	58022400 	.word	0x58022400
 8004800:	2300      	movs	r3, #0
 8004802:	69fa      	ldr	r2, [r7, #28]
 8004804:	f002 0203 	and.w	r2, r2, #3
 8004808:	0092      	lsls	r2, r2, #2
 800480a:	4093      	lsls	r3, r2
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004812:	4938      	ldr	r1, [pc, #224]	@ (80048f4 <HAL_GPIO_Init+0x34c>)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	3302      	adds	r3, #2
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800484e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004874:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	43db      	mvns	r3, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4013      	ands	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	3301      	adds	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f ae6b 	bne.w	80045bc <HAL_GPIO_Init+0x14>
  }
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	3724      	adds	r7, #36	@ 0x24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	58000400 	.word	0x58000400

080048f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	807b      	strh	r3, [r7, #2]
 8004904:	4613      	mov	r3, r2
 8004906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004908:	787b      	ldrb	r3, [r7, #1]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004914:	e003      	b.n	800491e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004916:	887b      	ldrh	r3, [r7, #2]
 8004918:	041a      	lsls	r2, r3, #16
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004934:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_PWREx_ConfigSupply+0x70>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b04      	cmp	r3, #4
 800493e:	d00a      	beq.n	8004956 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004940:	4b16      	ldr	r3, [pc, #88]	@ (800499c <HAL_PWREx_ConfigSupply+0x70>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d001      	beq.n	8004952 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e01f      	b.n	8004992 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e01d      	b.n	8004992 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004956:	4b11      	ldr	r3, [pc, #68]	@ (800499c <HAL_PWREx_ConfigSupply+0x70>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 0207 	bic.w	r2, r3, #7
 800495e:	490f      	ldr	r1, [pc, #60]	@ (800499c <HAL_PWREx_ConfigSupply+0x70>)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4313      	orrs	r3, r2
 8004964:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004966:	f7fd fe0d 	bl	8002584 <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800496c:	e009      	b.n	8004982 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800496e:	f7fd fe09 	bl	8002584 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800497c:	d901      	bls.n	8004982 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e007      	b.n	8004992 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_PWREx_ConfigSupply+0x70>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800498a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800498e:	d1ee      	bne.n	800496e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	58024800 	.word	0x58024800

080049a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	@ 0x30
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e3c8      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8087 	beq.w	8004ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c0:	4b88      	ldr	r3, [pc, #544]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049ca:	4b86      	ldr	r3, [pc, #536]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 80049cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d007      	beq.n	80049e6 <HAL_RCC_OscConfig+0x46>
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	2b18      	cmp	r3, #24
 80049da:	d110      	bne.n	80049fe <HAL_RCC_OscConfig+0x5e>
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d10b      	bne.n	80049fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d06c      	beq.n	8004acc <HAL_RCC_OscConfig+0x12c>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d168      	bne.n	8004acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e3a2      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x76>
 8004a08:	4b76      	ldr	r3, [pc, #472]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a75      	ldr	r2, [pc, #468]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e02e      	b.n	8004a74 <HAL_RCC_OscConfig+0xd4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x98>
 8004a1e:	4b71      	ldr	r3, [pc, #452]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a70      	ldr	r2, [pc, #448]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e01d      	b.n	8004a74 <HAL_RCC_OscConfig+0xd4>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0xbc>
 8004a42:	4b68      	ldr	r3, [pc, #416]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a67      	ldr	r2, [pc, #412]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a64      	ldr	r2, [pc, #400]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0xd4>
 8004a5c:	4b61      	ldr	r3, [pc, #388]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a60      	ldr	r2, [pc, #384]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b5e      	ldr	r3, [pc, #376]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5d      	ldr	r2, [pc, #372]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7c:	f7fd fd82 	bl	8002584 <HAL_GetTick>
 8004a80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a82:	e008      	b.n	8004a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a84:	f7fd fd7e 	bl	8002584 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	2b64      	cmp	r3, #100	@ 0x64
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e356      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a96:	4b53      	ldr	r3, [pc, #332]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f0      	beq.n	8004a84 <HAL_RCC_OscConfig+0xe4>
 8004aa2:	e014      	b.n	8004ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fd6e 	bl	8002584 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fd6a 	bl	8002584 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	@ 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e342      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004abe:	4b49      	ldr	r3, [pc, #292]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x10c>
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 808c 	beq.w	8004bf4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004adc:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ae4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_RCC_OscConfig+0x162>
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	2b18      	cmp	r3, #24
 8004af6:	d137      	bne.n	8004b68 <HAL_RCC_OscConfig+0x1c8>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d132      	bne.n	8004b68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b02:	4b38      	ldr	r3, [pc, #224]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_RCC_OscConfig+0x17a>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e314      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b1a:	4b32      	ldr	r3, [pc, #200]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 0219 	bic.w	r2, r3, #25
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	492f      	ldr	r1, [pc, #188]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fd2a 	bl	8002584 <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fd fd26 	bl	8002584 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e2fe      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b46:	4b27      	ldr	r3, [pc, #156]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	4b24      	ldr	r3, [pc, #144]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	4920      	ldr	r1, [pc, #128]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b66:	e045      	b.n	8004bf4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d026      	beq.n	8004bbe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b70:	4b1c      	ldr	r3, [pc, #112]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 0219 	bic.w	r2, r3, #25
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4919      	ldr	r1, [pc, #100]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b82:	f7fd fcff 	bl	8002584 <HAL_GetTick>
 8004b86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b8a:	f7fd fcfb 	bl	8002584 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e2d3      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b9c:	4b11      	ldr	r3, [pc, #68]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	490b      	ldr	r1, [pc, #44]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
 8004bbc:	e01a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a08      	ldr	r2, [pc, #32]	@ (8004be4 <HAL_RCC_OscConfig+0x244>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fd fcdb 	bl	8002584 <HAL_GetTick>
 8004bce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fd fcd7 	bl	8002584 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d903      	bls.n	8004be8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e2af      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
 8004be4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004be8:	4b96      	ldr	r3, [pc, #600]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ee      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d06a      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c00:	4b90      	ldr	r3, [pc, #576]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d007      	beq.n	8004c26 <HAL_RCC_OscConfig+0x286>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b18      	cmp	r3, #24
 8004c1a:	d11b      	bne.n	8004c54 <HAL_RCC_OscConfig+0x2b4>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d116      	bne.n	8004c54 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c26:	4b87      	ldr	r3, [pc, #540]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d005      	beq.n	8004c3e <HAL_RCC_OscConfig+0x29e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b80      	cmp	r3, #128	@ 0x80
 8004c38:	d001      	beq.n	8004c3e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e282      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c3e:	4b81      	ldr	r3, [pc, #516]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	497d      	ldr	r1, [pc, #500]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c52:	e040      	b.n	8004cd6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d023      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c5c:	4b79      	ldr	r3, [pc, #484]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a78      	ldr	r2, [pc, #480]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fd fc8c 	bl	8002584 <HAL_GetTick>
 8004c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c70:	f7fd fc88 	bl	8002584 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e260      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	061b      	lsls	r3, r3, #24
 8004c9c:	4969      	ldr	r1, [pc, #420]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60cb      	str	r3, [r1, #12]
 8004ca2:	e018      	b.n	8004cd6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ca4:	4b67      	ldr	r3, [pc, #412]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a66      	ldr	r2, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fd fc68 	bl	8002584 <HAL_GetTick>
 8004cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cb8:	f7fd fc64 	bl	8002584 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e23c      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cca:	4b5e      	ldr	r3, [pc, #376]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f0      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d036      	beq.n	8004d50 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d019      	beq.n	8004d1e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cea:	4b56      	ldr	r3, [pc, #344]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cee:	4a55      	ldr	r2, [pc, #340]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004cf0:	f043 0301 	orr.w	r3, r3, #1
 8004cf4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fc45 	bl	8002584 <HAL_GetTick>
 8004cfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfe:	f7fd fc41 	bl	8002584 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e219      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d10:	4b4c      	ldr	r3, [pc, #304]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x35e>
 8004d1c:	e018      	b.n	8004d50 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d1e:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d22:	4a48      	ldr	r2, [pc, #288]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2a:	f7fd fc2b 	bl	8002584 <HAL_GetTick>
 8004d2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d32:	f7fd fc27 	bl	8002584 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e1ff      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d44:	4b3f      	ldr	r3, [pc, #252]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d036      	beq.n	8004dca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d019      	beq.n	8004d98 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d64:	4b37      	ldr	r3, [pc, #220]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a36      	ldr	r2, [pc, #216]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d70:	f7fd fc08 	bl	8002584 <HAL_GetTick>
 8004d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d78:	f7fd fc04 	bl	8002584 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e1dc      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x3d8>
 8004d96:	e018      	b.n	8004dca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d98:	4b2a      	ldr	r3, [pc, #168]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a29      	ldr	r2, [pc, #164]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004d9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004da2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004da4:	f7fd fbee 	bl	8002584 <HAL_GetTick>
 8004da8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dac:	f7fd fbea 	bl	8002584 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e1c2      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dbe:	4b21      	ldr	r3, [pc, #132]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8086 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e48 <HAL_RCC_OscConfig+0x4a8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e48 <HAL_RCC_OscConfig+0x4a8>)
 8004dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004de4:	f7fd fbce 	bl	8002584 <HAL_GetTick>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dec:	f7fd fbca 	bl	8002584 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b64      	cmp	r3, #100	@ 0x64
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1a2      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dfe:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <HAL_RCC_OscConfig+0x4a8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x480>
 8004e12:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	4a0b      	ldr	r2, [pc, #44]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e1e:	e032      	b.n	8004e86 <HAL_RCC_OscConfig+0x4e6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d111      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4ac>
 8004e28:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e2c:	4a05      	ldr	r2, [pc, #20]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e34:	4b03      	ldr	r3, [pc, #12]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e38:	4a02      	ldr	r2, [pc, #8]	@ (8004e44 <HAL_RCC_OscConfig+0x4a4>)
 8004e3a:	f023 0304 	bic.w	r3, r3, #4
 8004e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e40:	e021      	b.n	8004e86 <HAL_RCC_OscConfig+0x4e6>
 8004e42:	bf00      	nop
 8004e44:	58024400 	.word	0x58024400
 8004e48:	58024800 	.word	0x58024800
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b05      	cmp	r3, #5
 8004e52:	d10c      	bne.n	8004e6e <HAL_RCC_OscConfig+0x4ce>
 8004e54:	4b83      	ldr	r3, [pc, #524]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e58:	4a82      	ldr	r2, [pc, #520]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e60:	4b80      	ldr	r3, [pc, #512]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e64:	4a7f      	ldr	r2, [pc, #508]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6c:	e00b      	b.n	8004e86 <HAL_RCC_OscConfig+0x4e6>
 8004e6e:	4b7d      	ldr	r3, [pc, #500]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e72:	4a7c      	ldr	r2, [pc, #496]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a79      	ldr	r2, [pc, #484]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004e80:	f023 0304 	bic.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d015      	beq.n	8004eba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fb79 	bl	8002584 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fd fb75 	bl	8002584 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e14b      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eac:	4b6d      	ldr	r3, [pc, #436]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ee      	beq.n	8004e96 <HAL_RCC_OscConfig+0x4f6>
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fd fb63 	bl	8002584 <HAL_GetTick>
 8004ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fd fb5f 	bl	8002584 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e135      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ed8:	4b62      	ldr	r3, [pc, #392]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ee      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 812a 	beq.w	8005142 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004eee:	4b5d      	ldr	r3, [pc, #372]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ef6:	2b18      	cmp	r3, #24
 8004ef8:	f000 80ba 	beq.w	8005070 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	f040 8095 	bne.w	8005030 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f06:	4b57      	ldr	r3, [pc, #348]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a56      	ldr	r2, [pc, #344]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fd fb37 	bl	8002584 <HAL_GetTick>
 8004f16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fd fb33 	bl	8002584 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e10b      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f38:	4b4a      	ldr	r3, [pc, #296]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005068 <HAL_RCC_OscConfig+0x6c8>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f48:	0112      	lsls	r2, r2, #4
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	4945      	ldr	r1, [pc, #276]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	3b01      	subs	r3, #1
 8004f58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f60:	3b01      	subs	r3, #1
 8004f62:	025b      	lsls	r3, r3, #9
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	041b      	lsls	r3, r3, #16
 8004f70:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f82:	4938      	ldr	r1, [pc, #224]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f88:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	4a35      	ldr	r2, [pc, #212]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f94:	4b33      	ldr	r3, [pc, #204]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f98:	4b34      	ldr	r3, [pc, #208]	@ (800506c <HAL_RCC_OscConfig+0x6cc>)
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fa0:	00d2      	lsls	r2, r2, #3
 8004fa2:	4930      	ldr	r1, [pc, #192]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	f023 020c 	bic.w	r2, r3, #12
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	492b      	ldr	r1, [pc, #172]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fba:	4b2a      	ldr	r3, [pc, #168]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	f023 0202 	bic.w	r2, r3, #2
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	4927      	ldr	r1, [pc, #156]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fcc:	4b25      	ldr	r3, [pc, #148]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	4a24      	ldr	r2, [pc, #144]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd8:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	4a21      	ldr	r2, [pc, #132]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004fee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ffc:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a18      	ldr	r2, [pc, #96]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8005002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd fabc 	bl	8002584 <HAL_GetTick>
 800500c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005010:	f7fd fab8 	bl	8002584 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e090      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005022:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x670>
 800502e:	e088      	b.n	8005142 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005030:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a0b      	ldr	r2, [pc, #44]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8005036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fd faa2 	bl	8002584 <HAL_GetTick>
 8005040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd fa9e 	bl	8002584 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e076      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005056:	4b03      	ldr	r3, [pc, #12]	@ (8005064 <HAL_RCC_OscConfig+0x6c4>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x6a4>
 8005062:	e06e      	b.n	8005142 <HAL_RCC_OscConfig+0x7a2>
 8005064:	58024400 	.word	0x58024400
 8005068:	fffffc0c 	.word	0xfffffc0c
 800506c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005070:	4b36      	ldr	r3, [pc, #216]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005076:	4b35      	ldr	r3, [pc, #212]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	2b01      	cmp	r3, #1
 8005082:	d031      	beq.n	80050e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f003 0203 	and.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d12a      	bne.n	80050e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d122      	bne.n	80050e8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d11a      	bne.n	80050e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	0a5b      	lsrs	r3, r3, #9
 80050b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d111      	bne.n	80050e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d108      	bne.n	80050e8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	0e1b      	lsrs	r3, r3, #24
 80050da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e02b      	b.n	8005144 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80050ec:	4b17      	ldr	r3, [pc, #92]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 80050ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d01f      	beq.n	8005142 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005102:	4b12      	ldr	r3, [pc, #72]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a11      	ldr	r2, [pc, #68]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800510e:	f7fd fa39 	bl	8002584 <HAL_GetTick>
 8005112:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005114:	bf00      	nop
 8005116:	f7fd fa35 	bl	8002584 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	4293      	cmp	r3, r2
 8005120:	d0f9      	beq.n	8005116 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005122:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 8005124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005126:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <HAL_RCC_OscConfig+0x7b0>)
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800512e:	00d2      	lsls	r2, r2, #3
 8005130:	4906      	ldr	r1, [pc, #24]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 8005132:	4313      	orrs	r3, r2
 8005134:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005136:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a04      	ldr	r2, [pc, #16]	@ (800514c <HAL_RCC_OscConfig+0x7ac>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3730      	adds	r7, #48	@ 0x30
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	58024400 	.word	0x58024400
 8005150:	ffff0007 	.word	0xffff0007

08005154 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e19c      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b8a      	ldr	r3, [pc, #552]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d910      	bls.n	8005198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b87      	ldr	r3, [pc, #540]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 020f 	bic.w	r2, r3, #15
 800517e:	4985      	ldr	r1, [pc, #532]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b83      	ldr	r3, [pc, #524]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e184      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d010      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	4b7b      	ldr	r3, [pc, #492]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d908      	bls.n	80051c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051b4:	4b78      	ldr	r3, [pc, #480]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	4975      	ldr	r1, [pc, #468]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d010      	beq.n	80051f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695a      	ldr	r2, [r3, #20]
 80051d6:	4b70      	ldr	r3, [pc, #448]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051de:	429a      	cmp	r2, r3
 80051e0:	d908      	bls.n	80051f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	496a      	ldr	r1, [pc, #424]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d010      	beq.n	8005222 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	4b64      	ldr	r3, [pc, #400]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800520c:	429a      	cmp	r2, r3
 800520e:	d908      	bls.n	8005222 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005210:	4b61      	ldr	r3, [pc, #388]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	495e      	ldr	r1, [pc, #376]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 800521e:	4313      	orrs	r3, r2
 8005220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	4b59      	ldr	r3, [pc, #356]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800523a:	429a      	cmp	r2, r3
 800523c:	d908      	bls.n	8005250 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800523e:	4b56      	ldr	r3, [pc, #344]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4953      	ldr	r1, [pc, #332]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 800524c:	4313      	orrs	r3, r2
 800524e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d010      	beq.n	800527e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	4b4d      	ldr	r3, [pc, #308]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	429a      	cmp	r2, r3
 800526a:	d908      	bls.n	800527e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800526c:	4b4a      	ldr	r3, [pc, #296]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f023 020f 	bic.w	r2, r3, #15
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4947      	ldr	r1, [pc, #284]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 800527a:	4313      	orrs	r3, r2
 800527c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d055      	beq.n	8005336 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800528a:	4b43      	ldr	r3, [pc, #268]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	4940      	ldr	r1, [pc, #256]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005298:	4313      	orrs	r3, r2
 800529a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d121      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0f6      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d107      	bne.n	80052cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052bc:	4b36      	ldr	r3, [pc, #216]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d115      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e0ea      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052d4:	4b30      	ldr	r3, [pc, #192]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0de      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0d6      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052f4:	4b28      	ldr	r3, [pc, #160]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	f023 0207 	bic.w	r2, r3, #7
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4925      	ldr	r1, [pc, #148]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005306:	f7fd f93d 	bl	8002584 <HAL_GetTick>
 800530a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530c:	e00a      	b.n	8005324 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530e:	f7fd f939 	bl	8002584 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531c:	4293      	cmp	r3, r2
 800531e:	d901      	bls.n	8005324 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e0be      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005324:	4b1c      	ldr	r3, [pc, #112]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	429a      	cmp	r2, r3
 8005334:	d1eb      	bne.n	800530e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d010      	beq.n	8005364 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	4b14      	ldr	r3, [pc, #80]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	429a      	cmp	r2, r3
 8005350:	d208      	bcs.n	8005364 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005352:	4b11      	ldr	r3, [pc, #68]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f023 020f 	bic.w	r2, r3, #15
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	490e      	ldr	r1, [pc, #56]	@ (8005398 <HAL_RCC_ClockConfig+0x244>)
 8005360:	4313      	orrs	r3, r2
 8005362:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005364:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 030f 	and.w	r3, r3, #15
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d214      	bcs.n	800539c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b08      	ldr	r3, [pc, #32]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 020f 	bic.w	r2, r3, #15
 800537a:	4906      	ldr	r1, [pc, #24]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	4313      	orrs	r3, r2
 8005380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <HAL_RCC_ClockConfig+0x240>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d005      	beq.n	800539c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e086      	b.n	80054a2 <HAL_RCC_ClockConfig+0x34e>
 8005394:	52002000 	.word	0x52002000
 8005398:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	4b3f      	ldr	r3, [pc, #252]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d208      	bcs.n	80053ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053b8:	4b3c      	ldr	r3, [pc, #240]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	4939      	ldr	r1, [pc, #228]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d010      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	4b34      	ldr	r3, [pc, #208]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d208      	bcs.n	80053f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80053e6:	4b31      	ldr	r3, [pc, #196]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	492e      	ldr	r1, [pc, #184]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d010      	beq.n	8005426 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	4b28      	ldr	r3, [pc, #160]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005410:	429a      	cmp	r2, r3
 8005412:	d208      	bcs.n	8005426 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005414:	4b25      	ldr	r3, [pc, #148]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	4922      	ldr	r1, [pc, #136]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 8005422:	4313      	orrs	r3, r2
 8005424:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d010      	beq.n	8005454 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69da      	ldr	r2, [r3, #28]
 8005436:	4b1d      	ldr	r3, [pc, #116]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800543e:	429a      	cmp	r2, r3
 8005440:	d208      	bcs.n	8005454 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005442:	4b1a      	ldr	r3, [pc, #104]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4917      	ldr	r1, [pc, #92]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 8005450:	4313      	orrs	r3, r2
 8005452:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005454:	f000 f834 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	4912      	ldr	r1, [pc, #72]	@ (80054b0 <HAL_RCC_ClockConfig+0x35c>)
 8005466:	5ccb      	ldrb	r3, [r1, r3]
 8005468:	f003 031f 	and.w	r3, r3, #31
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
 8005470:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005472:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <HAL_RCC_ClockConfig+0x358>)
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	4a0d      	ldr	r2, [pc, #52]	@ (80054b0 <HAL_RCC_ClockConfig+0x35c>)
 800547c:	5cd3      	ldrb	r3, [r2, r3]
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
 8005488:	4a0a      	ldr	r2, [pc, #40]	@ (80054b4 <HAL_RCC_ClockConfig+0x360>)
 800548a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800548c:	4a0a      	ldr	r2, [pc, #40]	@ (80054b8 <HAL_RCC_ClockConfig+0x364>)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005492:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <HAL_RCC_ClockConfig+0x368>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fca2 	bl	8001de0 <HAL_InitTick>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	58024400 	.word	0x58024400
 80054b0:	08023a4c 	.word	0x08023a4c
 80054b4:	20000024 	.word	0x20000024
 80054b8:	20000020 	.word	0x20000020
 80054bc:	20000028 	.word	0x20000028

080054c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b089      	sub	sp, #36	@ 0x24
 80054c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054c6:	4bb3      	ldr	r3, [pc, #716]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ce:	2b18      	cmp	r3, #24
 80054d0:	f200 8155 	bhi.w	800577e <HAL_RCC_GetSysClockFreq+0x2be>
 80054d4:	a201      	add	r2, pc, #4	@ (adr r2, 80054dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80054d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054da:	bf00      	nop
 80054dc:	08005541 	.word	0x08005541
 80054e0:	0800577f 	.word	0x0800577f
 80054e4:	0800577f 	.word	0x0800577f
 80054e8:	0800577f 	.word	0x0800577f
 80054ec:	0800577f 	.word	0x0800577f
 80054f0:	0800577f 	.word	0x0800577f
 80054f4:	0800577f 	.word	0x0800577f
 80054f8:	0800577f 	.word	0x0800577f
 80054fc:	08005567 	.word	0x08005567
 8005500:	0800577f 	.word	0x0800577f
 8005504:	0800577f 	.word	0x0800577f
 8005508:	0800577f 	.word	0x0800577f
 800550c:	0800577f 	.word	0x0800577f
 8005510:	0800577f 	.word	0x0800577f
 8005514:	0800577f 	.word	0x0800577f
 8005518:	0800577f 	.word	0x0800577f
 800551c:	0800556d 	.word	0x0800556d
 8005520:	0800577f 	.word	0x0800577f
 8005524:	0800577f 	.word	0x0800577f
 8005528:	0800577f 	.word	0x0800577f
 800552c:	0800577f 	.word	0x0800577f
 8005530:	0800577f 	.word	0x0800577f
 8005534:	0800577f 	.word	0x0800577f
 8005538:	0800577f 	.word	0x0800577f
 800553c:	08005573 	.word	0x08005573
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005540:	4b94      	ldr	r3, [pc, #592]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d009      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800554c:	4b91      	ldr	r3, [pc, #580]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	08db      	lsrs	r3, r3, #3
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	4a90      	ldr	r2, [pc, #576]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800555e:	e111      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005560:	4b8d      	ldr	r3, [pc, #564]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005562:	61bb      	str	r3, [r7, #24]
      break;
 8005564:	e10e      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005566:	4b8d      	ldr	r3, [pc, #564]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005568:	61bb      	str	r3, [r7, #24]
      break;
 800556a:	e10b      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800556c:	4b8c      	ldr	r3, [pc, #560]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800556e:	61bb      	str	r3, [r7, #24]
      break;
 8005570:	e108      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005572:	4b88      	ldr	r3, [pc, #544]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800557c:	4b85      	ldr	r3, [pc, #532]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005586:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005588:	4b82      	ldr	r3, [pc, #520]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005592:	4b80      	ldr	r3, [pc, #512]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005596:	08db      	lsrs	r3, r3, #3
 8005598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80e1 	beq.w	8005778 <HAL_RCC_GetSysClockFreq+0x2b8>
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	f000 8083 	beq.w	80056c4 <HAL_RCC_GetSysClockFreq+0x204>
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	f200 80a1 	bhi.w	8005708 <HAL_RCC_GetSysClockFreq+0x248>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x114>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d056      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055d2:	e099      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02d      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560a:	4b62      	ldr	r3, [pc, #392]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a02 	vldr	s12, [r7, #8]
 800561e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800563a:	e087      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80057a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564e:	4b51      	ldr	r3, [pc, #324]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005662:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800567e:	e065      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80057ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005692:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80056a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056c2:	e043      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80057b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005706:	e021      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80057ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571a:	4b1e      	ldr	r3, [pc, #120]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a02 	vldr	s12, [r7, #8]
 800572e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80057a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800574a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800574c:	4b11      	ldr	r3, [pc, #68]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005750:	0a5b      	lsrs	r3, r3, #9
 8005752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005756:	3301      	adds	r3, #1
 8005758:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005764:	edd7 6a07 	vldr	s13, [r7, #28]
 8005768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005770:	ee17 3a90 	vmov	r3, s15
 8005774:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005776:	e005      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	61bb      	str	r3, [r7, #24]
      break;
 800577c:	e002      	b.n	8005784 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800577e:	4b07      	ldr	r3, [pc, #28]	@ (800579c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005780:	61bb      	str	r3, [r7, #24]
      break;
 8005782:	bf00      	nop
  }

  return sysclockfreq;
 8005784:	69bb      	ldr	r3, [r7, #24]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3724      	adds	r7, #36	@ 0x24
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	58024400 	.word	0x58024400
 8005798:	03d09000 	.word	0x03d09000
 800579c:	003d0900 	.word	0x003d0900
 80057a0:	007a1200 	.word	0x007a1200
 80057a4:	46000000 	.word	0x46000000
 80057a8:	4c742400 	.word	0x4c742400
 80057ac:	4a742400 	.word	0x4a742400
 80057b0:	4af42400 	.word	0x4af42400

080057b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057ba:	f7ff fe81 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 80057be:	4602      	mov	r2, r0
 80057c0:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <HAL_RCC_GetHCLKFreq+0x50>)
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	0a1b      	lsrs	r3, r3, #8
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	490f      	ldr	r1, [pc, #60]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x54>)
 80057cc:	5ccb      	ldrb	r3, [r1, r3]
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	fa22 f303 	lsr.w	r3, r2, r3
 80057d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <HAL_RCC_GetHCLKFreq+0x50>)
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f003 030f 	and.w	r3, r3, #15
 80057e0:	4a09      	ldr	r2, [pc, #36]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x54>)
 80057e2:	5cd3      	ldrb	r3, [r2, r3]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	fa22 f303 	lsr.w	r3, r2, r3
 80057ee:	4a07      	ldr	r2, [pc, #28]	@ (800580c <HAL_RCC_GetHCLKFreq+0x58>)
 80057f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80057f2:	4a07      	ldr	r2, [pc, #28]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x5c>)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80057f8:	4b04      	ldr	r3, [pc, #16]	@ (800580c <HAL_RCC_GetHCLKFreq+0x58>)
 80057fa:	681b      	ldr	r3, [r3, #0]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	58024400 	.word	0x58024400
 8005808:	08023a4c 	.word	0x08023a4c
 800580c:	20000024 	.word	0x20000024
 8005810:	20000020 	.word	0x20000020

08005814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005818:	f7ff ffcc 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4904      	ldr	r1, [pc, #16]	@ (800583c <HAL_RCC_GetPCLK1Freq+0x28>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	58024400 	.word	0x58024400
 800583c:	08023a4c 	.word	0x08023a4c

08005840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005844:	f7ff ffb6 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 8005848:	4602      	mov	r2, r0
 800584a:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	4904      	ldr	r1, [pc, #16]	@ (8005868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005856:	5ccb      	ldrb	r3, [r1, r3]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	58024400 	.word	0x58024400
 8005868:	08023a4c 	.word	0x08023a4c

0800586c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	223f      	movs	r2, #63	@ 0x3f
 800587a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800587c:	4b1a      	ldr	r3, [pc, #104]	@ (80058e8 <HAL_RCC_GetClockConfig+0x7c>)
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0207 	and.w	r2, r3, #7
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005888:	4b17      	ldr	r3, [pc, #92]	@ (80058e8 <HAL_RCC_GetClockConfig+0x7c>)
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005894:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <HAL_RCC_GetClockConfig+0x7c>)
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	f003 020f 	and.w	r2, r3, #15
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80058a0:	4b11      	ldr	r3, [pc, #68]	@ (80058e8 <HAL_RCC_GetClockConfig+0x7c>)
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80058ac:	4b0e      	ldr	r3, [pc, #56]	@ (80058e8 <HAL_RCC_GetClockConfig+0x7c>)
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80058b8:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <HAL_RCC_GetClockConfig+0x7c>)
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80058c4:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <HAL_RCC_GetClockConfig+0x7c>)
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058d0:	4b06      	ldr	r3, [pc, #24]	@ (80058ec <HAL_RCC_GetClockConfig+0x80>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 020f 	and.w	r2, r3, #15
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	601a      	str	r2, [r3, #0]
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	58024400 	.word	0x58024400
 80058ec:	52002000 	.word	0x52002000

080058f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80058f4:	f7ff ff5e 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	4904      	ldr	r1, [pc, #16]	@ (8005918 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd80      	pop	{r7, pc}
 8005914:	58024400 	.word	0x58024400
 8005918:	08023a4c 	.word	0x08023a4c

0800591c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800591c:	b480      	push	{r7}
 800591e:	b089      	sub	sp, #36	@ 0x24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005924:	4ba1      	ldr	r3, [pc, #644]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	f003 0303 	and.w	r3, r3, #3
 800592c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800592e:	4b9f      	ldr	r3, [pc, #636]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005932:	0b1b      	lsrs	r3, r3, #12
 8005934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005938:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800593a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	091b      	lsrs	r3, r3, #4
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005946:	4b99      	ldr	r3, [pc, #612]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	fb02 f303 	mul.w	r3, r2, r3
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8111 	beq.w	8005b8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b02      	cmp	r3, #2
 800596e:	f000 8083 	beq.w	8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b02      	cmp	r3, #2
 8005976:	f200 80a1 	bhi.w	8005abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d056      	beq.n	8005a34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005986:	e099      	b.n	8005abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005988:	4b88      	ldr	r3, [pc, #544]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d02d      	beq.n	80059f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005994:	4b85      	ldr	r3, [pc, #532]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	4a84      	ldr	r2, [pc, #528]	@ (8005bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	ee07 3a90 	vmov	s15, r3
 80059ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059be:	4b7b      	ldr	r3, [pc, #492]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c6:	ee07 3a90 	vmov	s15, r3
 80059ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059ee:	e087      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b6a      	ldr	r3, [pc, #424]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a32:	e065      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b59      	ldr	r3, [pc, #356]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a76:	e043      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b48      	ldr	r3, [pc, #288]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aba:	e021      	b.n	8005b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b37      	ldr	r3, [pc, #220]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005afe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005b00:	4b2a      	ldr	r3, [pc, #168]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b04:	0a5b      	lsrs	r3, r3, #9
 8005b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b26:	ee17 2a90 	vmov	r2, s15
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b38:	ee07 3a90 	vmov	s15, r3
 8005b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b54:	ee17 2a90 	vmov	r2, s15
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005b5c:	4b13      	ldr	r3, [pc, #76]	@ (8005bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b60:	0e1b      	lsrs	r3, r3, #24
 8005b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b82:	ee17 2a90 	vmov	r2, s15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005b8a:	e008      	b.n	8005b9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	609a      	str	r2, [r3, #8]
}
 8005b9e:	bf00      	nop
 8005ba0:	3724      	adds	r7, #36	@ 0x24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	03d09000 	.word	0x03d09000
 8005bb4:	46000000 	.word	0x46000000
 8005bb8:	4c742400 	.word	0x4c742400
 8005bbc:	4a742400 	.word	0x4a742400
 8005bc0:	4af42400 	.word	0x4af42400

08005bc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b089      	sub	sp, #36	@ 0x24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bda:	0d1b      	lsrs	r3, r3, #20
 8005bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005be2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005bee:	4b99      	ldr	r3, [pc, #612]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	08db      	lsrs	r3, r3, #3
 8005bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8111 	beq.w	8005e34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	f000 8083 	beq.w	8005d20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	f200 80a1 	bhi.w	8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d056      	beq.n	8005cdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005c2e:	e099      	b.n	8005d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c30:	4b88      	ldr	r3, [pc, #544]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d02d      	beq.n	8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c3c:	4b85      	ldr	r3, [pc, #532]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	08db      	lsrs	r3, r3, #3
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	4a84      	ldr	r2, [pc, #528]	@ (8005e58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005c48:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c66:	4b7b      	ldr	r3, [pc, #492]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c96:	e087      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005caa:	4b6a      	ldr	r3, [pc, #424]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cda:	e065      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cee:	4b59      	ldr	r3, [pc, #356]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1e:	e043      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d32:	4b48      	ldr	r3, [pc, #288]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d62:	e021      	b.n	8005da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d76:	4b37      	ldr	r3, [pc, #220]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005da8:	4b2a      	ldr	r3, [pc, #168]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	0a5b      	lsrs	r3, r3, #9
 8005dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dce:	ee17 2a90 	vmov	r2, s15
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfc:	ee17 2a90 	vmov	r2, s15
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005e04:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	0e1b      	lsrs	r3, r3, #24
 8005e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e2a:	ee17 2a90 	vmov	r2, s15
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005e32:	e008      	b.n	8005e46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]
}
 8005e46:	bf00      	nop
 8005e48:	3724      	adds	r7, #36	@ 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	58024400 	.word	0x58024400
 8005e58:	03d09000 	.word	0x03d09000
 8005e5c:	46000000 	.word	0x46000000
 8005e60:	4c742400 	.word	0x4c742400
 8005e64:	4a742400 	.word	0x4a742400
 8005e68:	4af42400 	.word	0x4af42400

08005e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e049      	b.n	8005f12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d106      	bne.n	8005e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f841 	bl	8005f1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f000 f9f6 	bl	800629c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d001      	beq.n	8005f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e05e      	b.n	8006006 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2b      	ldr	r2, [pc, #172]	@ (8006014 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02c      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f72:	d027      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a27      	ldr	r2, [pc, #156]	@ (8006018 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d022      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a26      	ldr	r2, [pc, #152]	@ (800601c <HAL_TIM_Base_Start_IT+0xec>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01d      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a24      	ldr	r2, [pc, #144]	@ (8006020 <HAL_TIM_Base_Start_IT+0xf0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a23      	ldr	r2, [pc, #140]	@ (8006024 <HAL_TIM_Base_Start_IT+0xf4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a21      	ldr	r2, [pc, #132]	@ (8006028 <HAL_TIM_Base_Start_IT+0xf8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a20      	ldr	r2, [pc, #128]	@ (800602c <HAL_TIM_Base_Start_IT+0xfc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8006030 <HAL_TIM_Base_Start_IT+0x100>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_TIM_Base_Start_IT+0x94>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1d      	ldr	r2, [pc, #116]	@ (8006034 <HAL_TIM_Base_Start_IT+0x104>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d115      	bne.n	8005ff0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	4b1b      	ldr	r3, [pc, #108]	@ (8006038 <HAL_TIM_Base_Start_IT+0x108>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b06      	cmp	r3, #6
 8005fd4:	d015      	beq.n	8006002 <HAL_TIM_Base_Start_IT+0xd2>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fdc:	d011      	beq.n	8006002 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0201 	orr.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fee:	e008      	b.n	8006002 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e000      	b.n	8006004 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006002:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40010000 	.word	0x40010000
 8006018:	40000400 	.word	0x40000400
 800601c:	40000800 	.word	0x40000800
 8006020:	40000c00 	.word	0x40000c00
 8006024:	40010400 	.word	0x40010400
 8006028:	40001800 	.word	0x40001800
 800602c:	40014000 	.word	0x40014000
 8006030:	4000e000 	.word	0x4000e000
 8006034:	4000e400 	.word	0x4000e400
 8006038:	00010007 	.word	0x00010007

0800603c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0202 	mvn.w	r2, #2
 8006070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8e9 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8db 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8ec 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0204 	mvn.w	r2, #4
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8c3 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8b5 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8c6 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d020      	beq.n	8006138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01b      	beq.n	8006138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0208 	mvn.w	r2, #8
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2204      	movs	r2, #4
 800610e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f89d 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f88f 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8a0 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d020      	beq.n	8006184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0210 	mvn.w	r2, #16
 8006154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2208      	movs	r2, #8
 800615a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f877 	bl	800625e <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f869 	bl	800624a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f87a 	bl	8006272 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0201 	mvn.w	r2, #1
 80061a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fb fe88 	bl	8001eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00c      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f91f 	bl	8006414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00c      	beq.n	80061fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f917 	bl	8006428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00c      	beq.n	800621e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f834 	bl	8006286 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00c      	beq.n	8006242 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f06f 0220 	mvn.w	r2, #32
 800623a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f8df 	bl	8006400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006242:	bf00      	nop
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800624a:	b480      	push	{r7}
 800624c:	b083      	sub	sp, #12
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a4a      	ldr	r2, [pc, #296]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ba:	d00f      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a47      	ldr	r2, [pc, #284]	@ (80063dc <TIM_Base_SetConfig+0x140>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00b      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a46      	ldr	r2, [pc, #280]	@ (80063e0 <TIM_Base_SetConfig+0x144>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a45      	ldr	r2, [pc, #276]	@ (80063e4 <TIM_Base_SetConfig+0x148>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a44      	ldr	r2, [pc, #272]	@ (80063e8 <TIM_Base_SetConfig+0x14c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a39      	ldr	r2, [pc, #228]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d027      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fc:	d023      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a36      	ldr	r2, [pc, #216]	@ (80063dc <TIM_Base_SetConfig+0x140>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01f      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a35      	ldr	r2, [pc, #212]	@ (80063e0 <TIM_Base_SetConfig+0x144>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d01b      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a34      	ldr	r2, [pc, #208]	@ (80063e4 <TIM_Base_SetConfig+0x148>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d017      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a33      	ldr	r2, [pc, #204]	@ (80063e8 <TIM_Base_SetConfig+0x14c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a32      	ldr	r2, [pc, #200]	@ (80063ec <TIM_Base_SetConfig+0x150>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d00f      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a31      	ldr	r2, [pc, #196]	@ (80063f0 <TIM_Base_SetConfig+0x154>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00b      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a30      	ldr	r2, [pc, #192]	@ (80063f4 <TIM_Base_SetConfig+0x158>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2f      	ldr	r2, [pc, #188]	@ (80063f8 <TIM_Base_SetConfig+0x15c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_Base_SetConfig+0xaa>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a2e      	ldr	r2, [pc, #184]	@ (80063fc <TIM_Base_SetConfig+0x160>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d108      	bne.n	8006358 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800634c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00f      	beq.n	80063a4 <TIM_Base_SetConfig+0x108>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a18      	ldr	r2, [pc, #96]	@ (80063e8 <TIM_Base_SetConfig+0x14c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00b      	beq.n	80063a4 <TIM_Base_SetConfig+0x108>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a17      	ldr	r2, [pc, #92]	@ (80063ec <TIM_Base_SetConfig+0x150>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d007      	beq.n	80063a4 <TIM_Base_SetConfig+0x108>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a16      	ldr	r2, [pc, #88]	@ (80063f0 <TIM_Base_SetConfig+0x154>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_Base_SetConfig+0x108>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a15      	ldr	r2, [pc, #84]	@ (80063f4 <TIM_Base_SetConfig+0x158>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d103      	bne.n	80063ac <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d105      	bne.n	80063ca <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	611a      	str	r2, [r3, #16]
  }
}
 80063ca:	bf00      	nop
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40000400 	.word	0x40000400
 80063e0:	40000800 	.word	0x40000800
 80063e4:	40000c00 	.word	0x40000c00
 80063e8:	40010400 	.word	0x40010400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	4000e000 	.word	0x4000e000
 80063fc:	4000e400 	.word	0x4000e400

08006400 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e042      	b.n	80064d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f83b 	bl	80064dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2224      	movs	r2, #36	@ 0x24
 800646a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 ff2c 	bl	80072e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f8bd 	bl	800660c <UART_SetConfig>
 8006492:	4603      	mov	r3, r0
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e01b      	b.n	80064d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 ffab 	bl	8007428 <UART_CheckIdleState>
 80064d2:	4603      	mov	r3, r0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	@ 0x28
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006506:	2b20      	cmp	r3, #32
 8006508:	d17b      	bne.n	8006602 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_UART_Transmit+0x26>
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e074      	b.n	8006604 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2221      	movs	r2, #33	@ 0x21
 8006526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800652a:	f7fc f82b 	bl	8002584 <HAL_GetTick>
 800652e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006548:	d108      	bne.n	800655c <HAL_UART_Transmit+0x6c>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d104      	bne.n	800655c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e003      	b.n	8006564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006564:	e030      	b.n	80065c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2200      	movs	r2, #0
 800656e:	2180      	movs	r1, #128	@ 0x80
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f001 f803 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2220      	movs	r2, #32
 8006580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e03d      	b.n	8006604 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10b      	bne.n	80065a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800659c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	3302      	adds	r3, #2
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	e007      	b.n	80065b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3301      	adds	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1c8      	bne.n	8006566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2200      	movs	r2, #0
 80065dc:	2140      	movs	r1, #64	@ 0x40
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 ffcc 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e006      	b.n	8006604 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e000      	b.n	8006604 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800660c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006610:	b092      	sub	sp, #72	@ 0x48
 8006612:	af00      	add	r7, sp, #0
 8006614:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006616:	2300      	movs	r3, #0
 8006618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	431a      	orrs	r2, r3
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	431a      	orrs	r2, r3
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	4313      	orrs	r3, r2
 8006632:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4bbe      	ldr	r3, [pc, #760]	@ (8006934 <UART_SetConfig+0x328>)
 800663c:	4013      	ands	r3, r2
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006644:	430b      	orrs	r3, r1
 8006646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4ab3      	ldr	r2, [pc, #716]	@ (8006938 <UART_SetConfig+0x32c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006674:	4313      	orrs	r3, r2
 8006676:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	4baf      	ldr	r3, [pc, #700]	@ (800693c <UART_SetConfig+0x330>)
 8006680:	4013      	ands	r3, r2
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006688:	430b      	orrs	r3, r1
 800668a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	f023 010f 	bic.w	r1, r3, #15
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4aa6      	ldr	r2, [pc, #664]	@ (8006940 <UART_SetConfig+0x334>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d177      	bne.n	800679c <UART_SetConfig+0x190>
 80066ac:	4ba5      	ldr	r3, [pc, #660]	@ (8006944 <UART_SetConfig+0x338>)
 80066ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066b4:	2b28      	cmp	r3, #40	@ 0x28
 80066b6:	d86d      	bhi.n	8006794 <UART_SetConfig+0x188>
 80066b8:	a201      	add	r2, pc, #4	@ (adr r2, 80066c0 <UART_SetConfig+0xb4>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	08006765 	.word	0x08006765
 80066c4:	08006795 	.word	0x08006795
 80066c8:	08006795 	.word	0x08006795
 80066cc:	08006795 	.word	0x08006795
 80066d0:	08006795 	.word	0x08006795
 80066d4:	08006795 	.word	0x08006795
 80066d8:	08006795 	.word	0x08006795
 80066dc:	08006795 	.word	0x08006795
 80066e0:	0800676d 	.word	0x0800676d
 80066e4:	08006795 	.word	0x08006795
 80066e8:	08006795 	.word	0x08006795
 80066ec:	08006795 	.word	0x08006795
 80066f0:	08006795 	.word	0x08006795
 80066f4:	08006795 	.word	0x08006795
 80066f8:	08006795 	.word	0x08006795
 80066fc:	08006795 	.word	0x08006795
 8006700:	08006775 	.word	0x08006775
 8006704:	08006795 	.word	0x08006795
 8006708:	08006795 	.word	0x08006795
 800670c:	08006795 	.word	0x08006795
 8006710:	08006795 	.word	0x08006795
 8006714:	08006795 	.word	0x08006795
 8006718:	08006795 	.word	0x08006795
 800671c:	08006795 	.word	0x08006795
 8006720:	0800677d 	.word	0x0800677d
 8006724:	08006795 	.word	0x08006795
 8006728:	08006795 	.word	0x08006795
 800672c:	08006795 	.word	0x08006795
 8006730:	08006795 	.word	0x08006795
 8006734:	08006795 	.word	0x08006795
 8006738:	08006795 	.word	0x08006795
 800673c:	08006795 	.word	0x08006795
 8006740:	08006785 	.word	0x08006785
 8006744:	08006795 	.word	0x08006795
 8006748:	08006795 	.word	0x08006795
 800674c:	08006795 	.word	0x08006795
 8006750:	08006795 	.word	0x08006795
 8006754:	08006795 	.word	0x08006795
 8006758:	08006795 	.word	0x08006795
 800675c:	08006795 	.word	0x08006795
 8006760:	0800678d 	.word	0x0800678d
 8006764:	2301      	movs	r3, #1
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676a:	e326      	b.n	8006dba <UART_SetConfig+0x7ae>
 800676c:	2304      	movs	r3, #4
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006772:	e322      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006774:	2308      	movs	r3, #8
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e31e      	b.n	8006dba <UART_SetConfig+0x7ae>
 800677c:	2310      	movs	r3, #16
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e31a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006784:	2320      	movs	r3, #32
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e316      	b.n	8006dba <UART_SetConfig+0x7ae>
 800678c:	2340      	movs	r3, #64	@ 0x40
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006792:	e312      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006794:	2380      	movs	r3, #128	@ 0x80
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679a:	e30e      	b.n	8006dba <UART_SetConfig+0x7ae>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a69      	ldr	r2, [pc, #420]	@ (8006948 <UART_SetConfig+0x33c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d130      	bne.n	8006808 <UART_SetConfig+0x1fc>
 80067a6:	4b67      	ldr	r3, [pc, #412]	@ (8006944 <UART_SetConfig+0x338>)
 80067a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	2b05      	cmp	r3, #5
 80067b0:	d826      	bhi.n	8006800 <UART_SetConfig+0x1f4>
 80067b2:	a201      	add	r2, pc, #4	@ (adr r2, 80067b8 <UART_SetConfig+0x1ac>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067d1 	.word	0x080067d1
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	080067e1 	.word	0x080067e1
 80067c4:	080067e9 	.word	0x080067e9
 80067c8:	080067f1 	.word	0x080067f1
 80067cc:	080067f9 	.word	0x080067f9
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d6:	e2f0      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067d8:	2304      	movs	r3, #4
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067de:	e2ec      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067e0:	2308      	movs	r3, #8
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e2e8      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e2e4      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067f0:	2320      	movs	r3, #32
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f6:	e2e0      	b.n	8006dba <UART_SetConfig+0x7ae>
 80067f8:	2340      	movs	r3, #64	@ 0x40
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fe:	e2dc      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006800:	2380      	movs	r3, #128	@ 0x80
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006806:	e2d8      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a4f      	ldr	r2, [pc, #316]	@ (800694c <UART_SetConfig+0x340>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d130      	bne.n	8006874 <UART_SetConfig+0x268>
 8006812:	4b4c      	ldr	r3, [pc, #304]	@ (8006944 <UART_SetConfig+0x338>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b05      	cmp	r3, #5
 800681c:	d826      	bhi.n	800686c <UART_SetConfig+0x260>
 800681e:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <UART_SetConfig+0x218>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	0800683d 	.word	0x0800683d
 8006828:	08006845 	.word	0x08006845
 800682c:	0800684d 	.word	0x0800684d
 8006830:	08006855 	.word	0x08006855
 8006834:	0800685d 	.word	0x0800685d
 8006838:	08006865 	.word	0x08006865
 800683c:	2300      	movs	r3, #0
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006842:	e2ba      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684a:	e2b6      	b.n	8006dba <UART_SetConfig+0x7ae>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e2b2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e2ae      	b.n	8006dba <UART_SetConfig+0x7ae>
 800685c:	2320      	movs	r3, #32
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e2aa      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006864:	2340      	movs	r3, #64	@ 0x40
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e2a6      	b.n	8006dba <UART_SetConfig+0x7ae>
 800686c:	2380      	movs	r3, #128	@ 0x80
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e2a2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a35      	ldr	r2, [pc, #212]	@ (8006950 <UART_SetConfig+0x344>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d130      	bne.n	80068e0 <UART_SetConfig+0x2d4>
 800687e:	4b31      	ldr	r3, [pc, #196]	@ (8006944 <UART_SetConfig+0x338>)
 8006880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b05      	cmp	r3, #5
 8006888:	d826      	bhi.n	80068d8 <UART_SetConfig+0x2cc>
 800688a:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <UART_SetConfig+0x284>)
 800688c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006890:	080068a9 	.word	0x080068a9
 8006894:	080068b1 	.word	0x080068b1
 8006898:	080068b9 	.word	0x080068b9
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068c9 	.word	0x080068c9
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ae:	e284      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068b0:	2304      	movs	r3, #4
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b6:	e280      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068b8:	2308      	movs	r3, #8
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e27c      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068c0:	2310      	movs	r3, #16
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e278      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068c8:	2320      	movs	r3, #32
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e274      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068d0:	2340      	movs	r3, #64	@ 0x40
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e270      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068d8:	2380      	movs	r3, #128	@ 0x80
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e26c      	b.n	8006dba <UART_SetConfig+0x7ae>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006954 <UART_SetConfig+0x348>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d142      	bne.n	8006970 <UART_SetConfig+0x364>
 80068ea:	4b16      	ldr	r3, [pc, #88]	@ (8006944 <UART_SetConfig+0x338>)
 80068ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	2b05      	cmp	r3, #5
 80068f4:	d838      	bhi.n	8006968 <UART_SetConfig+0x35c>
 80068f6:	a201      	add	r2, pc, #4	@ (adr r2, 80068fc <UART_SetConfig+0x2f0>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006915 	.word	0x08006915
 8006900:	0800691d 	.word	0x0800691d
 8006904:	08006925 	.word	0x08006925
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006959 	.word	0x08006959
 8006910:	08006961 	.word	0x08006961
 8006914:	2300      	movs	r3, #0
 8006916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800691a:	e24e      	b.n	8006dba <UART_SetConfig+0x7ae>
 800691c:	2304      	movs	r3, #4
 800691e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006922:	e24a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006924:	2308      	movs	r3, #8
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e246      	b.n	8006dba <UART_SetConfig+0x7ae>
 800692c:	2310      	movs	r3, #16
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e242      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006934:	cfff69f3 	.word	0xcfff69f3
 8006938:	58000c00 	.word	0x58000c00
 800693c:	11fff4ff 	.word	0x11fff4ff
 8006940:	40011000 	.word	0x40011000
 8006944:	58024400 	.word	0x58024400
 8006948:	40004400 	.word	0x40004400
 800694c:	40004800 	.word	0x40004800
 8006950:	40004c00 	.word	0x40004c00
 8006954:	40005000 	.word	0x40005000
 8006958:	2320      	movs	r3, #32
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695e:	e22c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006960:	2340      	movs	r3, #64	@ 0x40
 8006962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006966:	e228      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006968:	2380      	movs	r3, #128	@ 0x80
 800696a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696e:	e224      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4ab1      	ldr	r2, [pc, #708]	@ (8006c3c <UART_SetConfig+0x630>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d176      	bne.n	8006a68 <UART_SetConfig+0x45c>
 800697a:	4bb1      	ldr	r3, [pc, #708]	@ (8006c40 <UART_SetConfig+0x634>)
 800697c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006982:	2b28      	cmp	r3, #40	@ 0x28
 8006984:	d86c      	bhi.n	8006a60 <UART_SetConfig+0x454>
 8006986:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <UART_SetConfig+0x380>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	08006a31 	.word	0x08006a31
 8006990:	08006a61 	.word	0x08006a61
 8006994:	08006a61 	.word	0x08006a61
 8006998:	08006a61 	.word	0x08006a61
 800699c:	08006a61 	.word	0x08006a61
 80069a0:	08006a61 	.word	0x08006a61
 80069a4:	08006a61 	.word	0x08006a61
 80069a8:	08006a61 	.word	0x08006a61
 80069ac:	08006a39 	.word	0x08006a39
 80069b0:	08006a61 	.word	0x08006a61
 80069b4:	08006a61 	.word	0x08006a61
 80069b8:	08006a61 	.word	0x08006a61
 80069bc:	08006a61 	.word	0x08006a61
 80069c0:	08006a61 	.word	0x08006a61
 80069c4:	08006a61 	.word	0x08006a61
 80069c8:	08006a61 	.word	0x08006a61
 80069cc:	08006a41 	.word	0x08006a41
 80069d0:	08006a61 	.word	0x08006a61
 80069d4:	08006a61 	.word	0x08006a61
 80069d8:	08006a61 	.word	0x08006a61
 80069dc:	08006a61 	.word	0x08006a61
 80069e0:	08006a61 	.word	0x08006a61
 80069e4:	08006a61 	.word	0x08006a61
 80069e8:	08006a61 	.word	0x08006a61
 80069ec:	08006a49 	.word	0x08006a49
 80069f0:	08006a61 	.word	0x08006a61
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006a61 	.word	0x08006a61
 80069fc:	08006a61 	.word	0x08006a61
 8006a00:	08006a61 	.word	0x08006a61
 8006a04:	08006a61 	.word	0x08006a61
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a51 	.word	0x08006a51
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a61 	.word	0x08006a61
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a61 	.word	0x08006a61
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a61 	.word	0x08006a61
 8006a28:	08006a61 	.word	0x08006a61
 8006a2c:	08006a59 	.word	0x08006a59
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a36:	e1c0      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a38:	2304      	movs	r3, #4
 8006a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3e:	e1bc      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a40:	2308      	movs	r3, #8
 8006a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a46:	e1b8      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4e:	e1b4      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a50:	2320      	movs	r3, #32
 8006a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a56:	e1b0      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a58:	2340      	movs	r3, #64	@ 0x40
 8006a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5e:	e1ac      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a60:	2380      	movs	r3, #128	@ 0x80
 8006a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a66:	e1a8      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a75      	ldr	r2, [pc, #468]	@ (8006c44 <UART_SetConfig+0x638>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d130      	bne.n	8006ad4 <UART_SetConfig+0x4c8>
 8006a72:	4b73      	ldr	r3, [pc, #460]	@ (8006c40 <UART_SetConfig+0x634>)
 8006a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d826      	bhi.n	8006acc <UART_SetConfig+0x4c0>
 8006a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a84 <UART_SetConfig+0x478>)
 8006a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a84:	08006a9d 	.word	0x08006a9d
 8006a88:	08006aa5 	.word	0x08006aa5
 8006a8c:	08006aad 	.word	0x08006aad
 8006a90:	08006ab5 	.word	0x08006ab5
 8006a94:	08006abd 	.word	0x08006abd
 8006a98:	08006ac5 	.word	0x08006ac5
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa2:	e18a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aaa:	e186      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ab2:	e182      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aba:	e17e      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006abc:	2320      	movs	r3, #32
 8006abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac2:	e17a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006ac4:	2340      	movs	r3, #64	@ 0x40
 8006ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aca:	e176      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006acc:	2380      	movs	r3, #128	@ 0x80
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e172      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a5b      	ldr	r2, [pc, #364]	@ (8006c48 <UART_SetConfig+0x63c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d130      	bne.n	8006b40 <UART_SetConfig+0x534>
 8006ade:	4b58      	ldr	r3, [pc, #352]	@ (8006c40 <UART_SetConfig+0x634>)
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d826      	bhi.n	8006b38 <UART_SetConfig+0x52c>
 8006aea:	a201      	add	r2, pc, #4	@ (adr r2, 8006af0 <UART_SetConfig+0x4e4>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b09 	.word	0x08006b09
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0e:	e154      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b16:	e150      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1e:	e14c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b26:	e148      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b28:	2320      	movs	r3, #32
 8006b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2e:	e144      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b30:	2340      	movs	r3, #64	@ 0x40
 8006b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b36:	e140      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b38:	2380      	movs	r3, #128	@ 0x80
 8006b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3e:	e13c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a41      	ldr	r2, [pc, #260]	@ (8006c4c <UART_SetConfig+0x640>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	f040 8082 	bne.w	8006c50 <UART_SetConfig+0x644>
 8006b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8006c40 <UART_SetConfig+0x634>)
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b54:	2b28      	cmp	r3, #40	@ 0x28
 8006b56:	d86d      	bhi.n	8006c34 <UART_SetConfig+0x628>
 8006b58:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <UART_SetConfig+0x554>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006c05 	.word	0x08006c05
 8006b64:	08006c35 	.word	0x08006c35
 8006b68:	08006c35 	.word	0x08006c35
 8006b6c:	08006c35 	.word	0x08006c35
 8006b70:	08006c35 	.word	0x08006c35
 8006b74:	08006c35 	.word	0x08006c35
 8006b78:	08006c35 	.word	0x08006c35
 8006b7c:	08006c35 	.word	0x08006c35
 8006b80:	08006c0d 	.word	0x08006c0d
 8006b84:	08006c35 	.word	0x08006c35
 8006b88:	08006c35 	.word	0x08006c35
 8006b8c:	08006c35 	.word	0x08006c35
 8006b90:	08006c35 	.word	0x08006c35
 8006b94:	08006c35 	.word	0x08006c35
 8006b98:	08006c35 	.word	0x08006c35
 8006b9c:	08006c35 	.word	0x08006c35
 8006ba0:	08006c15 	.word	0x08006c15
 8006ba4:	08006c35 	.word	0x08006c35
 8006ba8:	08006c35 	.word	0x08006c35
 8006bac:	08006c35 	.word	0x08006c35
 8006bb0:	08006c35 	.word	0x08006c35
 8006bb4:	08006c35 	.word	0x08006c35
 8006bb8:	08006c35 	.word	0x08006c35
 8006bbc:	08006c35 	.word	0x08006c35
 8006bc0:	08006c1d 	.word	0x08006c1d
 8006bc4:	08006c35 	.word	0x08006c35
 8006bc8:	08006c35 	.word	0x08006c35
 8006bcc:	08006c35 	.word	0x08006c35
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006c35 	.word	0x08006c35
 8006bd8:	08006c35 	.word	0x08006c35
 8006bdc:	08006c35 	.word	0x08006c35
 8006be0:	08006c25 	.word	0x08006c25
 8006be4:	08006c35 	.word	0x08006c35
 8006be8:	08006c35 	.word	0x08006c35
 8006bec:	08006c35 	.word	0x08006c35
 8006bf0:	08006c35 	.word	0x08006c35
 8006bf4:	08006c35 	.word	0x08006c35
 8006bf8:	08006c35 	.word	0x08006c35
 8006bfc:	08006c35 	.word	0x08006c35
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0a:	e0d6      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c0c:	2304      	movs	r3, #4
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c12:	e0d2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c14:	2308      	movs	r3, #8
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1a:	e0ce      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c22:	e0ca      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c24:	2320      	movs	r3, #32
 8006c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2a:	e0c6      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c2c:	2340      	movs	r3, #64	@ 0x40
 8006c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c32:	e0c2      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c34:	2380      	movs	r3, #128	@ 0x80
 8006c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3a:	e0be      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006c3c:	40011400 	.word	0x40011400
 8006c40:	58024400 	.word	0x58024400
 8006c44:	40007800 	.word	0x40007800
 8006c48:	40007c00 	.word	0x40007c00
 8006c4c:	40011800 	.word	0x40011800
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4aad      	ldr	r2, [pc, #692]	@ (8006f0c <UART_SetConfig+0x900>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d176      	bne.n	8006d48 <UART_SetConfig+0x73c>
 8006c5a:	4bad      	ldr	r3, [pc, #692]	@ (8006f10 <UART_SetConfig+0x904>)
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c62:	2b28      	cmp	r3, #40	@ 0x28
 8006c64:	d86c      	bhi.n	8006d40 <UART_SetConfig+0x734>
 8006c66:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <UART_SetConfig+0x660>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006d11 	.word	0x08006d11
 8006c70:	08006d41 	.word	0x08006d41
 8006c74:	08006d41 	.word	0x08006d41
 8006c78:	08006d41 	.word	0x08006d41
 8006c7c:	08006d41 	.word	0x08006d41
 8006c80:	08006d41 	.word	0x08006d41
 8006c84:	08006d41 	.word	0x08006d41
 8006c88:	08006d41 	.word	0x08006d41
 8006c8c:	08006d19 	.word	0x08006d19
 8006c90:	08006d41 	.word	0x08006d41
 8006c94:	08006d41 	.word	0x08006d41
 8006c98:	08006d41 	.word	0x08006d41
 8006c9c:	08006d41 	.word	0x08006d41
 8006ca0:	08006d41 	.word	0x08006d41
 8006ca4:	08006d41 	.word	0x08006d41
 8006ca8:	08006d41 	.word	0x08006d41
 8006cac:	08006d21 	.word	0x08006d21
 8006cb0:	08006d41 	.word	0x08006d41
 8006cb4:	08006d41 	.word	0x08006d41
 8006cb8:	08006d41 	.word	0x08006d41
 8006cbc:	08006d41 	.word	0x08006d41
 8006cc0:	08006d41 	.word	0x08006d41
 8006cc4:	08006d41 	.word	0x08006d41
 8006cc8:	08006d41 	.word	0x08006d41
 8006ccc:	08006d29 	.word	0x08006d29
 8006cd0:	08006d41 	.word	0x08006d41
 8006cd4:	08006d41 	.word	0x08006d41
 8006cd8:	08006d41 	.word	0x08006d41
 8006cdc:	08006d41 	.word	0x08006d41
 8006ce0:	08006d41 	.word	0x08006d41
 8006ce4:	08006d41 	.word	0x08006d41
 8006ce8:	08006d41 	.word	0x08006d41
 8006cec:	08006d31 	.word	0x08006d31
 8006cf0:	08006d41 	.word	0x08006d41
 8006cf4:	08006d41 	.word	0x08006d41
 8006cf8:	08006d41 	.word	0x08006d41
 8006cfc:	08006d41 	.word	0x08006d41
 8006d00:	08006d41 	.word	0x08006d41
 8006d04:	08006d41 	.word	0x08006d41
 8006d08:	08006d41 	.word	0x08006d41
 8006d0c:	08006d39 	.word	0x08006d39
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e050      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d18:	2304      	movs	r3, #4
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e04c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d20:	2308      	movs	r3, #8
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d26:	e048      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d28:	2310      	movs	r3, #16
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2e:	e044      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d30:	2320      	movs	r3, #32
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d36:	e040      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d38:	2340      	movs	r3, #64	@ 0x40
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3e:	e03c      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d40:	2380      	movs	r3, #128	@ 0x80
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d46:	e038      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a71      	ldr	r2, [pc, #452]	@ (8006f14 <UART_SetConfig+0x908>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d130      	bne.n	8006db4 <UART_SetConfig+0x7a8>
 8006d52:	4b6f      	ldr	r3, [pc, #444]	@ (8006f10 <UART_SetConfig+0x904>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	d826      	bhi.n	8006dac <UART_SetConfig+0x7a0>
 8006d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d64 <UART_SetConfig+0x758>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d7d 	.word	0x08006d7d
 8006d68:	08006d85 	.word	0x08006d85
 8006d6c:	08006d8d 	.word	0x08006d8d
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e01a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d84:	2304      	movs	r3, #4
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e016      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d8c:	2308      	movs	r3, #8
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e012      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d94:	2310      	movs	r3, #16
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e00e      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006d9c:	2320      	movs	r3, #32
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e00a      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006da4:	2340      	movs	r3, #64	@ 0x40
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e006      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006dac:	2380      	movs	r3, #128	@ 0x80
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db2:	e002      	b.n	8006dba <UART_SetConfig+0x7ae>
 8006db4:	2380      	movs	r3, #128	@ 0x80
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a55      	ldr	r2, [pc, #340]	@ (8006f14 <UART_SetConfig+0x908>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	f040 80f8 	bne.w	8006fb6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	dc46      	bgt.n	8006e5c <UART_SetConfig+0x850>
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	db75      	blt.n	8006ebe <UART_SetConfig+0x8b2>
 8006dd2:	3b02      	subs	r3, #2
 8006dd4:	2b1e      	cmp	r3, #30
 8006dd6:	d872      	bhi.n	8006ebe <UART_SetConfig+0x8b2>
 8006dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8006de0 <UART_SetConfig+0x7d4>)
 8006dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dde:	bf00      	nop
 8006de0:	08006e63 	.word	0x08006e63
 8006de4:	08006ebf 	.word	0x08006ebf
 8006de8:	08006e6b 	.word	0x08006e6b
 8006dec:	08006ebf 	.word	0x08006ebf
 8006df0:	08006ebf 	.word	0x08006ebf
 8006df4:	08006ebf 	.word	0x08006ebf
 8006df8:	08006e7b 	.word	0x08006e7b
 8006dfc:	08006ebf 	.word	0x08006ebf
 8006e00:	08006ebf 	.word	0x08006ebf
 8006e04:	08006ebf 	.word	0x08006ebf
 8006e08:	08006ebf 	.word	0x08006ebf
 8006e0c:	08006ebf 	.word	0x08006ebf
 8006e10:	08006ebf 	.word	0x08006ebf
 8006e14:	08006ebf 	.word	0x08006ebf
 8006e18:	08006e8b 	.word	0x08006e8b
 8006e1c:	08006ebf 	.word	0x08006ebf
 8006e20:	08006ebf 	.word	0x08006ebf
 8006e24:	08006ebf 	.word	0x08006ebf
 8006e28:	08006ebf 	.word	0x08006ebf
 8006e2c:	08006ebf 	.word	0x08006ebf
 8006e30:	08006ebf 	.word	0x08006ebf
 8006e34:	08006ebf 	.word	0x08006ebf
 8006e38:	08006ebf 	.word	0x08006ebf
 8006e3c:	08006ebf 	.word	0x08006ebf
 8006e40:	08006ebf 	.word	0x08006ebf
 8006e44:	08006ebf 	.word	0x08006ebf
 8006e48:	08006ebf 	.word	0x08006ebf
 8006e4c:	08006ebf 	.word	0x08006ebf
 8006e50:	08006ebf 	.word	0x08006ebf
 8006e54:	08006ebf 	.word	0x08006ebf
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	2b40      	cmp	r3, #64	@ 0x40
 8006e5e:	d02a      	beq.n	8006eb6 <UART_SetConfig+0x8aa>
 8006e60:	e02d      	b.n	8006ebe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e62:	f7fe fd45 	bl	80058f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e68:	e02f      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe fd54 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e78:	e027      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e7a:	f107 0318 	add.w	r3, r7, #24
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fea0 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e88:	e01f      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e8a:	4b21      	ldr	r3, [pc, #132]	@ (8006f10 <UART_SetConfig+0x904>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e96:	4b1e      	ldr	r3, [pc, #120]	@ (8006f10 <UART_SetConfig+0x904>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	f003 0303 	and.w	r3, r3, #3
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f18 <UART_SetConfig+0x90c>)
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ea8:	e00f      	b.n	8006eca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <UART_SetConfig+0x90c>)
 8006eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eae:	e00c      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f1c <UART_SetConfig+0x910>)
 8006eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb4:	e009      	b.n	8006eca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebc:	e005      	b.n	8006eca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ec8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 81ee 	beq.w	80072ae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	4a12      	ldr	r2, [pc, #72]	@ (8006f20 <UART_SetConfig+0x914>)
 8006ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006edc:	461a      	mov	r2, r3
 8006ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ee4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d305      	bcc.n	8006f02 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d910      	bls.n	8006f24 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f08:	e1d1      	b.n	80072ae <UART_SetConfig+0xca2>
 8006f0a:	bf00      	nop
 8006f0c:	40011c00 	.word	0x40011c00
 8006f10:	58024400 	.word	0x58024400
 8006f14:	58000c00 	.word	0x58000c00
 8006f18:	03d09000 	.word	0x03d09000
 8006f1c:	003d0900 	.word	0x003d0900
 8006f20:	08023a5c 	.word	0x08023a5c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f26:	2200      	movs	r2, #0
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	60fa      	str	r2, [r7, #12]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	4ac0      	ldr	r2, [pc, #768]	@ (8007234 <UART_SetConfig+0xc28>)
 8006f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2200      	movs	r2, #0
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f46:	f7f9 fa4b 	bl	80003e0 <__aeabi_uldivmod>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	020b      	lsls	r3, r1, #8
 8006f5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f60:	0202      	lsls	r2, r0, #8
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	6849      	ldr	r1, [r1, #4]
 8006f66:	0849      	lsrs	r1, r1, #1
 8006f68:	2000      	movs	r0, #0
 8006f6a:	460c      	mov	r4, r1
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	eb12 0804 	adds.w	r8, r2, r4
 8006f72:	eb43 0905 	adc.w	r9, r3, r5
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	469a      	mov	sl, r3
 8006f7e:	4693      	mov	fp, r2
 8006f80:	4652      	mov	r2, sl
 8006f82:	465b      	mov	r3, fp
 8006f84:	4640      	mov	r0, r8
 8006f86:	4649      	mov	r1, r9
 8006f88:	f7f9 fa2a 	bl	80003e0 <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4613      	mov	r3, r2
 8006f92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f9a:	d308      	bcc.n	8006fae <UART_SetConfig+0x9a2>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fa2:	d204      	bcs.n	8006fae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e17f      	b.n	80072ae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006fb4:	e17b      	b.n	80072ae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fbe:	f040 80bd 	bne.w	800713c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006fc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	dc48      	bgt.n	800705c <UART_SetConfig+0xa50>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	db7b      	blt.n	80070c6 <UART_SetConfig+0xaba>
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	d879      	bhi.n	80070c6 <UART_SetConfig+0xaba>
 8006fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <UART_SetConfig+0x9cc>)
 8006fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd8:	08007063 	.word	0x08007063
 8006fdc:	0800706b 	.word	0x0800706b
 8006fe0:	080070c7 	.word	0x080070c7
 8006fe4:	080070c7 	.word	0x080070c7
 8006fe8:	08007073 	.word	0x08007073
 8006fec:	080070c7 	.word	0x080070c7
 8006ff0:	080070c7 	.word	0x080070c7
 8006ff4:	080070c7 	.word	0x080070c7
 8006ff8:	08007083 	.word	0x08007083
 8006ffc:	080070c7 	.word	0x080070c7
 8007000:	080070c7 	.word	0x080070c7
 8007004:	080070c7 	.word	0x080070c7
 8007008:	080070c7 	.word	0x080070c7
 800700c:	080070c7 	.word	0x080070c7
 8007010:	080070c7 	.word	0x080070c7
 8007014:	080070c7 	.word	0x080070c7
 8007018:	08007093 	.word	0x08007093
 800701c:	080070c7 	.word	0x080070c7
 8007020:	080070c7 	.word	0x080070c7
 8007024:	080070c7 	.word	0x080070c7
 8007028:	080070c7 	.word	0x080070c7
 800702c:	080070c7 	.word	0x080070c7
 8007030:	080070c7 	.word	0x080070c7
 8007034:	080070c7 	.word	0x080070c7
 8007038:	080070c7 	.word	0x080070c7
 800703c:	080070c7 	.word	0x080070c7
 8007040:	080070c7 	.word	0x080070c7
 8007044:	080070c7 	.word	0x080070c7
 8007048:	080070c7 	.word	0x080070c7
 800704c:	080070c7 	.word	0x080070c7
 8007050:	080070c7 	.word	0x080070c7
 8007054:	080070c7 	.word	0x080070c7
 8007058:	080070b9 	.word	0x080070b9
 800705c:	2b40      	cmp	r3, #64	@ 0x40
 800705e:	d02e      	beq.n	80070be <UART_SetConfig+0xab2>
 8007060:	e031      	b.n	80070c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007062:	f7fe fbd7 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8007066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007068:	e033      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800706a:	f7fe fbe9 	bl	8005840 <HAL_RCC_GetPCLK2Freq>
 800706e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007070:	e02f      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fc50 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800707c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007080:	e027      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007082:	f107 0318 	add.w	r3, r7, #24
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fd9c 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007090:	e01f      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007092:	4b69      	ldr	r3, [pc, #420]	@ (8007238 <UART_SetConfig+0xc2c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800709e:	4b66      	ldr	r3, [pc, #408]	@ (8007238 <UART_SetConfig+0xc2c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	4a64      	ldr	r2, [pc, #400]	@ (800723c <UART_SetConfig+0xc30>)
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070b0:	e00f      	b.n	80070d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80070b2:	4b62      	ldr	r3, [pc, #392]	@ (800723c <UART_SetConfig+0xc30>)
 80070b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b6:	e00c      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070b8:	4b61      	ldr	r3, [pc, #388]	@ (8007240 <UART_SetConfig+0xc34>)
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070bc:	e009      	b.n	80070d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070c4:	e005      	b.n	80070d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 80ea 	beq.w	80072ae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	4a55      	ldr	r2, [pc, #340]	@ (8007234 <UART_SetConfig+0xc28>)
 80070e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ec:	005a      	lsls	r2, r3, #1
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	085b      	lsrs	r3, r3, #1
 80070f4:	441a      	add	r2, r3
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	2b0f      	cmp	r3, #15
 8007104:	d916      	bls.n	8007134 <UART_SetConfig+0xb28>
 8007106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710c:	d212      	bcs.n	8007134 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	b29b      	uxth	r3, r3
 8007112:	f023 030f 	bic.w	r3, r3, #15
 8007116:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711a:	085b      	lsrs	r3, r3, #1
 800711c:	b29b      	uxth	r3, r3
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	b29a      	uxth	r2, r3
 8007124:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007126:	4313      	orrs	r3, r2
 8007128:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007130:	60da      	str	r2, [r3, #12]
 8007132:	e0bc      	b.n	80072ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800713a:	e0b8      	b.n	80072ae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800713c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007140:	2b20      	cmp	r3, #32
 8007142:	dc4b      	bgt.n	80071dc <UART_SetConfig+0xbd0>
 8007144:	2b00      	cmp	r3, #0
 8007146:	f2c0 8087 	blt.w	8007258 <UART_SetConfig+0xc4c>
 800714a:	2b20      	cmp	r3, #32
 800714c:	f200 8084 	bhi.w	8007258 <UART_SetConfig+0xc4c>
 8007150:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <UART_SetConfig+0xb4c>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	080071e3 	.word	0x080071e3
 800715c:	080071eb 	.word	0x080071eb
 8007160:	08007259 	.word	0x08007259
 8007164:	08007259 	.word	0x08007259
 8007168:	080071f3 	.word	0x080071f3
 800716c:	08007259 	.word	0x08007259
 8007170:	08007259 	.word	0x08007259
 8007174:	08007259 	.word	0x08007259
 8007178:	08007203 	.word	0x08007203
 800717c:	08007259 	.word	0x08007259
 8007180:	08007259 	.word	0x08007259
 8007184:	08007259 	.word	0x08007259
 8007188:	08007259 	.word	0x08007259
 800718c:	08007259 	.word	0x08007259
 8007190:	08007259 	.word	0x08007259
 8007194:	08007259 	.word	0x08007259
 8007198:	08007213 	.word	0x08007213
 800719c:	08007259 	.word	0x08007259
 80071a0:	08007259 	.word	0x08007259
 80071a4:	08007259 	.word	0x08007259
 80071a8:	08007259 	.word	0x08007259
 80071ac:	08007259 	.word	0x08007259
 80071b0:	08007259 	.word	0x08007259
 80071b4:	08007259 	.word	0x08007259
 80071b8:	08007259 	.word	0x08007259
 80071bc:	08007259 	.word	0x08007259
 80071c0:	08007259 	.word	0x08007259
 80071c4:	08007259 	.word	0x08007259
 80071c8:	08007259 	.word	0x08007259
 80071cc:	08007259 	.word	0x08007259
 80071d0:	08007259 	.word	0x08007259
 80071d4:	08007259 	.word	0x08007259
 80071d8:	0800724b 	.word	0x0800724b
 80071dc:	2b40      	cmp	r3, #64	@ 0x40
 80071de:	d037      	beq.n	8007250 <UART_SetConfig+0xc44>
 80071e0:	e03a      	b.n	8007258 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7fe fb17 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 80071e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071e8:	e03c      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ea:	f7fe fb29 	bl	8005840 <HAL_RCC_GetPCLK2Freq>
 80071ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80071f0:	e038      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fb90 	bl	800591c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007200:	e030      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007202:	f107 0318 	add.w	r3, r7, #24
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fcdc 	bl	8005bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007210:	e028      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007212:	4b09      	ldr	r3, [pc, #36]	@ (8007238 <UART_SetConfig+0xc2c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d012      	beq.n	8007244 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800721e:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <UART_SetConfig+0xc2c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	08db      	lsrs	r3, r3, #3
 8007224:	f003 0303 	and.w	r3, r3, #3
 8007228:	4a04      	ldr	r2, [pc, #16]	@ (800723c <UART_SetConfig+0xc30>)
 800722a:	fa22 f303 	lsr.w	r3, r2, r3
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007230:	e018      	b.n	8007264 <UART_SetConfig+0xc58>
 8007232:	bf00      	nop
 8007234:	08023a5c 	.word	0x08023a5c
 8007238:	58024400 	.word	0x58024400
 800723c:	03d09000 	.word	0x03d09000
 8007240:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007244:	4b24      	ldr	r3, [pc, #144]	@ (80072d8 <UART_SetConfig+0xccc>)
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007248:	e00c      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800724a:	4b24      	ldr	r3, [pc, #144]	@ (80072dc <UART_SetConfig+0xcd0>)
 800724c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800724e:	e009      	b.n	8007264 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007256:	e005      	b.n	8007264 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007262:	bf00      	nop
    }

    if (pclk != 0U)
 8007264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d021      	beq.n	80072ae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726e:	4a1c      	ldr	r2, [pc, #112]	@ (80072e0 <UART_SetConfig+0xcd4>)
 8007270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007274:	461a      	mov	r2, r3
 8007276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007278:	fbb3 f2f2 	udiv	r2, r3, r2
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	085b      	lsrs	r3, r3, #1
 8007282:	441a      	add	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800728e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d909      	bls.n	80072a8 <UART_SetConfig+0xc9c>
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800729a:	d205      	bcs.n	80072a8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800729c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800729e:	b29a      	uxth	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60da      	str	r2, [r3, #12]
 80072a6:	e002      	b.n	80072ae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2200      	movs	r2, #0
 80072c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3748      	adds	r7, #72	@ 0x48
 80072d2:	46bd      	mov	sp, r7
 80072d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d8:	03d09000 	.word	0x03d09000
 80072dc:	003d0900 	.word	0x003d0900
 80072e0:	08023a5c 	.word	0x08023a5c

080072e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	f003 0304 	and.w	r3, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007378:	f003 0310 	and.w	r3, r3, #16
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01a      	beq.n	80073fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073e2:	d10a      	bne.n	80073fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b098      	sub	sp, #96	@ 0x60
 800742c:	af02      	add	r7, sp, #8
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007438:	f7fb f8a4 	bl	8002584 <HAL_GetTick>
 800743c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0308 	and.w	r3, r3, #8
 8007448:	2b08      	cmp	r3, #8
 800744a:	d12f      	bne.n	80074ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800744c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007454:	2200      	movs	r2, #0
 8007456:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f88e 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d022      	beq.n	80074ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800747a:	653b      	str	r3, [r7, #80]	@ 0x50
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007484:	647b      	str	r3, [r7, #68]	@ 0x44
 8007486:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800748a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e063      	b.n	8007574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d149      	bne.n	800754e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c2:	2200      	movs	r2, #0
 80074c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f857 	bl	800757c <UART_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d03c      	beq.n	800754e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	623b      	str	r3, [r7, #32]
   return(result);
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80074f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e6      	bne.n	80074d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	60fb      	str	r3, [r7, #12]
   return(result);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007526:	61fa      	str	r2, [r7, #28]
 8007528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	69b9      	ldr	r1, [r7, #24]
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	617b      	str	r3, [r7, #20]
   return(result);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e5      	bne.n	8007506 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e012      	b.n	8007574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3758      	adds	r7, #88	@ 0x58
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800758c:	e04f      	b.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d04b      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007596:	f7fa fff5 	bl	8002584 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d302      	bcc.n	80075ac <UART_WaitOnFlagUntilTimeout+0x30>
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e04e      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d037      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b80      	cmp	r3, #128	@ 0x80
 80075c2:	d034      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b40      	cmp	r3, #64	@ 0x40
 80075c8:	d031      	beq.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d110      	bne.n	80075fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2208      	movs	r2, #8
 80075de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f000 f839 	bl	8007658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2208      	movs	r2, #8
 80075ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e029      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007608:	d111      	bne.n	800762e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f81f 	bl	8007658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e00f      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	4013      	ands	r3, r2
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	429a      	cmp	r2, r3
 800763c:	bf0c      	ite	eq
 800763e:	2301      	moveq	r3, #1
 8007640:	2300      	movne	r3, #0
 8007642:	b2db      	uxtb	r3, r3
 8007644:	461a      	mov	r2, r3
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	429a      	cmp	r2, r3
 800764a:	d0a0      	beq.n	800758e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007658:	b480      	push	{r7}
 800765a:	b095      	sub	sp, #84	@ 0x54
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007668:	e853 3f00 	ldrex	r3, [r3]
 800766c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007680:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007686:	e841 2300 	strex	r3, r2, [r1]
 800768a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800768c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1e6      	bne.n	8007660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007720 <UART_EndRxTransfer+0xc8>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d118      	bne.n	8007700 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	60bb      	str	r3, [r7, #8]
   return(result);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f023 0310 	bic.w	r3, r3, #16
 80076e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6979      	ldr	r1, [r7, #20]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	613b      	str	r3, [r7, #16]
   return(result);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e6      	bne.n	80076ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007714:	bf00      	nop
 8007716:	3754      	adds	r7, #84	@ 0x54
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	effffffe 	.word	0xeffffffe

08007724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f103 0208 	add.w	r2, r3, #8
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f04f 32ff 	mov.w	r2, #4294967295
 800773c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f103 0208 	add.w	r2, r3, #8
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f103 0208 	add.w	r2, r3, #8
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077c6:	b480      	push	{r7}
 80077c8:	b085      	sub	sp, #20
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d103      	bne.n	80077e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e00c      	b.n	8007800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3308      	adds	r3, #8
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e002      	b.n	80077f4 <vListInsert+0x2e>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d2f6      	bcs.n	80077ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	601a      	str	r2, [r3, #0]
}
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	6892      	ldr	r2, [r2, #8]
 800784e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6852      	ldr	r2, [r2, #4]
 8007858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d103      	bne.n	800786c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	1e5a      	subs	r2, r3, #1
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078b2:	bf00      	nop
 80078b4:	bf00      	nop
 80078b6:	e7fd      	b.n	80078b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078b8:	f004 f826 	bl	800b908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c4:	68f9      	ldr	r1, [r7, #12]
 80078c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078c8:	fb01 f303 	mul.w	r3, r1, r3
 80078cc:	441a      	add	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e8:	3b01      	subs	r3, #1
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80078ee:	fb01 f303 	mul.w	r3, r1, r3
 80078f2:	441a      	add	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	22ff      	movs	r2, #255	@ 0xff
 80078fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	22ff      	movs	r2, #255	@ 0xff
 8007904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d114      	bne.n	8007938 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d01a      	beq.n	800794c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3310      	adds	r3, #16
 800791a:	4618      	mov	r0, r3
 800791c:	f001 febe 	bl	800969c <xTaskRemoveFromEventList>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d012      	beq.n	800794c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007926:	4b0d      	ldr	r3, [pc, #52]	@ (800795c <xQueueGenericReset+0xd0>)
 8007928:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	e009      	b.n	800794c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3310      	adds	r3, #16
 800793c:	4618      	mov	r0, r3
 800793e:	f7ff fef1 	bl	8007724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3324      	adds	r3, #36	@ 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f7ff feec 	bl	8007724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800794c:	f004 f80e 	bl	800b96c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007950:	2301      	movs	r3, #1
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08e      	sub	sp, #56	@ 0x38
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10b      	bne.n	800798c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007986:	bf00      	nop
 8007988:	bf00      	nop
 800798a:	e7fd      	b.n	8007988 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10b      	bne.n	80079aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop
 80079a8:	e7fd      	b.n	80079a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d002      	beq.n	80079b6 <xQueueGenericCreateStatic+0x56>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <xQueueGenericCreateStatic+0x5a>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <xQueueGenericCreateStatic+0x5c>
 80079ba:	2300      	movs	r3, #0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	623b      	str	r3, [r7, #32]
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	e7fd      	b.n	80079d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <xQueueGenericCreateStatic+0x84>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <xQueueGenericCreateStatic+0x88>
 80079e4:	2301      	movs	r3, #1
 80079e6:	e000      	b.n	80079ea <xQueueGenericCreateStatic+0x8a>
 80079e8:	2300      	movs	r3, #0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10b      	bne.n	8007a06 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	61fb      	str	r3, [r7, #28]
}
 8007a00:	bf00      	nop
 8007a02:	bf00      	nop
 8007a04:	e7fd      	b.n	8007a02 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a06:	2350      	movs	r3, #80	@ 0x50
 8007a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b50      	cmp	r3, #80	@ 0x50
 8007a0e:	d00b      	beq.n	8007a28 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	61bb      	str	r3, [r7, #24]
}
 8007a22:	bf00      	nop
 8007a24:	bf00      	nop
 8007a26:	e7fd      	b.n	8007a24 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00d      	beq.n	8007a50 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4613      	mov	r3, r2
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f840 	bl	8007ad0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3730      	adds	r7, #48	@ 0x30
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b08a      	sub	sp, #40	@ 0x28
 8007a5e:	af02      	add	r7, sp, #8
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	4613      	mov	r3, r2
 8007a66:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <xQueueGenericCreate+0x2c>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	613b      	str	r3, [r7, #16]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	3350      	adds	r3, #80	@ 0x50
 8007a94:	4618      	mov	r0, r3
 8007a96:	f003 fc17 	bl	800b2c8 <pvPortMalloc>
 8007a9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d011      	beq.n	8007ac6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	3350      	adds	r3, #80	@ 0x50
 8007aaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ab4:	79fa      	ldrb	r2, [r7, #7]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	4613      	mov	r3, r2
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f805 	bl	8007ad0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ac6:	69bb      	ldr	r3, [r7, #24]
	}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e002      	b.n	8007af2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007afe:	2101      	movs	r1, #1
 8007b00:	69b8      	ldr	r0, [r7, #24]
 8007b02:	f7ff fec3 	bl	800788c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	78fa      	ldrb	r2, [r7, #3]
 8007b0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00e      	beq.n	8007b42 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b36:	2300      	movs	r3, #0
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f911 	bl	8007d64 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b086      	sub	sp, #24
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	4603      	mov	r3, r0
 8007b52:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b54:	2301      	movs	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	2300      	movs	r3, #0
 8007b5a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6939      	ldr	r1, [r7, #16]
 8007b62:	6978      	ldr	r0, [r7, #20]
 8007b64:	f7ff ff79 	bl	8007a5a <xQueueGenericCreate>
 8007b68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff ffd3 	bl	8007b16 <prvInitialiseMutex>

		return xNewQueue;
 8007b70:	68fb      	ldr	r3, [r7, #12]
	}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b088      	sub	sp, #32
 8007b7e:	af02      	add	r7, sp, #8
 8007b80:	4603      	mov	r3, r0
 8007b82:	6039      	str	r1, [r7, #0]
 8007b84:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b86:	2301      	movs	r3, #1
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b8e:	79fb      	ldrb	r3, [r7, #7]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	6939      	ldr	r1, [r7, #16]
 8007b98:	6978      	ldr	r0, [r7, #20]
 8007b9a:	f7ff fee1 	bl	8007960 <xQueueGenericCreateStatic>
 8007b9e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff ffb8 	bl	8007b16 <prvInitialiseMutex>

		return xNewQueue;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3718      	adds	r7, #24
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007bb0:	b590      	push	{r4, r7, lr}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10b      	bne.n	8007bda <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60fb      	str	r3, [r7, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	689c      	ldr	r4, [r3, #8]
 8007bde:	f001 fff1 	bl	8009bc4 <xTaskGetCurrentTaskHandle>
 8007be2:	4603      	mov	r3, r0
 8007be4:	429c      	cmp	r4, r3
 8007be6:	d111      	bne.n	8007c0c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	1e5a      	subs	r2, r3, #1
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2100      	movs	r1, #0
 8007c00:	6938      	ldr	r0, [r7, #16]
 8007c02:	f000 f8af 	bl	8007d64 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007c06:	2301      	movs	r3, #1
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e001      	b.n	8007c10 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007c10:	697b      	ldr	r3, [r7, #20]
	}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd90      	pop	{r4, r7, pc}

08007c1a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007c1a:	b590      	push	{r4, r7, lr}
 8007c1c:	b087      	sub	sp, #28
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10b      	bne.n	8007c46 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60fb      	str	r3, [r7, #12]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	689c      	ldr	r4, [r3, #8]
 8007c4a:	f001 ffbb 	bl	8009bc4 <xTaskGetCurrentTaskHandle>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	429c      	cmp	r4, r3
 8007c52:	d107      	bne.n	8007c64 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e00c      	b.n	8007c7e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6938      	ldr	r0, [r7, #16]
 8007c68:	f000 fb8e 	bl	8008388 <xQueueSemaphoreTake>
 8007c6c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007c7e:	697b      	ldr	r3, [r7, #20]
	}
 8007c80:	4618      	mov	r0, r3
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}

08007c88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	@ 0x28
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10b      	bne.n	8007cb2 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	61bb      	str	r3, [r7, #24]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d90b      	bls.n	8007cd2 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	617b      	str	r3, [r7, #20]
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	e7fd      	b.n	8007cce <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2100      	movs	r1, #0
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fe3f 	bl	8007960 <xQueueGenericCreateStatic>
 8007ce2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	68ba      	ldr	r2, [r7, #8]
 8007cee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
	}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b086      	sub	sp, #24
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10b      	bne.n	8007d22 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	613b      	str	r3, [r7, #16]
}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	e7fd      	b.n	8007d1e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d90b      	bls.n	8007d42 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60fb      	str	r3, [r7, #12]
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d42:	2202      	movs	r2, #2
 8007d44:	2100      	movs	r1, #0
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff fe87 	bl	8007a5a <xQueueGenericCreate>
 8007d4c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d5a:	697b      	ldr	r3, [r7, #20]
	}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08e      	sub	sp, #56	@ 0x38
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d72:	2300      	movs	r3, #0
 8007d74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d10b      	bne.n	8007d98 <xQueueGenericSend+0x34>
	__asm volatile
 8007d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d84:	f383 8811 	msr	BASEPRI, r3
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	f3bf 8f4f 	dsb	sy
 8007d90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d92:	bf00      	nop
 8007d94:	bf00      	nop
 8007d96:	e7fd      	b.n	8007d94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d103      	bne.n	8007da6 <xQueueGenericSend+0x42>
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <xQueueGenericSend+0x46>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <xQueueGenericSend+0x48>
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10b      	bne.n	8007dc8 <xQueueGenericSend+0x64>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d103      	bne.n	8007dd6 <xQueueGenericSend+0x72>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <xQueueGenericSend+0x76>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <xQueueGenericSend+0x78>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10b      	bne.n	8007df8 <xQueueGenericSend+0x94>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	623b      	str	r3, [r7, #32]
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007df8:	f001 fef4 	bl	8009be4 <xTaskGetSchedulerState>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d102      	bne.n	8007e08 <xQueueGenericSend+0xa4>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <xQueueGenericSend+0xa8>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <xQueueGenericSend+0xaa>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <xQueueGenericSend+0xc6>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	61fb      	str	r3, [r7, #28]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e2a:	f003 fd6d 	bl	800b908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d302      	bcc.n	8007e40 <xQueueGenericSend+0xdc>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d129      	bne.n	8007e94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007e46:	f000 fcab 	bl	80087a0 <prvCopyDataToQueue>
 8007e4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d010      	beq.n	8007e76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e56:	3324      	adds	r3, #36	@ 0x24
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f001 fc1f 	bl	800969c <xTaskRemoveFromEventList>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d013      	beq.n	8007e8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e64:	4b3f      	ldr	r3, [pc, #252]	@ (8007f64 <xQueueGenericSend+0x200>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	e00a      	b.n	8007e8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e7c:	4b39      	ldr	r3, [pc, #228]	@ (8007f64 <xQueueGenericSend+0x200>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	f3bf 8f4f 	dsb	sy
 8007e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e8c:	f003 fd6e 	bl	800b96c <vPortExitCritical>
				return pdPASS;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e063      	b.n	8007f5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d103      	bne.n	8007ea2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e9a:	f003 fd67 	bl	800b96c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e05c      	b.n	8007f5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d106      	bne.n	8007eb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ea8:	f107 0314 	add.w	r3, r7, #20
 8007eac:	4618      	mov	r0, r3
 8007eae:	f001 fc59 	bl	8009764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007eb6:	f003 fd59 	bl	800b96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007eba:	f001 f929 	bl	8009110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ebe:	f003 fd23 	bl	800b908 <vPortEnterCritical>
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ec8:	b25b      	sxtb	r3, r3
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ece:	d103      	bne.n	8007ed8 <xQueueGenericSend+0x174>
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ede:	b25b      	sxtb	r3, r3
 8007ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee4:	d103      	bne.n	8007eee <xQueueGenericSend+0x18a>
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eee:	f003 fd3d 	bl	800b96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ef2:	1d3a      	adds	r2, r7, #4
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	4611      	mov	r1, r2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 fc48 	bl	8009790 <xTaskCheckForTimeOut>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d124      	bne.n	8007f50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f08:	f000 fd42 	bl	8008990 <prvIsQueueFull>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d018      	beq.n	8007f44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	3310      	adds	r3, #16
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4611      	mov	r1, r2
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 fb6c 	bl	80095f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f22:	f000 fccd 	bl	80088c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f26:	f001 f901 	bl	800912c <xTaskResumeAll>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f47f af7c 	bne.w	8007e2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007f32:	4b0c      	ldr	r3, [pc, #48]	@ (8007f64 <xQueueGenericSend+0x200>)
 8007f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	e772      	b.n	8007e2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f46:	f000 fcbb 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f4a:	f001 f8ef 	bl	800912c <xTaskResumeAll>
 8007f4e:	e76c      	b.n	8007e2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f52:	f000 fcb5 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f56:	f001 f8e9 	bl	800912c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3738      	adds	r7, #56	@ 0x38
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b090      	sub	sp, #64	@ 0x40
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10b      	bne.n	8007f98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	e7fd      	b.n	8007f94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <xQueueGenericSendFromISR+0x3e>
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <xQueueGenericSendFromISR+0x42>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <xQueueGenericSendFromISR+0x44>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10b      	bne.n	8007fc8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d103      	bne.n	8007fd6 <xQueueGenericSendFromISR+0x6e>
 8007fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d101      	bne.n	8007fda <xQueueGenericSendFromISR+0x72>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <xQueueGenericSendFromISR+0x74>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10b      	bne.n	8007ff8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	623b      	str	r3, [r7, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ff8:	f003 fd66 	bl	800bac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ffc:	f3ef 8211 	mrs	r2, BASEPRI
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	61fa      	str	r2, [r7, #28]
 8008012:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008014:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008016:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008020:	429a      	cmp	r2, r3
 8008022:	d302      	bcc.n	800802a <xQueueGenericSendFromISR+0xc2>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d12f      	bne.n	800808a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800802a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800802c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008030:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008038:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008040:	f000 fbae 	bl	80087a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008044:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d112      	bne.n	8008074 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800804e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008052:	2b00      	cmp	r3, #0
 8008054:	d016      	beq.n	8008084 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008058:	3324      	adds	r3, #36	@ 0x24
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fb1e 	bl	800969c <xTaskRemoveFromEventList>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00e      	beq.n	8008084 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e007      	b.n	8008084 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008078:	3301      	adds	r3, #1
 800807a:	b2db      	uxtb	r3, r3
 800807c:	b25a      	sxtb	r2, r3
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008084:	2301      	movs	r3, #1
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008088:	e001      	b.n	800808e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800808e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008090:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008098:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800809a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800809c:	4618      	mov	r0, r3
 800809e:	3740      	adds	r7, #64	@ 0x40
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	@ 0x38
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10b      	bne.n	80080d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	623b      	str	r3, [r7, #32]
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	e7fd      	b.n	80080cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61fb      	str	r3, [r7, #28]
}
 80080ea:	bf00      	nop
 80080ec:	bf00      	nop
 80080ee:	e7fd      	b.n	80080ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d103      	bne.n	8008100 <xQueueGiveFromISR+0x5c>
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <xQueueGiveFromISR+0x60>
 8008100:	2301      	movs	r3, #1
 8008102:	e000      	b.n	8008106 <xQueueGiveFromISR+0x62>
 8008104:	2300      	movs	r3, #0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10b      	bne.n	8008122 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	61bb      	str	r3, [r7, #24]
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	e7fd      	b.n	800811e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008122:	f003 fcd1 	bl	800bac8 <vPortValidateInterruptPriority>
	__asm volatile
 8008126:	f3ef 8211 	mrs	r2, BASEPRI
 800812a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	617a      	str	r2, [r7, #20]
 800813c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800813e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800814c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800814e:	429a      	cmp	r2, r3
 8008150:	d22b      	bcs.n	80081aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008158:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800815c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008164:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800816c:	d112      	bne.n	8008194 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d016      	beq.n	80081a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	3324      	adds	r3, #36	@ 0x24
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fa8e 	bl	800969c <xTaskRemoveFromEventList>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00e      	beq.n	80081a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	e007      	b.n	80081a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008198:	3301      	adds	r3, #1
 800819a:	b2db      	uxtb	r3, r3
 800819c:	b25a      	sxtb	r2, r3
 800819e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80081a4:	2301      	movs	r3, #1
 80081a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a8:	e001      	b.n	80081ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f383 8811 	msr	BASEPRI, r3
}
 80081b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3738      	adds	r7, #56	@ 0x38
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08c      	sub	sp, #48	@ 0x30
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10b      	bne.n	80081f6 <xQueueReceive+0x32>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	623b      	str	r3, [r7, #32]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d103      	bne.n	8008204 <xQueueReceive+0x40>
 80081fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <xQueueReceive+0x44>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <xQueueReceive+0x46>
 8008208:	2300      	movs	r3, #0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10b      	bne.n	8008226 <xQueueReceive+0x62>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	61fb      	str	r3, [r7, #28]
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	e7fd      	b.n	8008222 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008226:	f001 fcdd 	bl	8009be4 <xTaskGetSchedulerState>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <xQueueReceive+0x72>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <xQueueReceive+0x76>
 8008236:	2301      	movs	r3, #1
 8008238:	e000      	b.n	800823c <xQueueReceive+0x78>
 800823a:	2300      	movs	r3, #0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10b      	bne.n	8008258 <xQueueReceive+0x94>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	61bb      	str	r3, [r7, #24]
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008258:	f003 fb56 	bl	800b908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800825c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01f      	beq.n	80082a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800826c:	f000 fb02 	bl	8008874 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008272:	1e5a      	subs	r2, r3, #1
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00f      	beq.n	80082a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008282:	3310      	adds	r3, #16
 8008284:	4618      	mov	r0, r3
 8008286:	f001 fa09 	bl	800969c <xTaskRemoveFromEventList>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008290:	4b3c      	ldr	r3, [pc, #240]	@ (8008384 <xQueueReceive+0x1c0>)
 8008292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082a0:	f003 fb64 	bl	800b96c <vPortExitCritical>
				return pdPASS;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e069      	b.n	800837c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d103      	bne.n	80082b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ae:	f003 fb5d 	bl	800b96c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082b2:	2300      	movs	r3, #0
 80082b4:	e062      	b.n	800837c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082bc:	f107 0310 	add.w	r3, r7, #16
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fa4f 	bl	8009764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082c6:	2301      	movs	r3, #1
 80082c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ca:	f003 fb4f 	bl	800b96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082ce:	f000 ff1f 	bl	8009110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082d2:	f003 fb19 	bl	800b908 <vPortEnterCritical>
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082dc:	b25b      	sxtb	r3, r3
 80082de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e2:	d103      	bne.n	80082ec <xQueueReceive+0x128>
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f8:	d103      	bne.n	8008302 <xQueueReceive+0x13e>
 80082fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008302:	f003 fb33 	bl	800b96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008306:	1d3a      	adds	r2, r7, #4
 8008308:	f107 0310 	add.w	r3, r7, #16
 800830c:	4611      	mov	r1, r2
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fa3e 	bl	8009790 <xTaskCheckForTimeOut>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d123      	bne.n	8008362 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800831a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800831c:	f000 fb22 	bl	8008964 <prvIsQueueEmpty>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d017      	beq.n	8008356 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	3324      	adds	r3, #36	@ 0x24
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f001 f962 	bl	80095f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008336:	f000 fac3 	bl	80088c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800833a:	f000 fef7 	bl	800912c <xTaskResumeAll>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d189      	bne.n	8008258 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008344:	4b0f      	ldr	r3, [pc, #60]	@ (8008384 <xQueueReceive+0x1c0>)
 8008346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	e780      	b.n	8008258 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008358:	f000 fab2 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800835c:	f000 fee6 	bl	800912c <xTaskResumeAll>
 8008360:	e77a      	b.n	8008258 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008364:	f000 faac 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008368:	f000 fee0 	bl	800912c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800836c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800836e:	f000 faf9 	bl	8008964 <prvIsQueueEmpty>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	f43f af6f 	beq.w	8008258 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800837a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800837c:	4618      	mov	r0, r3
 800837e:	3730      	adds	r7, #48	@ 0x30
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	e000ed04 	.word	0xe000ed04

08008388 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08e      	sub	sp, #56	@ 0x38
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008392:	2300      	movs	r3, #0
 8008394:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800839a:	2300      	movs	r3, #0
 800839c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	623b      	str	r3, [r7, #32]
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	e7fd      	b.n	80083b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	61fb      	str	r3, [r7, #28]
}
 80083d6:	bf00      	nop
 80083d8:	bf00      	nop
 80083da:	e7fd      	b.n	80083d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083dc:	f001 fc02 	bl	8009be4 <xTaskGetSchedulerState>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <xQueueSemaphoreTake+0x64>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <xQueueSemaphoreTake+0x68>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <xQueueSemaphoreTake+0x6a>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <xQueueSemaphoreTake+0x86>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	61bb      	str	r3, [r7, #24]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800840e:	f003 fa7b 	bl	800b908 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008416:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841a:	2b00      	cmp	r3, #0
 800841c:	d024      	beq.n	8008468 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008420:	1e5a      	subs	r2, r3, #1
 8008422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008424:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d104      	bne.n	8008438 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800842e:	f001 fe0f 	bl	800a050 <pvTaskIncrementMutexHeldCount>
 8008432:	4602      	mov	r2, r0
 8008434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008436:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00f      	beq.n	8008460 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008442:	3310      	adds	r3, #16
 8008444:	4618      	mov	r0, r3
 8008446:	f001 f929 	bl	800969c <xTaskRemoveFromEventList>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d007      	beq.n	8008460 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008450:	4b54      	ldr	r3, [pc, #336]	@ (80085a4 <xQueueSemaphoreTake+0x21c>)
 8008452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008460:	f003 fa84 	bl	800b96c <vPortExitCritical>
				return pdPASS;
 8008464:	2301      	movs	r3, #1
 8008466:	e098      	b.n	800859a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d112      	bne.n	8008494 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	617b      	str	r3, [r7, #20]
}
 8008486:	bf00      	nop
 8008488:	bf00      	nop
 800848a:	e7fd      	b.n	8008488 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800848c:	f003 fa6e 	bl	800b96c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008490:	2300      	movs	r3, #0
 8008492:	e082      	b.n	800859a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800849a:	f107 030c 	add.w	r3, r7, #12
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 f960 	bl	8009764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084a4:	2301      	movs	r3, #1
 80084a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084a8:	f003 fa60 	bl	800b96c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084ac:	f000 fe30 	bl	8009110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084b0:	f003 fa2a 	bl	800b908 <vPortEnterCritical>
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084ba:	b25b      	sxtb	r3, r3
 80084bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c0:	d103      	bne.n	80084ca <xQueueSemaphoreTake+0x142>
 80084c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084d0:	b25b      	sxtb	r3, r3
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d103      	bne.n	80084e0 <xQueueSemaphoreTake+0x158>
 80084d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084e0:	f003 fa44 	bl	800b96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084e4:	463a      	mov	r2, r7
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 f94f 	bl	8009790 <xTaskCheckForTimeOut>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d132      	bne.n	800855e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80084fa:	f000 fa33 	bl	8008964 <prvIsQueueEmpty>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d026      	beq.n	8008552 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800850c:	f003 f9fc 	bl	800b908 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fb83 	bl	8009c20 <xTaskPriorityInherit>
 800851a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800851c:	f003 fa26 	bl	800b96c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008522:	3324      	adds	r3, #36	@ 0x24
 8008524:	683a      	ldr	r2, [r7, #0]
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f001 f865 	bl	80095f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800852e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008530:	f000 f9c6 	bl	80088c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008534:	f000 fdfa 	bl	800912c <xTaskResumeAll>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	f47f af67 	bne.w	800840e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008540:	4b18      	ldr	r3, [pc, #96]	@ (80085a4 <xQueueSemaphoreTake+0x21c>)
 8008542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	e75d      	b.n	800840e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008552:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008554:	f000 f9b4 	bl	80088c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008558:	f000 fde8 	bl	800912c <xTaskResumeAll>
 800855c:	e757      	b.n	800840e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800855e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008560:	f000 f9ae 	bl	80088c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008564:	f000 fde2 	bl	800912c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800856a:	f000 f9fb 	bl	8008964 <prvIsQueueEmpty>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	f43f af4c 	beq.w	800840e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00d      	beq.n	8008598 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800857c:	f003 f9c4 	bl	800b908 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008580:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008582:	f000 f8f5 	bl	8008770 <prvGetDisinheritPriorityAfterTimeout>
 8008586:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800858e:	4618      	mov	r0, r3
 8008590:	f001 fc1e 	bl	8009dd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008594:	f003 f9ea 	bl	800b96c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800859a:	4618      	mov	r0, r3
 800859c:	3738      	adds	r7, #56	@ 0x38
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08e      	sub	sp, #56	@ 0x38
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	623b      	str	r3, [r7, #32]
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	e7fd      	b.n	80085d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <xQueueReceiveFromISR+0x3c>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <xQueueReceiveFromISR+0x40>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <xQueueReceiveFromISR+0x42>
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	61fb      	str	r3, [r7, #28]
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	e7fd      	b.n	8008602 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008606:	f003 fa5f 	bl	800bac8 <vPortValidateInterruptPriority>
	__asm volatile
 800860a:	f3ef 8211 	mrs	r2, BASEPRI
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	61ba      	str	r2, [r7, #24]
 8008620:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008622:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008624:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800862c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862e:	2b00      	cmp	r3, #0
 8008630:	d02f      	beq.n	8008692 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008640:	f000 f918 	bl	8008874 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008646:	1e5a      	subs	r2, r3, #1
 8008648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800864c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d112      	bne.n	800867c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d016      	beq.n	800868c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	3310      	adds	r3, #16
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f81a 	bl	800969c <xTaskRemoveFromEventList>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e007      	b.n	800868c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800867c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008680:	3301      	adds	r3, #1
 8008682:	b2db      	uxtb	r3, r3
 8008684:	b25a      	sxtb	r2, r3
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800868c:	2301      	movs	r3, #1
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008690:	e001      	b.n	8008696 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008692:	2300      	movs	r3, #0
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
 8008696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008698:	613b      	str	r3, [r7, #16]
	__asm volatile
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f383 8811 	msr	BASEPRI, r3
}
 80086a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3738      	adds	r7, #56	@ 0x38
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	60bb      	str	r3, [r7, #8]
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	e7fd      	b.n	80086ce <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80086d2:	f003 f919 	bl	800b908 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086da:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80086dc:	f003 f946 	bl	800b96c <vPortExitCritical>

	return uxReturn;
 80086e0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80086ea:	b480      	push	{r7}
 80086ec:	b087      	sub	sp, #28
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10b      	bne.n	8008714 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80086fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	60fb      	str	r3, [r7, #12]
}
 800870e:	bf00      	nop
 8008710:	bf00      	nop
 8008712:	e7fd      	b.n	8008710 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008718:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800871a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800871c:	4618      	mov	r0, r3
 800871e:	371c      	adds	r7, #28
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <vQueueDelete+0x2a>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60bb      	str	r3, [r7, #8]
}
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f95e 	bl	8008a14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f002 fe7e 	bl	800b464 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	e001      	b.n	8008792 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008792:	68fb      	ldr	r3, [r7, #12]
	}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10d      	bne.n	80087da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d14d      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 fa90 	bl	8009cf0 <xTaskPriorityDisinherit>
 80087d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	609a      	str	r2, [r3, #8]
 80087d8:	e043      	b.n	8008862 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d119      	bne.n	8008814 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6858      	ldr	r0, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e8:	461a      	mov	r2, r3
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	f015 fb4b 	bl	801de86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f8:	441a      	add	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d32b      	bcc.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	e026      	b.n	8008862 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68d8      	ldr	r0, [r3, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881c:	461a      	mov	r2, r3
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	f015 fb31 	bl	801de86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882c:	425b      	negs	r3, r3
 800882e:	441a      	add	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d207      	bcs.n	8008850 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	425b      	negs	r3, r3
 800884a:	441a      	add	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d105      	bne.n	8008862 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3b01      	subs	r3, #1
 8008860:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	1c5a      	adds	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800886a:	697b      	ldr	r3, [r7, #20]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68da      	ldr	r2, [r3, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888e:	441a      	add	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	429a      	cmp	r2, r3
 800889e:	d303      	bcc.n	80088a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68d9      	ldr	r1, [r3, #12]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b0:	461a      	mov	r2, r3
 80088b2:	6838      	ldr	r0, [r7, #0]
 80088b4:	f015 fae7 	bl	801de86 <memcpy>
	}
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088c8:	f003 f81e 	bl	800b908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088d4:	e011      	b.n	80088fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d012      	beq.n	8008904 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3324      	adds	r3, #36	@ 0x24
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 feda 	bl	800969c <xTaskRemoveFromEventList>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088ee:	f000 ffb3 	bl	8009858 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dce9      	bgt.n	80088d6 <prvUnlockQueue+0x16>
 8008902:	e000      	b.n	8008906 <prvUnlockQueue+0x46>
					break;
 8008904:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	22ff      	movs	r2, #255	@ 0xff
 800890a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800890e:	f003 f82d 	bl	800b96c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008912:	f002 fff9 	bl	800b908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800891c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800891e:	e011      	b.n	8008944 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d012      	beq.n	800894e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3310      	adds	r3, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f000 feb5 	bl	800969c <xTaskRemoveFromEventList>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008938:	f000 ff8e 	bl	8009858 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800893c:	7bbb      	ldrb	r3, [r7, #14]
 800893e:	3b01      	subs	r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008944:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008948:	2b00      	cmp	r3, #0
 800894a:	dce9      	bgt.n	8008920 <prvUnlockQueue+0x60>
 800894c:	e000      	b.n	8008950 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800894e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	22ff      	movs	r2, #255	@ 0xff
 8008954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008958:	f003 f808 	bl	800b96c <vPortExitCritical>
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800896c:	f002 ffcc 	bl	800b908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	e001      	b.n	8008982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008982:	f002 fff3 	bl	800b96c <vPortExitCritical>

	return xReturn;
 8008986:	68fb      	ldr	r3, [r7, #12]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008998:	f002 ffb6 	bl	800b908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d102      	bne.n	80089ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	e001      	b.n	80089b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089b2:	f002 ffdb 	bl	800b96c <vPortExitCritical>

	return xReturn;
 80089b6:	68fb      	ldr	r3, [r7, #12]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e014      	b.n	80089fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008a10 <vQueueAddToRegistry+0x50>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10b      	bne.n	80089f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089dc:	490c      	ldr	r1, [pc, #48]	@ (8008a10 <vQueueAddToRegistry+0x50>)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008a10 <vQueueAddToRegistry+0x50>)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4413      	add	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089f2:	e006      	b.n	8008a02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b07      	cmp	r3, #7
 80089fe:	d9e7      	bls.n	80089d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20000340 	.word	0x20000340

08008a14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e016      	b.n	8008a50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008a22:	4a10      	ldr	r2, [pc, #64]	@ (8008a64 <vQueueUnregisterQueue+0x50>)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	4413      	add	r3, r2
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d10b      	bne.n	8008a4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008a32:	4a0c      	ldr	r2, [pc, #48]	@ (8008a64 <vQueueUnregisterQueue+0x50>)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2100      	movs	r1, #0
 8008a38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008a3c:	4a09      	ldr	r2, [pc, #36]	@ (8008a64 <vQueueUnregisterQueue+0x50>)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	4413      	add	r3, r2
 8008a44:	2200      	movs	r2, #0
 8008a46:	605a      	str	r2, [r3, #4]
				break;
 8008a48:	e006      	b.n	8008a58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b07      	cmp	r3, #7
 8008a54:	d9e5      	bls.n	8008a22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	20000340 	.word	0x20000340

08008a68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a78:	f002 ff46 	bl	800b908 <vPortEnterCritical>
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a88:	d103      	bne.n	8008a92 <vQueueWaitForMessageRestricted+0x2a>
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a98:	b25b      	sxtb	r3, r3
 8008a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9e:	d103      	bne.n	8008aa8 <vQueueWaitForMessageRestricted+0x40>
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008aa8:	f002 ff60 	bl	800b96c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d106      	bne.n	8008ac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	3324      	adds	r3, #36	@ 0x24
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	68b9      	ldr	r1, [r7, #8]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 fdc1 	bl	8009644 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008ac2:	6978      	ldr	r0, [r7, #20]
 8008ac4:	f7ff fefc 	bl	80088c0 <prvUnlockQueue>
	}
 8008ac8:	bf00      	nop
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b08e      	sub	sp, #56	@ 0x38
 8008ad4:	af04      	add	r7, sp, #16
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	607a      	str	r2, [r7, #4]
 8008adc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <xTaskCreateStatic+0x2c>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	623b      	str	r3, [r7, #32]
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10b      	bne.n	8008b1a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	61fb      	str	r3, [r7, #28]
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop
 8008b18:	e7fd      	b.n	8008b16 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b1a:	235c      	movs	r3, #92	@ 0x5c
 8008b1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b22:	d00b      	beq.n	8008b3c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	61bb      	str	r3, [r7, #24]
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01e      	beq.n	8008b82 <xTaskCreateStatic+0xb2>
 8008b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d01b      	beq.n	8008b82 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b52:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9303      	str	r3, [sp, #12]
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	9302      	str	r3, [sp, #8]
 8008b64:	f107 0314 	add.w	r3, r7, #20
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f850 	bl	8008c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b7c:	f000 f8de 	bl	8008d3c <prvAddNewTaskToReadyList>
 8008b80:	e001      	b.n	8008b86 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b86:	697b      	ldr	r3, [r7, #20]
	}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3728      	adds	r7, #40	@ 0x28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	@ 0x30
 8008b94:	af04      	add	r7, sp, #16
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f002 fb8f 	bl	800b2c8 <pvPortMalloc>
 8008baa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00e      	beq.n	8008bd0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bb2:	205c      	movs	r0, #92	@ 0x5c
 8008bb4:	f002 fb88 	bl	800b2c8 <pvPortMalloc>
 8008bb8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bc6:	e005      	b.n	8008bd4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	f002 fc4b 	bl	800b464 <vPortFree>
 8008bce:	e001      	b.n	8008bd4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d017      	beq.n	8008c0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008be2:	88fa      	ldrh	r2, [r7, #6]
 8008be4:	2300      	movs	r3, #0
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	9302      	str	r3, [sp, #8]
 8008bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68b9      	ldr	r1, [r7, #8]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 f80e 	bl	8008c1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bfe:	69f8      	ldr	r0, [r7, #28]
 8008c00:	f000 f89c 	bl	8008d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c04:	2301      	movs	r3, #1
 8008c06:	61bb      	str	r3, [r7, #24]
 8008c08:	e002      	b.n	8008c10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c10:	69bb      	ldr	r3, [r7, #24]
	}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3720      	adds	r7, #32
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b088      	sub	sp, #32
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	461a      	mov	r2, r3
 8008c32:	21a5      	movs	r1, #165	@ 0xa5
 8008c34:	f015 f883 	bl	801dd3e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008c42:	440b      	add	r3, r1
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	f003 0307 	and.w	r3, r3, #7
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	617b      	str	r3, [r7, #20]
}
 8008c6e:	bf00      	nop
 8008c70:	bf00      	nop
 8008c72:	e7fd      	b.n	8008c70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d01f      	beq.n	8008cba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	61fb      	str	r3, [r7, #28]
 8008c7e:	e012      	b.n	8008ca6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	7819      	ldrb	r1, [r3, #0]
 8008c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	3334      	adds	r3, #52	@ 0x34
 8008c90:	460a      	mov	r2, r1
 8008c92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c94:	68ba      	ldr	r2, [r7, #8]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	4413      	add	r3, r2
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	61fb      	str	r3, [r7, #28]
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	2b0f      	cmp	r3, #15
 8008caa:	d9e9      	bls.n	8008c80 <prvInitialiseNewTask+0x66>
 8008cac:	e000      	b.n	8008cb0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008cae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cb8:	e003      	b.n	8008cc2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	2b37      	cmp	r3, #55	@ 0x37
 8008cc6:	d901      	bls.n	8008ccc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cc8:	2337      	movs	r3, #55	@ 0x37
 8008cca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	2200      	movs	r2, #0
 8008cdc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fd3e 	bl	8007764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cea:	3318      	adds	r3, #24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fe fd39 	bl	8007764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d06:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	68f9      	ldr	r1, [r7, #12]
 8008d1a:	69b8      	ldr	r0, [r7, #24]
 8008d1c:	f002 fcc2 	bl	800b6a4 <pxPortInitialiseStack>
 8008d20:	4602      	mov	r2, r0
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d32:	bf00      	nop
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d44:	f002 fde0 	bl	800b908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d48:	4b2d      	ldr	r3, [pc, #180]	@ (8008e00 <prvAddNewTaskToReadyList+0xc4>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8008e00 <prvAddNewTaskToReadyList+0xc4>)
 8008d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d52:	4b2c      	ldr	r3, [pc, #176]	@ (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d60:	4b27      	ldr	r3, [pc, #156]	@ (8008e00 <prvAddNewTaskToReadyList+0xc4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d110      	bne.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d68:	f000 fd9a 	bl	80098a0 <prvInitialiseTaskLists>
 8008d6c:	e00d      	b.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d6e:	4b26      	ldr	r3, [pc, #152]	@ (8008e08 <prvAddNewTaskToReadyList+0xcc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d109      	bne.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d76:	4b23      	ldr	r3, [pc, #140]	@ (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d802      	bhi.n	8008d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d84:	4a1f      	ldr	r2, [pc, #124]	@ (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d8a:	4b20      	ldr	r3, [pc, #128]	@ (8008e0c <prvAddNewTaskToReadyList+0xd0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	4a1e      	ldr	r2, [pc, #120]	@ (8008e0c <prvAddNewTaskToReadyList+0xd0>)
 8008d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d94:	4b1d      	ldr	r3, [pc, #116]	@ (8008e0c <prvAddNewTaskToReadyList+0xd0>)
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da0:	4b1b      	ldr	r3, [pc, #108]	@ (8008e10 <prvAddNewTaskToReadyList+0xd4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d903      	bls.n	8008db0 <prvAddNewTaskToReadyList+0x74>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	4a18      	ldr	r2, [pc, #96]	@ (8008e10 <prvAddNewTaskToReadyList+0xd4>)
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4a15      	ldr	r2, [pc, #84]	@ (8008e14 <prvAddNewTaskToReadyList+0xd8>)
 8008dbe:	441a      	add	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	f7fe fcd9 	bl	800777e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dcc:	f002 fdce 	bl	800b96c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8008e08 <prvAddNewTaskToReadyList+0xcc>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00e      	beq.n	8008df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008e04 <prvAddNewTaskToReadyList+0xc8>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d207      	bcs.n	8008df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008de6:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <prvAddNewTaskToReadyList+0xdc>)
 8008de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008df6:	bf00      	nop
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000854 	.word	0x20000854
 8008e04:	20000380 	.word	0x20000380
 8008e08:	20000860 	.word	0x20000860
 8008e0c:	20000870 	.word	0x20000870
 8008e10:	2000085c 	.word	0x2000085c
 8008e14:	20000384 	.word	0x20000384
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008e24:	f002 fd70 	bl	800b908 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <vTaskDelete+0x18>
 8008e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ee4 <vTaskDelete+0xc8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	e000      	b.n	8008e36 <vTaskDelete+0x1a>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fe fcfb 	bl	8007838 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fcf2 	bl	8007838 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008e54:	4b24      	ldr	r3, [pc, #144]	@ (8008ee8 <vTaskDelete+0xcc>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	4a23      	ldr	r2, [pc, #140]	@ (8008ee8 <vTaskDelete+0xcc>)
 8008e5c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008e5e:	4b21      	ldr	r3, [pc, #132]	@ (8008ee4 <vTaskDelete+0xc8>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d10b      	bne.n	8008e80 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	481f      	ldr	r0, [pc, #124]	@ (8008eec <vTaskDelete+0xd0>)
 8008e70:	f7fe fc85 	bl	800777e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008e74:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef0 <vTaskDelete+0xd4>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef0 <vTaskDelete+0xd4>)
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	e009      	b.n	8008e94 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008e80:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef4 <vTaskDelete+0xd8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef4 <vTaskDelete+0xd8>)
 8008e88:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 fe4a 	bl	8009b24 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008e90:	f000 fe78 	bl	8009b84 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008e94:	f002 fd6a 	bl	800b96c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008e98:	4b17      	ldr	r3, [pc, #92]	@ (8008ef8 <vTaskDelete+0xdc>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d01c      	beq.n	8008eda <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008ea0:	4b10      	ldr	r3, [pc, #64]	@ (8008ee4 <vTaskDelete+0xc8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d117      	bne.n	8008eda <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008eaa:	4b14      	ldr	r3, [pc, #80]	@ (8008efc <vTaskDelete+0xe0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <vTaskDelete+0xae>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	60bb      	str	r3, [r7, #8]
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	e7fd      	b.n	8008ec6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008eca:	4b0d      	ldr	r3, [pc, #52]	@ (8008f00 <vTaskDelete+0xe4>)
 8008ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000380 	.word	0x20000380
 8008ee8:	20000870 	.word	0x20000870
 8008eec:	20000828 	.word	0x20000828
 8008ef0:	2000083c 	.word	0x2000083c
 8008ef4:	20000854 	.word	0x20000854
 8008ef8:	20000860 	.word	0x20000860
 8008efc:	2000087c 	.word	0x2000087c
 8008f00:	e000ed04 	.word	0xe000ed04

08008f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d018      	beq.n	8008f48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f16:	4b14      	ldr	r3, [pc, #80]	@ (8008f68 <vTaskDelay+0x64>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <vTaskDelay+0x32>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	60bb      	str	r3, [r7, #8]
}
 8008f30:	bf00      	nop
 8008f32:	bf00      	nop
 8008f34:	e7fd      	b.n	8008f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f36:	f000 f8eb 	bl	8009110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 f89b 	bl	800a078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f42:	f000 f8f3 	bl	800912c <xTaskResumeAll>
 8008f46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d107      	bne.n	8008f5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f4e:	4b07      	ldr	r3, [pc, #28]	@ (8008f6c <vTaskDelay+0x68>)
 8008f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	2000087c 	.word	0x2000087c
 8008f6c:	e000ed04 	.word	0xe000ed04

08008f70 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10b      	bne.n	8008f9a <eTaskGetState+0x2a>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	60bb      	str	r3, [r7, #8]
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	e7fd      	b.n	8008f96 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8008f9a:	4b24      	ldr	r3, [pc, #144]	@ (800902c <eTaskGetState+0xbc>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d102      	bne.n	8008faa <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	77fb      	strb	r3, [r7, #31]
 8008fa8:	e03a      	b.n	8009020 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8008faa:	f002 fcad 	bl	800b908 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8008fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8009030 <eTaskGetState+0xc0>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8008fba:	4b1e      	ldr	r3, [pc, #120]	@ (8009034 <eTaskGetState+0xc4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8008fc0:	f002 fcd4 	bl	800b96c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d003      	beq.n	8008fd4 <eTaskGetState+0x64>
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d102      	bne.n	8008fda <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	77fb      	strb	r3, [r7, #31]
 8008fd8:	e022      	b.n	8009020 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	4a16      	ldr	r2, [pc, #88]	@ (8009038 <eTaskGetState+0xc8>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d112      	bne.n	8009008 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10b      	bne.n	8009002 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d102      	bne.n	8008ffc <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	77fb      	strb	r3, [r7, #31]
 8008ffa:	e011      	b.n	8009020 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	77fb      	strb	r3, [r7, #31]
 8009000:	e00e      	b.n	8009020 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009002:	2302      	movs	r3, #2
 8009004:	77fb      	strb	r3, [r7, #31]
 8009006:	e00b      	b.n	8009020 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	4a0c      	ldr	r2, [pc, #48]	@ (800903c <eTaskGetState+0xcc>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d002      	beq.n	8009016 <eTaskGetState+0xa6>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d102      	bne.n	800901c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009016:	2304      	movs	r3, #4
 8009018:	77fb      	strb	r3, [r7, #31]
 800901a:	e001      	b.n	8009020 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800901c:	2301      	movs	r3, #1
 800901e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009020:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009022:	4618      	mov	r0, r3
 8009024:	3720      	adds	r7, #32
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000380 	.word	0x20000380
 8009030:	2000080c 	.word	0x2000080c
 8009034:	20000810 	.word	0x20000810
 8009038:	20000840 	.word	0x20000840
 800903c:	20000828 	.word	0x20000828

08009040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b08a      	sub	sp, #40	@ 0x28
 8009044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800904e:	463a      	mov	r2, r7
 8009050:	1d39      	adds	r1, r7, #4
 8009052:	f107 0308 	add.w	r3, r7, #8
 8009056:	4618      	mov	r0, r3
 8009058:	f002 f902 	bl	800b260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	9202      	str	r2, [sp, #8]
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	2300      	movs	r3, #0
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	2300      	movs	r3, #0
 800906c:	460a      	mov	r2, r1
 800906e:	4922      	ldr	r1, [pc, #136]	@ (80090f8 <vTaskStartScheduler+0xb8>)
 8009070:	4822      	ldr	r0, [pc, #136]	@ (80090fc <vTaskStartScheduler+0xbc>)
 8009072:	f7ff fd2d 	bl	8008ad0 <xTaskCreateStatic>
 8009076:	4603      	mov	r3, r0
 8009078:	4a21      	ldr	r2, [pc, #132]	@ (8009100 <vTaskStartScheduler+0xc0>)
 800907a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800907c:	4b20      	ldr	r3, [pc, #128]	@ (8009100 <vTaskStartScheduler+0xc0>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009084:	2301      	movs	r3, #1
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	e001      	b.n	800908e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d102      	bne.n	800909a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009094:	f001 f844 	bl	800a120 <xTimerCreateTimerTask>
 8009098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d116      	bne.n	80090ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	613b      	str	r3, [r7, #16]
}
 80090b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090b4:	4b13      	ldr	r3, [pc, #76]	@ (8009104 <vTaskStartScheduler+0xc4>)
 80090b6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090bc:	4b12      	ldr	r3, [pc, #72]	@ (8009108 <vTaskStartScheduler+0xc8>)
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090c2:	4b12      	ldr	r3, [pc, #72]	@ (800910c <vTaskStartScheduler+0xcc>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090c8:	f002 fb7a 	bl	800b7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090cc:	e00f      	b.n	80090ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090d4:	d10b      	bne.n	80090ee <vTaskStartScheduler+0xae>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	60fb      	str	r3, [r7, #12]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <vTaskStartScheduler+0xaa>
}
 80090ee:	bf00      	nop
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	0801f0ac 	.word	0x0801f0ac
 80090fc:	08009871 	.word	0x08009871
 8009100:	20000878 	.word	0x20000878
 8009104:	20000874 	.word	0x20000874
 8009108:	20000860 	.word	0x20000860
 800910c:	20000858 	.word	0x20000858

08009110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009114:	4b04      	ldr	r3, [pc, #16]	@ (8009128 <vTaskSuspendAll+0x18>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3301      	adds	r3, #1
 800911a:	4a03      	ldr	r2, [pc, #12]	@ (8009128 <vTaskSuspendAll+0x18>)
 800911c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800911e:	bf00      	nop
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	2000087c 	.word	0x2000087c

0800912c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009136:	2300      	movs	r3, #0
 8009138:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800913a:	4b42      	ldr	r3, [pc, #264]	@ (8009244 <xTaskResumeAll+0x118>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10b      	bne.n	800915a <xTaskResumeAll+0x2e>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	603b      	str	r3, [r7, #0]
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop
 8009158:	e7fd      	b.n	8009156 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800915a:	f002 fbd5 	bl	800b908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800915e:	4b39      	ldr	r3, [pc, #228]	@ (8009244 <xTaskResumeAll+0x118>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3b01      	subs	r3, #1
 8009164:	4a37      	ldr	r2, [pc, #220]	@ (8009244 <xTaskResumeAll+0x118>)
 8009166:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009168:	4b36      	ldr	r3, [pc, #216]	@ (8009244 <xTaskResumeAll+0x118>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d162      	bne.n	8009236 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009170:	4b35      	ldr	r3, [pc, #212]	@ (8009248 <xTaskResumeAll+0x11c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d05e      	beq.n	8009236 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009178:	e02f      	b.n	80091da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800917a:	4b34      	ldr	r3, [pc, #208]	@ (800924c <xTaskResumeAll+0x120>)
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3318      	adds	r3, #24
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fb56 	bl	8007838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3304      	adds	r3, #4
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fb51 	bl	8007838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	4b2d      	ldr	r3, [pc, #180]	@ (8009250 <xTaskResumeAll+0x124>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d903      	bls.n	80091aa <xTaskResumeAll+0x7e>
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009250 <xTaskResumeAll+0x124>)
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4a27      	ldr	r2, [pc, #156]	@ (8009254 <xTaskResumeAll+0x128>)
 80091b8:	441a      	add	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	3304      	adds	r3, #4
 80091be:	4619      	mov	r1, r3
 80091c0:	4610      	mov	r0, r2
 80091c2:	f7fe fadc 	bl	800777e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ca:	4b23      	ldr	r3, [pc, #140]	@ (8009258 <xTaskResumeAll+0x12c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d302      	bcc.n	80091da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80091d4:	4b21      	ldr	r3, [pc, #132]	@ (800925c <xTaskResumeAll+0x130>)
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091da:	4b1c      	ldr	r3, [pc, #112]	@ (800924c <xTaskResumeAll+0x120>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1cb      	bne.n	800917a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091e8:	f000 fccc 	bl	8009b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009260 <xTaskResumeAll+0x134>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d010      	beq.n	800921a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091f8:	f000 f8e6 	bl	80093c8 <xTaskIncrementTick>
 80091fc:	4603      	mov	r3, r0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009202:	4b16      	ldr	r3, [pc, #88]	@ (800925c <xTaskResumeAll+0x130>)
 8009204:	2201      	movs	r2, #1
 8009206:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3b01      	subs	r3, #1
 800920c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1f1      	bne.n	80091f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009214:	4b12      	ldr	r3, [pc, #72]	@ (8009260 <xTaskResumeAll+0x134>)
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800921a:	4b10      	ldr	r3, [pc, #64]	@ (800925c <xTaskResumeAll+0x130>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009222:	2301      	movs	r3, #1
 8009224:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009226:	4b0f      	ldr	r3, [pc, #60]	@ (8009264 <xTaskResumeAll+0x138>)
 8009228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	f3bf 8f4f 	dsb	sy
 8009232:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009236:	f002 fb99 	bl	800b96c <vPortExitCritical>

	return xAlreadyYielded;
 800923a:	68bb      	ldr	r3, [r7, #8]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	2000087c 	.word	0x2000087c
 8009248:	20000854 	.word	0x20000854
 800924c:	20000814 	.word	0x20000814
 8009250:	2000085c 	.word	0x2000085c
 8009254:	20000384 	.word	0x20000384
 8009258:	20000380 	.word	0x20000380
 800925c:	20000868 	.word	0x20000868
 8009260:	20000864 	.word	0x20000864
 8009264:	e000ed04 	.word	0xe000ed04

08009268 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800926e:	4b05      	ldr	r3, [pc, #20]	@ (8009284 <xTaskGetTickCount+0x1c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009274:	687b      	ldr	r3, [r7, #4]
}
 8009276:	4618      	mov	r0, r3
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000858 	.word	0x20000858

08009288 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800928e:	f002 fc1b 	bl	800bac8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009292:	2300      	movs	r3, #0
 8009294:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009296:	4b04      	ldr	r3, [pc, #16]	@ (80092a8 <xTaskGetTickCountFromISR+0x20>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800929c:	683b      	ldr	r3, [r7, #0]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000858 	.word	0x20000858

080092ac <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80092b8:	2300      	movs	r3, #0
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	2338      	movs	r3, #56	@ 0x38
 80092be:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80092c0:	f7ff ff26 	bl	8009110 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80092c4:	4b3a      	ldr	r3, [pc, #232]	@ (80093b0 <uxTaskGetSystemState+0x104>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d368      	bcc.n	80093a0 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	4613      	mov	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	461a      	mov	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	1898      	adds	r0, r3, r2
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	4613      	mov	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4413      	add	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4a31      	ldr	r2, [pc, #196]	@ (80093b4 <uxTaskGetSystemState+0x108>)
 80092f0:	4413      	add	r3, r2
 80092f2:	2201      	movs	r2, #1
 80092f4:	4619      	mov	r1, r3
 80092f6:	f000 fba7 	bl	8009a48 <prvListTasksWithinSingleList>
 80092fa:	4602      	mov	r2, r0
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	4413      	add	r3, r2
 8009300:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e2      	bne.n	80092ce <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	4613      	mov	r3, r2
 800930c:	00db      	lsls	r3, r3, #3
 800930e:	4413      	add	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	461a      	mov	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	4a27      	ldr	r2, [pc, #156]	@ (80093b8 <uxTaskGetSystemState+0x10c>)
 800931a:	6811      	ldr	r1, [r2, #0]
 800931c:	2202      	movs	r2, #2
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fb92 	bl	8009a48 <prvListTasksWithinSingleList>
 8009324:	4602      	mov	r2, r0
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	4413      	add	r3, r2
 800932a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800932c:	697a      	ldr	r2, [r7, #20]
 800932e:	4613      	mov	r3, r2
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	4413      	add	r3, r2
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	461a      	mov	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	4a1f      	ldr	r2, [pc, #124]	@ (80093bc <uxTaskGetSystemState+0x110>)
 800933e:	6811      	ldr	r1, [r2, #0]
 8009340:	2202      	movs	r2, #2
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fb80 	bl	8009a48 <prvListTasksWithinSingleList>
 8009348:	4602      	mov	r2, r0
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	4413      	add	r3, r2
 800934e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4613      	mov	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	461a      	mov	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	2204      	movs	r2, #4
 8009362:	4917      	ldr	r1, [pc, #92]	@ (80093c0 <uxTaskGetSystemState+0x114>)
 8009364:	4618      	mov	r0, r3
 8009366:	f000 fb6f 	bl	8009a48 <prvListTasksWithinSingleList>
 800936a:	4602      	mov	r2, r0
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	4413      	add	r3, r2
 8009370:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	4613      	mov	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	461a      	mov	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4413      	add	r3, r2
 8009382:	2203      	movs	r2, #3
 8009384:	490f      	ldr	r1, [pc, #60]	@ (80093c4 <uxTaskGetSystemState+0x118>)
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fb5e 	bl	8009a48 <prvListTasksWithinSingleList>
 800938c:	4602      	mov	r2, r0
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	4413      	add	r3, r2
 8009392:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80093a0:	f7ff fec4 	bl	800912c <xTaskResumeAll>

		return uxTask;
 80093a4:	697b      	ldr	r3, [r7, #20]
	}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20000854 	.word	0x20000854
 80093b4:	20000384 	.word	0x20000384
 80093b8:	2000080c 	.word	0x2000080c
 80093bc:	20000810 	.word	0x20000810
 80093c0:	20000828 	.word	0x20000828
 80093c4:	20000840 	.word	0x20000840

080093c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d2:	4b4f      	ldr	r3, [pc, #316]	@ (8009510 <xTaskIncrementTick+0x148>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f040 8090 	bne.w	80094fc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093dc:	4b4d      	ldr	r3, [pc, #308]	@ (8009514 <xTaskIncrementTick+0x14c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093e4:	4a4b      	ldr	r2, [pc, #300]	@ (8009514 <xTaskIncrementTick+0x14c>)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d121      	bne.n	8009434 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80093f0:	4b49      	ldr	r3, [pc, #292]	@ (8009518 <xTaskIncrementTick+0x150>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <xTaskIncrementTick+0x4a>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	603b      	str	r3, [r7, #0]
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <xTaskIncrementTick+0x46>
 8009412:	4b41      	ldr	r3, [pc, #260]	@ (8009518 <xTaskIncrementTick+0x150>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	4b40      	ldr	r3, [pc, #256]	@ (800951c <xTaskIncrementTick+0x154>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a3e      	ldr	r2, [pc, #248]	@ (8009518 <xTaskIncrementTick+0x150>)
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	4a3e      	ldr	r2, [pc, #248]	@ (800951c <xTaskIncrementTick+0x154>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	4b3e      	ldr	r3, [pc, #248]	@ (8009520 <xTaskIncrementTick+0x158>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	4a3c      	ldr	r2, [pc, #240]	@ (8009520 <xTaskIncrementTick+0x158>)
 800942e:	6013      	str	r3, [r2, #0]
 8009430:	f000 fba8 	bl	8009b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009434:	4b3b      	ldr	r3, [pc, #236]	@ (8009524 <xTaskIncrementTick+0x15c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	429a      	cmp	r2, r3
 800943c:	d349      	bcc.n	80094d2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800943e:	4b36      	ldr	r3, [pc, #216]	@ (8009518 <xTaskIncrementTick+0x150>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d104      	bne.n	8009452 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009448:	4b36      	ldr	r3, [pc, #216]	@ (8009524 <xTaskIncrementTick+0x15c>)
 800944a:	f04f 32ff 	mov.w	r2, #4294967295
 800944e:	601a      	str	r2, [r3, #0]
					break;
 8009450:	e03f      	b.n	80094d2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009452:	4b31      	ldr	r3, [pc, #196]	@ (8009518 <xTaskIncrementTick+0x150>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d203      	bcs.n	8009472 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800946a:	4a2e      	ldr	r2, [pc, #184]	@ (8009524 <xTaskIncrementTick+0x15c>)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009470:	e02f      	b.n	80094d2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	3304      	adds	r3, #4
 8009476:	4618      	mov	r0, r3
 8009478:	f7fe f9de 	bl	8007838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	3318      	adds	r3, #24
 8009488:	4618      	mov	r0, r3
 800948a:	f7fe f9d5 	bl	8007838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009492:	4b25      	ldr	r3, [pc, #148]	@ (8009528 <xTaskIncrementTick+0x160>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d903      	bls.n	80094a2 <xTaskIncrementTick+0xda>
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949e:	4a22      	ldr	r2, [pc, #136]	@ (8009528 <xTaskIncrementTick+0x160>)
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4a1f      	ldr	r2, [pc, #124]	@ (800952c <xTaskIncrementTick+0x164>)
 80094b0:	441a      	add	r2, r3
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f7fe f960 	bl	800777e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009530 <xTaskIncrementTick+0x168>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d3b8      	bcc.n	800943e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80094cc:	2301      	movs	r3, #1
 80094ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094d0:	e7b5      	b.n	800943e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094d2:	4b17      	ldr	r3, [pc, #92]	@ (8009530 <xTaskIncrementTick+0x168>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094d8:	4914      	ldr	r1, [pc, #80]	@ (800952c <xTaskIncrementTick+0x164>)
 80094da:	4613      	mov	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	440b      	add	r3, r1
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d901      	bls.n	80094ee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094ee:	4b11      	ldr	r3, [pc, #68]	@ (8009534 <xTaskIncrementTick+0x16c>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d007      	beq.n	8009506 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80094f6:	2301      	movs	r3, #1
 80094f8:	617b      	str	r3, [r7, #20]
 80094fa:	e004      	b.n	8009506 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094fc:	4b0e      	ldr	r3, [pc, #56]	@ (8009538 <xTaskIncrementTick+0x170>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	4a0d      	ldr	r2, [pc, #52]	@ (8009538 <xTaskIncrementTick+0x170>)
 8009504:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009506:	697b      	ldr	r3, [r7, #20]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	2000087c 	.word	0x2000087c
 8009514:	20000858 	.word	0x20000858
 8009518:	2000080c 	.word	0x2000080c
 800951c:	20000810 	.word	0x20000810
 8009520:	2000086c 	.word	0x2000086c
 8009524:	20000874 	.word	0x20000874
 8009528:	2000085c 	.word	0x2000085c
 800952c:	20000384 	.word	0x20000384
 8009530:	20000380 	.word	0x20000380
 8009534:	20000868 	.word	0x20000868
 8009538:	20000864 	.word	0x20000864

0800953c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009542:	4b28      	ldr	r3, [pc, #160]	@ (80095e4 <vTaskSwitchContext+0xa8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800954a:	4b27      	ldr	r3, [pc, #156]	@ (80095e8 <vTaskSwitchContext+0xac>)
 800954c:	2201      	movs	r2, #1
 800954e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009550:	e042      	b.n	80095d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009552:	4b25      	ldr	r3, [pc, #148]	@ (80095e8 <vTaskSwitchContext+0xac>)
 8009554:	2200      	movs	r2, #0
 8009556:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009558:	4b24      	ldr	r3, [pc, #144]	@ (80095ec <vTaskSwitchContext+0xb0>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e011      	b.n	8009584 <vTaskSwitchContext+0x48>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10b      	bne.n	800957e <vTaskSwitchContext+0x42>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	607b      	str	r3, [r7, #4]
}
 8009578:	bf00      	nop
 800957a:	bf00      	nop
 800957c:	e7fd      	b.n	800957a <vTaskSwitchContext+0x3e>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	3b01      	subs	r3, #1
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	491a      	ldr	r1, [pc, #104]	@ (80095f0 <vTaskSwitchContext+0xb4>)
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	4613      	mov	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	440b      	add	r3, r1
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d0e3      	beq.n	8009560 <vTaskSwitchContext+0x24>
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4a13      	ldr	r2, [pc, #76]	@ (80095f0 <vTaskSwitchContext+0xb4>)
 80095a4:	4413      	add	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	685a      	ldr	r2, [r3, #4]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	605a      	str	r2, [r3, #4]
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	3308      	adds	r3, #8
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d104      	bne.n	80095c8 <vTaskSwitchContext+0x8c>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	605a      	str	r2, [r3, #4]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	4a09      	ldr	r2, [pc, #36]	@ (80095f4 <vTaskSwitchContext+0xb8>)
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	4a06      	ldr	r2, [pc, #24]	@ (80095ec <vTaskSwitchContext+0xb0>)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6013      	str	r3, [r2, #0]
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	2000087c 	.word	0x2000087c
 80095e8:	20000868 	.word	0x20000868
 80095ec:	2000085c 	.word	0x2000085c
 80095f0:	20000384 	.word	0x20000384
 80095f4:	20000380 	.word	0x20000380

080095f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10b      	bne.n	8009620 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60fb      	str	r3, [r7, #12]
}
 800961a:	bf00      	nop
 800961c:	bf00      	nop
 800961e:	e7fd      	b.n	800961c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009620:	4b07      	ldr	r3, [pc, #28]	@ (8009640 <vTaskPlaceOnEventList+0x48>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3318      	adds	r3, #24
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7fe f8cc 	bl	80077c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800962e:	2101      	movs	r1, #1
 8009630:	6838      	ldr	r0, [r7, #0]
 8009632:	f000 fd21 	bl	800a078 <prvAddCurrentTaskToDelayedList>
}
 8009636:	bf00      	nop
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20000380 	.word	0x20000380

08009644 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10b      	bne.n	800966e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	617b      	str	r3, [r7, #20]
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	e7fd      	b.n	800966a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800966e:	4b0a      	ldr	r3, [pc, #40]	@ (8009698 <vTaskPlaceOnEventListRestricted+0x54>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3318      	adds	r3, #24
 8009674:	4619      	mov	r1, r3
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7fe f881 	bl	800777e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009682:	f04f 33ff 	mov.w	r3, #4294967295
 8009686:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009688:	6879      	ldr	r1, [r7, #4]
 800968a:	68b8      	ldr	r0, [r7, #8]
 800968c:	f000 fcf4 	bl	800a078 <prvAddCurrentTaskToDelayedList>
	}
 8009690:	bf00      	nop
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20000380 	.word	0x20000380

0800969c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10b      	bne.n	80096ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60fb      	str	r3, [r7, #12]
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	3318      	adds	r3, #24
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe f8b2 	bl	8007838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d4:	4b1d      	ldr	r3, [pc, #116]	@ (800974c <xTaskRemoveFromEventList+0xb0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d11d      	bne.n	8009718 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	3304      	adds	r3, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe f8a9 	bl	8007838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ea:	4b19      	ldr	r3, [pc, #100]	@ (8009750 <xTaskRemoveFromEventList+0xb4>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d903      	bls.n	80096fa <xTaskRemoveFromEventList+0x5e>
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f6:	4a16      	ldr	r2, [pc, #88]	@ (8009750 <xTaskRemoveFromEventList+0xb4>)
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4a13      	ldr	r2, [pc, #76]	@ (8009754 <xTaskRemoveFromEventList+0xb8>)
 8009708:	441a      	add	r2, r3
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7fe f834 	bl	800777e <vListInsertEnd>
 8009716:	e005      	b.n	8009724 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	3318      	adds	r3, #24
 800971c:	4619      	mov	r1, r3
 800971e:	480e      	ldr	r0, [pc, #56]	@ (8009758 <xTaskRemoveFromEventList+0xbc>)
 8009720:	f7fe f82d 	bl	800777e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009728:	4b0c      	ldr	r3, [pc, #48]	@ (800975c <xTaskRemoveFromEventList+0xc0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972e:	429a      	cmp	r2, r3
 8009730:	d905      	bls.n	800973e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009732:	2301      	movs	r3, #1
 8009734:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009736:	4b0a      	ldr	r3, [pc, #40]	@ (8009760 <xTaskRemoveFromEventList+0xc4>)
 8009738:	2201      	movs	r2, #1
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	e001      	b.n	8009742 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800973e:	2300      	movs	r3, #0
 8009740:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009742:	697b      	ldr	r3, [r7, #20]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	2000087c 	.word	0x2000087c
 8009750:	2000085c 	.word	0x2000085c
 8009754:	20000384 	.word	0x20000384
 8009758:	20000814 	.word	0x20000814
 800975c:	20000380 	.word	0x20000380
 8009760:	20000868 	.word	0x20000868

08009764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800976c:	4b06      	ldr	r3, [pc, #24]	@ (8009788 <vTaskInternalSetTimeOutState+0x24>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <vTaskInternalSetTimeOutState+0x28>)
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	605a      	str	r2, [r3, #4]
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	2000086c 	.word	0x2000086c
 800978c:	20000858 	.word	0x20000858

08009790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10b      	bne.n	80097b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	613b      	str	r3, [r7, #16]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10b      	bne.n	80097d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	60fb      	str	r3, [r7, #12]
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	e7fd      	b.n	80097d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80097d6:	f002 f897 	bl	800b908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097da:	4b1d      	ldr	r3, [pc, #116]	@ (8009850 <xTaskCheckForTimeOut+0xc0>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	1ad3      	subs	r3, r2, r3
 80097e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f2:	d102      	bne.n	80097fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	e023      	b.n	8009842 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4b15      	ldr	r3, [pc, #84]	@ (8009854 <xTaskCheckForTimeOut+0xc4>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	429a      	cmp	r2, r3
 8009804:	d007      	beq.n	8009816 <xTaskCheckForTimeOut+0x86>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	429a      	cmp	r2, r3
 800980e:	d302      	bcc.n	8009816 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009810:	2301      	movs	r3, #1
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	e015      	b.n	8009842 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	697a      	ldr	r2, [r7, #20]
 800981c:	429a      	cmp	r2, r3
 800981e:	d20b      	bcs.n	8009838 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	1ad2      	subs	r2, r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff ff99 	bl	8009764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	61fb      	str	r3, [r7, #28]
 8009836:	e004      	b.n	8009842 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800983e:	2301      	movs	r3, #1
 8009840:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009842:	f002 f893 	bl	800b96c <vPortExitCritical>

	return xReturn;
 8009846:	69fb      	ldr	r3, [r7, #28]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3720      	adds	r7, #32
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20000858 	.word	0x20000858
 8009854:	2000086c 	.word	0x2000086c

08009858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800985c:	4b03      	ldr	r3, [pc, #12]	@ (800986c <vTaskMissedYield+0x14>)
 800985e:	2201      	movs	r2, #1
 8009860:	601a      	str	r2, [r3, #0]
}
 8009862:	bf00      	nop
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	20000868 	.word	0x20000868

08009870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009878:	f000 f852 	bl	8009920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800987c:	4b06      	ldr	r3, [pc, #24]	@ (8009898 <prvIdleTask+0x28>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d9f9      	bls.n	8009878 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009884:	4b05      	ldr	r3, [pc, #20]	@ (800989c <prvIdleTask+0x2c>)
 8009886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800988a:	601a      	str	r2, [r3, #0]
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009894:	e7f0      	b.n	8009878 <prvIdleTask+0x8>
 8009896:	bf00      	nop
 8009898:	20000384 	.word	0x20000384
 800989c:	e000ed04 	.word	0xe000ed04

080098a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098a6:	2300      	movs	r3, #0
 80098a8:	607b      	str	r3, [r7, #4]
 80098aa:	e00c      	b.n	80098c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4a12      	ldr	r2, [pc, #72]	@ (8009900 <prvInitialiseTaskLists+0x60>)
 80098b8:	4413      	add	r3, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f7fd ff32 	bl	8007724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3301      	adds	r3, #1
 80098c4:	607b      	str	r3, [r7, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b37      	cmp	r3, #55	@ 0x37
 80098ca:	d9ef      	bls.n	80098ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098cc:	480d      	ldr	r0, [pc, #52]	@ (8009904 <prvInitialiseTaskLists+0x64>)
 80098ce:	f7fd ff29 	bl	8007724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098d2:	480d      	ldr	r0, [pc, #52]	@ (8009908 <prvInitialiseTaskLists+0x68>)
 80098d4:	f7fd ff26 	bl	8007724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098d8:	480c      	ldr	r0, [pc, #48]	@ (800990c <prvInitialiseTaskLists+0x6c>)
 80098da:	f7fd ff23 	bl	8007724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098de:	480c      	ldr	r0, [pc, #48]	@ (8009910 <prvInitialiseTaskLists+0x70>)
 80098e0:	f7fd ff20 	bl	8007724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098e4:	480b      	ldr	r0, [pc, #44]	@ (8009914 <prvInitialiseTaskLists+0x74>)
 80098e6:	f7fd ff1d 	bl	8007724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009918 <prvInitialiseTaskLists+0x78>)
 80098ec:	4a05      	ldr	r2, [pc, #20]	@ (8009904 <prvInitialiseTaskLists+0x64>)
 80098ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098f0:	4b0a      	ldr	r3, [pc, #40]	@ (800991c <prvInitialiseTaskLists+0x7c>)
 80098f2:	4a05      	ldr	r2, [pc, #20]	@ (8009908 <prvInitialiseTaskLists+0x68>)
 80098f4:	601a      	str	r2, [r3, #0]
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000384 	.word	0x20000384
 8009904:	200007e4 	.word	0x200007e4
 8009908:	200007f8 	.word	0x200007f8
 800990c:	20000814 	.word	0x20000814
 8009910:	20000828 	.word	0x20000828
 8009914:	20000840 	.word	0x20000840
 8009918:	2000080c 	.word	0x2000080c
 800991c:	20000810 	.word	0x20000810

08009920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009926:	e019      	b.n	800995c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009928:	f001 ffee 	bl	800b908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800992c:	4b10      	ldr	r3, [pc, #64]	@ (8009970 <prvCheckTasksWaitingTermination+0x50>)
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3304      	adds	r3, #4
 8009938:	4618      	mov	r0, r3
 800993a:	f7fd ff7d 	bl	8007838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800993e:	4b0d      	ldr	r3, [pc, #52]	@ (8009974 <prvCheckTasksWaitingTermination+0x54>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3b01      	subs	r3, #1
 8009944:	4a0b      	ldr	r2, [pc, #44]	@ (8009974 <prvCheckTasksWaitingTermination+0x54>)
 8009946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009948:	4b0b      	ldr	r3, [pc, #44]	@ (8009978 <prvCheckTasksWaitingTermination+0x58>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3b01      	subs	r3, #1
 800994e:	4a0a      	ldr	r2, [pc, #40]	@ (8009978 <prvCheckTasksWaitingTermination+0x58>)
 8009950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009952:	f002 f80b 	bl	800b96c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f8e4 	bl	8009b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800995c:	4b06      	ldr	r3, [pc, #24]	@ (8009978 <prvCheckTasksWaitingTermination+0x58>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e1      	bne.n	8009928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20000828 	.word	0x20000828
 8009974:	20000854 	.word	0x20000854
 8009978:	2000083c 	.word	0x2000083c

0800997c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <vTaskGetInfo+0x1a>
 8009990:	4b2c      	ldr	r3, [pc, #176]	@ (8009a44 <vTaskGetInfo+0xc8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	e000      	b.n	8009998 <vTaskGetInfo+0x1c>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2200      	movs	r2, #0
 80099ce:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	2b05      	cmp	r3, #5
 80099d4:	d01a      	beq.n	8009a0c <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 80099d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009a44 <vTaskGetInfo+0xc8>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d103      	bne.n	80099e8 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2200      	movs	r2, #0
 80099e4:	731a      	strb	r2, [r3, #12]
 80099e6:	e018      	b.n	8009a1a <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	78fa      	ldrb	r2, [r7, #3]
 80099ec:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80099ee:	78fb      	ldrb	r3, [r7, #3]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d112      	bne.n	8009a1a <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 80099f4:	f7ff fb8c 	bl	8009110 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2202      	movs	r2, #2
 8009a04:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8009a06:	f7ff fb91 	bl	800912c <xTaskResumeAll>
 8009a0a:	e006      	b.n	8009a1a <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8009a0c:	6978      	ldr	r0, [r7, #20]
 8009a0e:	f7ff faaf 	bl	8008f70 <eTaskGetState>
 8009a12:	4603      	mov	r3, r0
 8009a14:	461a      	mov	r2, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 f861 	bl	8009aec <prvTaskCheckFreeStackSpace>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8009a32:	e002      	b.n	8009a3a <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	2200      	movs	r2, #0
 8009a38:	841a      	strh	r2, [r3, #32]
	}
 8009a3a:	bf00      	nop
 8009a3c:	3718      	adds	r7, #24
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20000380 	.word	0x20000380

08009a48 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	@ 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	4613      	mov	r3, r2
 8009a54:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d03f      	beq.n	8009ae2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	623b      	str	r3, [r7, #32]
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	605a      	str	r2, [r3, #4]
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	3308      	adds	r3, #8
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d104      	bne.n	8009a86 <prvListTasksWithinSingleList+0x3e>
 8009a7c:	6a3b      	ldr	r3, [r7, #32]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	605a      	str	r2, [r3, #4]
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	61bb      	str	r3, [r7, #24]
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	605a      	str	r2, [r3, #4]
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d104      	bne.n	8009ab2 <prvListTasksWithinSingleList+0x6a>
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	605a      	str	r2, [r3, #4]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8009aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009abc:	4613      	mov	r3, r2
 8009abe:	00db      	lsls	r3, r3, #3
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1899      	adds	r1, r3, r2
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	2201      	movs	r2, #1
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f7ff ff54 	bl	800997c <vTaskGetInfo>
				uxTask++;
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d1d5      	bne.n	8009a8e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3728      	adds	r7, #40	@ 0x28
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009af8:	e005      	b.n	8009b06 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	3301      	adds	r3, #1
 8009afe:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2ba5      	cmp	r3, #165	@ 0xa5
 8009b0c:	d0f5      	beq.n	8009afa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	089b      	lsrs	r3, r3, #2
 8009b12:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	b29b      	uxth	r3, r3
	}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3714      	adds	r7, #20
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d108      	bne.n	8009b48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fc92 	bl	800b464 <vPortFree>
				vPortFree( pxTCB );
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 fc8f 	bl	800b464 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b46:	e019      	b.n	8009b7c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d103      	bne.n	8009b5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f001 fc86 	bl	800b464 <vPortFree>
	}
 8009b58:	e010      	b.n	8009b7c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d00b      	beq.n	8009b7c <prvDeleteTCB+0x58>
	__asm volatile
 8009b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	60fb      	str	r3, [r7, #12]
}
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	e7fd      	b.n	8009b78 <prvDeleteTCB+0x54>
	}
 8009b7c:	bf00      	nop
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8009bbc <prvResetNextTaskUnblockTime+0x38>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d104      	bne.n	8009b9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b94:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009b96:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b9c:	e008      	b.n	8009bb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b9e:	4b07      	ldr	r3, [pc, #28]	@ (8009bbc <prvResetNextTaskUnblockTime+0x38>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	4a04      	ldr	r2, [pc, #16]	@ (8009bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8009bae:	6013      	str	r3, [r2, #0]
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	2000080c 	.word	0x2000080c
 8009bc0:	20000874 	.word	0x20000874

08009bc4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009bca:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <xTaskGetCurrentTaskHandle+0x1c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009bd0:	687b      	ldr	r3, [r7, #4]
	}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	20000380 	.word	0x20000380

08009be4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bea:	4b0b      	ldr	r3, [pc, #44]	@ (8009c18 <xTaskGetSchedulerState+0x34>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	607b      	str	r3, [r7, #4]
 8009bf6:	e008      	b.n	8009c0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf8:	4b08      	ldr	r3, [pc, #32]	@ (8009c1c <xTaskGetSchedulerState+0x38>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d102      	bne.n	8009c06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c00:	2302      	movs	r3, #2
 8009c02:	607b      	str	r3, [r7, #4]
 8009c04:	e001      	b.n	8009c0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c06:	2300      	movs	r3, #0
 8009c08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c0a:	687b      	ldr	r3, [r7, #4]
	}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	20000860 	.word	0x20000860
 8009c1c:	2000087c 	.word	0x2000087c

08009c20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d051      	beq.n	8009cda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ce4 <xTaskPriorityInherit+0xc4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d241      	bcs.n	8009cc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	db06      	blt.n	8009c5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c4c:	4b25      	ldr	r3, [pc, #148]	@ (8009ce4 <xTaskPriorityInherit+0xc4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c52:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6959      	ldr	r1, [r3, #20]
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c62:	4613      	mov	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce8 <xTaskPriorityInherit+0xc8>)
 8009c6c:	4413      	add	r3, r2
 8009c6e:	4299      	cmp	r1, r3
 8009c70:	d122      	bne.n	8009cb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7fd fdde 	bl	8007838 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009c7c:	4b19      	ldr	r3, [pc, #100]	@ (8009ce4 <xTaskPriorityInherit+0xc4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8a:	4b18      	ldr	r3, [pc, #96]	@ (8009cec <xTaskPriorityInherit+0xcc>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d903      	bls.n	8009c9a <xTaskPriorityInherit+0x7a>
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c96:	4a15      	ldr	r2, [pc, #84]	@ (8009cec <xTaskPriorityInherit+0xcc>)
 8009c98:	6013      	str	r3, [r2, #0]
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4a10      	ldr	r2, [pc, #64]	@ (8009ce8 <xTaskPriorityInherit+0xc8>)
 8009ca8:	441a      	add	r2, r3
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	3304      	adds	r3, #4
 8009cae:	4619      	mov	r1, r3
 8009cb0:	4610      	mov	r0, r2
 8009cb2:	f7fd fd64 	bl	800777e <vListInsertEnd>
 8009cb6:	e004      	b.n	8009cc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce4 <xTaskPriorityInherit+0xc4>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e008      	b.n	8009cda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ccc:	4b05      	ldr	r3, [pc, #20]	@ (8009ce4 <xTaskPriorityInherit+0xc4>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d201      	bcs.n	8009cda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cda:	68fb      	ldr	r3, [r7, #12]
	}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	20000380 	.word	0x20000380
 8009ce8:	20000384 	.word	0x20000384
 8009cec:	2000085c 	.word	0x2000085c

08009cf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d058      	beq.n	8009db8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d06:	4b2f      	ldr	r3, [pc, #188]	@ (8009dc4 <xTaskPriorityDisinherit+0xd4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d00b      	beq.n	8009d28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10b      	bne.n	8009d48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60bb      	str	r3, [r7, #8]
}
 8009d42:	bf00      	nop
 8009d44:	bf00      	nop
 8009d46:	e7fd      	b.n	8009d44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d4c:	1e5a      	subs	r2, r3, #1
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d02c      	beq.n	8009db8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d128      	bne.n	8009db8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fd fd64 	bl	8007838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d88:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc8 <xTaskPriorityDisinherit+0xd8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d903      	bls.n	8009d98 <xTaskPriorityDisinherit+0xa8>
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d94:	4a0c      	ldr	r2, [pc, #48]	@ (8009dc8 <xTaskPriorityDisinherit+0xd8>)
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4a09      	ldr	r2, [pc, #36]	@ (8009dcc <xTaskPriorityDisinherit+0xdc>)
 8009da6:	441a      	add	r2, r3
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	3304      	adds	r3, #4
 8009dac:	4619      	mov	r1, r3
 8009dae:	4610      	mov	r0, r2
 8009db0:	f7fd fce5 	bl	800777e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009db4:	2301      	movs	r3, #1
 8009db6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009db8:	697b      	ldr	r3, [r7, #20]
	}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000380 	.word	0x20000380
 8009dc8:	2000085c 	.word	0x2000085c
 8009dcc:	20000384 	.word	0x20000384

08009dd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009dde:	2301      	movs	r3, #1
 8009de0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d06c      	beq.n	8009ec2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10b      	bne.n	8009e08 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	60fb      	str	r3, [r7, #12]
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	e7fd      	b.n	8009e04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d902      	bls.n	8009e18 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	61fb      	str	r3, [r7, #28]
 8009e16:	e002      	b.n	8009e1e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d04c      	beq.n	8009ec2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d147      	bne.n	8009ec2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e32:	4b26      	ldr	r3, [pc, #152]	@ (8009ecc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69ba      	ldr	r2, [r7, #24]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d10b      	bne.n	8009e54 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	60bb      	str	r3, [r7, #8]
}
 8009e4e:	bf00      	nop
 8009e50:	bf00      	nop
 8009e52:	e7fd      	b.n	8009e50 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	69fa      	ldr	r2, [r7, #28]
 8009e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	db04      	blt.n	8009e72 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	6959      	ldr	r1, [r3, #20]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4a13      	ldr	r2, [pc, #76]	@ (8009ed0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009e82:	4413      	add	r3, r2
 8009e84:	4299      	cmp	r1, r3
 8009e86:	d11c      	bne.n	8009ec2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fd fcd3 	bl	8007838 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e96:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d903      	bls.n	8009ea6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8009ed4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eaa:	4613      	mov	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4a07      	ldr	r2, [pc, #28]	@ (8009ed0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009eb4:	441a      	add	r2, r3
 8009eb6:	69bb      	ldr	r3, [r7, #24]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	4619      	mov	r1, r3
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	f7fd fc5e 	bl	800777e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ec2:	bf00      	nop
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000380 	.word	0x20000380
 8009ed0:	20000384 	.word	0x20000384
 8009ed4:	2000085c 	.word	0x2000085c

08009ed8 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f013 ffc6 	bl	801de76 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f7f6 fa1a 	bl	8000324 <strlen>
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	e007      	b.n	8009f04 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	4413      	add	r3, r2
 8009efa:	2220      	movs	r2, #32
 8009efc:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3301      	adds	r3, #1
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b0e      	cmp	r3, #14
 8009f08:	d9f4      	bls.n	8009ef4 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	2200      	movs	r2, #0
 8009f12:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4413      	add	r3, r2
	}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
	...

08009f24 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8009f24:	b590      	push	{r4, r7, lr}
 8009f26:	b089      	sub	sp, #36	@ 0x24
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8009f32:	4b45      	ldr	r3, [pc, #276]	@ (800a048 <vTaskList+0x124>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8009f38:	4b43      	ldr	r3, [pc, #268]	@ (800a048 <vTaskList+0x124>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	4413      	add	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 f9bf 	bl	800b2c8 <pvPortMalloc>
 8009f4a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d076      	beq.n	800a040 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8009f52:	2200      	movs	r2, #0
 8009f54:	68f9      	ldr	r1, [r7, #12]
 8009f56:	68b8      	ldr	r0, [r7, #8]
 8009f58:	f7ff f9a8 	bl	80092ac <uxTaskGetSystemState>
 8009f5c:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8009f5e:	2300      	movs	r3, #0
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	e066      	b.n	800a032 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4613      	mov	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	461a      	mov	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	4413      	add	r3, r2
 8009f74:	7b1b      	ldrb	r3, [r3, #12]
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d81b      	bhi.n	8009fb2 <vTaskList+0x8e>
 8009f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f80 <vTaskList+0x5c>)
 8009f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f80:	08009f95 	.word	0x08009f95
 8009f84:	08009f9b 	.word	0x08009f9b
 8009f88:	08009fa1 	.word	0x08009fa1
 8009f8c:	08009fa7 	.word	0x08009fa7
 8009f90:	08009fad 	.word	0x08009fad
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8009f94:	2358      	movs	r3, #88	@ 0x58
 8009f96:	74fb      	strb	r3, [r7, #19]
										break;
 8009f98:	e00e      	b.n	8009fb8 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8009f9a:	2352      	movs	r3, #82	@ 0x52
 8009f9c:	74fb      	strb	r3, [r7, #19]
										break;
 8009f9e:	e00b      	b.n	8009fb8 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8009fa0:	2342      	movs	r3, #66	@ 0x42
 8009fa2:	74fb      	strb	r3, [r7, #19]
										break;
 8009fa4:	e008      	b.n	8009fb8 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8009fa6:	2353      	movs	r3, #83	@ 0x53
 8009fa8:	74fb      	strb	r3, [r7, #19]
										break;
 8009faa:	e005      	b.n	8009fb8 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8009fac:	2344      	movs	r3, #68	@ 0x44
 8009fae:	74fb      	strb	r3, [r7, #19]
										break;
 8009fb0:	e002      	b.n	8009fb8 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	74fb      	strb	r3, [r7, #19]
										break;
 8009fb6:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	00db      	lsls	r3, r3, #3
 8009fbe:	4413      	add	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f7ff ff83 	bl	8009ed8 <prvWriteNameToBuffer>
 8009fd2:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8009fd4:	7cf9      	ldrb	r1, [r7, #19]
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	00db      	lsls	r3, r3, #3
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	6918      	ldr	r0, [r3, #16]
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	4613      	mov	r3, r2
 8009fec:	00db      	lsls	r3, r3, #3
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	8c1b      	ldrh	r3, [r3, #32]
 8009ffa:	461c      	mov	r4, r3
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4613      	mov	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	461a      	mov	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4413      	add	r3, r2
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	9400      	str	r4, [sp, #0]
 800a012:	4603      	mov	r3, r0
 800a014:	460a      	mov	r2, r1
 800a016:	490d      	ldr	r1, [pc, #52]	@ (800a04c <vTaskList+0x128>)
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f013 fe03 	bl	801dc24 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7f6 f980 	bl	8000324 <strlen>
 800a024:	4602      	mov	r2, r0
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4413      	add	r3, r2
 800a02a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	3301      	adds	r3, #1
 800a030:	617b      	str	r3, [r7, #20]
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	429a      	cmp	r2, r3
 800a038:	d394      	bcc.n	8009f64 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800a03a:	68b8      	ldr	r0, [r7, #8]
 800a03c:	f001 fa12 	bl	800b464 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a040:	bf00      	nop
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	bd90      	pop	{r4, r7, pc}
 800a048:	20000854 	.word	0x20000854
 800a04c:	0801f0b4 	.word	0x0801f0b4

0800a050 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a054:	4b07      	ldr	r3, [pc, #28]	@ (800a074 <pvTaskIncrementMutexHeldCount+0x24>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d004      	beq.n	800a066 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a05c:	4b05      	ldr	r3, [pc, #20]	@ (800a074 <pvTaskIncrementMutexHeldCount+0x24>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a062:	3201      	adds	r2, #1
 800a064:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a066:	4b03      	ldr	r3, [pc, #12]	@ (800a074 <pvTaskIncrementMutexHeldCount+0x24>)
 800a068:	681b      	ldr	r3, [r3, #0]
	}
 800a06a:	4618      	mov	r0, r3
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	20000380 	.word	0x20000380

0800a078 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a082:	4b21      	ldr	r3, [pc, #132]	@ (800a108 <prvAddCurrentTaskToDelayedList+0x90>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a088:	4b20      	ldr	r3, [pc, #128]	@ (800a10c <prvAddCurrentTaskToDelayedList+0x94>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3304      	adds	r3, #4
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fd fbd2 	bl	8007838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09a:	d10a      	bne.n	800a0b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a10c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4819      	ldr	r0, [pc, #100]	@ (800a110 <prvAddCurrentTaskToDelayedList+0x98>)
 800a0ac:	f7fd fb67 	bl	800777e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0b0:	e026      	b.n	800a100 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0ba:	4b14      	ldr	r3, [pc, #80]	@ (800a10c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d209      	bcs.n	800a0de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0ca:	4b12      	ldr	r3, [pc, #72]	@ (800a114 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a10c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3304      	adds	r3, #4
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7fd fb75 	bl	80077c6 <vListInsert>
}
 800a0dc:	e010      	b.n	800a100 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0de:	4b0e      	ldr	r3, [pc, #56]	@ (800a118 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a10c <prvAddCurrentTaskToDelayedList+0x94>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	f7fd fb6b 	bl	80077c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d202      	bcs.n	800a100 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a0fa:	4a08      	ldr	r2, [pc, #32]	@ (800a11c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	6013      	str	r3, [r2, #0]
}
 800a100:	bf00      	nop
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	20000858 	.word	0x20000858
 800a10c:	20000380 	.word	0x20000380
 800a110:	20000840 	.word	0x20000840
 800a114:	20000810 	.word	0x20000810
 800a118:	2000080c 	.word	0x2000080c
 800a11c:	20000874 	.word	0x20000874

0800a120 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08a      	sub	sp, #40	@ 0x28
 800a124:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a126:	2300      	movs	r3, #0
 800a128:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a12a:	f000 fb13 	bl	800a754 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a12e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a4 <xTimerCreateTimerTask+0x84>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d021      	beq.n	800a17a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a13e:	1d3a      	adds	r2, r7, #4
 800a140:	f107 0108 	add.w	r1, r7, #8
 800a144:	f107 030c 	add.w	r3, r7, #12
 800a148:	4618      	mov	r0, r3
 800a14a:	f001 f8a3 	bl	800b294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a14e:	6879      	ldr	r1, [r7, #4]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	9202      	str	r2, [sp, #8]
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	2302      	movs	r3, #2
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	2300      	movs	r3, #0
 800a15e:	460a      	mov	r2, r1
 800a160:	4911      	ldr	r1, [pc, #68]	@ (800a1a8 <xTimerCreateTimerTask+0x88>)
 800a162:	4812      	ldr	r0, [pc, #72]	@ (800a1ac <xTimerCreateTimerTask+0x8c>)
 800a164:	f7fe fcb4 	bl	8008ad0 <xTaskCreateStatic>
 800a168:	4603      	mov	r3, r0
 800a16a:	4a11      	ldr	r2, [pc, #68]	@ (800a1b0 <xTimerCreateTimerTask+0x90>)
 800a16c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a16e:	4b10      	ldr	r3, [pc, #64]	@ (800a1b0 <xTimerCreateTimerTask+0x90>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a176:	2301      	movs	r3, #1
 800a178:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10b      	bne.n	800a198 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	613b      	str	r3, [r7, #16]
}
 800a192:	bf00      	nop
 800a194:	bf00      	nop
 800a196:	e7fd      	b.n	800a194 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a198:	697b      	ldr	r3, [r7, #20]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	200008b0 	.word	0x200008b0
 800a1a8:	0801f0c4 	.word	0x0801f0c4
 800a1ac:	0800a2ed 	.word	0x0800a2ed
 800a1b0:	200008b4 	.word	0x200008b4

0800a1b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08a      	sub	sp, #40	@ 0x28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10b      	bne.n	800a1e4 <xTimerGenericCommand+0x30>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	623b      	str	r3, [r7, #32]
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	e7fd      	b.n	800a1e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1e4:	4b19      	ldr	r3, [pc, #100]	@ (800a24c <xTimerGenericCommand+0x98>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d02a      	beq.n	800a242 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	dc18      	bgt.n	800a230 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1fe:	f7ff fcf1 	bl	8009be4 <xTaskGetSchedulerState>
 800a202:	4603      	mov	r3, r0
 800a204:	2b02      	cmp	r3, #2
 800a206:	d109      	bne.n	800a21c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a208:	4b10      	ldr	r3, [pc, #64]	@ (800a24c <xTimerGenericCommand+0x98>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	f107 0110 	add.w	r1, r7, #16
 800a210:	2300      	movs	r3, #0
 800a212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a214:	f7fd fda6 	bl	8007d64 <xQueueGenericSend>
 800a218:	6278      	str	r0, [r7, #36]	@ 0x24
 800a21a:	e012      	b.n	800a242 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a21c:	4b0b      	ldr	r3, [pc, #44]	@ (800a24c <xTimerGenericCommand+0x98>)
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	f107 0110 	add.w	r1, r7, #16
 800a224:	2300      	movs	r3, #0
 800a226:	2200      	movs	r2, #0
 800a228:	f7fd fd9c 	bl	8007d64 <xQueueGenericSend>
 800a22c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a22e:	e008      	b.n	800a242 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a230:	4b06      	ldr	r3, [pc, #24]	@ (800a24c <xTimerGenericCommand+0x98>)
 800a232:	6818      	ldr	r0, [r3, #0]
 800a234:	f107 0110 	add.w	r1, r7, #16
 800a238:	2300      	movs	r3, #0
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	f7fd fe94 	bl	8007f68 <xQueueGenericSendFromISR>
 800a240:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a244:	4618      	mov	r0, r3
 800a246:	3728      	adds	r7, #40	@ 0x28
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	200008b0 	.word	0x200008b0

0800a250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af02      	add	r7, sp, #8
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a25a:	4b23      	ldr	r3, [pc, #140]	@ (800a2e8 <prvProcessExpiredTimer+0x98>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	3304      	adds	r3, #4
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fd fae5 	bl	8007838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d023      	beq.n	800a2c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	699a      	ldr	r2, [r3, #24]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	18d1      	adds	r1, r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	6978      	ldr	r0, [r7, #20]
 800a28a:	f000 f8d5 	bl	800a438 <prvInsertTimerInActiveList>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d020      	beq.n	800a2d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a294:	2300      	movs	r3, #0
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	2300      	movs	r3, #0
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	2100      	movs	r1, #0
 800a29e:	6978      	ldr	r0, [r7, #20]
 800a2a0:	f7ff ff88 	bl	800a1b4 <xTimerGenericCommand>
 800a2a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d114      	bne.n	800a2d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	60fb      	str	r3, [r7, #12]
}
 800a2be:	bf00      	nop
 800a2c0:	bf00      	nop
 800a2c2:	e7fd      	b.n	800a2c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a2ca:	f023 0301 	bic.w	r3, r3, #1
 800a2ce:	b2da      	uxtb	r2, r3
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	6978      	ldr	r0, [r7, #20]
 800a2dc:	4798      	blx	r3
}
 800a2de:	bf00      	nop
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200008a8 	.word	0x200008a8

0800a2ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2f4:	f107 0308 	add.w	r3, r7, #8
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f859 	bl	800a3b0 <prvGetNextExpireTime>
 800a2fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4619      	mov	r1, r3
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f000 f805 	bl	800a314 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a30a:	f000 f8d7 	bl	800a4bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a30e:	bf00      	nop
 800a310:	e7f0      	b.n	800a2f4 <prvTimerTask+0x8>
	...

0800a314 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a31e:	f7fe fef7 	bl	8009110 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a322:	f107 0308 	add.w	r3, r7, #8
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f866 	bl	800a3f8 <prvSampleTimeNow>
 800a32c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d130      	bne.n	800a396 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10a      	bne.n	800a350 <prvProcessTimerOrBlockTask+0x3c>
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d806      	bhi.n	800a350 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a342:	f7fe fef3 	bl	800912c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a346:	68f9      	ldr	r1, [r7, #12]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ff81 	bl	800a250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a34e:	e024      	b.n	800a39a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d008      	beq.n	800a368 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a356:	4b13      	ldr	r3, [pc, #76]	@ (800a3a4 <prvProcessTimerOrBlockTask+0x90>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <prvProcessTimerOrBlockTask+0x50>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <prvProcessTimerOrBlockTask+0x52>
 800a364:	2300      	movs	r3, #0
 800a366:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a368:	4b0f      	ldr	r3, [pc, #60]	@ (800a3a8 <prvProcessTimerOrBlockTask+0x94>)
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	4619      	mov	r1, r3
 800a376:	f7fe fb77 	bl	8008a68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a37a:	f7fe fed7 	bl	800912c <xTaskResumeAll>
 800a37e:	4603      	mov	r3, r0
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10a      	bne.n	800a39a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a384:	4b09      	ldr	r3, [pc, #36]	@ (800a3ac <prvProcessTimerOrBlockTask+0x98>)
 800a386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	f3bf 8f6f 	isb	sy
}
 800a394:	e001      	b.n	800a39a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a396:	f7fe fec9 	bl	800912c <xTaskResumeAll>
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	200008ac 	.word	0x200008ac
 800a3a8:	200008b0 	.word	0x200008b0
 800a3ac:	e000ed04 	.word	0xe000ed04

0800a3b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a3f4 <prvGetNextExpireTime+0x44>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <prvGetNextExpireTime+0x16>
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	e000      	b.n	800a3c8 <prvGetNextExpireTime+0x18>
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3d4:	4b07      	ldr	r3, [pc, #28]	@ (800a3f4 <prvGetNextExpireTime+0x44>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	e001      	b.n	800a3e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr
 800a3f2:	bf00      	nop
 800a3f4:	200008a8 	.word	0x200008a8

0800a3f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a400:	f7fe ff32 	bl	8009268 <xTaskGetTickCount>
 800a404:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a406:	4b0b      	ldr	r3, [pc, #44]	@ (800a434 <prvSampleTimeNow+0x3c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d205      	bcs.n	800a41c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a410:	f000 f93a 	bl	800a688 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	e002      	b.n	800a422 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a422:	4a04      	ldr	r2, [pc, #16]	@ (800a434 <prvSampleTimeNow+0x3c>)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a428:	68fb      	ldr	r3, [r7, #12]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	200008b8 	.word	0x200008b8

0800a438 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68fa      	ldr	r2, [r7, #12]
 800a454:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d812      	bhi.n	800a484 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	1ad2      	subs	r2, r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d302      	bcc.n	800a472 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a46c:	2301      	movs	r3, #1
 800a46e:	617b      	str	r3, [r7, #20]
 800a470:	e01b      	b.n	800a4aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a472:	4b10      	ldr	r3, [pc, #64]	@ (800a4b4 <prvInsertTimerInActiveList+0x7c>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3304      	adds	r3, #4
 800a47a:	4619      	mov	r1, r3
 800a47c:	4610      	mov	r0, r2
 800a47e:	f7fd f9a2 	bl	80077c6 <vListInsert>
 800a482:	e012      	b.n	800a4aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d206      	bcs.n	800a49a <prvInsertTimerInActiveList+0x62>
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d302      	bcc.n	800a49a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a494:	2301      	movs	r3, #1
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e007      	b.n	800a4aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a49a:	4b07      	ldr	r3, [pc, #28]	@ (800a4b8 <prvInsertTimerInActiveList+0x80>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7fd f98e 	bl	80077c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a4aa:	697b      	ldr	r3, [r7, #20]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	200008ac 	.word	0x200008ac
 800a4b8:	200008a8 	.word	0x200008a8

0800a4bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08e      	sub	sp, #56	@ 0x38
 800a4c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4c2:	e0ce      	b.n	800a662 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da19      	bge.n	800a4fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a4ca:	1d3b      	adds	r3, r7, #4
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10b      	bne.n	800a4ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	61fb      	str	r3, [r7, #28]
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	e7fd      	b.n	800a4ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4f4:	6850      	ldr	r0, [r2, #4]
 800a4f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4f8:	6892      	ldr	r2, [r2, #8]
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	f2c0 80ae 	blt.w	800a662 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a514:	3304      	adds	r3, #4
 800a516:	4618      	mov	r0, r3
 800a518:	f7fd f98e 	bl	8007838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a51c:	463b      	mov	r3, r7
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff ff6a 	bl	800a3f8 <prvSampleTimeNow>
 800a524:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b09      	cmp	r3, #9
 800a52a:	f200 8097 	bhi.w	800a65c <prvProcessReceivedCommands+0x1a0>
 800a52e:	a201      	add	r2, pc, #4	@ (adr r2, 800a534 <prvProcessReceivedCommands+0x78>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a55d 	.word	0x0800a55d
 800a538:	0800a55d 	.word	0x0800a55d
 800a53c:	0800a55d 	.word	0x0800a55d
 800a540:	0800a5d3 	.word	0x0800a5d3
 800a544:	0800a5e7 	.word	0x0800a5e7
 800a548:	0800a633 	.word	0x0800a633
 800a54c:	0800a55d 	.word	0x0800a55d
 800a550:	0800a55d 	.word	0x0800a55d
 800a554:	0800a5d3 	.word	0x0800a5d3
 800a558:	0800a5e7 	.word	0x0800a5e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a562:	f043 0301 	orr.w	r3, r3, #1
 800a566:	b2da      	uxtb	r2, r3
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a56e:	68ba      	ldr	r2, [r7, #8]
 800a570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	18d1      	adds	r1, r2, r3
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a57a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a57c:	f7ff ff5c 	bl	800a438 <prvInsertTimerInActiveList>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d06c      	beq.n	800a660 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a58c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d061      	beq.n	800a660 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	441a      	add	r2, r3
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ae:	f7ff fe01 	bl	800a1b4 <xTimerGenericCommand>
 800a5b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d152      	bne.n	800a660 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	61bb      	str	r3, [r7, #24]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5d8:	f023 0301 	bic.w	r3, r3, #1
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5e4:	e03d      	b.n	800a662 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5ec:	f043 0301 	orr.w	r3, r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10b      	bne.n	800a61e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	617b      	str	r3, [r7, #20]
}
 800a618:	bf00      	nop
 800a61a:	bf00      	nop
 800a61c:	e7fd      	b.n	800a61a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a620:	699a      	ldr	r2, [r3, #24]
 800a622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a624:	18d1      	adds	r1, r2, r3
 800a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a62a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a62c:	f7ff ff04 	bl	800a438 <prvInsertTimerInActiveList>
					break;
 800a630:	e017      	b.n	800a662 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a642:	f000 ff0f 	bl	800b464 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a646:	e00c      	b.n	800a662 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a64e:	f023 0301 	bic.w	r3, r3, #1
 800a652:	b2da      	uxtb	r2, r3
 800a654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a656:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a65a:	e002      	b.n	800a662 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a65c:	bf00      	nop
 800a65e:	e000      	b.n	800a662 <prvProcessReceivedCommands+0x1a6>
					break;
 800a660:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a662:	4b08      	ldr	r3, [pc, #32]	@ (800a684 <prvProcessReceivedCommands+0x1c8>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	1d39      	adds	r1, r7, #4
 800a668:	2200      	movs	r2, #0
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fd fdaa 	bl	80081c4 <xQueueReceive>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	f47f af26 	bne.w	800a4c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a678:	bf00      	nop
 800a67a:	bf00      	nop
 800a67c:	3730      	adds	r7, #48	@ 0x30
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200008b0 	.word	0x200008b0

0800a688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a68e:	e049      	b.n	800a724 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a690:	4b2e      	ldr	r3, [pc, #184]	@ (800a74c <prvSwitchTimerLists+0xc4>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a69a:	4b2c      	ldr	r3, [pc, #176]	@ (800a74c <prvSwitchTimerLists+0xc4>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7fd f8c5 	bl	8007838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d02f      	beq.n	800a724 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d90e      	bls.n	800a6f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a6e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a74c <prvSwitchTimerLists+0xc4>)
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	f7fd f86a 	bl	80077c6 <vListInsert>
 800a6f2:	e017      	b.n	800a724 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7ff fd58 	bl	800a1b4 <xTimerGenericCommand>
 800a704:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10b      	bne.n	800a724 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	603b      	str	r3, [r7, #0]
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	e7fd      	b.n	800a720 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a724:	4b09      	ldr	r3, [pc, #36]	@ (800a74c <prvSwitchTimerLists+0xc4>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1b0      	bne.n	800a690 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a72e:	4b07      	ldr	r3, [pc, #28]	@ (800a74c <prvSwitchTimerLists+0xc4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a734:	4b06      	ldr	r3, [pc, #24]	@ (800a750 <prvSwitchTimerLists+0xc8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4a04      	ldr	r2, [pc, #16]	@ (800a74c <prvSwitchTimerLists+0xc4>)
 800a73a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a73c:	4a04      	ldr	r2, [pc, #16]	@ (800a750 <prvSwitchTimerLists+0xc8>)
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	6013      	str	r3, [r2, #0]
}
 800a742:	bf00      	nop
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	200008a8 	.word	0x200008a8
 800a750:	200008ac 	.word	0x200008ac

0800a754 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a75a:	f001 f8d5 	bl	800b908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a75e:	4b15      	ldr	r3, [pc, #84]	@ (800a7b4 <prvCheckForValidListAndQueue+0x60>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d120      	bne.n	800a7a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a766:	4814      	ldr	r0, [pc, #80]	@ (800a7b8 <prvCheckForValidListAndQueue+0x64>)
 800a768:	f7fc ffdc 	bl	8007724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a76c:	4813      	ldr	r0, [pc, #76]	@ (800a7bc <prvCheckForValidListAndQueue+0x68>)
 800a76e:	f7fc ffd9 	bl	8007724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a772:	4b13      	ldr	r3, [pc, #76]	@ (800a7c0 <prvCheckForValidListAndQueue+0x6c>)
 800a774:	4a10      	ldr	r2, [pc, #64]	@ (800a7b8 <prvCheckForValidListAndQueue+0x64>)
 800a776:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a778:	4b12      	ldr	r3, [pc, #72]	@ (800a7c4 <prvCheckForValidListAndQueue+0x70>)
 800a77a:	4a10      	ldr	r2, [pc, #64]	@ (800a7bc <prvCheckForValidListAndQueue+0x68>)
 800a77c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a77e:	2300      	movs	r3, #0
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	4b11      	ldr	r3, [pc, #68]	@ (800a7c8 <prvCheckForValidListAndQueue+0x74>)
 800a784:	4a11      	ldr	r2, [pc, #68]	@ (800a7cc <prvCheckForValidListAndQueue+0x78>)
 800a786:	2110      	movs	r1, #16
 800a788:	200a      	movs	r0, #10
 800a78a:	f7fd f8e9 	bl	8007960 <xQueueGenericCreateStatic>
 800a78e:	4603      	mov	r3, r0
 800a790:	4a08      	ldr	r2, [pc, #32]	@ (800a7b4 <prvCheckForValidListAndQueue+0x60>)
 800a792:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a794:	4b07      	ldr	r3, [pc, #28]	@ (800a7b4 <prvCheckForValidListAndQueue+0x60>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a79c:	4b05      	ldr	r3, [pc, #20]	@ (800a7b4 <prvCheckForValidListAndQueue+0x60>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	490b      	ldr	r1, [pc, #44]	@ (800a7d0 <prvCheckForValidListAndQueue+0x7c>)
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe f90c 	bl	80089c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a7a8:	f001 f8e0 	bl	800b96c <vPortExitCritical>
}
 800a7ac:	bf00      	nop
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	200008b0 	.word	0x200008b0
 800a7b8:	20000880 	.word	0x20000880
 800a7bc:	20000894 	.word	0x20000894
 800a7c0:	200008a8 	.word	0x200008a8
 800a7c4:	200008ac 	.word	0x200008ac
 800a7c8:	2000095c 	.word	0x2000095c
 800a7cc:	200008bc 	.word	0x200008bc
 800a7d0:	0801f0cc 	.word	0x0801f0cc

0800a7d4 <__NVIC_SetPriority>:
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	6039      	str	r1, [r7, #0]
 800a7de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a7e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	db0a      	blt.n	800a7fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	490c      	ldr	r1, [pc, #48]	@ (800a820 <__NVIC_SetPriority+0x4c>)
 800a7ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7f2:	0112      	lsls	r2, r2, #4
 800a7f4:	b2d2      	uxtb	r2, r2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a7fc:	e00a      	b.n	800a814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	b2da      	uxtb	r2, r3
 800a802:	4908      	ldr	r1, [pc, #32]	@ (800a824 <__NVIC_SetPriority+0x50>)
 800a804:	88fb      	ldrh	r3, [r7, #6]
 800a806:	f003 030f 	and.w	r3, r3, #15
 800a80a:	3b04      	subs	r3, #4
 800a80c:	0112      	lsls	r2, r2, #4
 800a80e:	b2d2      	uxtb	r2, r2
 800a810:	440b      	add	r3, r1
 800a812:	761a      	strb	r2, [r3, #24]
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	e000e100 	.word	0xe000e100
 800a824:	e000ed00 	.word	0xe000ed00

0800a828 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a82c:	4b05      	ldr	r3, [pc, #20]	@ (800a844 <SysTick_Handler+0x1c>)
 800a82e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a830:	f7ff f9d8 	bl	8009be4 <xTaskGetSchedulerState>
 800a834:	4603      	mov	r3, r0
 800a836:	2b01      	cmp	r3, #1
 800a838:	d001      	beq.n	800a83e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a83a:	f001 f8f5 	bl	800ba28 <xPortSysTickHandler>
  }
}
 800a83e:	bf00      	nop
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	e000e010 	.word	0xe000e010

0800a848 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a848:	b580      	push	{r7, lr}
 800a84a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a84c:	2100      	movs	r1, #0
 800a84e:	f06f 0004 	mvn.w	r0, #4
 800a852:	f7ff ffbf 	bl	800a7d4 <__NVIC_SetPriority>
#endif
}
 800a856:	bf00      	nop
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a862:	f3ef 8305 	mrs	r3, IPSR
 800a866:	603b      	str	r3, [r7, #0]
  return(result);
 800a868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a86e:	f06f 0305 	mvn.w	r3, #5
 800a872:	607b      	str	r3, [r7, #4]
 800a874:	e00c      	b.n	800a890 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a876:	4b0a      	ldr	r3, [pc, #40]	@ (800a8a0 <osKernelInitialize+0x44>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d105      	bne.n	800a88a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a87e:	4b08      	ldr	r3, [pc, #32]	@ (800a8a0 <osKernelInitialize+0x44>)
 800a880:	2201      	movs	r2, #1
 800a882:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a884:	2300      	movs	r3, #0
 800a886:	607b      	str	r3, [r7, #4]
 800a888:	e002      	b.n	800a890 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a88a:	f04f 33ff 	mov.w	r3, #4294967295
 800a88e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a890:	687b      	ldr	r3, [r7, #4]
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	200009ac 	.word	0x200009ac

0800a8a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8aa:	f3ef 8305 	mrs	r3, IPSR
 800a8ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a8b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <osKernelStart+0x1a>
    stat = osErrorISR;
 800a8b6:	f06f 0305 	mvn.w	r3, #5
 800a8ba:	607b      	str	r3, [r7, #4]
 800a8bc:	e010      	b.n	800a8e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a8be:	4b0b      	ldr	r3, [pc, #44]	@ (800a8ec <osKernelStart+0x48>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d109      	bne.n	800a8da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a8c6:	f7ff ffbf 	bl	800a848 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8ca:	4b08      	ldr	r3, [pc, #32]	@ (800a8ec <osKernelStart+0x48>)
 800a8cc:	2202      	movs	r2, #2
 800a8ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a8d0:	f7fe fbb6 	bl	8009040 <vTaskStartScheduler>
      stat = osOK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	607b      	str	r3, [r7, #4]
 800a8d8:	e002      	b.n	800a8e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a8da:	f04f 33ff 	mov.w	r3, #4294967295
 800a8de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8e0:	687b      	ldr	r3, [r7, #4]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	200009ac 	.word	0x200009ac

0800a8f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8f6:	f3ef 8305 	mrs	r3, IPSR
 800a8fa:	603b      	str	r3, [r7, #0]
  return(result);
 800a8fc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d003      	beq.n	800a90a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a902:	f7fe fcc1 	bl	8009288 <xTaskGetTickCountFromISR>
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	e002      	b.n	800a910 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a90a:	f7fe fcad 	bl	8009268 <xTaskGetTickCount>
 800a90e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a910:	687b      	ldr	r3, [r7, #4]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3708      	adds	r7, #8
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b08e      	sub	sp, #56	@ 0x38
 800a91e:	af04      	add	r7, sp, #16
 800a920:	60f8      	str	r0, [r7, #12]
 800a922:	60b9      	str	r1, [r7, #8]
 800a924:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a92a:	f3ef 8305 	mrs	r3, IPSR
 800a92e:	617b      	str	r3, [r7, #20]
  return(result);
 800a930:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a932:	2b00      	cmp	r3, #0
 800a934:	d17f      	bne.n	800aa36 <osThreadNew+0x11c>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d07c      	beq.n	800aa36 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800a93c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a940:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a942:	2318      	movs	r3, #24
 800a944:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a946:	2300      	movs	r3, #0
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a94a:	f04f 33ff 	mov.w	r3, #4294967295
 800a94e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d045      	beq.n	800a9e2 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <osThreadNew+0x4a>
        name = attr->name;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d008      	beq.n	800a98a <osThreadNew+0x70>
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	2b38      	cmp	r3, #56	@ 0x38
 800a97c:	d805      	bhi.n	800a98a <osThreadNew+0x70>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <osThreadNew+0x74>
        return (NULL);
 800a98a:	2300      	movs	r3, #0
 800a98c:	e054      	b.n	800aa38 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	089b      	lsrs	r3, r3, #2
 800a99c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00e      	beq.n	800a9c4 <osThreadNew+0xaa>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	2b5b      	cmp	r3, #91	@ 0x5b
 800a9ac:	d90a      	bls.n	800a9c4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d006      	beq.n	800a9c4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d002      	beq.n	800a9c4 <osThreadNew+0xaa>
        mem = 1;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	61bb      	str	r3, [r7, #24]
 800a9c2:	e010      	b.n	800a9e6 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10c      	bne.n	800a9e6 <osThreadNew+0xcc>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d108      	bne.n	800a9e6 <osThreadNew+0xcc>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d104      	bne.n	800a9e6 <osThreadNew+0xcc>
          mem = 0;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	61bb      	str	r3, [r7, #24]
 800a9e0:	e001      	b.n	800a9e6 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d110      	bne.n	800aa0e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9f4:	9202      	str	r2, [sp, #8]
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6a3a      	ldr	r2, [r7, #32]
 800aa00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7fe f864 	bl	8008ad0 <xTaskCreateStatic>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	e013      	b.n	800aa36 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d110      	bne.n	800aa36 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	f107 0310 	add.w	r3, r7, #16
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7fe f8b2 	bl	8008b90 <xTaskCreate>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d001      	beq.n	800aa36 <osThreadNew+0x11c>
            hTask = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa36:	693b      	ldr	r3, [r7, #16]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3728      	adds	r7, #40	@ 0x28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa4c:	f3ef 8305 	mrs	r3, IPSR
 800aa50:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800aa58:	f06f 0305 	mvn.w	r3, #5
 800aa5c:	617b      	str	r3, [r7, #20]
 800aa5e:	e017      	b.n	800aa90 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800aa66:	f06f 0303 	mvn.w	r3, #3
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	e010      	b.n	800aa90 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800aa6e:	6938      	ldr	r0, [r7, #16]
 800aa70:	f7fe fa7e 	bl	8008f70 <eTaskGetState>
 800aa74:	4603      	mov	r3, r0
 800aa76:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d005      	beq.n	800aa8a <osThreadTerminate+0x4a>
      stat = osOK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800aa82:	6938      	ldr	r0, [r7, #16]
 800aa84:	f7fe f9ca 	bl	8008e1c <vTaskDelete>
 800aa88:	e002      	b.n	800aa90 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800aa8a:	f06f 0302 	mvn.w	r3, #2
 800aa8e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800aa90:	697b      	ldr	r3, [r7, #20]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaa2:	f3ef 8305 	mrs	r3, IPSR
 800aaa6:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <osDelay+0x1c>
    stat = osErrorISR;
 800aaae:	f06f 0305 	mvn.w	r3, #5
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	e007      	b.n	800aac6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d002      	beq.n	800aac6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7fe fa1f 	bl	8008f04 <vTaskDelay>
    }
  }

  return (stat);
 800aac6:	68fb      	ldr	r3, [r7, #12]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3710      	adds	r7, #16
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aadc:	f3ef 8305 	mrs	r3, IPSR
 800aae0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aae2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d174      	bne.n	800abd2 <osMutexNew+0x102>
    if (attr != NULL) {
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	61bb      	str	r3, [r7, #24]
 800aaf4:	e001      	b.n	800aafa <osMutexNew+0x2a>
    } else {
      type = 0U;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d002      	beq.n	800ab0a <osMutexNew+0x3a>
      rmtx = 1U;
 800ab04:	2301      	movs	r3, #1
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	e001      	b.n	800ab0e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	f003 0308 	and.w	r3, r3, #8
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d15c      	bne.n	800abd2 <osMutexNew+0x102>
      mem = -1;
 800ab18:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d015      	beq.n	800ab50 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d006      	beq.n	800ab3a <osMutexNew+0x6a>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	2b4f      	cmp	r3, #79	@ 0x4f
 800ab32:	d902      	bls.n	800ab3a <osMutexNew+0x6a>
          mem = 1;
 800ab34:	2301      	movs	r3, #1
 800ab36:	613b      	str	r3, [r7, #16]
 800ab38:	e00c      	b.n	800ab54 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d108      	bne.n	800ab54 <osMutexNew+0x84>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d104      	bne.n	800ab54 <osMutexNew+0x84>
            mem = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	613b      	str	r3, [r7, #16]
 800ab4e:	e001      	b.n	800ab54 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d112      	bne.n	800ab80 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	4619      	mov	r1, r3
 800ab66:	2004      	movs	r0, #4
 800ab68:	f7fd f807 	bl	8007b7a <xQueueCreateMutexStatic>
 800ab6c:	61f8      	str	r0, [r7, #28]
 800ab6e:	e016      	b.n	800ab9e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	4619      	mov	r1, r3
 800ab76:	2001      	movs	r0, #1
 800ab78:	f7fc ffff 	bl	8007b7a <xQueueCreateMutexStatic>
 800ab7c:	61f8      	str	r0, [r7, #28]
 800ab7e:	e00e      	b.n	800ab9e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10b      	bne.n	800ab9e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d004      	beq.n	800ab96 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ab8c:	2004      	movs	r0, #4
 800ab8e:	f7fc ffdc 	bl	8007b4a <xQueueCreateMutex>
 800ab92:	61f8      	str	r0, [r7, #28]
 800ab94:	e003      	b.n	800ab9e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ab96:	2001      	movs	r0, #1
 800ab98:	f7fc ffd7 	bl	8007b4a <xQueueCreateMutex>
 800ab9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00c      	beq.n	800abbe <osMutexNew+0xee>
        if (attr != NULL) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <osMutexNew+0xe2>
          name = attr->name;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	e001      	b.n	800abb6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800abb2:	2300      	movs	r3, #0
 800abb4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	69f8      	ldr	r0, [r7, #28]
 800abba:	f7fd ff01 	bl	80089c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d006      	beq.n	800abd2 <osMutexNew+0x102>
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f043 0301 	orr.w	r3, r3, #1
 800abd0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800abd2:	69fb      	ldr	r3, [r7, #28]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3720      	adds	r7, #32
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f003 0301 	and.w	r3, r3, #1
 800abf4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abfa:	f3ef 8305 	mrs	r3, IPSR
 800abfe:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d003      	beq.n	800ac0e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ac06:	f06f 0305 	mvn.w	r3, #5
 800ac0a:	617b      	str	r3, [r7, #20]
 800ac0c:	e02c      	b.n	800ac68 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ac14:	f06f 0303 	mvn.w	r3, #3
 800ac18:	617b      	str	r3, [r7, #20]
 800ac1a:	e025      	b.n	800ac68 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d011      	beq.n	800ac46 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6938      	ldr	r0, [r7, #16]
 800ac26:	f7fc fff8 	bl	8007c1a <xQueueTakeMutexRecursive>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d01b      	beq.n	800ac68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ac36:	f06f 0301 	mvn.w	r3, #1
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	e014      	b.n	800ac68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ac3e:	f06f 0302 	mvn.w	r3, #2
 800ac42:	617b      	str	r3, [r7, #20]
 800ac44:	e010      	b.n	800ac68 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6938      	ldr	r0, [r7, #16]
 800ac4a:	f7fd fb9d 	bl	8008388 <xQueueSemaphoreTake>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d009      	beq.n	800ac68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ac5a:	f06f 0301 	mvn.w	r3, #1
 800ac5e:	617b      	str	r3, [r7, #20]
 800ac60:	e002      	b.n	800ac68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ac62:	f06f 0302 	mvn.w	r3, #2
 800ac66:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ac68:	697b      	ldr	r3, [r7, #20]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b086      	sub	sp, #24
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f023 0301 	bic.w	r3, r3, #1
 800ac80:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac8e:	f3ef 8305 	mrs	r3, IPSR
 800ac92:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac94:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ac9a:	f06f 0305 	mvn.w	r3, #5
 800ac9e:	617b      	str	r3, [r7, #20]
 800aca0:	e01f      	b.n	800ace2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d103      	bne.n	800acb0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800aca8:	f06f 0303 	mvn.w	r3, #3
 800acac:	617b      	str	r3, [r7, #20]
 800acae:	e018      	b.n	800ace2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d009      	beq.n	800acca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800acb6:	6938      	ldr	r0, [r7, #16]
 800acb8:	f7fc ff7a 	bl	8007bb0 <xQueueGiveMutexRecursive>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d00f      	beq.n	800ace2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800acc2:	f06f 0302 	mvn.w	r3, #2
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	e00b      	b.n	800ace2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800acca:	2300      	movs	r3, #0
 800accc:	2200      	movs	r2, #0
 800acce:	2100      	movs	r1, #0
 800acd0:	6938      	ldr	r0, [r7, #16]
 800acd2:	f7fd f847 	bl	8007d64 <xQueueGenericSend>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d002      	beq.n	800ace2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800acdc:	f06f 0302 	mvn.w	r3, #2
 800ace0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ace2:	697b      	ldr	r3, [r7, #20]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	@ 0x28
 800acf0:	af02      	add	r7, sp, #8
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800acf8:	2300      	movs	r3, #0
 800acfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acfc:	f3ef 8305 	mrs	r3, IPSR
 800ad00:	613b      	str	r3, [r7, #16]
  return(result);
 800ad02:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d175      	bne.n	800adf4 <osSemaphoreNew+0x108>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d072      	beq.n	800adf4 <osSemaphoreNew+0x108>
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d86e      	bhi.n	800adf4 <osSemaphoreNew+0x108>
    mem = -1;
 800ad16:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d015      	beq.n	800ad4e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d006      	beq.n	800ad38 <osSemaphoreNew+0x4c>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	2b4f      	cmp	r3, #79	@ 0x4f
 800ad30:	d902      	bls.n	800ad38 <osSemaphoreNew+0x4c>
        mem = 1;
 800ad32:	2301      	movs	r3, #1
 800ad34:	61bb      	str	r3, [r7, #24]
 800ad36:	e00c      	b.n	800ad52 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d108      	bne.n	800ad52 <osSemaphoreNew+0x66>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d104      	bne.n	800ad52 <osSemaphoreNew+0x66>
          mem = 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	61bb      	str	r3, [r7, #24]
 800ad4c:	e001      	b.n	800ad52 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad58:	d04c      	beq.n	800adf4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d128      	bne.n	800adb2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d10a      	bne.n	800ad7c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	2203      	movs	r2, #3
 800ad6c:	9200      	str	r2, [sp, #0]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2100      	movs	r1, #0
 800ad72:	2001      	movs	r0, #1
 800ad74:	f7fc fdf4 	bl	8007960 <xQueueGenericCreateStatic>
 800ad78:	61f8      	str	r0, [r7, #28]
 800ad7a:	e005      	b.n	800ad88 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ad7c:	2203      	movs	r2, #3
 800ad7e:	2100      	movs	r1, #0
 800ad80:	2001      	movs	r0, #1
 800ad82:	f7fc fe6a 	bl	8007a5a <xQueueGenericCreate>
 800ad86:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d022      	beq.n	800add4 <osSemaphoreNew+0xe8>
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d01f      	beq.n	800add4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ad94:	2300      	movs	r3, #0
 800ad96:	2200      	movs	r2, #0
 800ad98:	2100      	movs	r1, #0
 800ad9a:	69f8      	ldr	r0, [r7, #28]
 800ad9c:	f7fc ffe2 	bl	8007d64 <xQueueGenericSend>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d016      	beq.n	800add4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ada6:	69f8      	ldr	r0, [r7, #28]
 800ada8:	f7fd fcbe 	bl	8008728 <vQueueDelete>
            hSemaphore = NULL;
 800adac:	2300      	movs	r3, #0
 800adae:	61fb      	str	r3, [r7, #28]
 800adb0:	e010      	b.n	800add4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d108      	bne.n	800adca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	461a      	mov	r2, r3
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7fc ff61 	bl	8007c88 <xQueueCreateCountingSemaphoreStatic>
 800adc6:	61f8      	str	r0, [r7, #28]
 800adc8:	e004      	b.n	800add4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f7fc ff94 	bl	8007cfa <xQueueCreateCountingSemaphore>
 800add2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00c      	beq.n	800adf4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d003      	beq.n	800ade8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	617b      	str	r3, [r7, #20]
 800ade6:	e001      	b.n	800adec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800adec:	6979      	ldr	r1, [r7, #20]
 800adee:	69f8      	ldr	r0, [r7, #28]
 800adf0:	f7fd fde6 	bl	80089c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800adf4:	69fb      	ldr	r3, [r7, #28]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3720      	adds	r7, #32
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d103      	bne.n	800ae20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ae18:	f06f 0303 	mvn.w	r3, #3
 800ae1c:	617b      	str	r3, [r7, #20]
 800ae1e:	e039      	b.n	800ae94 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae20:	f3ef 8305 	mrs	r3, IPSR
 800ae24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d022      	beq.n	800ae72 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ae32:	f06f 0303 	mvn.w	r3, #3
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	e02c      	b.n	800ae94 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ae3e:	f107 0308 	add.w	r3, r7, #8
 800ae42:	461a      	mov	r2, r3
 800ae44:	2100      	movs	r1, #0
 800ae46:	6938      	ldr	r0, [r7, #16]
 800ae48:	f7fd fbae 	bl	80085a8 <xQueueReceiveFromISR>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d003      	beq.n	800ae5a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ae52:	f06f 0302 	mvn.w	r3, #2
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	e01c      	b.n	800ae94 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d019      	beq.n	800ae94 <osSemaphoreAcquire+0x94>
 800ae60:	4b0f      	ldr	r3, [pc, #60]	@ (800aea0 <osSemaphoreAcquire+0xa0>)
 800ae62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	e010      	b.n	800ae94 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ae72:	6839      	ldr	r1, [r7, #0]
 800ae74:	6938      	ldr	r0, [r7, #16]
 800ae76:	f7fd fa87 	bl	8008388 <xQueueSemaphoreTake>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d009      	beq.n	800ae94 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ae86:	f06f 0301 	mvn.w	r3, #1
 800ae8a:	617b      	str	r3, [r7, #20]
 800ae8c:	e002      	b.n	800ae94 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ae8e:	f06f 0302 	mvn.w	r3, #2
 800ae92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ae94:	697b      	ldr	r3, [r7, #20]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	e000ed04 	.word	0xe000ed04

0800aea4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b086      	sub	sp, #24
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d103      	bne.n	800aec2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800aeba:	f06f 0303 	mvn.w	r3, #3
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	e02c      	b.n	800af1c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aec2:	f3ef 8305 	mrs	r3, IPSR
 800aec6:	60fb      	str	r3, [r7, #12]
  return(result);
 800aec8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d01a      	beq.n	800af04 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800aece:	2300      	movs	r3, #0
 800aed0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aed2:	f107 0308 	add.w	r3, r7, #8
 800aed6:	4619      	mov	r1, r3
 800aed8:	6938      	ldr	r0, [r7, #16]
 800aeda:	f7fd f8e3 	bl	80080a4 <xQueueGiveFromISR>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d003      	beq.n	800aeec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800aee4:	f06f 0302 	mvn.w	r3, #2
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	e017      	b.n	800af1c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d014      	beq.n	800af1c <osSemaphoreRelease+0x78>
 800aef2:	4b0d      	ldr	r3, [pc, #52]	@ (800af28 <osSemaphoreRelease+0x84>)
 800aef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	e00b      	b.n	800af1c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af04:	2300      	movs	r3, #0
 800af06:	2200      	movs	r2, #0
 800af08:	2100      	movs	r1, #0
 800af0a:	6938      	ldr	r0, [r7, #16]
 800af0c:	f7fc ff2a 	bl	8007d64 <xQueueGenericSend>
 800af10:	4603      	mov	r3, r0
 800af12:	2b01      	cmp	r3, #1
 800af14:	d002      	beq.n	800af1c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800af16:	f06f 0302 	mvn.w	r3, #2
 800af1a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800af1c:	697b      	ldr	r3, [r7, #20]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af38:	f3ef 8305 	mrs	r3, IPSR
 800af3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af3e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800af40:	2b00      	cmp	r3, #0
 800af42:	d003      	beq.n	800af4c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800af44:	f06f 0305 	mvn.w	r3, #5
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	e00e      	b.n	800af6a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800af52:	f06f 0303 	mvn.w	r3, #3
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	e007      	b.n	800af6a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800af5a:	6938      	ldr	r0, [r7, #16]
 800af5c:	f7fd fd5a 	bl	8008a14 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800af60:	2300      	movs	r3, #0
 800af62:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800af64:	6938      	ldr	r0, [r7, #16]
 800af66:	f7fd fbdf 	bl	8008728 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800af6a:	697b      	ldr	r3, [r7, #20]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800af74:	b580      	push	{r7, lr}
 800af76:	b08a      	sub	sp, #40	@ 0x28
 800af78:	af02      	add	r7, sp, #8
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800af80:	2300      	movs	r3, #0
 800af82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af84:	f3ef 8305 	mrs	r3, IPSR
 800af88:	613b      	str	r3, [r7, #16]
  return(result);
 800af8a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d15f      	bne.n	800b050 <osMessageQueueNew+0xdc>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d05c      	beq.n	800b050 <osMessageQueueNew+0xdc>
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d059      	beq.n	800b050 <osMessageQueueNew+0xdc>
    mem = -1;
 800af9c:	f04f 33ff 	mov.w	r3, #4294967295
 800afa0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d029      	beq.n	800affc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d012      	beq.n	800afd6 <osMessageQueueNew+0x62>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	2b4f      	cmp	r3, #79	@ 0x4f
 800afb6:	d90e      	bls.n	800afd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00a      	beq.n	800afd6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	695a      	ldr	r2, [r3, #20]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	fb01 f303 	mul.w	r3, r1, r3
 800afcc:	429a      	cmp	r2, r3
 800afce:	d302      	bcc.n	800afd6 <osMessageQueueNew+0x62>
        mem = 1;
 800afd0:	2301      	movs	r3, #1
 800afd2:	61bb      	str	r3, [r7, #24]
 800afd4:	e014      	b.n	800b000 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d110      	bne.n	800b000 <osMessageQueueNew+0x8c>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10c      	bne.n	800b000 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800afea:	2b00      	cmp	r3, #0
 800afec:	d108      	bne.n	800b000 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d104      	bne.n	800b000 <osMessageQueueNew+0x8c>
          mem = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	e001      	b.n	800b000 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d10b      	bne.n	800b01e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691a      	ldr	r2, [r3, #16]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	2100      	movs	r1, #0
 800b010:	9100      	str	r1, [sp, #0]
 800b012:	68b9      	ldr	r1, [r7, #8]
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f7fc fca3 	bl	8007960 <xQueueGenericCreateStatic>
 800b01a:	61f8      	str	r0, [r7, #28]
 800b01c:	e008      	b.n	800b030 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d105      	bne.n	800b030 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b024:	2200      	movs	r2, #0
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7fc fd16 	bl	8007a5a <xQueueGenericCreate>
 800b02e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00c      	beq.n	800b050 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	e001      	b.n	800b048 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b044:	2300      	movs	r3, #0
 800b046:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b048:	6979      	ldr	r1, [r7, #20]
 800b04a:	69f8      	ldr	r0, [r7, #28]
 800b04c:	f7fd fcb8 	bl	80089c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b050:	69fb      	ldr	r3, [r7, #28]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3720      	adds	r7, #32
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	4613      	mov	r3, r2
 800b06a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b070:	2300      	movs	r3, #0
 800b072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b074:	f3ef 8305 	mrs	r3, IPSR
 800b078:	617b      	str	r3, [r7, #20]
  return(result);
 800b07a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d028      	beq.n	800b0d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d005      	beq.n	800b092 <osMessageQueuePut+0x36>
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <osMessageQueuePut+0x36>
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b092:	f06f 0303 	mvn.w	r3, #3
 800b096:	61fb      	str	r3, [r7, #28]
 800b098:	e038      	b.n	800b10c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b09a:	2300      	movs	r3, #0
 800b09c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b09e:	f107 0210 	add.w	r2, r7, #16
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	68b9      	ldr	r1, [r7, #8]
 800b0a6:	69b8      	ldr	r0, [r7, #24]
 800b0a8:	f7fc ff5e 	bl	8007f68 <xQueueGenericSendFromISR>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d003      	beq.n	800b0ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b0b2:	f06f 0302 	mvn.w	r3, #2
 800b0b6:	61fb      	str	r3, [r7, #28]
 800b0b8:	e028      	b.n	800b10c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d025      	beq.n	800b10c <osMessageQueuePut+0xb0>
 800b0c0:	4b15      	ldr	r3, [pc, #84]	@ (800b118 <osMessageQueuePut+0xbc>)
 800b0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c6:	601a      	str	r2, [r3, #0]
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	e01c      	b.n	800b10c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <osMessageQueuePut+0x82>
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d103      	bne.n	800b0e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b0de:	f06f 0303 	mvn.w	r3, #3
 800b0e2:	61fb      	str	r3, [r7, #28]
 800b0e4:	e012      	b.n	800b10c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	69b8      	ldr	r0, [r7, #24]
 800b0ee:	f7fc fe39 	bl	8007d64 <xQueueGenericSend>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d009      	beq.n	800b10c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b0fe:	f06f 0301 	mvn.w	r3, #1
 800b102:	61fb      	str	r3, [r7, #28]
 800b104:	e002      	b.n	800b10c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b106:	f06f 0302 	mvn.w	r3, #2
 800b10a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b10c:	69fb      	ldr	r3, [r7, #28]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3720      	adds	r7, #32
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	e000ed04 	.word	0xe000ed04

0800b11c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b088      	sub	sp, #32
 800b120:	af00      	add	r7, sp, #0
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b12e:	2300      	movs	r3, #0
 800b130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b132:	f3ef 8305 	mrs	r3, IPSR
 800b136:	617b      	str	r3, [r7, #20]
  return(result);
 800b138:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d028      	beq.n	800b190 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d005      	beq.n	800b150 <osMessageQueueGet+0x34>
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <osMessageQueueGet+0x34>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b150:	f06f 0303 	mvn.w	r3, #3
 800b154:	61fb      	str	r3, [r7, #28]
 800b156:	e037      	b.n	800b1c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b158:	2300      	movs	r3, #0
 800b15a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b15c:	f107 0310 	add.w	r3, r7, #16
 800b160:	461a      	mov	r2, r3
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	69b8      	ldr	r0, [r7, #24]
 800b166:	f7fd fa1f 	bl	80085a8 <xQueueReceiveFromISR>
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d003      	beq.n	800b178 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b170:	f06f 0302 	mvn.w	r3, #2
 800b174:	61fb      	str	r3, [r7, #28]
 800b176:	e027      	b.n	800b1c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d024      	beq.n	800b1c8 <osMessageQueueGet+0xac>
 800b17e:	4b15      	ldr	r3, [pc, #84]	@ (800b1d4 <osMessageQueueGet+0xb8>)
 800b180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	e01b      	b.n	800b1c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <osMessageQueueGet+0x80>
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d103      	bne.n	800b1a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b19c:	f06f 0303 	mvn.w	r3, #3
 800b1a0:	61fb      	str	r3, [r7, #28]
 800b1a2:	e011      	b.n	800b1c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1a4:	683a      	ldr	r2, [r7, #0]
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	69b8      	ldr	r0, [r7, #24]
 800b1aa:	f7fd f80b 	bl	80081c4 <xQueueReceive>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d009      	beq.n	800b1c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b1ba:	f06f 0301 	mvn.w	r3, #1
 800b1be:	61fb      	str	r3, [r7, #28]
 800b1c0:	e002      	b.n	800b1c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b1c2:	f06f 0302 	mvn.w	r3, #2
 800b1c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b1c8:	69fb      	ldr	r3, [r7, #28]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	e000ed04 	.word	0xe000ed04

0800b1d8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	617b      	str	r3, [r7, #20]
 800b1ee:	e00e      	b.n	800b20e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1f0:	f3ef 8305 	mrs	r3, IPSR
 800b1f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800b1fc:	6938      	ldr	r0, [r7, #16]
 800b1fe:	f7fd fa74 	bl	80086ea <uxQueueMessagesWaitingFromISR>
 800b202:	6178      	str	r0, [r7, #20]
 800b204:	e003      	b.n	800b20e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800b206:	6938      	ldr	r0, [r7, #16]
 800b208:	f7fd fa50 	bl	80086ac <uxQueueMessagesWaiting>
 800b20c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800b20e:	697b      	ldr	r3, [r7, #20]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800b218:	b580      	push	{r7, lr}
 800b21a:	b086      	sub	sp, #24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b224:	f3ef 8305 	mrs	r3, IPSR
 800b228:	60fb      	str	r3, [r7, #12]
  return(result);
 800b22a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 800b230:	f06f 0305 	mvn.w	r3, #5
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	e00e      	b.n	800b256 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d103      	bne.n	800b246 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800b23e:	f06f 0303 	mvn.w	r3, #3
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e007      	b.n	800b256 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800b246:	6938      	ldr	r0, [r7, #16]
 800b248:	f7fd fbe4 	bl	8008a14 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800b250:	6938      	ldr	r0, [r7, #16]
 800b252:	f7fd fa69 	bl	8008728 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b256:	697b      	ldr	r3, [r7, #20]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3718      	adds	r7, #24
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4a07      	ldr	r2, [pc, #28]	@ (800b28c <vApplicationGetIdleTaskMemory+0x2c>)
 800b270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	4a06      	ldr	r2, [pc, #24]	@ (800b290 <vApplicationGetIdleTaskMemory+0x30>)
 800b276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b27e:	601a      	str	r2, [r3, #0]
}
 800b280:	bf00      	nop
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	200009b0 	.word	0x200009b0
 800b290:	20000a0c 	.word	0x20000a0c

0800b294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4a07      	ldr	r2, [pc, #28]	@ (800b2c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800b2a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	4a06      	ldr	r2, [pc, #24]	@ (800b2c4 <vApplicationGetTimerTaskMemory+0x30>)
 800b2aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2b2:	601a      	str	r2, [r3, #0]
}
 800b2b4:	bf00      	nop
 800b2b6:	3714      	adds	r7, #20
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	2000120c 	.word	0x2000120c
 800b2c4:	20001268 	.word	0x20001268

0800b2c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	@ 0x28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2d4:	f7fd ff1c 	bl	8009110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2d8:	4b5c      	ldr	r3, [pc, #368]	@ (800b44c <pvPortMalloc+0x184>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d101      	bne.n	800b2e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b2e0:	f000 f924 	bl	800b52c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b2e4:	4b5a      	ldr	r3, [pc, #360]	@ (800b450 <pvPortMalloc+0x188>)
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f040 8095 	bne.w	800b41c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01e      	beq.n	800b336 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b2f8:	2208      	movs	r2, #8
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f003 0307 	and.w	r3, r3, #7
 800b306:	2b00      	cmp	r3, #0
 800b308:	d015      	beq.n	800b336 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f023 0307 	bic.w	r3, r3, #7
 800b310:	3308      	adds	r3, #8
 800b312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00b      	beq.n	800b336 <pvPortMalloc+0x6e>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	617b      	str	r3, [r7, #20]
}
 800b330:	bf00      	nop
 800b332:	bf00      	nop
 800b334:	e7fd      	b.n	800b332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d06f      	beq.n	800b41c <pvPortMalloc+0x154>
 800b33c:	4b45      	ldr	r3, [pc, #276]	@ (800b454 <pvPortMalloc+0x18c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	429a      	cmp	r2, r3
 800b344:	d86a      	bhi.n	800b41c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b346:	4b44      	ldr	r3, [pc, #272]	@ (800b458 <pvPortMalloc+0x190>)
 800b348:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b34a:	4b43      	ldr	r3, [pc, #268]	@ (800b458 <pvPortMalloc+0x190>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b350:	e004      	b.n	800b35c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b354:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	429a      	cmp	r2, r3
 800b364:	d903      	bls.n	800b36e <pvPortMalloc+0xa6>
 800b366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1f1      	bne.n	800b352 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b36e:	4b37      	ldr	r3, [pc, #220]	@ (800b44c <pvPortMalloc+0x184>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b374:	429a      	cmp	r2, r3
 800b376:	d051      	beq.n	800b41c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	2208      	movs	r2, #8
 800b37e:	4413      	add	r3, r2
 800b380:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	685a      	ldr	r2, [r3, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	1ad2      	subs	r2, r2, r3
 800b392:	2308      	movs	r3, #8
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	429a      	cmp	r2, r3
 800b398:	d920      	bls.n	800b3dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4413      	add	r3, r2
 800b3a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	f003 0307 	and.w	r3, r3, #7
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d00b      	beq.n	800b3c4 <pvPortMalloc+0xfc>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	613b      	str	r3, [r7, #16]
}
 800b3be:	bf00      	nop
 800b3c0:	bf00      	nop
 800b3c2:	e7fd      	b.n	800b3c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	1ad2      	subs	r2, r2, r3
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3d6:	69b8      	ldr	r0, [r7, #24]
 800b3d8:	f000 f90a 	bl	800b5f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b454 <pvPortMalloc+0x18c>)
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	4a1b      	ldr	r2, [pc, #108]	@ (800b454 <pvPortMalloc+0x18c>)
 800b3e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800b454 <pvPortMalloc+0x18c>)
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b45c <pvPortMalloc+0x194>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d203      	bcs.n	800b3fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b3f6:	4b17      	ldr	r3, [pc, #92]	@ (800b454 <pvPortMalloc+0x18c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a18      	ldr	r2, [pc, #96]	@ (800b45c <pvPortMalloc+0x194>)
 800b3fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	4b13      	ldr	r3, [pc, #76]	@ (800b450 <pvPortMalloc+0x188>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	431a      	orrs	r2, r3
 800b408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b412:	4b13      	ldr	r3, [pc, #76]	@ (800b460 <pvPortMalloc+0x198>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3301      	adds	r3, #1
 800b418:	4a11      	ldr	r2, [pc, #68]	@ (800b460 <pvPortMalloc+0x198>)
 800b41a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b41c:	f7fd fe86 	bl	800912c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	f003 0307 	and.w	r3, r3, #7
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00b      	beq.n	800b442 <pvPortMalloc+0x17a>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	60fb      	str	r3, [r7, #12]
}
 800b43c:	bf00      	nop
 800b43e:	bf00      	nop
 800b440:	e7fd      	b.n	800b43e <pvPortMalloc+0x176>
	return pvReturn;
 800b442:	69fb      	ldr	r3, [r7, #28]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3728      	adds	r7, #40	@ 0x28
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	20008670 	.word	0x20008670
 800b450:	20008684 	.word	0x20008684
 800b454:	20008674 	.word	0x20008674
 800b458:	20008668 	.word	0x20008668
 800b45c:	20008678 	.word	0x20008678
 800b460:	2000867c 	.word	0x2000867c

0800b464 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d04f      	beq.n	800b516 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b476:	2308      	movs	r3, #8
 800b478:	425b      	negs	r3, r3
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	4413      	add	r3, r2
 800b47e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	4b25      	ldr	r3, [pc, #148]	@ (800b520 <vPortFree+0xbc>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4013      	ands	r3, r2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10b      	bne.n	800b4aa <vPortFree+0x46>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	60fb      	str	r3, [r7, #12]
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop
 800b4a8:	e7fd      	b.n	800b4a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00b      	beq.n	800b4ca <vPortFree+0x66>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	60bb      	str	r3, [r7, #8]
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
 800b4c8:	e7fd      	b.n	800b4c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	685a      	ldr	r2, [r3, #4]
 800b4ce:	4b14      	ldr	r3, [pc, #80]	@ (800b520 <vPortFree+0xbc>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d01e      	beq.n	800b516 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d11a      	bne.n	800b516 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b520 <vPortFree+0xbc>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	43db      	mvns	r3, r3
 800b4ea:	401a      	ands	r2, r3
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b4f0:	f7fd fe0e 	bl	8009110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b524 <vPortFree+0xc0>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	4a09      	ldr	r2, [pc, #36]	@ (800b524 <vPortFree+0xc0>)
 800b500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b502:	6938      	ldr	r0, [r7, #16]
 800b504:	f000 f874 	bl	800b5f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b508:	4b07      	ldr	r3, [pc, #28]	@ (800b528 <vPortFree+0xc4>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3301      	adds	r3, #1
 800b50e:	4a06      	ldr	r2, [pc, #24]	@ (800b528 <vPortFree+0xc4>)
 800b510:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b512:	f7fd fe0b 	bl	800912c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b516:	bf00      	nop
 800b518:	3718      	adds	r7, #24
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20008684 	.word	0x20008684
 800b524:	20008674 	.word	0x20008674
 800b528:	20008680 	.word	0x20008680

0800b52c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b532:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 800b536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b538:	4b27      	ldr	r3, [pc, #156]	@ (800b5d8 <prvHeapInit+0xac>)
 800b53a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f003 0307 	and.w	r3, r3, #7
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00c      	beq.n	800b560 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3307      	adds	r3, #7
 800b54a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f023 0307 	bic.w	r3, r3, #7
 800b552:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	1ad3      	subs	r3, r2, r3
 800b55a:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d8 <prvHeapInit+0xac>)
 800b55c:	4413      	add	r3, r2
 800b55e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b564:	4a1d      	ldr	r2, [pc, #116]	@ (800b5dc <prvHeapInit+0xb0>)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b56a:	4b1c      	ldr	r3, [pc, #112]	@ (800b5dc <prvHeapInit+0xb0>)
 800b56c:	2200      	movs	r2, #0
 800b56e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68ba      	ldr	r2, [r7, #8]
 800b574:	4413      	add	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b578:	2208      	movs	r2, #8
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	1a9b      	subs	r3, r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f023 0307 	bic.w	r3, r3, #7
 800b586:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4a15      	ldr	r2, [pc, #84]	@ (800b5e0 <prvHeapInit+0xb4>)
 800b58c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b58e:	4b14      	ldr	r3, [pc, #80]	@ (800b5e0 <prvHeapInit+0xb4>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2200      	movs	r2, #0
 800b594:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b596:	4b12      	ldr	r3, [pc, #72]	@ (800b5e0 <prvHeapInit+0xb4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2200      	movs	r2, #0
 800b59c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	1ad2      	subs	r2, r2, r3
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e0 <prvHeapInit+0xb4>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	4a0a      	ldr	r2, [pc, #40]	@ (800b5e4 <prvHeapInit+0xb8>)
 800b5ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	4a09      	ldr	r2, [pc, #36]	@ (800b5e8 <prvHeapInit+0xbc>)
 800b5c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5c4:	4b09      	ldr	r3, [pc, #36]	@ (800b5ec <prvHeapInit+0xc0>)
 800b5c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b5ca:	601a      	str	r2, [r3, #0]
}
 800b5cc:	bf00      	nop
 800b5ce:	3714      	adds	r7, #20
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	20002268 	.word	0x20002268
 800b5dc:	20008668 	.word	0x20008668
 800b5e0:	20008670 	.word	0x20008670
 800b5e4:	20008678 	.word	0x20008678
 800b5e8:	20008674 	.word	0x20008674
 800b5ec:	20008684 	.word	0x20008684

0800b5f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5f8:	4b28      	ldr	r3, [pc, #160]	@ (800b69c <prvInsertBlockIntoFreeList+0xac>)
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	e002      	b.n	800b604 <prvInsertBlockIntoFreeList+0x14>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d8f7      	bhi.n	800b5fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	4413      	add	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d108      	bne.n	800b632 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	685a      	ldr	r2, [r3, #4]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	441a      	add	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	441a      	add	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	429a      	cmp	r2, r3
 800b644:	d118      	bne.n	800b678 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	4b15      	ldr	r3, [pc, #84]	@ (800b6a0 <prvInsertBlockIntoFreeList+0xb0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d00d      	beq.n	800b66e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	441a      	add	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	e008      	b.n	800b680 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b66e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a0 <prvInsertBlockIntoFreeList+0xb0>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	e003      	b.n	800b680 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d002      	beq.n	800b68e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b68e:	bf00      	nop
 800b690:	3714      	adds	r7, #20
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20008668 	.word	0x20008668
 800b6a0:	20008670 	.word	0x20008670

0800b6a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3b04      	subs	r3, #4
 800b6b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3b04      	subs	r3, #4
 800b6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f023 0201 	bic.w	r2, r3, #1
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3b04      	subs	r3, #4
 800b6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800b708 <pxPortInitialiseStack+0x64>)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3b14      	subs	r3, #20
 800b6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	3b04      	subs	r3, #4
 800b6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f06f 0202 	mvn.w	r2, #2
 800b6f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3b20      	subs	r3, #32
 800b6f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	0800b70d 	.word	0x0800b70d

0800b70c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b716:	4b13      	ldr	r3, [pc, #76]	@ (800b764 <prvTaskExitError+0x58>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b71e:	d00b      	beq.n	800b738 <prvTaskExitError+0x2c>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	60fb      	str	r3, [r7, #12]
}
 800b732:	bf00      	nop
 800b734:	bf00      	nop
 800b736:	e7fd      	b.n	800b734 <prvTaskExitError+0x28>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	60bb      	str	r3, [r7, #8]
}
 800b74a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b74c:	bf00      	nop
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d0fc      	beq.n	800b74e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	20000030 	.word	0x20000030
	...

0800b770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b770:	4b07      	ldr	r3, [pc, #28]	@ (800b790 <pxCurrentTCBConst2>)
 800b772:	6819      	ldr	r1, [r3, #0]
 800b774:	6808      	ldr	r0, [r1, #0]
 800b776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77a:	f380 8809 	msr	PSP, r0
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f04f 0000 	mov.w	r0, #0
 800b786:	f380 8811 	msr	BASEPRI, r0
 800b78a:	4770      	bx	lr
 800b78c:	f3af 8000 	nop.w

0800b790 <pxCurrentTCBConst2>:
 800b790:	20000380 	.word	0x20000380
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop

0800b798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b798:	4808      	ldr	r0, [pc, #32]	@ (800b7bc <prvPortStartFirstTask+0x24>)
 800b79a:	6800      	ldr	r0, [r0, #0]
 800b79c:	6800      	ldr	r0, [r0, #0]
 800b79e:	f380 8808 	msr	MSP, r0
 800b7a2:	f04f 0000 	mov.w	r0, #0
 800b7a6:	f380 8814 	msr	CONTROL, r0
 800b7aa:	b662      	cpsie	i
 800b7ac:	b661      	cpsie	f
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	df00      	svc	0
 800b7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b7ba:	bf00      	nop
 800b7bc:	e000ed08 	.word	0xe000ed08

0800b7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b7c6:	4b47      	ldr	r3, [pc, #284]	@ (800b8e4 <xPortStartScheduler+0x124>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a47      	ldr	r2, [pc, #284]	@ (800b8e8 <xPortStartScheduler+0x128>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d10b      	bne.n	800b7e8 <xPortStartScheduler+0x28>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	613b      	str	r3, [r7, #16]
}
 800b7e2:	bf00      	nop
 800b7e4:	bf00      	nop
 800b7e6:	e7fd      	b.n	800b7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b7e8:	4b3e      	ldr	r3, [pc, #248]	@ (800b8e4 <xPortStartScheduler+0x124>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a3f      	ldr	r2, [pc, #252]	@ (800b8ec <xPortStartScheduler+0x12c>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d10b      	bne.n	800b80a <xPortStartScheduler+0x4a>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	60fb      	str	r3, [r7, #12]
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop
 800b808:	e7fd      	b.n	800b806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b80a:	4b39      	ldr	r3, [pc, #228]	@ (800b8f0 <xPortStartScheduler+0x130>)
 800b80c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	b2db      	uxtb	r3, r3
 800b814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	22ff      	movs	r2, #255	@ 0xff
 800b81a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	b2db      	uxtb	r3, r3
 800b822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	b2db      	uxtb	r3, r3
 800b828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	4b31      	ldr	r3, [pc, #196]	@ (800b8f4 <xPortStartScheduler+0x134>)
 800b830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b832:	4b31      	ldr	r3, [pc, #196]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b834:	2207      	movs	r2, #7
 800b836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b838:	e009      	b.n	800b84e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b83a:	4b2f      	ldr	r3, [pc, #188]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3b01      	subs	r3, #1
 800b840:	4a2d      	ldr	r2, [pc, #180]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b844:	78fb      	ldrb	r3, [r7, #3]
 800b846:	b2db      	uxtb	r3, r3
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	b2db      	uxtb	r3, r3
 800b852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b856:	2b80      	cmp	r3, #128	@ 0x80
 800b858:	d0ef      	beq.n	800b83a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b85a:	4b27      	ldr	r3, [pc, #156]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f1c3 0307 	rsb	r3, r3, #7
 800b862:	2b04      	cmp	r3, #4
 800b864:	d00b      	beq.n	800b87e <xPortStartScheduler+0xbe>
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	60bb      	str	r3, [r7, #8]
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	e7fd      	b.n	800b87a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b87e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	021b      	lsls	r3, r3, #8
 800b884:	4a1c      	ldr	r2, [pc, #112]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b888:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b890:	4a19      	ldr	r2, [pc, #100]	@ (800b8f8 <xPortStartScheduler+0x138>)
 800b892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	b2da      	uxtb	r2, r3
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b89c:	4b17      	ldr	r3, [pc, #92]	@ (800b8fc <xPortStartScheduler+0x13c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a16      	ldr	r2, [pc, #88]	@ (800b8fc <xPortStartScheduler+0x13c>)
 800b8a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b8a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b8a8:	4b14      	ldr	r3, [pc, #80]	@ (800b8fc <xPortStartScheduler+0x13c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a13      	ldr	r2, [pc, #76]	@ (800b8fc <xPortStartScheduler+0x13c>)
 800b8ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b8b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b8b4:	f000 f8da 	bl	800ba6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b8b8:	4b11      	ldr	r3, [pc, #68]	@ (800b900 <xPortStartScheduler+0x140>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b8be:	f000 f8f9 	bl	800bab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b8c2:	4b10      	ldr	r3, [pc, #64]	@ (800b904 <xPortStartScheduler+0x144>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b904 <xPortStartScheduler+0x144>)
 800b8c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b8cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b8ce:	f7ff ff63 	bl	800b798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b8d2:	f7fd fe33 	bl	800953c <vTaskSwitchContext>
	prvTaskExitError();
 800b8d6:	f7ff ff19 	bl	800b70c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3718      	adds	r7, #24
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	e000ed00 	.word	0xe000ed00
 800b8e8:	410fc271 	.word	0x410fc271
 800b8ec:	410fc270 	.word	0x410fc270
 800b8f0:	e000e400 	.word	0xe000e400
 800b8f4:	20008688 	.word	0x20008688
 800b8f8:	2000868c 	.word	0x2000868c
 800b8fc:	e000ed20 	.word	0xe000ed20
 800b900:	20000030 	.word	0x20000030
 800b904:	e000ef34 	.word	0xe000ef34

0800b908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	607b      	str	r3, [r7, #4]
}
 800b920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b922:	4b10      	ldr	r3, [pc, #64]	@ (800b964 <vPortEnterCritical+0x5c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3301      	adds	r3, #1
 800b928:	4a0e      	ldr	r2, [pc, #56]	@ (800b964 <vPortEnterCritical+0x5c>)
 800b92a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b92c:	4b0d      	ldr	r3, [pc, #52]	@ (800b964 <vPortEnterCritical+0x5c>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d110      	bne.n	800b956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b934:	4b0c      	ldr	r3, [pc, #48]	@ (800b968 <vPortEnterCritical+0x60>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00b      	beq.n	800b956 <vPortEnterCritical+0x4e>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	603b      	str	r3, [r7, #0]
}
 800b950:	bf00      	nop
 800b952:	bf00      	nop
 800b954:	e7fd      	b.n	800b952 <vPortEnterCritical+0x4a>
	}
}
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	20000030 	.word	0x20000030
 800b968:	e000ed04 	.word	0xe000ed04

0800b96c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b972:	4b12      	ldr	r3, [pc, #72]	@ (800b9bc <vPortExitCritical+0x50>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10b      	bne.n	800b992 <vPortExitCritical+0x26>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	607b      	str	r3, [r7, #4]
}
 800b98c:	bf00      	nop
 800b98e:	bf00      	nop
 800b990:	e7fd      	b.n	800b98e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b992:	4b0a      	ldr	r3, [pc, #40]	@ (800b9bc <vPortExitCritical+0x50>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3b01      	subs	r3, #1
 800b998:	4a08      	ldr	r2, [pc, #32]	@ (800b9bc <vPortExitCritical+0x50>)
 800b99a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b99c:	4b07      	ldr	r3, [pc, #28]	@ (800b9bc <vPortExitCritical+0x50>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d105      	bne.n	800b9b0 <vPortExitCritical+0x44>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	f383 8811 	msr	BASEPRI, r3
}
 800b9ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b9b0:	bf00      	nop
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	20000030 	.word	0x20000030

0800b9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b9c0:	f3ef 8009 	mrs	r0, PSP
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	4b15      	ldr	r3, [pc, #84]	@ (800ba20 <pxCurrentTCBConst>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	f01e 0f10 	tst.w	lr, #16
 800b9d0:	bf08      	it	eq
 800b9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9da:	6010      	str	r0, [r2, #0]
 800b9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b9e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b9e4:	f380 8811 	msr	BASEPRI, r0
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f7fd fda4 	bl	800953c <vTaskSwitchContext>
 800b9f4:	f04f 0000 	mov.w	r0, #0
 800b9f8:	f380 8811 	msr	BASEPRI, r0
 800b9fc:	bc09      	pop	{r0, r3}
 800b9fe:	6819      	ldr	r1, [r3, #0]
 800ba00:	6808      	ldr	r0, [r1, #0]
 800ba02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba06:	f01e 0f10 	tst.w	lr, #16
 800ba0a:	bf08      	it	eq
 800ba0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ba10:	f380 8809 	msr	PSP, r0
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	f3af 8000 	nop.w

0800ba20 <pxCurrentTCBConst>:
 800ba20:	20000380 	.word	0x20000380
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop

0800ba28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	607b      	str	r3, [r7, #4]
}
 800ba40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ba42:	f7fd fcc1 	bl	80093c8 <xTaskIncrementTick>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ba4c:	4b06      	ldr	r3, [pc, #24]	@ (800ba68 <xPortSysTickHandler+0x40>)
 800ba4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba52:	601a      	str	r2, [r3, #0]
 800ba54:	2300      	movs	r3, #0
 800ba56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	f383 8811 	msr	BASEPRI, r3
}
 800ba5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ba60:	bf00      	nop
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	e000ed04 	.word	0xe000ed04

0800ba6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ba70:	4b0b      	ldr	r3, [pc, #44]	@ (800baa0 <vPortSetupTimerInterrupt+0x34>)
 800ba72:	2200      	movs	r2, #0
 800ba74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba76:	4b0b      	ldr	r3, [pc, #44]	@ (800baa4 <vPortSetupTimerInterrupt+0x38>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba7c:	4b0a      	ldr	r3, [pc, #40]	@ (800baa8 <vPortSetupTimerInterrupt+0x3c>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a0a      	ldr	r2, [pc, #40]	@ (800baac <vPortSetupTimerInterrupt+0x40>)
 800ba82:	fba2 2303 	umull	r2, r3, r2, r3
 800ba86:	099b      	lsrs	r3, r3, #6
 800ba88:	4a09      	ldr	r2, [pc, #36]	@ (800bab0 <vPortSetupTimerInterrupt+0x44>)
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba8e:	4b04      	ldr	r3, [pc, #16]	@ (800baa0 <vPortSetupTimerInterrupt+0x34>)
 800ba90:	2207      	movs	r2, #7
 800ba92:	601a      	str	r2, [r3, #0]
}
 800ba94:	bf00      	nop
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	e000e010 	.word	0xe000e010
 800baa4:	e000e018 	.word	0xe000e018
 800baa8:	20000020 	.word	0x20000020
 800baac:	10624dd3 	.word	0x10624dd3
 800bab0:	e000e014 	.word	0xe000e014

0800bab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bac4 <vPortEnableVFP+0x10>
 800bab8:	6801      	ldr	r1, [r0, #0]
 800baba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800babe:	6001      	str	r1, [r0, #0]
 800bac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bac2:	bf00      	nop
 800bac4:	e000ed88 	.word	0xe000ed88

0800bac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bace:	f3ef 8305 	mrs	r3, IPSR
 800bad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b0f      	cmp	r3, #15
 800bad8:	d915      	bls.n	800bb06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bada:	4a18      	ldr	r2, [pc, #96]	@ (800bb3c <vPortValidateInterruptPriority+0x74>)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	4413      	add	r3, r2
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bae4:	4b16      	ldr	r3, [pc, #88]	@ (800bb40 <vPortValidateInterruptPriority+0x78>)
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	7afa      	ldrb	r2, [r7, #11]
 800baea:	429a      	cmp	r2, r3
 800baec:	d20b      	bcs.n	800bb06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	607b      	str	r3, [r7, #4]
}
 800bb00:	bf00      	nop
 800bb02:	bf00      	nop
 800bb04:	e7fd      	b.n	800bb02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb06:	4b0f      	ldr	r3, [pc, #60]	@ (800bb44 <vPortValidateInterruptPriority+0x7c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bb0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb48 <vPortValidateInterruptPriority+0x80>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d90b      	bls.n	800bb2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	603b      	str	r3, [r7, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	e7fd      	b.n	800bb2a <vPortValidateInterruptPriority+0x62>
	}
 800bb2e:	bf00      	nop
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	e000e3f0 	.word	0xe000e3f0
 800bb40:	20008688 	.word	0x20008688
 800bb44:	e000ed0c 	.word	0xe000ed0c
 800bb48:	2000868c 	.word	0x2000868c

0800bb4c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800bb56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	dc04      	bgt.n	800bb68 <err_to_errno+0x1c>
 800bb5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb62:	f113 0f10 	cmn.w	r3, #16
 800bb66:	da01      	bge.n	800bb6c <err_to_errno+0x20>
    return EIO;
 800bb68:	2305      	movs	r3, #5
 800bb6a:	e005      	b.n	800bb78 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800bb6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb70:	425b      	negs	r3, r3
 800bb72:	4a04      	ldr	r2, [pc, #16]	@ (800bb84 <err_to_errno+0x38>)
 800bb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	08023a74 	.word	0x08023a74

0800bb88 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	60fb      	str	r3, [r7, #12]

  netif_set_addr( msg->netif,
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6858      	ldr	r0, [r3, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6899      	ldr	r1, [r3, #8]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	f009 fcc2 	bl	801552c <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d007      	beq.n	800bbd6 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	6852      	ldr	r2, [r2, #4]
 800bbce:	4610      	mov	r0, r2
 800bbd0:	4798      	blx	r3
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	e006      	b.n	800bbe4 <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	6852      	ldr	r2, [r2, #4]
 800bbde:	4610      	mov	r0, r2
 800bbe0:	4798      	blx	r3
    return ERR_OK;
 800bbe2:	2300      	movs	r3, #0
  }
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08e      	sub	sp, #56	@ 0x38
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <netifapi_netif_set_addr+0x18>
    ipaddr = IP4_ADDR_ANY4;
 800bc00:	4b11      	ldr	r3, [pc, #68]	@ (800bc48 <netifapi_netif_set_addr+0x5c>)
 800bc02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <netifapi_netif_set_addr+0x22>
    netmask = IP4_ADDR_ANY4;
 800bc0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc48 <netifapi_netif_set_addr+0x5c>)
 800bc0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <netifapi_netif_set_addr+0x2c>
    gw = IP4_ADDR_ANY4;
 800bc14:	4b0c      	ldr	r3, [pc, #48]	@ (800bc48 <netifapi_netif_set_addr+0x5c>)
 800bc16:	603b      	str	r3, [r7, #0]
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	623b      	str	r3, [r7, #32]
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	627b      	str	r3, [r7, #36]	@ 0x24
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
 800bc28:	f107 0314 	add.w	r3, r7, #20
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4807      	ldr	r0, [pc, #28]	@ (800bc4c <netifapi_netif_set_addr+0x60>)
 800bc30:	f003 feb0 	bl	800f994 <tcpip_api_call>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800bc3a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3738      	adds	r7, #56	@ 0x38
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	08023abc 	.word	0x08023abc
 800bc4c:	0800bb89 	.word	0x0800bb89

0800bc50 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b08e      	sub	sp, #56	@ 0x38
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800bc68:	f107 0314 	add.w	r3, r7, #20
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4806      	ldr	r0, [pc, #24]	@ (800bc88 <netifapi_netif_common+0x38>)
 800bc70:	f003 fe90 	bl	800f994 <tcpip_api_call>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800bc7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3738      	adds	r7, #56	@ 0x38
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	0800bbb3 	.word	0x0800bbb3

0800bc8c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800bc96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bc9a:	f113 0f0d 	cmn.w	r3, #13
 800bc9e:	d009      	beq.n	800bcb4 <lwip_netconn_err_to_msg+0x28>
 800bca0:	f113 0f0d 	cmn.w	r3, #13
 800bca4:	dc0c      	bgt.n	800bcc0 <lwip_netconn_err_to_msg+0x34>
 800bca6:	f113 0f0f 	cmn.w	r3, #15
 800bcaa:	d007      	beq.n	800bcbc <lwip_netconn_err_to_msg+0x30>
 800bcac:	f113 0f0e 	cmn.w	r3, #14
 800bcb0:	d002      	beq.n	800bcb8 <lwip_netconn_err_to_msg+0x2c>
 800bcb2:	e005      	b.n	800bcc0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <lwip_netconn_err_to_msg+0x54>)
 800bcb6:	e00e      	b.n	800bcd6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800bcb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bce4 <lwip_netconn_err_to_msg+0x58>)
 800bcba:	e00c      	b.n	800bcd6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bce8 <lwip_netconn_err_to_msg+0x5c>)
 800bcbe:	e00a      	b.n	800bcd6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800bcc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d005      	beq.n	800bcd4 <lwip_netconn_err_to_msg+0x48>
 800bcc8:	4b08      	ldr	r3, [pc, #32]	@ (800bcec <lwip_netconn_err_to_msg+0x60>)
 800bcca:	227d      	movs	r2, #125	@ 0x7d
 800bccc:	4908      	ldr	r1, [pc, #32]	@ (800bcf0 <lwip_netconn_err_to_msg+0x64>)
 800bcce:	4809      	ldr	r0, [pc, #36]	@ (800bcf4 <lwip_netconn_err_to_msg+0x68>)
 800bcd0:	f011 ff96 	bl	801dc00 <iprintf>
      return NULL;
 800bcd4:	2300      	movs	r3, #0
  }
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	08023ab8 	.word	0x08023ab8
 800bce4:	08023ab9 	.word	0x08023ab9
 800bce8:	08023aba 	.word	0x08023aba
 800bcec:	0801f0d4 	.word	0x0801f0d4
 800bcf0:	0801f138 	.word	0x0801f138
 800bcf4:	0801f148 	.word	0x0801f148

0800bcf8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d105      	bne.n	800bd14 <lwip_netconn_is_err_msg+0x1c>
 800bd08:	4b12      	ldr	r3, [pc, #72]	@ (800bd54 <lwip_netconn_is_err_msg+0x5c>)
 800bd0a:	2285      	movs	r2, #133	@ 0x85
 800bd0c:	4912      	ldr	r1, [pc, #72]	@ (800bd58 <lwip_netconn_is_err_msg+0x60>)
 800bd0e:	4813      	ldr	r0, [pc, #76]	@ (800bd5c <lwip_netconn_is_err_msg+0x64>)
 800bd10:	f011 ff76 	bl	801dc00 <iprintf>

  if (msg == &netconn_aborted) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a12      	ldr	r2, [pc, #72]	@ (800bd60 <lwip_netconn_is_err_msg+0x68>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d104      	bne.n	800bd26 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	22f3      	movs	r2, #243	@ 0xf3
 800bd20:	701a      	strb	r2, [r3, #0]
    return 1;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e012      	b.n	800bd4c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	4a0e      	ldr	r2, [pc, #56]	@ (800bd64 <lwip_netconn_is_err_msg+0x6c>)
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d104      	bne.n	800bd38 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	22f2      	movs	r2, #242	@ 0xf2
 800bd32:	701a      	strb	r2, [r3, #0]
    return 1;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e009      	b.n	800bd4c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	4a0b      	ldr	r2, [pc, #44]	@ (800bd68 <lwip_netconn_is_err_msg+0x70>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d104      	bne.n	800bd4a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	22f1      	movs	r2, #241	@ 0xf1
 800bd44:	701a      	strb	r2, [r3, #0]
    return 1;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e000      	b.n	800bd4c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	0801f0d4 	.word	0x0801f0d4
 800bd58:	0801f170 	.word	0x0801f170
 800bd5c:	0801f148 	.word	0x0801f148
 800bd60:	08023ab8 	.word	0x08023ab8
 800bd64:	08023ab9 	.word	0x08023ab9
 800bd68:	08023aba 	.word	0x08023aba

0800bd6c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d105      	bne.n	800bd8c <recv_udp+0x20>
 800bd80:	4b34      	ldr	r3, [pc, #208]	@ (800be54 <recv_udp+0xe8>)
 800bd82:	22e5      	movs	r2, #229	@ 0xe5
 800bd84:	4934      	ldr	r1, [pc, #208]	@ (800be58 <recv_udp+0xec>)
 800bd86:	4835      	ldr	r0, [pc, #212]	@ (800be5c <recv_udp+0xf0>)
 800bd88:	f011 ff3a 	bl	801dc00 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d105      	bne.n	800bd9e <recv_udp+0x32>
 800bd92:	4b30      	ldr	r3, [pc, #192]	@ (800be54 <recv_udp+0xe8>)
 800bd94:	22e6      	movs	r2, #230	@ 0xe6
 800bd96:	4932      	ldr	r1, [pc, #200]	@ (800be60 <recv_udp+0xf4>)
 800bd98:	4830      	ldr	r0, [pc, #192]	@ (800be5c <recv_udp+0xf0>)
 800bd9a:	f011 ff31 	bl	801dc00 <iprintf>
  conn = (struct netconn *)arg;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d103      	bne.n	800bdb0 <recv_udp+0x44>
    pbuf_free(p);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f00a f909 	bl	8015fc0 <pbuf_free>
    return;
 800bdae:	e04d      	b.n	800be4c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d005      	beq.n	800bdc6 <recv_udp+0x5a>
 800bdba:	4b26      	ldr	r3, [pc, #152]	@ (800be54 <recv_udp+0xe8>)
 800bdbc:	22ee      	movs	r2, #238	@ 0xee
 800bdbe:	4929      	ldr	r1, [pc, #164]	@ (800be64 <recv_udp+0xf8>)
 800bdc0:	4826      	ldr	r0, [pc, #152]	@ (800be5c <recv_udp+0xf0>)
 800bdc2:	f011 ff1d 	bl	801dc00 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	3310      	adds	r3, #16
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f011 fca8 	bl	801d720 <sys_mbox_valid>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d103      	bne.n	800bdde <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f00a f8f2 	bl	8015fc0 <pbuf_free>
    return;
 800bddc:	e036      	b.n	800be4c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800bdde:	2006      	movs	r0, #6
 800bde0:	f009 f980 	bl	80150e4 <memp_malloc>
 800bde4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d103      	bne.n	800bdf4 <recv_udp+0x88>
    pbuf_free(p);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f00a f8e7 	bl	8015fc0 <pbuf_free>
    return;
 800bdf2:	e02b      	b.n	800be4c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <recv_udp+0xa0>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	e000      	b.n	800be0e <recv_udp+0xa2>
 800be0c:	2300      	movs	r3, #0
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800be12:	69bb      	ldr	r3, [r7, #24]
 800be14:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800be16:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	891b      	ldrh	r3, [r3, #8]
 800be1c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	3310      	adds	r3, #16
 800be22:	69b9      	ldr	r1, [r7, #24]
 800be24:	4618      	mov	r0, r3
 800be26:	f011 fc19 	bl	801d65c <sys_mbox_trypost>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <recv_udp+0xcc>
    netbuf_delete(buf);
 800be30:	69b8      	ldr	r0, [r7, #24]
 800be32:	f002 f9bb 	bl	800e1ac <netbuf_delete>
    return;
 800be36:	e009      	b.n	800be4c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d005      	beq.n	800be4c <recv_udp+0xe0>
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be44:	8afa      	ldrh	r2, [r7, #22]
 800be46:	2100      	movs	r1, #0
 800be48:	69f8      	ldr	r0, [r7, #28]
 800be4a:	4798      	blx	r3
  }
}
 800be4c:	3720      	adds	r7, #32
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	0801f0d4 	.word	0x0801f0d4
 800be58:	0801f17c 	.word	0x0801f17c
 800be5c:	0801f148 	.word	0x0801f148
 800be60:	0801f1a0 	.word	0x0801f1a0
 800be64:	0801f1c0 	.word	0x0801f1c0

0800be68 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d106      	bne.n	800be8a <recv_tcp+0x22>
 800be7c:	4b36      	ldr	r3, [pc, #216]	@ (800bf58 <recv_tcp+0xf0>)
 800be7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800be82:	4936      	ldr	r1, [pc, #216]	@ (800bf5c <recv_tcp+0xf4>)
 800be84:	4836      	ldr	r0, [pc, #216]	@ (800bf60 <recv_tcp+0xf8>)
 800be86:	f011 febb 	bl	801dc00 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <recv_tcp+0x36>
 800be90:	4b31      	ldr	r3, [pc, #196]	@ (800bf58 <recv_tcp+0xf0>)
 800be92:	f240 122d 	movw	r2, #301	@ 0x12d
 800be96:	4933      	ldr	r1, [pc, #204]	@ (800bf64 <recv_tcp+0xfc>)
 800be98:	4831      	ldr	r0, [pc, #196]	@ (800bf60 <recv_tcp+0xf8>)
 800be9a:	f011 feb1 	bl	801dc00 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800be9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d006      	beq.n	800beb4 <recv_tcp+0x4c>
 800bea6:	4b2c      	ldr	r3, [pc, #176]	@ (800bf58 <recv_tcp+0xf0>)
 800bea8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800beac:	492e      	ldr	r1, [pc, #184]	@ (800bf68 <recv_tcp+0x100>)
 800beae:	482c      	ldr	r0, [pc, #176]	@ (800bf60 <recv_tcp+0xf8>)
 800beb0:	f011 fea6 	bl	801dc00 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d102      	bne.n	800bec4 <recv_tcp+0x5c>
    return ERR_VAL;
 800bebe:	f06f 0305 	mvn.w	r3, #5
 800bec2:	e045      	b.n	800bf50 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	429a      	cmp	r2, r3
 800becc:	d006      	beq.n	800bedc <recv_tcp+0x74>
 800bece:	4b22      	ldr	r3, [pc, #136]	@ (800bf58 <recv_tcp+0xf0>)
 800bed0:	f240 1235 	movw	r2, #309	@ 0x135
 800bed4:	4925      	ldr	r1, [pc, #148]	@ (800bf6c <recv_tcp+0x104>)
 800bed6:	4822      	ldr	r0, [pc, #136]	@ (800bf60 <recv_tcp+0xf8>)
 800bed8:	f011 fe92 	bl	801dc00 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	3310      	adds	r3, #16
 800bee0:	4618      	mov	r0, r3
 800bee2:	f011 fc1d 	bl	801d720 <sys_mbox_valid>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10d      	bne.n	800bf08 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d008      	beq.n	800bf04 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	891b      	ldrh	r3, [r3, #8]
 800bef6:	4619      	mov	r1, r3
 800bef8:	68b8      	ldr	r0, [r7, #8]
 800befa:	f00b f829 	bl	8016f50 <tcp_recved>
      pbuf_free(p);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f00a f85e 	bl	8015fc0 <pbuf_free>
    }
    return ERR_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	e023      	b.n	800bf50 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d005      	beq.n	800bf1a <recv_tcp+0xb2>
    msg = p;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	891b      	ldrh	r3, [r3, #8]
 800bf16:	83fb      	strh	r3, [r7, #30]
 800bf18:	e003      	b.n	800bf22 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800bf1a:	4b15      	ldr	r3, [pc, #84]	@ (800bf70 <recv_tcp+0x108>)
 800bf1c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	3310      	adds	r3, #16
 800bf26:	69b9      	ldr	r1, [r7, #24]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f011 fb97 	bl	801d65c <sys_mbox_trypost>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d002      	beq.n	800bf3a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800bf34:	f04f 33ff 	mov.w	r3, #4294967295
 800bf38:	e00a      	b.n	800bf50 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d005      	beq.n	800bf4e <recv_tcp+0xe6>
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf46:	8bfa      	ldrh	r2, [r7, #30]
 800bf48:	2100      	movs	r1, #0
 800bf4a:	6978      	ldr	r0, [r7, #20]
 800bf4c:	4798      	blx	r3
  }

  return ERR_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	0801f0d4 	.word	0x0801f0d4
 800bf5c:	0801f1e0 	.word	0x0801f1e0
 800bf60:	0801f148 	.word	0x0801f148
 800bf64:	0801f204 	.word	0x0801f204
 800bf68:	0801f224 	.word	0x0801f224
 800bf6c:	0801f23c 	.word	0x0801f23c
 800bf70:	08023aba 	.word	0x08023aba

0800bf74 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <poll_tcp+0x22>
 800bf88:	4b2a      	ldr	r3, [pc, #168]	@ (800c034 <poll_tcp+0xc0>)
 800bf8a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800bf8e:	492a      	ldr	r1, [pc, #168]	@ (800c038 <poll_tcp+0xc4>)
 800bf90:	482a      	ldr	r0, [pc, #168]	@ (800c03c <poll_tcp+0xc8>)
 800bf92:	f011 fe35 	bl	801dc00 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	785b      	ldrb	r3, [r3, #1]
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d104      	bne.n	800bfa8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f000 ffb5 	bl	800cf10 <lwip_netconn_do_writemore>
 800bfa6:	e016      	b.n	800bfd6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	785b      	ldrb	r3, [r3, #1]
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d112      	bne.n	800bfd6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00a      	beq.n	800bfce <poll_tcp+0x5a>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	6a1b      	ldr	r3, [r3, #32]
 800bfbc:	7a5b      	ldrb	r3, [r3, #9]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d005      	beq.n	800bfce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	7a5a      	ldrb	r2, [r3, #9]
 800bfc8:	3a01      	subs	r2, #1
 800bfca:	b2d2      	uxtb	r2, r2
 800bfcc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800bfce:	2101      	movs	r1, #1
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f000 fbfb 	bl	800c7cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	7f1b      	ldrb	r3, [r3, #28]
 800bfda:	f003 0310 	and.w	r3, r3, #16
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d022      	beq.n	800c028 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d01e      	beq.n	800c028 <poll_tcp+0xb4>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bff2:	f640 3269 	movw	r2, #2921	@ 0xb69
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d916      	bls.n	800c028 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c002:	2b07      	cmp	r3, #7
 800c004:	d810      	bhi.n	800c028 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	7f1b      	ldrb	r3, [r3, #28]
 800c00a:	f023 0310 	bic.w	r3, r3, #16
 800c00e:	b2da      	uxtb	r2, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d005      	beq.n	800c028 <poll_tcp+0xb4>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c020:	2200      	movs	r2, #0
 800c022:	2102      	movs	r1, #2
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	0801f0d4 	.word	0x0801f0d4
 800c038:	0801f25c 	.word	0x0801f25c
 800c03c:	0801f148 	.word	0x0801f148

0800c040 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	4613      	mov	r3, r2
 800c04c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d106      	bne.n	800c066 <sent_tcp+0x26>
 800c058:	4b21      	ldr	r3, [pc, #132]	@ (800c0e0 <sent_tcp+0xa0>)
 800c05a:	f240 1293 	movw	r2, #403	@ 0x193
 800c05e:	4921      	ldr	r1, [pc, #132]	@ (800c0e4 <sent_tcp+0xa4>)
 800c060:	4821      	ldr	r0, [pc, #132]	@ (800c0e8 <sent_tcp+0xa8>)
 800c062:	f011 fdcd 	bl	801dc00 <iprintf>

  if (conn) {
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d033      	beq.n	800c0d4 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	785b      	ldrb	r3, [r3, #1]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d104      	bne.n	800c07e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c074:	2101      	movs	r1, #1
 800c076:	6978      	ldr	r0, [r7, #20]
 800c078:	f000 ff4a 	bl	800cf10 <lwip_netconn_do_writemore>
 800c07c:	e007      	b.n	800c08e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	785b      	ldrb	r3, [r3, #1]
 800c082:	2b04      	cmp	r3, #4
 800c084:	d103      	bne.n	800c08e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c086:	2101      	movs	r1, #1
 800c088:	6978      	ldr	r0, [r7, #20]
 800c08a:	f000 fb9f 	bl	800c7cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d01e      	beq.n	800c0d4 <sent_tcp+0x94>
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c09e:	f640 3269 	movw	r2, #2921	@ 0xb69
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d916      	bls.n	800c0d4 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c0ae:	2b07      	cmp	r3, #7
 800c0b0:	d810      	bhi.n	800c0d4 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	7f1b      	ldrb	r3, [r3, #28]
 800c0b6:	f023 0310 	bic.w	r3, r3, #16
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d005      	beq.n	800c0d4 <sent_tcp+0x94>
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0cc:	88fa      	ldrh	r2, [r7, #6]
 800c0ce:	2102      	movs	r1, #2
 800c0d0:	6978      	ldr	r0, [r7, #20]
 800c0d2:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	0801f0d4 	.word	0x0801f0d4
 800c0e4:	0801f25c 	.word	0x0801f25c
 800c0e8:	0801f148 	.word	0x0801f148

0800c0ec <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b088      	sub	sp, #32
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <err_tcp+0x24>
 800c102:	4b5f      	ldr	r3, [pc, #380]	@ (800c280 <err_tcp+0x194>)
 800c104:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800c108:	495e      	ldr	r1, [pc, #376]	@ (800c284 <err_tcp+0x198>)
 800c10a:	485f      	ldr	r0, [pc, #380]	@ (800c288 <err_tcp+0x19c>)
 800c10c:	f011 fd78 	bl	801dc00 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c110:	f011 fc10 	bl	801d934 <sys_arch_protect>
 800c114:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	2200      	movs	r2, #0
 800c11a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	78fa      	ldrb	r2, [r7, #3]
 800c120:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	7f1b      	ldrb	r3, [r3, #28]
 800c126:	f043 0301 	orr.w	r3, r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	785b      	ldrb	r3, [r3, #1]
 800c134:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	2200      	movs	r2, #0
 800c13a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c13c:	69b8      	ldr	r0, [r7, #24]
 800c13e:	f011 fc07 	bl	801d950 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c146:	2b00      	cmp	r3, #0
 800c148:	d005      	beq.n	800c156 <err_tcp+0x6a>
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14e:	2200      	movs	r2, #0
 800c150:	2104      	movs	r1, #4
 800c152:	69f8      	ldr	r0, [r7, #28]
 800c154:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d005      	beq.n	800c16a <err_tcp+0x7e>
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c162:	2200      	movs	r2, #0
 800c164:	2100      	movs	r1, #0
 800c166:	69f8      	ldr	r0, [r7, #28]
 800c168:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d005      	beq.n	800c17e <err_tcp+0x92>
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c176:	2200      	movs	r2, #0
 800c178:	2102      	movs	r1, #2
 800c17a:	69f8      	ldr	r0, [r7, #28]
 800c17c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c17e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff fd82 	bl	800bc8c <lwip_netconn_err_to_msg>
 800c188:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	3310      	adds	r3, #16
 800c18e:	4618      	mov	r0, r3
 800c190:	f011 fac6 	bl	801d720 <sys_mbox_valid>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d005      	beq.n	800c1a6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	3310      	adds	r3, #16
 800c19e:	6939      	ldr	r1, [r7, #16]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f011 fa5b 	bl	801d65c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	3314      	adds	r3, #20
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f011 fab8 	bl	801d720 <sys_mbox_valid>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	6939      	ldr	r1, [r7, #16]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f011 fa4d 	bl	801d65c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c1c2:	7dfb      	ldrb	r3, [r7, #23]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d005      	beq.n	800c1d4 <err_tcp+0xe8>
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	d002      	beq.n	800c1d4 <err_tcp+0xe8>
 800c1ce:	7dfb      	ldrb	r3, [r7, #23]
 800c1d0:	2b03      	cmp	r3, #3
 800c1d2:	d143      	bne.n	800c25c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	7f1b      	ldrb	r3, [r3, #28]
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	bf14      	ite	ne
 800c1e0:	2301      	movne	r3, #1
 800c1e2:	2300      	moveq	r3, #0
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	7f1b      	ldrb	r3, [r3, #28]
 800c1ec:	f023 0304 	bic.w	r3, r3, #4
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d13b      	bne.n	800c274 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <err_tcp+0x126>
 800c204:	4b1e      	ldr	r3, [pc, #120]	@ (800c280 <err_tcp+0x194>)
 800c206:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c20a:	4920      	ldr	r1, [pc, #128]	@ (800c28c <err_tcp+0x1a0>)
 800c20c:	481e      	ldr	r0, [pc, #120]	@ (800c288 <err_tcp+0x19c>)
 800c20e:	f011 fcf7 	bl	801dc00 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c212:	7dfb      	ldrb	r3, [r7, #23]
 800c214:	2b04      	cmp	r3, #4
 800c216:	d104      	bne.n	800c222 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c218:	69fb      	ldr	r3, [r7, #28]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	2200      	movs	r2, #0
 800c21e:	711a      	strb	r2, [r3, #4]
 800c220:	e003      	b.n	800c22a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	78fa      	ldrb	r2, [r7, #3]
 800c228:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	330c      	adds	r3, #12
 800c232:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c234:	68b8      	ldr	r0, [r7, #8]
 800c236:	f011 fb01 	bl	801d83c <sys_sem_valid>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d106      	bne.n	800c24e <err_tcp+0x162>
 800c240:	4b0f      	ldr	r3, [pc, #60]	@ (800c280 <err_tcp+0x194>)
 800c242:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800c246:	4912      	ldr	r1, [pc, #72]	@ (800c290 <err_tcp+0x1a4>)
 800c248:	480f      	ldr	r0, [pc, #60]	@ (800c288 <err_tcp+0x19c>)
 800c24a:	f011 fcd9 	bl	801dc00 <iprintf>
      conn->current_msg = NULL;
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	2200      	movs	r2, #0
 800c252:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c254:	68b8      	ldr	r0, [r7, #8]
 800c256:	f011 fad7 	bl	801d808 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c25a:	e00b      	b.n	800c274 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d008      	beq.n	800c276 <err_tcp+0x18a>
 800c264:	4b06      	ldr	r3, [pc, #24]	@ (800c280 <err_tcp+0x194>)
 800c266:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800c26a:	490a      	ldr	r1, [pc, #40]	@ (800c294 <err_tcp+0x1a8>)
 800c26c:	4806      	ldr	r0, [pc, #24]	@ (800c288 <err_tcp+0x19c>)
 800c26e:	f011 fcc7 	bl	801dc00 <iprintf>
  }
}
 800c272:	e000      	b.n	800c276 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c274:	bf00      	nop
}
 800c276:	bf00      	nop
 800c278:	3720      	adds	r7, #32
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	0801f0d4 	.word	0x0801f0d4
 800c284:	0801f25c 	.word	0x0801f25c
 800c288:	0801f148 	.word	0x0801f148
 800c28c:	0801f26c 	.word	0x0801f26c
 800c290:	0801f288 	.word	0x0801f288
 800c294:	0801f2a4 	.word	0x0801f2a4

0800c298 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c2a6:	6879      	ldr	r1, [r7, #4]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f00b fd1d 	bl	8017ce8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c2ae:	490a      	ldr	r1, [pc, #40]	@ (800c2d8 <setup_tcp+0x40>)
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f00b fd2b 	bl	8017d0c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c2b6:	4909      	ldr	r1, [pc, #36]	@ (800c2dc <setup_tcp+0x44>)
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f00b fd49 	bl	8017d50 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c2be:	2202      	movs	r2, #2
 800c2c0:	4907      	ldr	r1, [pc, #28]	@ (800c2e0 <setup_tcp+0x48>)
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f00b fda0 	bl	8017e08 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c2c8:	4906      	ldr	r1, [pc, #24]	@ (800c2e4 <setup_tcp+0x4c>)
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f00b fd62 	bl	8017d94 <tcp_err>
}
 800c2d0:	bf00      	nop
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	0800be69 	.word	0x0800be69
 800c2dc:	0800c041 	.word	0x0800c041
 800c2e0:	0800bf75 	.word	0x0800bf75
 800c2e4:	0800c0ed 	.word	0x0800c0ed

0800c2e8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800c2e8:	b590      	push	{r4, r7, lr}
 800c2ea:	b089      	sub	sp, #36	@ 0x24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <accept_function+0x1e>
    return ERR_VAL;
 800c300:	f06f 0305 	mvn.w	r3, #5
 800c304:	e0a1      	b.n	800c44a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	3314      	adds	r3, #20
 800c30a:	4618      	mov	r0, r3
 800c30c:	f011 fa08 	bl	801d720 <sys_mbox_valid>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	d102      	bne.n	800c31c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800c316:	f06f 0305 	mvn.w	r3, #5
 800c31a:	e096      	b.n	800c44a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d11b      	bne.n	800c35a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	f103 0414 	add.w	r4, r3, #20
 800c328:	f06f 000c 	mvn.w	r0, #12
 800c32c:	f7ff fcae 	bl	800bc8c <lwip_netconn_err_to_msg>
 800c330:	4603      	mov	r3, r0
 800c332:	4619      	mov	r1, r3
 800c334:	4620      	mov	r0, r4
 800c336:	f011 f991 	bl	801d65c <sys_mbox_trypost>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d109      	bne.n	800c354 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c344:	2b00      	cmp	r3, #0
 800c346:	d005      	beq.n	800c354 <accept_function+0x6c>
 800c348:	69fb      	ldr	r3, [r7, #28]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34c:	2200      	movs	r2, #0
 800c34e:	2100      	movs	r1, #0
 800c350:	69f8      	ldr	r0, [r7, #28]
 800c352:	4798      	blx	r3
    }
    return ERR_VAL;
 800c354:	f06f 0305 	mvn.w	r3, #5
 800c358:	e077      	b.n	800c44a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800c35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d006      	beq.n	800c370 <accept_function+0x88>
 800c362:	4b3c      	ldr	r3, [pc, #240]	@ (800c454 <accept_function+0x16c>)
 800c364:	f240 222a 	movw	r2, #554	@ 0x22a
 800c368:	493b      	ldr	r1, [pc, #236]	@ (800c458 <accept_function+0x170>)
 800c36a:	483c      	ldr	r0, [pc, #240]	@ (800c45c <accept_function+0x174>)
 800c36c:	f011 fc48 	bl	801dc00 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	781a      	ldrb	r2, [r3, #0]
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c378:	4619      	mov	r1, r3
 800c37a:	4610      	mov	r0, r2
 800c37c:	f000 f8f0 	bl	800c560 <netconn_alloc>
 800c380:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d11b      	bne.n	800c3c0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	f103 0414 	add.w	r4, r3, #20
 800c38e:	f06f 000c 	mvn.w	r0, #12
 800c392:	f7ff fc7b 	bl	800bc8c <lwip_netconn_err_to_msg>
 800c396:	4603      	mov	r3, r0
 800c398:	4619      	mov	r1, r3
 800c39a:	4620      	mov	r0, r4
 800c39c:	f011 f95e 	bl	801d65c <sys_mbox_trypost>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d109      	bne.n	800c3ba <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d005      	beq.n	800c3ba <accept_function+0xd2>
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	69f8      	ldr	r0, [r7, #28]
 800c3b8:	4798      	blx	r3
    }
    return ERR_MEM;
 800c3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c3be:	e044      	b.n	800c44a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800c3c6:	69b8      	ldr	r0, [r7, #24]
 800c3c8:	f7ff ff66 	bl	800c298 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	3314      	adds	r3, #20
 800c3d0:	69b9      	ldr	r1, [r7, #24]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f011 f942 	bl	801d65c <sys_mbox_trypost>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d02a      	beq.n	800c434 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	6978      	ldr	r0, [r7, #20]
 800c3e8:	f00b fc7e 	bl	8017ce8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	6978      	ldr	r0, [r7, #20]
 800c3f0:	f00b fc8c 	bl	8017d0c <tcp_recv>
    tcp_sent(pcb, NULL);
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	6978      	ldr	r0, [r7, #20]
 800c3f8:	f00b fcaa 	bl	8017d50 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2100      	movs	r1, #0
 800c400:	6978      	ldr	r0, [r7, #20]
 800c402:	f00b fd01 	bl	8017e08 <tcp_poll>
    tcp_err(pcb, NULL);
 800c406:	2100      	movs	r1, #0
 800c408:	6978      	ldr	r0, [r7, #20]
 800c40a:	f00b fcc3 	bl	8017d94 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	2200      	movs	r2, #0
 800c412:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	3310      	adds	r3, #16
 800c418:	4618      	mov	r0, r3
 800c41a:	f011 f90d 	bl	801d638 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	3310      	adds	r3, #16
 800c422:	4618      	mov	r0, r3
 800c424:	f011 f98d 	bl	801d742 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800c428:	69b8      	ldr	r0, [r7, #24]
 800c42a:	f000 f907 	bl	800c63c <netconn_free>
    return ERR_MEM;
 800c42e:	f04f 33ff 	mov.w	r3, #4294967295
 800c432:	e00a      	b.n	800c44a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d005      	beq.n	800c448 <accept_function+0x160>
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c440:	2200      	movs	r2, #0
 800c442:	2100      	movs	r1, #0
 800c444:	69f8      	ldr	r0, [r7, #28]
 800c446:	4798      	blx	r3
  }

  return ERR_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3724      	adds	r7, #36	@ 0x24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd90      	pop	{r4, r7, pc}
 800c452:	bf00      	nop
 800c454:	0801f0d4 	.word	0x0801f0d4
 800c458:	0801f2c0 	.word	0x0801f2c0
 800c45c:	0801f148 	.word	0x0801f148

0800c460 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800c460:	b590      	push	{r4, r7, lr}
 800c462:	b085      	sub	sp, #20
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800c468:	2300      	movs	r3, #0
 800c46a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d006      	beq.n	800c484 <pcb_new+0x24>
 800c476:	4b2b      	ldr	r3, [pc, #172]	@ (800c524 <pcb_new+0xc4>)
 800c478:	f240 2265 	movw	r2, #613	@ 0x265
 800c47c:	492a      	ldr	r1, [pc, #168]	@ (800c528 <pcb_new+0xc8>)
 800c47e:	482b      	ldr	r0, [pc, #172]	@ (800c52c <pcb_new+0xcc>)
 800c480:	f011 fbbe 	bl	801dc00 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c48e:	2b10      	cmp	r3, #16
 800c490:	d022      	beq.n	800c4d8 <pcb_new+0x78>
 800c492:	2b20      	cmp	r3, #32
 800c494:	d133      	bne.n	800c4fe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681c      	ldr	r4, [r3, #0]
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f010 ff9d 	bl	801d3dc <udp_new_ip_type>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d02a      	beq.n	800c506 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	2b22      	cmp	r3, #34	@ 0x22
 800c4b8:	d104      	bne.n	800c4c4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6858      	ldr	r0, [r3, #4]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	4917      	ldr	r1, [pc, #92]	@ (800c530 <pcb_new+0xd0>)
 800c4d2:	f010 ff07 	bl	801d2e4 <udp_recv>
      }
      break;
 800c4d6:	e016      	b.n	800c506 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681c      	ldr	r4, [r3, #0]
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f00b fbf4 	bl	8017ccc <tcp_new_ip_type>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d00b      	beq.n	800c50a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fece 	bl	800c298 <setup_tcp>
      }
      break;
 800c4fc:	e005      	b.n	800c50a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	22fa      	movs	r2, #250	@ 0xfa
 800c502:	711a      	strb	r2, [r3, #4]
      return;
 800c504:	e00a      	b.n	800c51c <pcb_new+0xbc>
      break;
 800c506:	bf00      	nop
 800c508:	e000      	b.n	800c50c <pcb_new+0xac>
      break;
 800c50a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	22ff      	movs	r2, #255	@ 0xff
 800c51a:	711a      	strb	r2, [r3, #4]
  }
}
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd90      	pop	{r4, r7, pc}
 800c522:	bf00      	nop
 800c524:	0801f0d4 	.word	0x0801f0d4
 800c528:	0801f2e8 	.word	0x0801f2e8
 800c52c:	0801f148 	.word	0x0801f148
 800c530:	0800bd6d 	.word	0x0800bd6d

0800c534 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2200      	movs	r2, #0
 800c544:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800c550:	68f8      	ldr	r0, [r7, #12]
 800c552:	f7ff ff85 	bl	800c460 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800c556:	bf00      	nop
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
	...

0800c560 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	6039      	str	r1, [r7, #0]
 800c56a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800c570:	2007      	movs	r0, #7
 800c572:	f008 fdb7 	bl	80150e4 <memp_malloc>
 800c576:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <netconn_alloc+0x22>
    return NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	e052      	b.n	800c628 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	79fa      	ldrb	r2, [r7, #7]
 800c58c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c59a:	2b10      	cmp	r3, #16
 800c59c:	d004      	beq.n	800c5a8 <netconn_alloc+0x48>
 800c59e:	2b20      	cmp	r3, #32
 800c5a0:	d105      	bne.n	800c5ae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800c5a2:	2306      	movs	r3, #6
 800c5a4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c5a6:	e00a      	b.n	800c5be <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800c5a8:	2306      	movs	r3, #6
 800c5aa:	617b      	str	r3, [r7, #20]
      break;
 800c5ac:	e007      	b.n	800c5be <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800c5ae:	4b20      	ldr	r3, [pc, #128]	@ (800c630 <netconn_alloc+0xd0>)
 800c5b0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800c5b4:	491f      	ldr	r1, [pc, #124]	@ (800c634 <netconn_alloc+0xd4>)
 800c5b6:	4820      	ldr	r0, [pc, #128]	@ (800c638 <netconn_alloc+0xd8>)
 800c5b8:	f011 fb22 	bl	801dc00 <iprintf>
      goto free_and_return;
 800c5bc:	e02f      	b.n	800c61e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	3310      	adds	r3, #16
 800c5c2:	6979      	ldr	r1, [r7, #20]
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f011 f81d 	bl	801d604 <sys_mbox_new>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d125      	bne.n	800c61c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	330c      	adds	r3, #12
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f011 f8c0 	bl	801d75c <sys_sem_new>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d005      	beq.n	800c5ee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	3310      	adds	r3, #16
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f011 f826 	bl	801d638 <sys_mbox_free>
    goto free_and_return;
 800c5ec:	e017      	b.n	800c61e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f011 f8a5 	bl	801d742 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f04f 32ff 	mov.w	r2, #4294967295
 800c604:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	7cfa      	ldrb	r2, [r7, #19]
 800c616:	771a      	strb	r2, [r3, #28]
  return conn;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	e005      	b.n	800c628 <netconn_alloc+0xc8>
    goto free_and_return;
 800c61c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800c61e:	68f9      	ldr	r1, [r7, #12]
 800c620:	2007      	movs	r0, #7
 800c622:	f008 fdd5 	bl	80151d0 <memp_free>
  return NULL;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3718      	adds	r7, #24
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	0801f0d4 	.word	0x0801f0d4
 800c634:	0801f308 	.word	0x0801f308
 800c638:	0801f148 	.word	0x0801f148

0800c63c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d006      	beq.n	800c65a <netconn_free+0x1e>
 800c64c:	4b1b      	ldr	r3, [pc, #108]	@ (800c6bc <netconn_free+0x80>)
 800c64e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c652:	491b      	ldr	r1, [pc, #108]	@ (800c6c0 <netconn_free+0x84>)
 800c654:	481b      	ldr	r0, [pc, #108]	@ (800c6c4 <netconn_free+0x88>)
 800c656:	f011 fad3 	bl	801dc00 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3310      	adds	r3, #16
 800c65e:	4618      	mov	r0, r3
 800c660:	f011 f85e 	bl	801d720 <sys_mbox_valid>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d006      	beq.n	800c678 <netconn_free+0x3c>
 800c66a:	4b14      	ldr	r3, [pc, #80]	@ (800c6bc <netconn_free+0x80>)
 800c66c:	f240 3223 	movw	r2, #803	@ 0x323
 800c670:	4915      	ldr	r1, [pc, #84]	@ (800c6c8 <netconn_free+0x8c>)
 800c672:	4814      	ldr	r0, [pc, #80]	@ (800c6c4 <netconn_free+0x88>)
 800c674:	f011 fac4 	bl	801dc00 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3314      	adds	r3, #20
 800c67c:	4618      	mov	r0, r3
 800c67e:	f011 f84f 	bl	801d720 <sys_mbox_valid>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d006      	beq.n	800c696 <netconn_free+0x5a>
 800c688:	4b0c      	ldr	r3, [pc, #48]	@ (800c6bc <netconn_free+0x80>)
 800c68a:	f240 3226 	movw	r2, #806	@ 0x326
 800c68e:	490f      	ldr	r1, [pc, #60]	@ (800c6cc <netconn_free+0x90>)
 800c690:	480c      	ldr	r0, [pc, #48]	@ (800c6c4 <netconn_free+0x88>)
 800c692:	f011 fab5 	bl	801dc00 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	330c      	adds	r3, #12
 800c69a:	4618      	mov	r0, r3
 800c69c:	f011 f8c1 	bl	801d822 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	330c      	adds	r3, #12
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f011 f8da 	bl	801d85e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800c6aa:	6879      	ldr	r1, [r7, #4]
 800c6ac:	2007      	movs	r0, #7
 800c6ae:	f008 fd8f 	bl	80151d0 <memp_free>
}
 800c6b2:	bf00      	nop
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	0801f0d4 	.word	0x0801f0d4
 800c6c0:	0801f330 	.word	0x0801f330
 800c6c4:	0801f148 	.word	0x0801f148
 800c6c8:	0801f360 	.word	0x0801f360
 800c6cc:	0801f39c 	.word	0x0801f39c

0800c6d0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	3310      	adds	r3, #16
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f011 f81f 	bl	801d720 <sys_mbox_valid>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d02f      	beq.n	800c748 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c6e8:	e018      	b.n	800c71c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c6f2:	2b10      	cmp	r3, #16
 800c6f4:	d10e      	bne.n	800c714 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	f107 020f 	add.w	r2, r7, #15
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff fafa 	bl	800bcf8 <lwip_netconn_is_err_msg>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d108      	bne.n	800c71c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f009 fc57 	bl	8015fc0 <pbuf_free>
 800c712:	e003      	b.n	800c71c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	4618      	mov	r0, r3
 800c718:	f001 fd48 	bl	800e1ac <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3310      	adds	r3, #16
 800c720:	f107 0210 	add.w	r2, r7, #16
 800c724:	4611      	mov	r1, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f010 ffe3 	bl	801d6f2 <sys_arch_mbox_tryfetch>
 800c72c:	4603      	mov	r3, r0
 800c72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c732:	d1da      	bne.n	800c6ea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3310      	adds	r3, #16
 800c738:	4618      	mov	r0, r3
 800c73a:	f010 ff7d 	bl	801d638 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3310      	adds	r3, #16
 800c742:	4618      	mov	r0, r3
 800c744:	f010 fffd 	bl	801d742 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3314      	adds	r3, #20
 800c74c:	4618      	mov	r0, r3
 800c74e:	f010 ffe7 	bl	801d720 <sys_mbox_valid>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d034      	beq.n	800c7c2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c758:	e01d      	b.n	800c796 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	f107 020e 	add.w	r2, r7, #14
 800c760:	4611      	mov	r1, r2
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fac8 	bl	800bcf8 <lwip_netconn_is_err_msg>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d113      	bne.n	800c796 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800c772:	6978      	ldr	r0, [r7, #20]
 800c774:	f7ff ffac 	bl	800c6d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d007      	beq.n	800c790 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	4618      	mov	r0, r3
 800c786:	f00a fa1b 	bl	8016bc0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2200      	movs	r2, #0
 800c78e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800c790:	6978      	ldr	r0, [r7, #20]
 800c792:	f7ff ff53 	bl	800c63c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3314      	adds	r3, #20
 800c79a:	f107 0210 	add.w	r2, r7, #16
 800c79e:	4611      	mov	r1, r2
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f010 ffa6 	bl	801d6f2 <sys_arch_mbox_tryfetch>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ac:	d1d5      	bne.n	800c75a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3314      	adds	r3, #20
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f010 ff40 	bl	801d638 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3314      	adds	r3, #20
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f010 ffc0 	bl	801d742 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800c7c2:	bf00      	nop
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
	...

0800c7cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d106      	bne.n	800c7f0 <lwip_netconn_do_close_internal+0x24>
 800c7e2:	4b87      	ldr	r3, [pc, #540]	@ (800ca00 <lwip_netconn_do_close_internal+0x234>)
 800c7e4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800c7e8:	4986      	ldr	r1, [pc, #536]	@ (800ca04 <lwip_netconn_do_close_internal+0x238>)
 800c7ea:	4887      	ldr	r0, [pc, #540]	@ (800ca08 <lwip_netconn_do_close_internal+0x23c>)
 800c7ec:	f011 fa08 	bl	801dc00 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c7f8:	2b10      	cmp	r3, #16
 800c7fa:	d006      	beq.n	800c80a <lwip_netconn_do_close_internal+0x3e>
 800c7fc:	4b80      	ldr	r3, [pc, #512]	@ (800ca00 <lwip_netconn_do_close_internal+0x234>)
 800c7fe:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800c802:	4982      	ldr	r1, [pc, #520]	@ (800ca0c <lwip_netconn_do_close_internal+0x240>)
 800c804:	4880      	ldr	r0, [pc, #512]	@ (800ca08 <lwip_netconn_do_close_internal+0x23c>)
 800c806:	f011 f9fb 	bl	801dc00 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	2b04      	cmp	r3, #4
 800c810:	d006      	beq.n	800c820 <lwip_netconn_do_close_internal+0x54>
 800c812:	4b7b      	ldr	r3, [pc, #492]	@ (800ca00 <lwip_netconn_do_close_internal+0x234>)
 800c814:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800c818:	497d      	ldr	r1, [pc, #500]	@ (800ca10 <lwip_netconn_do_close_internal+0x244>)
 800c81a:	487b      	ldr	r0, [pc, #492]	@ (800ca08 <lwip_netconn_do_close_internal+0x23c>)
 800c81c:	f011 f9f0 	bl	801dc00 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d106      	bne.n	800c836 <lwip_netconn_do_close_internal+0x6a>
 800c828:	4b75      	ldr	r3, [pc, #468]	@ (800ca00 <lwip_netconn_do_close_internal+0x234>)
 800c82a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800c82e:	4979      	ldr	r1, [pc, #484]	@ (800ca14 <lwip_netconn_do_close_internal+0x248>)
 800c830:	4875      	ldr	r0, [pc, #468]	@ (800ca08 <lwip_netconn_do_close_internal+0x23c>)
 800c832:	f011 f9e5 	bl	801dc00 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d106      	bne.n	800c84c <lwip_netconn_do_close_internal+0x80>
 800c83e:	4b70      	ldr	r3, [pc, #448]	@ (800ca00 <lwip_netconn_do_close_internal+0x234>)
 800c840:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c844:	4974      	ldr	r1, [pc, #464]	@ (800ca18 <lwip_netconn_do_close_internal+0x24c>)
 800c846:	4870      	ldr	r0, [pc, #448]	@ (800ca08 <lwip_netconn_do_close_internal+0x23c>)
 800c848:	f011 f9da 	bl	801dc00 <iprintf>

  tpcb = conn->pcb.tcp;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	7a1b      	ldrb	r3, [r3, #8]
 800c858:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	f003 0301 	and.w	r3, r3, #1
 800c860:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800c862:	7bfb      	ldrb	r3, [r7, #15]
 800c864:	f003 0302 	and.w	r3, r3, #2
 800c868:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800c86a:	7bfb      	ldrb	r3, [r7, #15]
 800c86c:	2b03      	cmp	r3, #3
 800c86e:	d102      	bne.n	800c876 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800c870:	2301      	movs	r3, #1
 800c872:	75bb      	strb	r3, [r7, #22]
 800c874:	e01f      	b.n	800c8b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800c876:	7bbb      	ldrb	r3, [r7, #14]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00e      	beq.n	800c89a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800c880:	2b05      	cmp	r3, #5
 800c882:	d007      	beq.n	800c894 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800c888:	2b06      	cmp	r3, #6
 800c88a:	d003      	beq.n	800c894 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800c890:	2b08      	cmp	r3, #8
 800c892:	d102      	bne.n	800c89a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800c894:	2301      	movs	r3, #1
 800c896:	75bb      	strb	r3, [r7, #22]
 800c898:	e00d      	b.n	800c8b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800c89a:	7b7b      	ldrb	r3, [r7, #13]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d008      	beq.n	800c8b2 <lwip_netconn_do_close_internal+0xe6>
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	8b5b      	ldrh	r3, [r3, #26]
 800c8a4:	f003 0310 	and.w	r3, r3, #16
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d002      	beq.n	800c8b2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	75bb      	strb	r3, [r7, #22]
 800c8b0:	e001      	b.n	800c8b6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800c8b6:	7dbb      	ldrb	r3, [r7, #22]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800c8bc:	2100      	movs	r1, #0
 800c8be:	6938      	ldr	r0, [r7, #16]
 800c8c0:	f00b fa12 	bl	8017ce8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	7d1b      	ldrb	r3, [r3, #20]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d104      	bne.n	800c8d6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	6938      	ldr	r0, [r7, #16]
 800c8d0:	f00b fa82 	bl	8017dd8 <tcp_accept>
 800c8d4:	e01d      	b.n	800c912 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800c8d6:	7bbb      	ldrb	r3, [r7, #14]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d007      	beq.n	800c8ec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800c8dc:	2100      	movs	r1, #0
 800c8de:	6938      	ldr	r0, [r7, #16]
 800c8e0:	f00b fa14 	bl	8017d0c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	6938      	ldr	r0, [r7, #16]
 800c8e8:	f00b fa76 	bl	8017dd8 <tcp_accept>
    }
    if (shut_tx) {
 800c8ec:	7b7b      	ldrb	r3, [r7, #13]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d003      	beq.n	800c8fa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	6938      	ldr	r0, [r7, #16]
 800c8f6:	f00b fa2b 	bl	8017d50 <tcp_sent>
    }
    if (shut_close) {
 800c8fa:	7dbb      	ldrb	r3, [r7, #22]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d008      	beq.n	800c912 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800c900:	2200      	movs	r2, #0
 800c902:	2100      	movs	r1, #0
 800c904:	6938      	ldr	r0, [r7, #16]
 800c906:	f00b fa7f 	bl	8017e08 <tcp_poll>
      tcp_err(tpcb, NULL);
 800c90a:	2100      	movs	r1, #0
 800c90c:	6938      	ldr	r0, [r7, #16]
 800c90e:	f00b fa41 	bl	8017d94 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800c912:	7dbb      	ldrb	r3, [r7, #22]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d005      	beq.n	800c924 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800c918:	6938      	ldr	r0, [r7, #16]
 800c91a:	f00a f80b 	bl	8016934 <tcp_close>
 800c91e:	4603      	mov	r3, r0
 800c920:	75fb      	strb	r3, [r7, #23]
 800c922:	e007      	b.n	800c934 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	7b7a      	ldrb	r2, [r7, #13]
 800c928:	4619      	mov	r1, r3
 800c92a:	6938      	ldr	r0, [r7, #16]
 800c92c:	f00a f82e 	bl	801698c <tcp_shutdown>
 800c930:	4603      	mov	r3, r0
 800c932:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800c934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d102      	bne.n	800c942 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800c93c:	2301      	movs	r3, #1
 800c93e:	757b      	strb	r3, [r7, #21]
 800c940:	e016      	b.n	800c970 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800c942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94a:	d10f      	bne.n	800c96c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6a1b      	ldr	r3, [r3, #32]
 800c950:	7a5b      	ldrb	r3, [r3, #9]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10c      	bne.n	800c970 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800c956:	2301      	movs	r3, #1
 800c958:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800c95a:	7dbb      	ldrb	r3, [r7, #22]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d007      	beq.n	800c970 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800c960:	6938      	ldr	r0, [r7, #16]
 800c962:	f00a f92d 	bl	8016bc0 <tcp_abort>
          err = ERR_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	75fb      	strb	r3, [r7, #23]
 800c96a:	e001      	b.n	800c970 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800c96c:	2301      	movs	r3, #1
 800c96e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800c970:	7d7b      	ldrb	r3, [r7, #21]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d052      	beq.n	800ca1c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	330c      	adds	r3, #12
 800c97e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	7dfa      	ldrb	r2, [r7, #23]
 800c986:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800c994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d129      	bne.n	800c9f0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800c99c:	7dbb      	ldrb	r3, [r7, #22]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <lwip_netconn_do_close_internal+0x1f0>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2104      	movs	r1, #4
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	4798      	blx	r3
      }
      if (shut_rx) {
 800c9bc:	7bbb      	ldrb	r3, [r7, #14]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d005      	beq.n	800c9d6 <lwip_netconn_do_close_internal+0x20a>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	4798      	blx	r3
      }
      if (shut_tx) {
 800c9d6:	7b7b      	ldrb	r3, [r7, #13]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d009      	beq.n	800c9f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d005      	beq.n	800c9f0 <lwip_netconn_do_close_internal+0x224>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2102      	movs	r1, #2
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c9f0:	78fb      	ldrb	r3, [r7, #3]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800c9f6:	68b8      	ldr	r0, [r7, #8]
 800c9f8:	f010 ff06 	bl	801d808 <sys_sem_signal>
    }
    return ERR_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e03c      	b.n	800ca7a <lwip_netconn_do_close_internal+0x2ae>
 800ca00:	0801f0d4 	.word	0x0801f0d4
 800ca04:	0801f3d8 	.word	0x0801f3d8
 800ca08:	0801f148 	.word	0x0801f148
 800ca0c:	0801f3e8 	.word	0x0801f3e8
 800ca10:	0801f408 	.word	0x0801f408
 800ca14:	0801f42c 	.word	0x0801f42c
 800ca18:	0801f26c 	.word	0x0801f26c
  }
  if (!close_finished) {
 800ca1c:	7d7b      	ldrb	r3, [r7, #21]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d11e      	bne.n	800ca60 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	7d1b      	ldrb	r3, [r3, #20]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d106      	bne.n	800ca38 <lwip_netconn_do_close_internal+0x26c>
 800ca2a:	4b16      	ldr	r3, [pc, #88]	@ (800ca84 <lwip_netconn_do_close_internal+0x2b8>)
 800ca2c:	f240 4241 	movw	r2, #1089	@ 0x441
 800ca30:	4915      	ldr	r1, [pc, #84]	@ (800ca88 <lwip_netconn_do_close_internal+0x2bc>)
 800ca32:	4816      	ldr	r0, [pc, #88]	@ (800ca8c <lwip_netconn_do_close_internal+0x2c0>)
 800ca34:	f011 f8e4 	bl	801dc00 <iprintf>
    if (shut_tx) {
 800ca38:	7b7b      	ldrb	r3, [r7, #13]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800ca3e:	4914      	ldr	r1, [pc, #80]	@ (800ca90 <lwip_netconn_do_close_internal+0x2c4>)
 800ca40:	6938      	ldr	r0, [r7, #16]
 800ca42:	f00b f985 	bl	8017d50 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ca46:	2201      	movs	r2, #1
 800ca48:	4912      	ldr	r1, [pc, #72]	@ (800ca94 <lwip_netconn_do_close_internal+0x2c8>)
 800ca4a:	6938      	ldr	r0, [r7, #16]
 800ca4c:	f00b f9dc 	bl	8017e08 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ca50:	4911      	ldr	r1, [pc, #68]	@ (800ca98 <lwip_netconn_do_close_internal+0x2cc>)
 800ca52:	6938      	ldr	r0, [r7, #16]
 800ca54:	f00b f99e 	bl	8017d94 <tcp_err>
    tcp_arg(tpcb, conn);
 800ca58:	6879      	ldr	r1, [r7, #4]
 800ca5a:	6938      	ldr	r0, [r7, #16]
 800ca5c:	f00b f944 	bl	8017ce8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ca60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d106      	bne.n	800ca76 <lwip_netconn_do_close_internal+0x2aa>
 800ca68:	4b06      	ldr	r3, [pc, #24]	@ (800ca84 <lwip_netconn_do_close_internal+0x2b8>)
 800ca6a:	f240 424d 	movw	r2, #1101	@ 0x44d
 800ca6e:	490b      	ldr	r1, [pc, #44]	@ (800ca9c <lwip_netconn_do_close_internal+0x2d0>)
 800ca70:	4806      	ldr	r0, [pc, #24]	@ (800ca8c <lwip_netconn_do_close_internal+0x2c0>)
 800ca72:	f011 f8c5 	bl	801dc00 <iprintf>
  return err;
 800ca76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	0801f0d4 	.word	0x0801f0d4
 800ca88:	0801f440 	.word	0x0801f440
 800ca8c:	0801f148 	.word	0x0801f148
 800ca90:	0800c041 	.word	0x0800c041
 800ca94:	0800bf75 	.word	0x0800bf75
 800ca98:	0800c0ed 	.word	0x0800c0ed
 800ca9c:	0801f464 	.word	0x0801f464

0800caa0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	785b      	ldrb	r3, [r3, #1]
 800cab2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800cab4:	7afb      	ldrb	r3, [r7, #11]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00d      	beq.n	800cad6 <lwip_netconn_do_delconn+0x36>
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cac4:	2b10      	cmp	r3, #16
 800cac6:	d006      	beq.n	800cad6 <lwip_netconn_do_delconn+0x36>
 800cac8:	4b60      	ldr	r3, [pc, #384]	@ (800cc4c <lwip_netconn_do_delconn+0x1ac>)
 800caca:	f240 425e 	movw	r2, #1118	@ 0x45e
 800cace:	4960      	ldr	r1, [pc, #384]	@ (800cc50 <lwip_netconn_do_delconn+0x1b0>)
 800cad0:	4860      	ldr	r0, [pc, #384]	@ (800cc54 <lwip_netconn_do_delconn+0x1b4>)
 800cad2:	f011 f895 	bl	801dc00 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800cad6:	7afb      	ldrb	r3, [r7, #11]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <lwip_netconn_do_delconn+0x48>
 800cadc:	7afb      	ldrb	r3, [r7, #11]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d002      	beq.n	800cae8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800cae2:	7afb      	ldrb	r3, [r7, #11]
 800cae4:	2b03      	cmp	r3, #3
 800cae6:	d109      	bne.n	800cafc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800cae8:	7afb      	ldrb	r3, [r7, #11]
 800caea:	2b03      	cmp	r3, #3
 800caec:	d10a      	bne.n	800cb04 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	7f1b      	ldrb	r3, [r3, #28]
 800caf4:	f003 0304 	and.w	r3, r3, #4
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d103      	bne.n	800cb04 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	22fb      	movs	r2, #251	@ 0xfb
 800cb00:	711a      	strb	r2, [r3, #4]
 800cb02:	e097      	b.n	800cc34 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800cb04:	7afb      	ldrb	r3, [r7, #11]
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	d10d      	bne.n	800cb26 <lwip_netconn_do_delconn+0x86>
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	7f1b      	ldrb	r3, [r3, #28]
 800cb10:	f003 0304 	and.w	r3, r3, #4
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d106      	bne.n	800cb26 <lwip_netconn_do_delconn+0x86>
 800cb18:	4b4c      	ldr	r3, [pc, #304]	@ (800cc4c <lwip_netconn_do_delconn+0x1ac>)
 800cb1a:	f240 427a 	movw	r2, #1146	@ 0x47a
 800cb1e:	494e      	ldr	r1, [pc, #312]	@ (800cc58 <lwip_netconn_do_delconn+0x1b8>)
 800cb20:	484c      	ldr	r0, [pc, #304]	@ (800cc54 <lwip_netconn_do_delconn+0x1b4>)
 800cb22:	f011 f86d 	bl	801dc00 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7ff fdcd 	bl	800c6d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d05f      	beq.n	800cc00 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb4a:	2b10      	cmp	r3, #16
 800cb4c:	d00d      	beq.n	800cb6a <lwip_netconn_do_delconn+0xca>
 800cb4e:	2b20      	cmp	r3, #32
 800cb50:	d151      	bne.n	800cbf6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	625a      	str	r2, [r3, #36]	@ 0x24
          udp_remove(msg->conn->pcb.udp);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f010 fbde 	bl	801d324 <udp_remove>
          break;
 800cb68:	e046      	b.n	800cbf8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6a1b      	ldr	r3, [r3, #32]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d006      	beq.n	800cb82 <lwip_netconn_do_delconn+0xe2>
 800cb74:	4b35      	ldr	r3, [pc, #212]	@ (800cc4c <lwip_netconn_do_delconn+0x1ac>)
 800cb76:	f240 4294 	movw	r2, #1172	@ 0x494
 800cb7a:	4938      	ldr	r1, [pc, #224]	@ (800cc5c <lwip_netconn_do_delconn+0x1bc>)
 800cb7c:	4835      	ldr	r0, [pc, #212]	@ (800cc54 <lwip_netconn_do_delconn+0x1b4>)
 800cb7e:	f011 f83f 	bl	801dc00 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2204      	movs	r2, #4
 800cb88:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2203      	movs	r2, #3
 800cb8e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7ff fe14 	bl	800c7cc <lwip_netconn_do_close_internal>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d04b      	beq.n	800cc42 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	2b04      	cmp	r3, #4
 800cbb2:	d006      	beq.n	800cbc2 <lwip_netconn_do_delconn+0x122>
 800cbb4:	4b25      	ldr	r3, [pc, #148]	@ (800cc4c <lwip_netconn_do_delconn+0x1ac>)
 800cbb6:	f240 429a 	movw	r2, #1178	@ 0x49a
 800cbba:	4929      	ldr	r1, [pc, #164]	@ (800cc60 <lwip_netconn_do_delconn+0x1c0>)
 800cbbc:	4825      	ldr	r0, [pc, #148]	@ (800cc54 <lwip_netconn_do_delconn+0x1b4>)
 800cbbe:	f011 f81f 	bl	801dc00 <iprintf>
            UNLOCK_TCPIP_CORE();
 800cbc2:	4828      	ldr	r0, [pc, #160]	@ (800cc64 <lwip_netconn_do_delconn+0x1c4>)
 800cbc4:	f010 fe89 	bl	801d8da <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	330c      	adds	r3, #12
 800cbce:	2100      	movs	r1, #0
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f010 fde8 	bl	801d7a6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800cbd6:	4823      	ldr	r0, [pc, #140]	@ (800cc64 <lwip_netconn_do_delconn+0x1c4>)
 800cbd8:	f010 fe70 	bl	801d8bc <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d02d      	beq.n	800cc42 <lwip_netconn_do_delconn+0x1a2>
 800cbe6:	4b19      	ldr	r3, [pc, #100]	@ (800cc4c <lwip_netconn_do_delconn+0x1ac>)
 800cbe8:	f240 429e 	movw	r2, #1182	@ 0x49e
 800cbec:	491c      	ldr	r1, [pc, #112]	@ (800cc60 <lwip_netconn_do_delconn+0x1c0>)
 800cbee:	4819      	ldr	r0, [pc, #100]	@ (800cc54 <lwip_netconn_do_delconn+0x1b4>)
 800cbf0:	f011 f806 	bl	801dc00 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800cbf4:	e025      	b.n	800cc42 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800cbf6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d007      	beq.n	800cc1a <lwip_netconn_do_delconn+0x17a>
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	6810      	ldr	r0, [r2, #0]
 800cc14:	2200      	movs	r2, #0
 800cc16:	2100      	movs	r1, #0
 800cc18:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d007      	beq.n	800cc34 <lwip_netconn_do_delconn+0x194>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc2a:	68fa      	ldr	r2, [r7, #12]
 800cc2c:	6810      	ldr	r0, [r2, #0]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	2102      	movs	r1, #2
 800cc32:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	330c      	adds	r3, #12
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f010 fdfe 	bl	801d83c <sys_sem_valid>
 800cc40:	e000      	b.n	800cc44 <lwip_netconn_do_delconn+0x1a4>
          return;
 800cc42:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0801f0d4 	.word	0x0801f0d4
 800cc50:	0801f474 	.word	0x0801f474
 800cc54:	0801f148 	.word	0x0801f148
 800cc58:	0801f488 	.word	0x0801f488
 800cc5c:	0801f4a8 	.word	0x0801f4a8
 800cc60:	0801f4c4 	.word	0x0801f4c4
 800cc64:	20008710 	.word	0x20008710

0800cc68 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d025      	beq.n	800ccca <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cc88:	2b10      	cmp	r3, #16
 800cc8a:	d00e      	beq.n	800ccaa <lwip_netconn_do_bind+0x42>
 800cc8c:	2b20      	cmp	r3, #32
 800cc8e:	d119      	bne.n	800ccc4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6858      	ldr	r0, [r3, #4]
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	6899      	ldr	r1, [r3, #8]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	899b      	ldrh	r3, [r3, #12]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f010 fa2a 	bl	801d0f8 <udp_bind>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]
        break;
 800cca8:	e011      	b.n	800ccce <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6858      	ldr	r0, [r3, #4]
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	6899      	ldr	r1, [r3, #8]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	899b      	ldrh	r3, [r3, #12]
 800ccb8:	461a      	mov	r2, r3
 800ccba:	f009 ff8d 	bl	8016bd8 <tcp_bind>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	73fb      	strb	r3, [r7, #15]
        break;
 800ccc2:	e004      	b.n	800ccce <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ccc4:	23fa      	movs	r3, #250	@ 0xfa
 800ccc6:	73fb      	strb	r3, [r7, #15]
        break;
 800ccc8:	e001      	b.n	800ccce <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ccca:	23fa      	movs	r3, #250	@ 0xfa
 800cccc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	7bfa      	ldrb	r2, [r7, #15]
 800ccd2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ccd4:	bf00      	nop
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d07f      	beq.n	800cdf2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccfc:	2b10      	cmp	r3, #16
 800ccfe:	d175      	bne.n	800cdec <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	785b      	ldrb	r3, [r3, #1]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d165      	bne.n	800cdd6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	7d1b      	ldrb	r3, [r3, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800cd16:	23fa      	movs	r3, #250	@ 0xfa
 800cd18:	72fb      	strb	r3, [r7, #11]
 800cd1a:	e06c      	b.n	800cdf6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800cd1c:	23ff      	movs	r3, #255	@ 0xff
 800cd1e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f107 020b 	add.w	r2, r7, #11
 800cd2a:	7cf9      	ldrb	r1, [r7, #19]
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f00a f80b 	bl	8016d48 <tcp_listen_with_backlog_and_err>
 800cd32:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d05d      	beq.n	800cdf6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3310      	adds	r3, #16
 800cd40:	4618      	mov	r0, r3
 800cd42:	f010 fced 	bl	801d720 <sys_mbox_valid>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00b      	beq.n	800cd64 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	3310      	adds	r3, #16
 800cd52:	4618      	mov	r0, r3
 800cd54:	f010 fc70 	bl	801d638 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3310      	adds	r3, #16
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f010 fcef 	bl	801d742 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	3314      	adds	r3, #20
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f010 fcd6 	bl	801d720 <sys_mbox_valid>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d108      	bne.n	800cd8c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3314      	adds	r3, #20
 800cd80:	2106      	movs	r1, #6
 800cd82:	4618      	mov	r0, r3
 800cd84:	f010 fc3e 	bl	801d604 <sys_mbox_new>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800cd8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d118      	bne.n	800cdc6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2202      	movs	r2, #2
 800cd9a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685a      	ldr	r2, [r3, #4]
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	f00a ff99 	bl	8017ce8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	4912      	ldr	r1, [pc, #72]	@ (800ce08 <lwip_netconn_do_listen+0x12c>)
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f00b f80a 	bl	8017dd8 <tcp_accept>
 800cdc4:	e017      	b.n	800cdf6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f009 fdb4 	bl	8016934 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	605a      	str	r2, [r3, #4]
 800cdd4:	e00f      	b.n	800cdf6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d102      	bne.n	800cde6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	72fb      	strb	r3, [r7, #11]
 800cde4:	e007      	b.n	800cdf6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800cde6:	23f5      	movs	r3, #245	@ 0xf5
 800cde8:	72fb      	strb	r3, [r7, #11]
 800cdea:	e004      	b.n	800cdf6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800cdec:	23f0      	movs	r3, #240	@ 0xf0
 800cdee:	72fb      	strb	r3, [r7, #11]
 800cdf0:	e001      	b.n	800cdf6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800cdf2:	23f5      	movs	r3, #245	@ 0xf5
 800cdf4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800cdf6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800cdfe:	bf00      	nop
 800ce00:	3718      	adds	r7, #24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	0800c2e9 	.word	0x0800c2e9

0800ce0c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f001 f969 	bl	800e0f4 <netconn_err>
 800ce22:	4603      	mov	r3, r0
 800ce24:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ce26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d134      	bne.n	800ce98 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d02d      	beq.n	800ce94 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ce42:	2b20      	cmp	r3, #32
 800ce44:	d123      	bne.n	800ce8e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d10c      	bne.n	800ce6a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4610      	mov	r0, r2
 800ce60:	f00f ff1c 	bl	801cc9c <udp_send>
 800ce64:	4603      	mov	r3, r0
 800ce66:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800ce68:	e016      	b.n	800ce98 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	6858      	ldr	r0, [r3, #4]
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	6819      	ldr	r1, [r3, #0]
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	f103 0208 	add.w	r2, r3, #8
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	899b      	ldrh	r3, [r3, #12]
 800ce84:	f00f ff3e 	bl	801cd04 <udp_sendto>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	73fb      	strb	r3, [r7, #15]
          break;
 800ce8c:	e004      	b.n	800ce98 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800ce8e:	23f5      	movs	r3, #245	@ 0xf5
 800ce90:	73fb      	strb	r3, [r7, #15]
          break;
 800ce92:	e001      	b.n	800ce98 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800ce94:	23f5      	movs	r3, #245	@ 0xf5
 800ce96:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	7bfa      	ldrb	r2, [r7, #15]
 800ce9c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b086      	sub	sp, #24
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d022      	beq.n	800cf08 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800cec2:	693b      	ldr	r3, [r7, #16]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cecc:	2b10      	cmp	r3, #16
 800cece:	d11b      	bne.n	800cf08 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cedc:	d202      	bcs.n	800cee4 <lwip_netconn_do_recv+0x3e>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	e001      	b.n	800cee8 <lwip_netconn_do_recv+0x42>
 800cee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cee8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	89fa      	ldrh	r2, [r7, #14]
 800cef2:	4611      	mov	r1, r2
 800cef4:	4618      	mov	r0, r3
 800cef6:	f00a f82b 	bl	8016f50 <tcp_recved>
        remaining -= recved;
 800cefa:	89fb      	ldrh	r3, [r7, #14]
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1e6      	bne.n	800ced6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800cf08:	bf00      	nop
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b088      	sub	sp, #32
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	460b      	mov	r3, r1
 800cf1a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d106      	bne.n	800cf34 <lwip_netconn_do_writemore+0x24>
 800cf26:	4b96      	ldr	r3, [pc, #600]	@ (800d180 <lwip_netconn_do_writemore+0x270>)
 800cf28:	f240 6273 	movw	r2, #1651	@ 0x673
 800cf2c:	4995      	ldr	r1, [pc, #596]	@ (800d184 <lwip_netconn_do_writemore+0x274>)
 800cf2e:	4896      	ldr	r0, [pc, #600]	@ (800d188 <lwip_netconn_do_writemore+0x278>)
 800cf30:	f010 fe66 	bl	801dc00 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	785b      	ldrb	r3, [r3, #1]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d006      	beq.n	800cf4a <lwip_netconn_do_writemore+0x3a>
 800cf3c:	4b90      	ldr	r3, [pc, #576]	@ (800d180 <lwip_netconn_do_writemore+0x270>)
 800cf3e:	f240 6274 	movw	r2, #1652	@ 0x674
 800cf42:	4992      	ldr	r1, [pc, #584]	@ (800d18c <lwip_netconn_do_writemore+0x27c>)
 800cf44:	4890      	ldr	r0, [pc, #576]	@ (800d188 <lwip_netconn_do_writemore+0x278>)
 800cf46:	f010 fe5b 	bl	801dc00 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <lwip_netconn_do_writemore+0x50>
 800cf52:	4b8b      	ldr	r3, [pc, #556]	@ (800d180 <lwip_netconn_do_writemore+0x270>)
 800cf54:	f240 6275 	movw	r2, #1653	@ 0x675
 800cf58:	498d      	ldr	r1, [pc, #564]	@ (800d190 <lwip_netconn_do_writemore+0x280>)
 800cf5a:	488b      	ldr	r0, [pc, #556]	@ (800d188 <lwip_netconn_do_writemore+0x278>)
 800cf5c:	f010 fe50 	bl	801dc00 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d106      	bne.n	800cf76 <lwip_netconn_do_writemore+0x66>
 800cf68:	4b85      	ldr	r3, [pc, #532]	@ (800d180 <lwip_netconn_do_writemore+0x270>)
 800cf6a:	f240 6276 	movw	r2, #1654	@ 0x676
 800cf6e:	4989      	ldr	r1, [pc, #548]	@ (800d194 <lwip_netconn_do_writemore+0x284>)
 800cf70:	4885      	ldr	r0, [pc, #532]	@ (800d188 <lwip_netconn_do_writemore+0x278>)
 800cf72:	f010 fe45 	bl	801dc00 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	699a      	ldr	r2, [r3, #24]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6a1b      	ldr	r3, [r3, #32]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d306      	bcc.n	800cf94 <lwip_netconn_do_writemore+0x84>
 800cf86:	4b7e      	ldr	r3, [pc, #504]	@ (800d180 <lwip_netconn_do_writemore+0x270>)
 800cf88:	f240 6277 	movw	r2, #1655	@ 0x677
 800cf8c:	4982      	ldr	r1, [pc, #520]	@ (800d198 <lwip_netconn_do_writemore+0x288>)
 800cf8e:	487e      	ldr	r0, [pc, #504]	@ (800d188 <lwip_netconn_do_writemore+0x278>)
 800cf90:	f010 fe36 	bl	801dc00 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a1b      	ldr	r3, [r3, #32]
 800cf98:	899b      	ldrh	r3, [r3, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d106      	bne.n	800cfac <lwip_netconn_do_writemore+0x9c>
 800cf9e:	4b78      	ldr	r3, [pc, #480]	@ (800d180 <lwip_netconn_do_writemore+0x270>)
 800cfa0:	f240 6279 	movw	r2, #1657	@ 0x679
 800cfa4:	497d      	ldr	r1, [pc, #500]	@ (800d19c <lwip_netconn_do_writemore+0x28c>)
 800cfa6:	4878      	ldr	r0, [pc, #480]	@ (800d188 <lwip_netconn_do_writemore+0x278>)
 800cfa8:	f010 fe2a 	bl	801dc00 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	7f1b      	ldrb	r3, [r3, #28]
 800cfb2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	7f1b      	ldrb	r3, [r3, #28]
 800cfb8:	f003 0302 	and.w	r3, r3, #2
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <lwip_netconn_do_writemore+0xba>
 800cfc0:	7ebb      	ldrb	r3, [r7, #26]
 800cfc2:	f003 0304 	and.w	r3, r3, #4
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <lwip_netconn_do_writemore+0xbe>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e000      	b.n	800cfd0 <lwip_netconn_do_writemore+0xc0>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6a1b      	ldr	r3, [r3, #32]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a1b      	ldr	r3, [r3, #32]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a1b      	ldr	r3, [r3, #32]
 800cfe8:	689b      	ldr	r3, [r3, #8]
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6a1b      	ldr	r3, [r3, #32]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cffc:	d307      	bcc.n	800d00e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800cffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d002:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d004:	7ebb      	ldrb	r3, [r7, #26]
 800d006:	f043 0302 	orr.w	r3, r3, #2
 800d00a:	76bb      	strb	r3, [r7, #26]
 800d00c:	e001      	b.n	800d012 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d01a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d01c:	89fa      	ldrh	r2, [r7, #14]
 800d01e:	8bbb      	ldrh	r3, [r7, #28]
 800d020:	429a      	cmp	r2, r3
 800d022:	d216      	bcs.n	800d052 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800d024:	89fb      	ldrh	r3, [r7, #14]
 800d026:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d028:	7e3b      	ldrb	r3, [r7, #24]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00d      	beq.n	800d04a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800d02e:	8bbb      	ldrh	r3, [r7, #28]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10e      	bne.n	800d052 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a1b      	ldr	r3, [r3, #32]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d102      	bne.n	800d044 <lwip_netconn_do_writemore+0x134>
 800d03e:	f06f 0306 	mvn.w	r3, #6
 800d042:	e000      	b.n	800d046 <lwip_netconn_do_writemore+0x136>
 800d044:	2300      	movs	r3, #0
 800d046:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d048:	e07d      	b.n	800d146 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d04a:	7ebb      	ldrb	r3, [r7, #26]
 800d04c:	f043 0302 	orr.w	r3, r3, #2
 800d050:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a1b      	ldr	r3, [r3, #32]
 800d056:	691a      	ldr	r2, [r3, #16]
 800d058:	8bbb      	ldrh	r3, [r7, #28]
 800d05a:	441a      	add	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	689b      	ldr	r3, [r3, #8]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	429a      	cmp	r2, r3
 800d066:	d906      	bls.n	800d076 <lwip_netconn_do_writemore+0x166>
 800d068:	4b45      	ldr	r3, [pc, #276]	@ (800d180 <lwip_netconn_do_writemore+0x270>)
 800d06a:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800d06e:	494c      	ldr	r1, [pc, #304]	@ (800d1a0 <lwip_netconn_do_writemore+0x290>)
 800d070:	4845      	ldr	r0, [pc, #276]	@ (800d188 <lwip_netconn_do_writemore+0x278>)
 800d072:	f010 fdc5 	bl	801dc00 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d076:	8bbb      	ldrh	r3, [r7, #28]
 800d078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d103      	bne.n	800d088 <lwip_netconn_do_writemore+0x178>
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d086:	d209      	bcs.n	800d09c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d08c:	8bba      	ldrh	r2, [r7, #28]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d10b      	bne.n	800d0aa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	899b      	ldrh	r3, [r3, #12]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d906      	bls.n	800d0aa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d09c:	2301      	movs	r3, #1
 800d09e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d0a0:	7ebb      	ldrb	r3, [r7, #26]
 800d0a2:	f043 0302 	orr.w	r3, r3, #2
 800d0a6:	76bb      	strb	r3, [r7, #26]
 800d0a8:	e001      	b.n	800d0ae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6858      	ldr	r0, [r3, #4]
 800d0b2:	7ebb      	ldrb	r3, [r7, #26]
 800d0b4:	8bba      	ldrh	r2, [r7, #28]
 800d0b6:	6979      	ldr	r1, [r7, #20]
 800d0b8:	f00d fd54 	bl	801ab64 <tcp_write>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d0c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d12c      	bne.n	800d122 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	6999      	ldr	r1, [r3, #24]
 800d0ce:	8bba      	ldrh	r2, [r7, #28]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a1b      	ldr	r3, [r3, #32]
 800d0d4:	440a      	add	r2, r1
 800d0d6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a1b      	ldr	r3, [r3, #32]
 800d0dc:	6919      	ldr	r1, [r3, #16]
 800d0de:	8bba      	ldrh	r2, [r7, #28]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6a1b      	ldr	r3, [r3, #32]
 800d0e4:	440a      	add	r2, r1
 800d0e6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a1b      	ldr	r3, [r3, #32]
 800d0ec:	691a      	ldr	r2, [r3, #16]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a1b      	ldr	r3, [r3, #32]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d113      	bne.n	800d122 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	899a      	ldrh	r2, [r3, #12]
 800d100:	3a01      	subs	r2, #1
 800d102:	b292      	uxth	r2, r2
 800d104:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a1b      	ldr	r3, [r3, #32]
 800d10a:	899b      	ldrh	r3, [r3, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d008      	beq.n	800d122 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a1b      	ldr	r3, [r3, #32]
 800d114:	689a      	ldr	r2, [r3, #8]
 800d116:	3208      	adds	r2, #8
 800d118:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	2200      	movs	r2, #0
 800d120:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d122:	7e7b      	ldrb	r3, [r7, #25]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d004      	beq.n	800d132 <lwip_netconn_do_writemore+0x222>
 800d128:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f43f af50 	beq.w	800cfd2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d132:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d004      	beq.n	800d144 <lwip_netconn_do_writemore+0x234>
 800d13a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d142:	d147      	bne.n	800d1d4 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800d144:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d146:	7e3b      	ldrb	r3, [r7, #24]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d02b      	beq.n	800d1a4 <lwip_netconn_do_writemore+0x294>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a1b      	ldr	r3, [r3, #32]
 800d150:	699a      	ldr	r2, [r3, #24]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d223      	bcs.n	800d1a4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d160:	2b00      	cmp	r3, #0
 800d162:	d005      	beq.n	800d170 <lwip_netconn_do_writemore+0x260>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d168:	2200      	movs	r2, #0
 800d16a:	2103      	movs	r1, #3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	7f1b      	ldrb	r3, [r3, #28]
 800d174:	f043 0310 	orr.w	r3, r3, #16
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	771a      	strb	r2, [r3, #28]
 800d17e:	e029      	b.n	800d1d4 <lwip_netconn_do_writemore+0x2c4>
 800d180:	0801f0d4 	.word	0x0801f0d4
 800d184:	0801f25c 	.word	0x0801f25c
 800d188:	0801f148 	.word	0x0801f148
 800d18c:	0801f564 	.word	0x0801f564
 800d190:	0801f26c 	.word	0x0801f26c
 800d194:	0801f584 	.word	0x0801f584
 800d198:	0801f59c 	.word	0x0801f59c
 800d19c:	0801f5dc 	.word	0x0801f5dc
 800d1a0:	0801f604 	.word	0x0801f604
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d1ac:	f640 3269 	movw	r2, #2921	@ 0xb69
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d905      	bls.n	800d1c0 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d1bc:	2b07      	cmp	r3, #7
 800d1be:	d909      	bls.n	800d1d4 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d005      	beq.n	800d1d4 <lwip_netconn_do_writemore+0x2c4>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2103      	movs	r1, #3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d1d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d11d      	bne.n	800d218 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6a1b      	ldr	r3, [r3, #32]
 800d1e0:	699a      	ldr	r2, [r3, #24]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6a1b      	ldr	r3, [r3, #32]
 800d1e6:	695b      	ldr	r3, [r3, #20]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d002      	beq.n	800d1f2 <lwip_netconn_do_writemore+0x2e2>
 800d1ec:	7e3b      	ldrb	r3, [r7, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f00e fa9c 	bl	801b738 <tcp_output>
 800d200:	4603      	mov	r3, r0
 800d202:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d204:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d208:	f113 0f04 	cmn.w	r3, #4
 800d20c:	d12c      	bne.n	800d268 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d20e:	7b3b      	ldrb	r3, [r7, #12]
 800d210:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d212:	2301      	movs	r3, #1
 800d214:	76fb      	strb	r3, [r7, #27]
 800d216:	e027      	b.n	800d268 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800d218:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d220:	d120      	bne.n	800d264 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	4618      	mov	r0, r3
 800d228:	f00e fa86 	bl	801b738 <tcp_output>
 800d22c:	4603      	mov	r3, r0
 800d22e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d230:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d234:	f113 0f04 	cmn.w	r3, #4
 800d238:	d104      	bne.n	800d244 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d23a:	7b7b      	ldrb	r3, [r7, #13]
 800d23c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d23e:	2301      	movs	r3, #1
 800d240:	76fb      	strb	r3, [r7, #27]
 800d242:	e011      	b.n	800d268 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800d244:	7e3b      	ldrb	r3, [r7, #24]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00e      	beq.n	800d268 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d102      	bne.n	800d25a <lwip_netconn_do_writemore+0x34a>
 800d254:	f06f 0306 	mvn.w	r3, #6
 800d258:	e000      	b.n	800d25c <lwip_netconn_do_writemore+0x34c>
 800d25a:	2300      	movs	r3, #0
 800d25c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d25e:	2301      	movs	r3, #1
 800d260:	76fb      	strb	r3, [r7, #27]
 800d262:	e001      	b.n	800d268 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d264:	2301      	movs	r3, #1
 800d266:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d268:	7efb      	ldrb	r3, [r7, #27]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d015      	beq.n	800d29a <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6a1b      	ldr	r3, [r3, #32]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	330c      	adds	r3, #12
 800d276:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a1b      	ldr	r3, [r3, #32]
 800d27c:	7ffa      	ldrb	r2, [r7, #31]
 800d27e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d28c:	78fb      	ldrb	r3, [r7, #3]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d006      	beq.n	800d2a0 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d292:	68b8      	ldr	r0, [r7, #8]
 800d294:	f010 fab8 	bl	801d808 <sys_sem_signal>
 800d298:	e002      	b.n	800d2a0 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d29a:	f04f 33ff 	mov.w	r3, #4294967295
 800d29e:	e000      	b.n	800d2a2 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3720      	adds	r7, #32
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop

0800d2ac <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 ff19 	bl	800e0f4 <netconn_err>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d166      	bne.n	800d39c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2d8:	2b10      	cmp	r3, #16
 800d2da:	d15d      	bne.n	800d398 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	785b      	ldrb	r3, [r3, #1]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d002      	beq.n	800d2ec <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800d2e6:	23fb      	movs	r3, #251	@ 0xfb
 800d2e8:	73fb      	strb	r3, [r7, #15]
 800d2ea:	e057      	b.n	800d39c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d04d      	beq.n	800d392 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6a1b      	ldr	r3, [r3, #32]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d006      	beq.n	800d316 <lwip_netconn_do_write+0x6a>
 800d308:	4b28      	ldr	r3, [pc, #160]	@ (800d3ac <lwip_netconn_do_write+0x100>)
 800d30a:	f240 7223 	movw	r2, #1827	@ 0x723
 800d30e:	4928      	ldr	r1, [pc, #160]	@ (800d3b0 <lwip_netconn_do_write+0x104>)
 800d310:	4828      	ldr	r0, [pc, #160]	@ (800d3b4 <lwip_netconn_do_write+0x108>)
 800d312:	f010 fc75 	bl	801dc00 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	695b      	ldr	r3, [r3, #20]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d106      	bne.n	800d32c <lwip_netconn_do_write+0x80>
 800d31e:	4b23      	ldr	r3, [pc, #140]	@ (800d3ac <lwip_netconn_do_write+0x100>)
 800d320:	f240 7224 	movw	r2, #1828	@ 0x724
 800d324:	4924      	ldr	r1, [pc, #144]	@ (800d3b8 <lwip_netconn_do_write+0x10c>)
 800d326:	4823      	ldr	r0, [pc, #140]	@ (800d3b4 <lwip_netconn_do_write+0x108>)
 800d328:	f010 fc6a 	bl	801dc00 <iprintf>
        msg->conn->current_msg = msg;
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68ba      	ldr	r2, [r7, #8]
 800d332:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2100      	movs	r1, #0
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff fde8 	bl	800cf10 <lwip_netconn_do_writemore>
 800d340:	4603      	mov	r3, r0
 800d342:	2b00      	cmp	r3, #0
 800d344:	d02e      	beq.n	800d3a4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	785b      	ldrb	r3, [r3, #1]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d006      	beq.n	800d35e <lwip_netconn_do_write+0xb2>
 800d350:	4b16      	ldr	r3, [pc, #88]	@ (800d3ac <lwip_netconn_do_write+0x100>)
 800d352:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800d356:	4919      	ldr	r1, [pc, #100]	@ (800d3bc <lwip_netconn_do_write+0x110>)
 800d358:	4816      	ldr	r0, [pc, #88]	@ (800d3b4 <lwip_netconn_do_write+0x108>)
 800d35a:	f010 fc51 	bl	801dc00 <iprintf>
          UNLOCK_TCPIP_CORE();
 800d35e:	4818      	ldr	r0, [pc, #96]	@ (800d3c0 <lwip_netconn_do_write+0x114>)
 800d360:	f010 fabb 	bl	801d8da <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	330c      	adds	r3, #12
 800d36a:	2100      	movs	r1, #0
 800d36c:	4618      	mov	r0, r3
 800d36e:	f010 fa1a 	bl	801d7a6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d372:	4813      	ldr	r0, [pc, #76]	@ (800d3c0 <lwip_netconn_do_write+0x114>)
 800d374:	f010 faa2 	bl	801d8bc <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	785b      	ldrb	r3, [r3, #1]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d110      	bne.n	800d3a4 <lwip_netconn_do_write+0xf8>
 800d382:	4b0a      	ldr	r3, [pc, #40]	@ (800d3ac <lwip_netconn_do_write+0x100>)
 800d384:	f240 722c 	movw	r2, #1836	@ 0x72c
 800d388:	490c      	ldr	r1, [pc, #48]	@ (800d3bc <lwip_netconn_do_write+0x110>)
 800d38a:	480a      	ldr	r0, [pc, #40]	@ (800d3b4 <lwip_netconn_do_write+0x108>)
 800d38c:	f010 fc38 	bl	801dc00 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800d390:	e008      	b.n	800d3a4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800d392:	23f5      	movs	r3, #245	@ 0xf5
 800d394:	73fb      	strb	r3, [r7, #15]
 800d396:	e001      	b.n	800d39c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800d398:	23fa      	movs	r3, #250	@ 0xfa
 800d39a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	7bfa      	ldrb	r2, [r7, #15]
 800d3a0:	711a      	strb	r2, [r3, #4]
 800d3a2:	e000      	b.n	800d3a6 <lwip_netconn_do_write+0xfa>
        return;
 800d3a4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	0801f0d4 	.word	0x0801f0d4
 800d3b0:	0801f4a8 	.word	0x0801f4a8
 800d3b4:	0801f148 	.word	0x0801f148
 800d3b8:	0801f630 	.word	0x0801f630
 800d3bc:	0801f4c4 	.word	0x0801f4c4
 800d3c0:	20008710 	.word	0x20008710

0800d3c4 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d06b      	beq.n	800d4b2 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	7c1b      	ldrb	r3, [r3, #16]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d007      	beq.n	800d3f2 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	6812      	ldr	r2, [r2, #0]
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	e006      	b.n	800d400 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	6852      	ldr	r2, [r2, #4]
 800d3fe:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2200      	movs	r2, #0
 800d404:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d410:	2b10      	cmp	r3, #16
 800d412:	d021      	beq.n	800d458 <lwip_netconn_do_getaddr+0x94>
 800d414:	2b20      	cmp	r3, #32
 800d416:	d144      	bne.n	800d4a2 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	7c1b      	ldrb	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d007      	beq.n	800d430 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	8a52      	ldrh	r2, [r2, #18]
 800d42c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800d42e:	e044      	b.n	800d4ba <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	7c1b      	ldrb	r3, [r3, #16]
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d103      	bne.n	800d448 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	22f5      	movs	r2, #245	@ 0xf5
 800d444:	711a      	strb	r2, [r3, #4]
        break;
 800d446:	e038      	b.n	800d4ba <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	685a      	ldr	r2, [r3, #4]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	8a92      	ldrh	r2, [r2, #20]
 800d454:	801a      	strh	r2, [r3, #0]
        break;
 800d456:	e030      	b.n	800d4ba <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	7c1b      	ldrb	r3, [r3, #16]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d10f      	bne.n	800d480 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d005      	beq.n	800d478 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	7d1b      	ldrb	r3, [r3, #20]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d103      	bne.n	800d480 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	22f5      	movs	r2, #245	@ 0xf5
 800d47c:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800d47e:	e01c      	b.n	800d4ba <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	7c1b      	ldrb	r3, [r3, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d004      	beq.n	800d492 <lwip_netconn_do_getaddr+0xce>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	8adb      	ldrh	r3, [r3, #22]
 800d490:	e003      	b.n	800d49a <lwip_netconn_do_getaddr+0xd6>
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	8b1b      	ldrh	r3, [r3, #24]
 800d49a:	68fa      	ldr	r2, [r7, #12]
 800d49c:	68d2      	ldr	r2, [r2, #12]
 800d49e:	8013      	strh	r3, [r2, #0]
        break;
 800d4a0:	e00b      	b.n	800d4ba <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800d4a2:	4b08      	ldr	r3, [pc, #32]	@ (800d4c4 <lwip_netconn_do_getaddr+0x100>)
 800d4a4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800d4a8:	4907      	ldr	r1, [pc, #28]	@ (800d4c8 <lwip_netconn_do_getaddr+0x104>)
 800d4aa:	4808      	ldr	r0, [pc, #32]	@ (800d4cc <lwip_netconn_do_getaddr+0x108>)
 800d4ac:	f010 fba8 	bl	801dc00 <iprintf>
        break;
 800d4b0:	e003      	b.n	800d4ba <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	22f5      	movs	r2, #245	@ 0xf5
 800d4b6:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d4b8:	bf00      	nop
 800d4ba:	bf00      	nop
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	0801f0d4 	.word	0x0801f0d4
 800d4c8:	0801f644 	.word	0x0801f644
 800d4cc:	0801f148 	.word	0x0801f148

0800d4d0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	785b      	ldrb	r3, [r3, #1]
 800d4e2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d069      	beq.n	800d5c2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800d4f8:	2b10      	cmp	r3, #16
 800d4fa:	d162      	bne.n	800d5c2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d500:	2b03      	cmp	r3, #3
 800d502:	d002      	beq.n	800d50a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d504:	7afb      	ldrb	r3, [r7, #11]
 800d506:	2b02      	cmp	r3, #2
 800d508:	d05b      	beq.n	800d5c2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800d50a:	7afb      	ldrb	r3, [r7, #11]
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d103      	bne.n	800d518 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	22f5      	movs	r2, #245	@ 0xf5
 800d514:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d516:	e059      	b.n	800d5cc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800d518:	7afb      	ldrb	r3, [r7, #11]
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d103      	bne.n	800d526 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	22fb      	movs	r2, #251	@ 0xfb
 800d522:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d524:	e052      	b.n	800d5cc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	7a1b      	ldrb	r3, [r3, #8]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d004      	beq.n	800d53c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff f8ca 	bl	800c6d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d006      	beq.n	800d554 <lwip_netconn_do_close+0x84>
 800d546:	4b23      	ldr	r3, [pc, #140]	@ (800d5d4 <lwip_netconn_do_close+0x104>)
 800d548:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800d54c:	4922      	ldr	r1, [pc, #136]	@ (800d5d8 <lwip_netconn_do_close+0x108>)
 800d54e:	4823      	ldr	r0, [pc, #140]	@ (800d5dc <lwip_netconn_do_close+0x10c>)
 800d550:	f010 fb56 	bl	801dc00 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2204      	movs	r2, #4
 800d55a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2100      	movs	r1, #0
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff f92e 	bl	800c7cc <lwip_netconn_do_close_internal>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d029      	beq.n	800d5ca <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	785b      	ldrb	r3, [r3, #1]
 800d57c:	2b04      	cmp	r3, #4
 800d57e:	d006      	beq.n	800d58e <lwip_netconn_do_close+0xbe>
 800d580:	4b14      	ldr	r3, [pc, #80]	@ (800d5d4 <lwip_netconn_do_close+0x104>)
 800d582:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800d586:	4916      	ldr	r1, [pc, #88]	@ (800d5e0 <lwip_netconn_do_close+0x110>)
 800d588:	4814      	ldr	r0, [pc, #80]	@ (800d5dc <lwip_netconn_do_close+0x10c>)
 800d58a:	f010 fb39 	bl	801dc00 <iprintf>
        UNLOCK_TCPIP_CORE();
 800d58e:	4815      	ldr	r0, [pc, #84]	@ (800d5e4 <lwip_netconn_do_close+0x114>)
 800d590:	f010 f9a3 	bl	801d8da <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	330c      	adds	r3, #12
 800d59a:	2100      	movs	r1, #0
 800d59c:	4618      	mov	r0, r3
 800d59e:	f010 f902 	bl	801d7a6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800d5a2:	4810      	ldr	r0, [pc, #64]	@ (800d5e4 <lwip_netconn_do_close+0x114>)
 800d5a4:	f010 f98a 	bl	801d8bc <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	785b      	ldrb	r3, [r3, #1]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00b      	beq.n	800d5ca <lwip_netconn_do_close+0xfa>
 800d5b2:	4b08      	ldr	r3, [pc, #32]	@ (800d5d4 <lwip_netconn_do_close+0x104>)
 800d5b4:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800d5b8:	4909      	ldr	r1, [pc, #36]	@ (800d5e0 <lwip_netconn_do_close+0x110>)
 800d5ba:	4808      	ldr	r0, [pc, #32]	@ (800d5dc <lwip_netconn_do_close+0x10c>)
 800d5bc:	f010 fb20 	bl	801dc00 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d5c0:	e003      	b.n	800d5ca <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	22f5      	movs	r2, #245	@ 0xf5
 800d5c6:	711a      	strb	r2, [r3, #4]
 800d5c8:	e000      	b.n	800d5cc <lwip_netconn_do_close+0xfc>
      return;
 800d5ca:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	0801f0d4 	.word	0x0801f0d4
 800d5d8:	0801f4a8 	.word	0x0801f4a8
 800d5dc:	0801f148 	.word	0x0801f148
 800d5e0:	0801f4c4 	.word	0x0801f4c4
 800d5e4:	20008710 	.word	0x20008710

0800d5e8 <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_CONN;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	22f5      	movs	r2, #245	@ 0xf5
 800d5f8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d027      	beq.n	800d654 <lwip_netconn_do_join_leave_group+0x6c>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d60e:	2b20      	cmp	r3, #32
 800d610:	d11d      	bne.n	800d64e <lwip_netconn_do_join_leave_group+0x66>
        }
      } else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
      {
#if LWIP_IGMP
        if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	7c5b      	ldrb	r3, [r3, #17]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10c      	bne.n	800d634 <lwip_netconn_do_join_leave_group+0x4c>
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	68da      	ldr	r2, [r3, #12]
                                    ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800d622:	4619      	mov	r1, r3
 800d624:	4610      	mov	r0, r2
 800d626:	f005 fb45 	bl	8012cb4 <igmp_joingroup>
 800d62a:	4603      	mov	r3, r0
 800d62c:	461a      	mov	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	711a      	strb	r2, [r3, #4]
      msg->err = ERR_VAL;
#endif /* (LWIP_TCP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d632:	e00f      	b.n	800d654 <lwip_netconn_do_join_leave_group+0x6c>
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	68da      	ldr	r2, [r3, #12]
                                     ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	689b      	ldr	r3, [r3, #8]
          msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
 800d63c:	4619      	mov	r1, r3
 800d63e:	4610      	mov	r0, r2
 800d640:	f005 fc14 	bl	8012e6c <igmp_leavegroup>
 800d644:	4603      	mov	r3, r0
 800d646:	461a      	mov	r2, r3
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	711a      	strb	r2, [r3, #4]
}
 800d64c:	e002      	b.n	800d654 <lwip_netconn_do_join_leave_group+0x6c>
      msg->err = ERR_VAL;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	22fa      	movs	r2, #250	@ 0xfa
 800d652:	711a      	strb	r2, [r3, #4]
}
 800d654:	bf00      	nop
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	330c      	adds	r3, #12
 800d66c:	461a      	mov	r2, r3
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f002 f979 	bl	800f968 <tcpip_send_msg_wait_sem>
 800d676:	4603      	mov	r3, r0
 800d678:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d103      	bne.n	800d68a <netconn_apimsg+0x2e>
    return apimsg->err;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d688:	e001      	b.n	800d68e <netconn_apimsg+0x32>
  }
  return err;
 800d68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
	...

0800d698 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08c      	sub	sp, #48	@ 0x30
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	603a      	str	r2, [r7, #0]
 800d6a2:	71fb      	strb	r3, [r7, #7]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d6a8:	79fb      	ldrb	r3, [r7, #7]
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fe ff57 	bl	800c560 <netconn_alloc>
 800d6b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800d6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d054      	beq.n	800d764 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d6ba:	79bb      	ldrb	r3, [r7, #6]
 800d6bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d6c2:	f107 0308 	add.w	r3, r7, #8
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	4829      	ldr	r0, [pc, #164]	@ (800d770 <netconn_new_with_proto_and_callback+0xd8>)
 800d6ca:	f7ff ffc7 	bl	800d65c <netconn_apimsg>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800d6d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d043      	beq.n	800d764 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d6dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d005      	beq.n	800d6f0 <netconn_new_with_proto_and_callback+0x58>
 800d6e4:	4b23      	ldr	r3, [pc, #140]	@ (800d774 <netconn_new_with_proto_and_callback+0xdc>)
 800d6e6:	22a3      	movs	r2, #163	@ 0xa3
 800d6e8:	4923      	ldr	r1, [pc, #140]	@ (800d778 <netconn_new_with_proto_and_callback+0xe0>)
 800d6ea:	4824      	ldr	r0, [pc, #144]	@ (800d77c <netconn_new_with_proto_and_callback+0xe4>)
 800d6ec:	f010 fa88 	bl	801dc00 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f2:	3310      	adds	r3, #16
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f010 f813 	bl	801d720 <sys_mbox_valid>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d105      	bne.n	800d70c <netconn_new_with_proto_and_callback+0x74>
 800d700:	4b1c      	ldr	r3, [pc, #112]	@ (800d774 <netconn_new_with_proto_and_callback+0xdc>)
 800d702:	22a4      	movs	r2, #164	@ 0xa4
 800d704:	491e      	ldr	r1, [pc, #120]	@ (800d780 <netconn_new_with_proto_and_callback+0xe8>)
 800d706:	481d      	ldr	r0, [pc, #116]	@ (800d77c <netconn_new_with_proto_and_callback+0xe4>)
 800d708:	f010 fa7a 	bl	801dc00 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70e:	3314      	adds	r3, #20
 800d710:	4618      	mov	r0, r3
 800d712:	f010 f805 	bl	801d720 <sys_mbox_valid>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d005      	beq.n	800d728 <netconn_new_with_proto_and_callback+0x90>
 800d71c:	4b15      	ldr	r3, [pc, #84]	@ (800d774 <netconn_new_with_proto_and_callback+0xdc>)
 800d71e:	22a6      	movs	r2, #166	@ 0xa6
 800d720:	4918      	ldr	r1, [pc, #96]	@ (800d784 <netconn_new_with_proto_and_callback+0xec>)
 800d722:	4816      	ldr	r0, [pc, #88]	@ (800d77c <netconn_new_with_proto_and_callback+0xe4>)
 800d724:	f010 fa6c 	bl	801dc00 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d72a:	330c      	adds	r3, #12
 800d72c:	4618      	mov	r0, r3
 800d72e:	f010 f885 	bl	801d83c <sys_sem_valid>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d105      	bne.n	800d744 <netconn_new_with_proto_and_callback+0xac>
 800d738:	4b0e      	ldr	r3, [pc, #56]	@ (800d774 <netconn_new_with_proto_and_callback+0xdc>)
 800d73a:	22a9      	movs	r2, #169	@ 0xa9
 800d73c:	4912      	ldr	r1, [pc, #72]	@ (800d788 <netconn_new_with_proto_and_callback+0xf0>)
 800d73e:	480f      	ldr	r0, [pc, #60]	@ (800d77c <netconn_new_with_proto_and_callback+0xe4>)
 800d740:	f010 fa5e 	bl	801dc00 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d746:	330c      	adds	r3, #12
 800d748:	4618      	mov	r0, r3
 800d74a:	f010 f86a 	bl	801d822 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d750:	3310      	adds	r3, #16
 800d752:	4618      	mov	r0, r3
 800d754:	f00f ff70 	bl	801d638 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d758:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d75a:	2007      	movs	r0, #7
 800d75c:	f007 fd38 	bl	80151d0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d760:	2300      	movs	r3, #0
 800d762:	e000      	b.n	800d766 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800d766:	4618      	mov	r0, r3
 800d768:	3730      	adds	r7, #48	@ 0x30
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	0800c535 	.word	0x0800c535
 800d774:	0801f65c 	.word	0x0801f65c
 800d778:	0801f6c0 	.word	0x0801f6c0
 800d77c:	0801f148 	.word	0x0801f148
 800d780:	0801f6e4 	.word	0x0801f6e4
 800d784:	0801f6fc 	.word	0x0801f6fc
 800d788:	0801f720 	.word	0x0801f720

0800d78c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08c      	sub	sp, #48	@ 0x30
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d101      	bne.n	800d79e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800d79a:	2300      	movs	r3, #0
 800d79c:	e014      	b.n	800d7c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d7a2:	2329      	movs	r3, #41	@ 0x29
 800d7a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d7a6:	f107 030c 	add.w	r3, r7, #12
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4808      	ldr	r0, [pc, #32]	@ (800d7d0 <netconn_prepare_delete+0x44>)
 800d7ae:	f7ff ff55 	bl	800d65c <netconn_apimsg>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d7b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <netconn_prepare_delete+0x3a>
    return err;
 800d7c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d7c4:	e000      	b.n	800d7c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3730      	adds	r7, #48	@ 0x30
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	0800caa1 	.word	0x0800caa1

0800d7d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d101      	bne.n	800d7e6 <netconn_delete+0x12>
    return ERR_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	e00d      	b.n	800d802 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff ffd0 	bl	800d78c <netconn_prepare_delete>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800d7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d102      	bne.n	800d7fe <netconn_delete+0x2a>
    netconn_free(conn);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7fe ff1f 	bl	800c63c <netconn_free>
  }
  return err;
 800d7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
	...

0800d80c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08e      	sub	sp, #56	@ 0x38
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d109      	bne.n	800d834 <netconn_getaddr+0x28>
 800d820:	4b1d      	ldr	r3, [pc, #116]	@ (800d898 <netconn_getaddr+0x8c>)
 800d822:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d826:	491d      	ldr	r1, [pc, #116]	@ (800d89c <netconn_getaddr+0x90>)
 800d828:	481d      	ldr	r0, [pc, #116]	@ (800d8a0 <netconn_getaddr+0x94>)
 800d82a:	f010 f9e9 	bl	801dc00 <iprintf>
 800d82e:	f06f 030f 	mvn.w	r3, #15
 800d832:	e02d      	b.n	800d890 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d109      	bne.n	800d84e <netconn_getaddr+0x42>
 800d83a:	4b17      	ldr	r3, [pc, #92]	@ (800d898 <netconn_getaddr+0x8c>)
 800d83c:	f240 1213 	movw	r2, #275	@ 0x113
 800d840:	4918      	ldr	r1, [pc, #96]	@ (800d8a4 <netconn_getaddr+0x98>)
 800d842:	4817      	ldr	r0, [pc, #92]	@ (800d8a0 <netconn_getaddr+0x94>)
 800d844:	f010 f9dc 	bl	801dc00 <iprintf>
 800d848:	f06f 030f 	mvn.w	r3, #15
 800d84c:	e020      	b.n	800d890 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d109      	bne.n	800d868 <netconn_getaddr+0x5c>
 800d854:	4b10      	ldr	r3, [pc, #64]	@ (800d898 <netconn_getaddr+0x8c>)
 800d856:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800d85a:	4913      	ldr	r1, [pc, #76]	@ (800d8a8 <netconn_getaddr+0x9c>)
 800d85c:	4810      	ldr	r0, [pc, #64]	@ (800d8a0 <netconn_getaddr+0x94>)
 800d85e:	f010 f9cf 	bl	801dc00 <iprintf>
 800d862:	f06f 030f 	mvn.w	r3, #15
 800d866:	e013      	b.n	800d890 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800d86c:	78fb      	ldrb	r3, [r7, #3]
 800d86e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800d87a:	f107 0314 	add.w	r3, r7, #20
 800d87e:	4619      	mov	r1, r3
 800d880:	480a      	ldr	r0, [pc, #40]	@ (800d8ac <netconn_getaddr+0xa0>)
 800d882:	f7ff feeb 	bl	800d65c <netconn_apimsg>
 800d886:	4603      	mov	r3, r0
 800d888:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800d88c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d890:	4618      	mov	r0, r3
 800d892:	3738      	adds	r7, #56	@ 0x38
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	0801f65c 	.word	0x0801f65c
 800d89c:	0801f73c 	.word	0x0801f73c
 800d8a0:	0801f148 	.word	0x0801f148
 800d8a4:	0801f75c 	.word	0x0801f75c
 800d8a8:	0801f77c 	.word	0x0801f77c
 800d8ac:	0800d3c5 	.word	0x0800d3c5

0800d8b0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b08e      	sub	sp, #56	@ 0x38
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d109      	bne.n	800d8d8 <netconn_bind+0x28>
 800d8c4:	4b11      	ldr	r3, [pc, #68]	@ (800d90c <netconn_bind+0x5c>)
 800d8c6:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800d8ca:	4911      	ldr	r1, [pc, #68]	@ (800d910 <netconn_bind+0x60>)
 800d8cc:	4811      	ldr	r0, [pc, #68]	@ (800d914 <netconn_bind+0x64>)
 800d8ce:	f010 f997 	bl	801dc00 <iprintf>
 800d8d2:	f06f 030f 	mvn.w	r3, #15
 800d8d6:	e015      	b.n	800d904 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800d8de:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <netconn_bind+0x68>)
 800d8e0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d8ea:	88fb      	ldrh	r3, [r7, #6]
 800d8ec:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d8ee:	f107 0314 	add.w	r3, r7, #20
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4809      	ldr	r0, [pc, #36]	@ (800d91c <netconn_bind+0x6c>)
 800d8f6:	f7ff feb1 	bl	800d65c <netconn_apimsg>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800d900:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d904:	4618      	mov	r0, r3
 800d906:	3738      	adds	r7, #56	@ 0x38
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	0801f65c 	.word	0x0801f65c
 800d910:	0801f79c 	.word	0x0801f79c
 800d914:	0801f148 	.word	0x0801f148
 800d918:	08023abc 	.word	0x08023abc
 800d91c:	0800cc69 	.word	0x0800cc69

0800d920 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08c      	sub	sp, #48	@ 0x30
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d109      	bne.n	800d946 <netconn_listen_with_backlog+0x26>
 800d932:	4b0d      	ldr	r3, [pc, #52]	@ (800d968 <netconn_listen_with_backlog+0x48>)
 800d934:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800d938:	490c      	ldr	r1, [pc, #48]	@ (800d96c <netconn_listen_with_backlog+0x4c>)
 800d93a:	480d      	ldr	r0, [pc, #52]	@ (800d970 <netconn_listen_with_backlog+0x50>)
 800d93c:	f010 f960 	bl	801dc00 <iprintf>
 800d940:	f06f 030f 	mvn.w	r3, #15
 800d944:	e00c      	b.n	800d960 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800d94a:	f107 030c 	add.w	r3, r7, #12
 800d94e:	4619      	mov	r1, r3
 800d950:	4808      	ldr	r0, [pc, #32]	@ (800d974 <netconn_listen_with_backlog+0x54>)
 800d952:	f7ff fe83 	bl	800d65c <netconn_apimsg>
 800d956:	4603      	mov	r3, r0
 800d958:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d95c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d960:	4618      	mov	r0, r3
 800d962:	3730      	adds	r7, #48	@ 0x30
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	0801f65c 	.word	0x0801f65c
 800d96c:	0801f81c 	.word	0x0801f81c
 800d970:	0801f148 	.word	0x0801f148
 800d974:	0800ccdd 	.word	0x0800ccdd

0800d978 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d109      	bne.n	800d99c <netconn_accept+0x24>
 800d988:	4b3d      	ldr	r3, [pc, #244]	@ (800da80 <netconn_accept+0x108>)
 800d98a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800d98e:	493d      	ldr	r1, [pc, #244]	@ (800da84 <netconn_accept+0x10c>)
 800d990:	483d      	ldr	r0, [pc, #244]	@ (800da88 <netconn_accept+0x110>)
 800d992:	f010 f935 	bl	801dc00 <iprintf>
 800d996:	f06f 030f 	mvn.w	r3, #15
 800d99a:	e06c      	b.n	800da76 <netconn_accept+0xfe>
  *new_conn = NULL;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d109      	bne.n	800d9bc <netconn_accept+0x44>
 800d9a8:	4b35      	ldr	r3, [pc, #212]	@ (800da80 <netconn_accept+0x108>)
 800d9aa:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800d9ae:	4937      	ldr	r1, [pc, #220]	@ (800da8c <netconn_accept+0x114>)
 800d9b0:	4835      	ldr	r0, [pc, #212]	@ (800da88 <netconn_accept+0x110>)
 800d9b2:	f010 f925 	bl	801dc00 <iprintf>
 800d9b6:	f06f 030f 	mvn.w	r3, #15
 800d9ba:	e05c      	b.n	800da76 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 fb99 	bl	800e0f4 <netconn_err>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800d9c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800d9ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9d2:	e050      	b.n	800da76 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	3314      	adds	r3, #20
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f00f fea1 	bl	801d720 <sys_mbox_valid>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d005      	beq.n	800d9f0 <netconn_accept+0x78>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	7f1b      	ldrb	r3, [r3, #28]
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d002      	beq.n	800d9f6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800d9f0:	f06f 030e 	mvn.w	r3, #14
 800d9f4:	e03f      	b.n	800da76 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7f1b      	ldrb	r3, [r3, #28]
 800d9fa:	f003 0302 	and.w	r3, r3, #2
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d00e      	beq.n	800da20 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	3314      	adds	r3, #20
 800da06:	f107 020c 	add.w	r2, r7, #12
 800da0a:	4611      	mov	r1, r2
 800da0c:	4618      	mov	r0, r3
 800da0e:	f00f fe70 	bl	801d6f2 <sys_arch_mbox_tryfetch>
 800da12:	4603      	mov	r3, r0
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d10a      	bne.n	800da30 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800da1a:	f06f 0306 	mvn.w	r3, #6
 800da1e:	e02a      	b.n	800da76 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	3314      	adds	r3, #20
 800da24:	f107 010c 	add.w	r1, r7, #12
 800da28:	2200      	movs	r2, #0
 800da2a:	4618      	mov	r0, r3
 800da2c:	f00f fe30 	bl	801d690 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da34:	2b00      	cmp	r3, #0
 800da36:	d005      	beq.n	800da44 <netconn_accept+0xcc>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da3c:	2200      	movs	r2, #0
 800da3e:	2101      	movs	r1, #1
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f107 0213 	add.w	r2, r7, #19
 800da4a:	4611      	mov	r1, r2
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fe f953 	bl	800bcf8 <lwip_netconn_is_err_msg>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d002      	beq.n	800da5e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800da58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da5c:	e00b      	b.n	800da76 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800da64:	f06f 030e 	mvn.w	r3, #14
 800da68:	e005      	b.n	800da76 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	697a      	ldr	r2, [r7, #20]
 800da72:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800da74:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	0801f65c 	.word	0x0801f65c
 800da84:	0801f83c 	.word	0x0801f83c
 800da88:	0801f148 	.word	0x0801f148
 800da8c:	0801f85c 	.word	0x0801f85c

0800da90 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b088      	sub	sp, #32
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	4613      	mov	r3, r2
 800da9c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800da9e:	2300      	movs	r3, #0
 800daa0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d109      	bne.n	800dabc <netconn_recv_data+0x2c>
 800daa8:	4b58      	ldr	r3, [pc, #352]	@ (800dc0c <netconn_recv_data+0x17c>)
 800daaa:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800daae:	4958      	ldr	r1, [pc, #352]	@ (800dc10 <netconn_recv_data+0x180>)
 800dab0:	4858      	ldr	r0, [pc, #352]	@ (800dc14 <netconn_recv_data+0x184>)
 800dab2:	f010 f8a5 	bl	801dc00 <iprintf>
 800dab6:	f06f 030f 	mvn.w	r3, #15
 800daba:	e0a2      	b.n	800dc02 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2200      	movs	r2, #0
 800dac0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d109      	bne.n	800dadc <netconn_recv_data+0x4c>
 800dac8:	4b50      	ldr	r3, [pc, #320]	@ (800dc0c <netconn_recv_data+0x17c>)
 800daca:	f240 224a 	movw	r2, #586	@ 0x24a
 800dace:	4952      	ldr	r1, [pc, #328]	@ (800dc18 <netconn_recv_data+0x188>)
 800dad0:	4850      	ldr	r0, [pc, #320]	@ (800dc14 <netconn_recv_data+0x184>)
 800dad2:	f010 f895 	bl	801dc00 <iprintf>
 800dad6:	f06f 030f 	mvn.w	r3, #15
 800dada:	e092      	b.n	800dc02 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	3310      	adds	r3, #16
 800dae0:	4618      	mov	r0, r3
 800dae2:	f00f fe1d 	bl	801d720 <sys_mbox_valid>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d10e      	bne.n	800db0a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 fb01 	bl	800e0f4 <netconn_err>
 800daf2:	4603      	mov	r3, r0
 800daf4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800daf6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800dafe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800db02:	e07e      	b.n	800dc02 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800db04:	f06f 030a 	mvn.w	r3, #10
 800db08:	e07b      	b.n	800dc02 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	7f1b      	ldrb	r3, [r3, #28]
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10f      	bne.n	800db36 <netconn_recv_data+0xa6>
 800db16:	79fb      	ldrb	r3, [r7, #7]
 800db18:	f003 0304 	and.w	r3, r3, #4
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d10a      	bne.n	800db36 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	7f1b      	ldrb	r3, [r3, #28]
 800db24:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d104      	bne.n	800db36 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d023      	beq.n	800db7e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	3310      	adds	r3, #16
 800db3a:	f107 0218 	add.w	r2, r7, #24
 800db3e:	4611      	mov	r1, r2
 800db40:	4618      	mov	r0, r3
 800db42:	f00f fdd6 	bl	801d6f2 <sys_arch_mbox_tryfetch>
 800db46:	4603      	mov	r3, r0
 800db48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4c:	d11f      	bne.n	800db8e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f000 fad0 	bl	800e0f4 <netconn_err>
 800db54:	4603      	mov	r3, r0
 800db56:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800db58:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800db60:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800db64:	e04d      	b.n	800dc02 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	7f1b      	ldrb	r3, [r3, #28]
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d002      	beq.n	800db78 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800db72:	f06f 030a 	mvn.w	r3, #10
 800db76:	e044      	b.n	800dc02 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800db78:	f06f 0306 	mvn.w	r3, #6
 800db7c:	e041      	b.n	800dc02 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3310      	adds	r3, #16
 800db82:	f107 0118 	add.w	r1, r7, #24
 800db86:	2200      	movs	r2, #0
 800db88:	4618      	mov	r0, r3
 800db8a:	f00f fd81 	bl	801d690 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800db96:	2b10      	cmp	r3, #16
 800db98:	d117      	bne.n	800dbca <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	f107 0217 	add.w	r2, r7, #23
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe f8a8 	bl	800bcf8 <lwip_netconn_is_err_msg>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d009      	beq.n	800dbc2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800dbae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbb2:	f113 0f0f 	cmn.w	r3, #15
 800dbb6:	d101      	bne.n	800dbbc <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e022      	b.n	800dc02 <netconn_recv_data+0x172>
      }
      return err;
 800dbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbc0:	e01f      	b.n	800dc02 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800dbc2:	69bb      	ldr	r3, [r7, #24]
 800dbc4:	891b      	ldrh	r3, [r3, #8]
 800dbc6:	83fb      	strh	r3, [r7, #30]
 800dbc8:	e00d      	b.n	800dbe6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d106      	bne.n	800dbde <netconn_recv_data+0x14e>
 800dbd0:	4b0e      	ldr	r3, [pc, #56]	@ (800dc0c <netconn_recv_data+0x17c>)
 800dbd2:	f240 2291 	movw	r2, #657	@ 0x291
 800dbd6:	4911      	ldr	r1, [pc, #68]	@ (800dc1c <netconn_recv_data+0x18c>)
 800dbd8:	480e      	ldr	r0, [pc, #56]	@ (800dc14 <netconn_recv_data+0x184>)
 800dbda:	f010 f811 	bl	801dc00 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	891b      	ldrh	r3, [r3, #8]
 800dbe4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d005      	beq.n	800dbfa <netconn_recv_data+0x16a>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf2:	8bfa      	ldrh	r2, [r7, #30]
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800dbfa:	69ba      	ldr	r2, [r7, #24]
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3720      	adds	r7, #32
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0801f65c 	.word	0x0801f65c
 800dc10:	0801f87c 	.word	0x0801f87c
 800dc14:	0801f148 	.word	0x0801f148
 800dc18:	0801f89c 	.word	0x0801f89c
 800dc1c:	0801f8b8 	.word	0x0801f8b8

0800dc20 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d005      	beq.n	800dc3e <netconn_tcp_recvd_msg+0x1e>
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc3a:	2b10      	cmp	r3, #16
 800dc3c:	d009      	beq.n	800dc52 <netconn_tcp_recvd_msg+0x32>
 800dc3e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc70 <netconn_tcp_recvd_msg+0x50>)
 800dc40:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800dc44:	490b      	ldr	r1, [pc, #44]	@ (800dc74 <netconn_tcp_recvd_msg+0x54>)
 800dc46:	480c      	ldr	r0, [pc, #48]	@ (800dc78 <netconn_tcp_recvd_msg+0x58>)
 800dc48:	f00f ffda 	bl	801dc00 <iprintf>
 800dc4c:	f06f 030f 	mvn.w	r3, #15
 800dc50:	e00a      	b.n	800dc68 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	68ba      	ldr	r2, [r7, #8]
 800dc5c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800dc5e:	6879      	ldr	r1, [r7, #4]
 800dc60:	4806      	ldr	r0, [pc, #24]	@ (800dc7c <netconn_tcp_recvd_msg+0x5c>)
 800dc62:	f7ff fcfb 	bl	800d65c <netconn_apimsg>
 800dc66:	4603      	mov	r3, r0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}
 800dc70:	0801f65c 	.word	0x0801f65c
 800dc74:	0801f8c4 	.word	0x0801f8c4
 800dc78:	0801f148 	.word	0x0801f148
 800dc7c:	0800cea7 	.word	0x0800cea7

0800dc80 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b08c      	sub	sp, #48	@ 0x30
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d005      	beq.n	800dc9c <netconn_tcp_recvd+0x1c>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dc98:	2b10      	cmp	r3, #16
 800dc9a:	d009      	beq.n	800dcb0 <netconn_tcp_recvd+0x30>
 800dc9c:	4b0c      	ldr	r3, [pc, #48]	@ (800dcd0 <netconn_tcp_recvd+0x50>)
 800dc9e:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800dca2:	490c      	ldr	r1, [pc, #48]	@ (800dcd4 <netconn_tcp_recvd+0x54>)
 800dca4:	480c      	ldr	r0, [pc, #48]	@ (800dcd8 <netconn_tcp_recvd+0x58>)
 800dca6:	f00f ffab 	bl	801dc00 <iprintf>
 800dcaa:	f06f 030f 	mvn.w	r3, #15
 800dcae:	e00b      	b.n	800dcc8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800dcb0:	f107 030c 	add.w	r3, r7, #12
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff ffb1 	bl	800dc20 <netconn_tcp_recvd_msg>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800dcc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3730      	adds	r7, #48	@ 0x30
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	0801f65c 	.word	0x0801f65c
 800dcd4:	0801f8c4 	.word	0x0801f8c4
 800dcd8:	0801f148 	.word	0x0801f148

0800dcdc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b090      	sub	sp, #64	@ 0x40
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	60f8      	str	r0, [r7, #12]
 800dce4:	60b9      	str	r1, [r7, #8]
 800dce6:	4613      	mov	r3, r2
 800dce8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	3310      	adds	r3, #16
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f00f fd16 	bl	801d720 <sys_mbox_valid>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d102      	bne.n	800dd00 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800dcfa:	f06f 030a 	mvn.w	r3, #10
 800dcfe:	e06d      	b.n	800dddc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	7f1b      	ldrb	r3, [r3, #28]
 800dd04:	b25b      	sxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	da07      	bge.n	800dd1a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	7f1b      	ldrb	r3, [r3, #28]
 800dd0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800dd18:	e039      	b.n	800dd8e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800dd1a:	79fb      	ldrb	r3, [r7, #7]
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	68b9      	ldr	r1, [r7, #8]
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f7ff feb5 	bl	800da90 <netconn_recv_data>
 800dd26:	4603      	mov	r3, r0
 800dd28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800dd2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d002      	beq.n	800dd3a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800dd34:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dd38:	e050      	b.n	800dddc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	f003 0308 	and.w	r3, r3, #8
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10e      	bne.n	800dd68 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <netconn_recv_data_tcp+0x7a>
 800dd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd52:	891b      	ldrh	r3, [r3, #8]
 800dd54:	e000      	b.n	800dd58 <netconn_recv_data_tcp+0x7c>
 800dd56:	2301      	movs	r3, #1
 800dd58:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800dd5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dd5c:	f107 0214 	add.w	r2, r7, #20
 800dd60:	4619      	mov	r1, r3
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f7ff ff5c 	bl	800dc20 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800dd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d134      	bne.n	800ddd8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800dd6e:	79fb      	ldrb	r3, [r7, #7]
 800dd70:	f003 0310 	and.w	r3, r3, #16
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d009      	beq.n	800dd8c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	7f1b      	ldrb	r3, [r3, #28]
 800dd7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800dd86:	f06f 0306 	mvn.w	r3, #6
 800dd8a:	e027      	b.n	800dddc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800dd8c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d005      	beq.n	800dda2 <netconn_recv_data_tcp+0xc6>
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	2101      	movs	r1, #1
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d10f      	bne.n	800ddca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f000 f9a2 	bl	800e0f4 <netconn_err>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800ddb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d002      	beq.n	800ddc4 <netconn_recv_data_tcp+0xe8>
          return err;
 800ddbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ddc2:	e00b      	b.n	800dddc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ddc4:	f06f 030d 	mvn.w	r3, #13
 800ddc8:	e008      	b.n	800dddc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ddca:	2101      	movs	r1, #1
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f000 f961 	bl	800e094 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ddd2:	f06f 030e 	mvn.w	r3, #14
 800ddd6:	e001      	b.n	800dddc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ddd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3740      	adds	r7, #64	@ 0x40
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d005      	beq.n	800de04 <netconn_recv_tcp_pbuf_flags+0x20>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800de00:	2b10      	cmp	r3, #16
 800de02:	d009      	beq.n	800de18 <netconn_recv_tcp_pbuf_flags+0x34>
 800de04:	4b0a      	ldr	r3, [pc, #40]	@ (800de30 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800de06:	f240 3225 	movw	r2, #805	@ 0x325
 800de0a:	490a      	ldr	r1, [pc, #40]	@ (800de34 <netconn_recv_tcp_pbuf_flags+0x50>)
 800de0c:	480a      	ldr	r0, [pc, #40]	@ (800de38 <netconn_recv_tcp_pbuf_flags+0x54>)
 800de0e:	f00f fef7 	bl	801dc00 <iprintf>
 800de12:	f06f 030f 	mvn.w	r3, #15
 800de16:	e006      	b.n	800de26 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800de18:	79fb      	ldrb	r3, [r7, #7]
 800de1a:	461a      	mov	r2, r3
 800de1c:	68b9      	ldr	r1, [r7, #8]
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f7ff ff5c 	bl	800dcdc <netconn_recv_data_tcp>
 800de24:	4603      	mov	r3, r0
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	0801f65c 	.word	0x0801f65c
 800de34:	0801f8c4 	.word	0x0801f8c4
 800de38:	0801f148 	.word	0x0801f148

0800de3c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	4613      	mov	r3, r2
 800de48:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d005      	beq.n	800de5c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800de58:	2b10      	cmp	r3, #16
 800de5a:	d109      	bne.n	800de70 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800de5c:	4b0a      	ldr	r3, [pc, #40]	@ (800de88 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800de5e:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800de62:	490a      	ldr	r1, [pc, #40]	@ (800de8c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800de64:	480a      	ldr	r0, [pc, #40]	@ (800de90 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800de66:	f00f fecb 	bl	801dc00 <iprintf>
 800de6a:	f06f 030f 	mvn.w	r3, #15
 800de6e:	e006      	b.n	800de7e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	461a      	mov	r2, r3
 800de74:	68b9      	ldr	r1, [r7, #8]
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	f7ff fe0a 	bl	800da90 <netconn_recv_data>
 800de7c:	4603      	mov	r3, r0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	0801f65c 	.word	0x0801f65c
 800de8c:	0801f8e8 	.word	0x0801f8e8
 800de90:	0801f148 	.word	0x0801f148

0800de94 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b08c      	sub	sp, #48	@ 0x30
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d109      	bne.n	800deb8 <netconn_send+0x24>
 800dea4:	4b0e      	ldr	r3, [pc, #56]	@ (800dee0 <netconn_send+0x4c>)
 800dea6:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800deaa:	490e      	ldr	r1, [pc, #56]	@ (800dee4 <netconn_send+0x50>)
 800deac:	480e      	ldr	r0, [pc, #56]	@ (800dee8 <netconn_send+0x54>)
 800deae:	f00f fea7 	bl	801dc00 <iprintf>
 800deb2:	f06f 030f 	mvn.w	r3, #15
 800deb6:	e00e      	b.n	800ded6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800dec0:	f107 030c 	add.w	r3, r7, #12
 800dec4:	4619      	mov	r1, r3
 800dec6:	4809      	ldr	r0, [pc, #36]	@ (800deec <netconn_send+0x58>)
 800dec8:	f7ff fbc8 	bl	800d65c <netconn_apimsg>
 800decc:	4603      	mov	r3, r0
 800dece:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ded2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3730      	adds	r7, #48	@ 0x30
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	0801f65c 	.word	0x0801f65c
 800dee4:	0801f920 	.word	0x0801f920
 800dee8:	0801f148 	.word	0x0801f148
 800deec:	0800ce0d 	.word	0x0800ce0d

0800def0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b088      	sub	sp, #32
 800def4:	af02      	add	r7, sp, #8
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
 800defc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800df06:	78fa      	ldrb	r2, [r7, #3]
 800df08:	f107 0110 	add.w	r1, r7, #16
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	4613      	mov	r3, r2
 800df12:	2201      	movs	r2, #1
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f000 f805 	bl	800df24 <netconn_write_vectors_partly>
 800df1a:	4603      	mov	r3, r0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b092      	sub	sp, #72	@ 0x48
 800df28:	af00      	add	r7, sp, #0
 800df2a:	60f8      	str	r0, [r7, #12]
 800df2c:	60b9      	str	r1, [r7, #8]
 800df2e:	4611      	mov	r1, r2
 800df30:	461a      	mov	r2, r3
 800df32:	460b      	mov	r3, r1
 800df34:	80fb      	strh	r3, [r7, #6]
 800df36:	4613      	mov	r3, r2
 800df38:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d109      	bne.n	800df54 <netconn_write_vectors_partly+0x30>
 800df40:	4b4e      	ldr	r3, [pc, #312]	@ (800e07c <netconn_write_vectors_partly+0x158>)
 800df42:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800df46:	494e      	ldr	r1, [pc, #312]	@ (800e080 <netconn_write_vectors_partly+0x15c>)
 800df48:	484e      	ldr	r0, [pc, #312]	@ (800e084 <netconn_write_vectors_partly+0x160>)
 800df4a:	f00f fe59 	bl	801dc00 <iprintf>
 800df4e:	f06f 030f 	mvn.w	r3, #15
 800df52:	e08e      	b.n	800e072 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	781b      	ldrb	r3, [r3, #0]
 800df58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df5c:	2b10      	cmp	r3, #16
 800df5e:	d009      	beq.n	800df74 <netconn_write_vectors_partly+0x50>
 800df60:	4b46      	ldr	r3, [pc, #280]	@ (800e07c <netconn_write_vectors_partly+0x158>)
 800df62:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800df66:	4948      	ldr	r1, [pc, #288]	@ (800e088 <netconn_write_vectors_partly+0x164>)
 800df68:	4846      	ldr	r0, [pc, #280]	@ (800e084 <netconn_write_vectors_partly+0x160>)
 800df6a:	f00f fe49 	bl	801dc00 <iprintf>
 800df6e:	f06f 0305 	mvn.w	r3, #5
 800df72:	e07e      	b.n	800e072 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	7f1b      	ldrb	r3, [r3, #28]
 800df78:	f003 0302 	and.w	r3, r3, #2
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d104      	bne.n	800df8a <netconn_write_vectors_partly+0x66>
 800df80:	797b      	ldrb	r3, [r7, #5]
 800df82:	f003 0304 	and.w	r3, r3, #4
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <netconn_write_vectors_partly+0x6a>
 800df8a:	2301      	movs	r3, #1
 800df8c:	e000      	b.n	800df90 <netconn_write_vectors_partly+0x6c>
 800df8e:	2300      	movs	r3, #0
 800df90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800df94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <netconn_write_vectors_partly+0x84>
 800df9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800dfa2:	f06f 0305 	mvn.w	r3, #5
 800dfa6:	e064      	b.n	800e072 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800dfac:	2300      	movs	r3, #0
 800dfae:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfb0:	e015      	b.n	800dfde <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800dfb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfb4:	00db      	lsls	r3, r3, #3
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	4413      	add	r3, r2
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfbe:	4413      	add	r3, r2
 800dfc0:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800dfc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	4413      	add	r3, r2
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d202      	bcs.n	800dfd8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800dfd2:	f06f 0305 	mvn.w	r3, #5
 800dfd6:	e04c      	b.n	800e072 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800dfd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfda:	3301      	adds	r3, #1
 800dfdc:	643b      	str	r3, [r7, #64]	@ 0x40
 800dfde:	88fb      	ldrh	r3, [r7, #6]
 800dfe0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	dbe5      	blt.n	800dfb2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800dfe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d101      	bne.n	800dff0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800dfec:	2300      	movs	r3, #0
 800dfee:	e040      	b.n	800e072 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800dff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	da0a      	bge.n	800e00c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800dff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d102      	bne.n	800e002 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800dffc:	f06f 0305 	mvn.w	r3, #5
 800e000:	e037      	b.n	800e072 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800e002:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e006:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800e008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e00a:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800e014:	88fb      	ldrh	r3, [r7, #6]
 800e016:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800e018:	2300      	movs	r3, #0
 800e01a:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e01c:	797b      	ldrb	r3, [r7, #5]
 800e01e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e022:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e024:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800e026:	2300      	movs	r3, #0
 800e028:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e02a:	f107 0314 	add.w	r3, r7, #20
 800e02e:	4619      	mov	r1, r3
 800e030:	4816      	ldr	r0, [pc, #88]	@ (800e08c <netconn_write_vectors_partly+0x168>)
 800e032:	f7ff fb13 	bl	800d65c <netconn_apimsg>
 800e036:	4603      	mov	r3, r0
 800e038:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800e03c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e040:	2b00      	cmp	r3, #0
 800e042:	d114      	bne.n	800e06e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800e044:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e046:	2b00      	cmp	r3, #0
 800e048:	d002      	beq.n	800e050 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800e04a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e04e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800e050:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10a      	bne.n	800e06e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800e058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d006      	beq.n	800e06e <netconn_write_vectors_partly+0x14a>
 800e060:	4b06      	ldr	r3, [pc, #24]	@ (800e07c <netconn_write_vectors_partly+0x158>)
 800e062:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e066:	490a      	ldr	r1, [pc, #40]	@ (800e090 <netconn_write_vectors_partly+0x16c>)
 800e068:	4806      	ldr	r0, [pc, #24]	@ (800e084 <netconn_write_vectors_partly+0x160>)
 800e06a:	f00f fdc9 	bl	801dc00 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e06e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e072:	4618      	mov	r0, r3
 800e074:	3748      	adds	r7, #72	@ 0x48
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	0801f65c 	.word	0x0801f65c
 800e080:	0801f93c 	.word	0x0801f93c
 800e084:	0801f148 	.word	0x0801f148
 800e088:	0801f958 	.word	0x0801f958
 800e08c:	0800d2ad 	.word	0x0800d2ad
 800e090:	0801f97c 	.word	0x0801f97c

0800e094 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b08c      	sub	sp, #48	@ 0x30
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d109      	bne.n	800e0ba <netconn_close_shutdown+0x26>
 800e0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e4 <netconn_close_shutdown+0x50>)
 800e0a8:	f240 4247 	movw	r2, #1095	@ 0x447
 800e0ac:	490e      	ldr	r1, [pc, #56]	@ (800e0e8 <netconn_close_shutdown+0x54>)
 800e0ae:	480f      	ldr	r0, [pc, #60]	@ (800e0ec <netconn_close_shutdown+0x58>)
 800e0b0:	f00f fda6 	bl	801dc00 <iprintf>
 800e0b4:	f06f 030f 	mvn.w	r3, #15
 800e0b8:	e010      	b.n	800e0dc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e0be:	78fb      	ldrb	r3, [r7, #3]
 800e0c0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e0c2:	2329      	movs	r3, #41	@ 0x29
 800e0c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e0c6:	f107 030c 	add.w	r3, r7, #12
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	4808      	ldr	r0, [pc, #32]	@ (800e0f0 <netconn_close_shutdown+0x5c>)
 800e0ce:	f7ff fac5 	bl	800d65c <netconn_apimsg>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e0d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3730      	adds	r7, #48	@ 0x30
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	0801f65c 	.word	0x0801f65c
 800e0e8:	0801f9a0 	.word	0x0801f9a0
 800e0ec:	0801f148 	.word	0x0801f148
 800e0f0:	0800d4d1 	.word	0x0800d4d1

0800e0f4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d101      	bne.n	800e106 <netconn_err+0x12>
    return ERR_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	e00d      	b.n	800e122 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800e106:	f00f fc15 	bl	801d934 <sys_arch_protect>
 800e10a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7a1b      	ldrb	r3, [r3, #8]
 800e110:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f00f fc19 	bl	801d950 <sys_arch_unprotect>
  return err;
 800e11e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
	...

0800e12c <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08e      	sub	sp, #56	@ 0x38
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d109      	bne.n	800e154 <netconn_join_leave_group+0x28>
 800e140:	4b15      	ldr	r3, [pc, #84]	@ (800e198 <netconn_join_leave_group+0x6c>)
 800e142:	f240 42a5 	movw	r2, #1189	@ 0x4a5
 800e146:	4915      	ldr	r1, [pc, #84]	@ (800e19c <netconn_join_leave_group+0x70>)
 800e148:	4815      	ldr	r0, [pc, #84]	@ (800e1a0 <netconn_join_leave_group+0x74>)
 800e14a:	f00f fd59 	bl	801dc00 <iprintf>
 800e14e:	f06f 030f 	mvn.w	r3, #15
 800e152:	e01d      	b.n	800e190 <netconn_join_leave_group+0x64>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d101      	bne.n	800e15e <netconn_join_leave_group+0x32>
    multiaddr = IP4_ADDR_ANY;
 800e15a:	4b12      	ldr	r3, [pc, #72]	@ (800e1a4 <netconn_join_leave_group+0x78>)
 800e15c:	60bb      	str	r3, [r7, #8]
  }
  if (netif_addr == NULL) {
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d101      	bne.n	800e168 <netconn_join_leave_group+0x3c>
    netif_addr = IP4_ADDR_ANY;
 800e164:	4b0f      	ldr	r3, [pc, #60]	@ (800e1a4 <netconn_join_leave_group+0x78>)
 800e166:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
 800e174:	78fb      	ldrb	r3, [r7, #3]
 800e176:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
 800e17a:	f107 0314 	add.w	r3, r7, #20
 800e17e:	4619      	mov	r1, r3
 800e180:	4809      	ldr	r0, [pc, #36]	@ (800e1a8 <netconn_join_leave_group+0x7c>)
 800e182:	f7ff fa6b 	bl	800d65c <netconn_apimsg>
 800e186:	4603      	mov	r3, r0
 800e188:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e18c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800e190:	4618      	mov	r0, r3
 800e192:	3738      	adds	r7, #56	@ 0x38
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	0801f65c 	.word	0x0801f65c
 800e19c:	0801f9bc 	.word	0x0801f9bc
 800e1a0:	0801f148 	.word	0x0801f148
 800e1a4:	08023abc 	.word	0x08023abc
 800e1a8:	0800d5e9 	.word	0x0800d5e9

0800e1ac <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d013      	beq.n	800e1e2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00b      	beq.n	800e1da <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f007 fefa 	bl	8015fc0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	605a      	str	r2, [r3, #4]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e1da:	6879      	ldr	r1, [r7, #4]
 800e1dc:	2006      	movs	r0, #6
 800e1de:	f006 fff7 	bl	80151d0 <memp_free>
  }
}
 800e1e2:	bf00      	nop
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
	...

0800e1ec <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d106      	bne.n	800e208 <netbuf_free+0x1c>
 800e1fa:	4b0d      	ldr	r3, [pc, #52]	@ (800e230 <netbuf_free+0x44>)
 800e1fc:	2281      	movs	r2, #129	@ 0x81
 800e1fe:	490d      	ldr	r1, [pc, #52]	@ (800e234 <netbuf_free+0x48>)
 800e200:	480d      	ldr	r0, [pc, #52]	@ (800e238 <netbuf_free+0x4c>)
 800e202:	f00f fcfd 	bl	801dc00 <iprintf>
 800e206:	e00f      	b.n	800e228 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d004      	beq.n	800e21a <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4618      	mov	r0, r3
 800e216:	f007 fed3 	bl	8015fc0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2200      	movs	r2, #0
 800e21e:	605a      	str	r2, [r3, #4]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685a      	ldr	r2, [r3, #4]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800e228:	3708      	adds	r7, #8
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	0801f9e4 	.word	0x0801f9e4
 800e234:	0801fa88 	.word	0x0801fa88
 800e238:	0801f148 	.word	0x0801f148

0800e23c <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	4613      	mov	r3, r2
 800e248:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d108      	bne.n	800e262 <netbuf_ref+0x26>
 800e250:	4b1c      	ldr	r3, [pc, #112]	@ (800e2c4 <netbuf_ref+0x88>)
 800e252:	2299      	movs	r2, #153	@ 0x99
 800e254:	491c      	ldr	r1, [pc, #112]	@ (800e2c8 <netbuf_ref+0x8c>)
 800e256:	481d      	ldr	r0, [pc, #116]	@ (800e2cc <netbuf_ref+0x90>)
 800e258:	f00f fcd2 	bl	801dc00 <iprintf>
 800e25c:	f06f 030f 	mvn.w	r3, #15
 800e260:	e02b      	b.n	800e2ba <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d004      	beq.n	800e274 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f007 fea6 	bl	8015fc0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e274:	2241      	movs	r2, #65	@ 0x41
 800e276:	2100      	movs	r1, #0
 800e278:	2036      	movs	r0, #54	@ 0x36
 800e27a:	f007 fb8b 	bl	8015994 <pbuf_alloc>
 800e27e:	4602      	mov	r2, r0
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d105      	bne.n	800e298 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e292:	f04f 33ff 	mov.w	r3, #4294967295
 800e296:	e010      	b.n	800e2ba <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	88fa      	ldrh	r2, [r7, #6]
 800e2a6:	811a      	strh	r2, [r3, #8]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	6812      	ldr	r2, [r2, #0]
 800e2ac:	891b      	ldrh	r3, [r3, #8]
 800e2ae:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681a      	ldr	r2, [r3, #0]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e2b8:	2300      	movs	r3, #0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
 800e2c2:	bf00      	nop
 800e2c4:	0801f9e4 	.word	0x0801f9e4
 800e2c8:	0801faa4 	.word	0x0801faa4
 800e2cc:	0801f148 	.word	0x0801f148

0800e2d0 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	db02      	blt.n	800e2e8 <tryget_socket_unconn_nouse+0x18>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b03      	cmp	r3, #3
 800e2e6:	dd01      	ble.n	800e2ec <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	e003      	b.n	800e2f4 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	011b      	lsls	r3, r3, #4
 800e2f0:	4a03      	ldr	r2, [pc, #12]	@ (800e300 <tryget_socket_unconn_nouse+0x30>)
 800e2f2:	4413      	add	r3, r2
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	200086c0 	.word	0x200086c0

0800e304 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7ff ffdf 	bl	800e2d0 <tryget_socket_unconn_nouse>
 800e312:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e314:	68fb      	ldr	r3, [r7, #12]
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}

0800e31e <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	b084      	sub	sp, #16
 800e322:	af00      	add	r7, sp, #0
 800e324:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff ffec 	bl	800e304 <tryget_socket_unconn>
 800e32c:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <tryget_socket+0x22>
    if (sock->conn) {
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <tryget_socket+0x22>
      return sock;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	e000      	b.n	800e342 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
	...

0800e34c <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7ff ffe2 	bl	800e31e <tryget_socket>
 800e35a:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d104      	bne.n	800e36c <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e362:	4b05      	ldr	r3, [pc, #20]	@ (800e378 <get_socket+0x2c>)
 800e364:	2209      	movs	r2, #9
 800e366:	601a      	str	r2, [r3, #0]
    return NULL;
 800e368:	2300      	movs	r3, #0
 800e36a:	e000      	b.n	800e36e <get_socket+0x22>
  }
  return sock;
 800e36c:	68fb      	ldr	r3, [r7, #12]
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3710      	adds	r7, #16
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	2000fa10 	.word	0x2000fa10

0800e37c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e386:	2300      	movs	r3, #0
 800e388:	60fb      	str	r3, [r7, #12]
 800e38a:	e052      	b.n	800e432 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e38c:	f00f fad2 	bl	801d934 <sys_arch_protect>
 800e390:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e392:	4a2c      	ldr	r2, [pc, #176]	@ (800e444 <alloc_socket+0xc8>)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	011b      	lsls	r3, r3, #4
 800e398:	4413      	add	r3, r2
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d142      	bne.n	800e426 <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e3a0:	4a28      	ldr	r2, [pc, #160]	@ (800e444 <alloc_socket+0xc8>)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	011b      	lsls	r3, r3, #4
 800e3a6:	4413      	add	r3, r2
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e3ac:	68b8      	ldr	r0, [r7, #8]
 800e3ae:	f00f facf 	bl	801d950 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e3b2:	4a24      	ldr	r2, [pc, #144]	@ (800e444 <alloc_socket+0xc8>)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	011b      	lsls	r3, r3, #4
 800e3b8:	4413      	add	r3, r2
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e3c0:	4a20      	ldr	r2, [pc, #128]	@ (800e444 <alloc_socket+0xc8>)
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	011b      	lsls	r3, r3, #4
 800e3c6:	4413      	add	r3, r2
 800e3c8:	330e      	adds	r3, #14
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d006      	beq.n	800e3de <alloc_socket+0x62>
 800e3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e448 <alloc_socket+0xcc>)
 800e3d2:	f240 220e 	movw	r2, #526	@ 0x20e
 800e3d6:	491d      	ldr	r1, [pc, #116]	@ (800e44c <alloc_socket+0xd0>)
 800e3d8:	481d      	ldr	r0, [pc, #116]	@ (800e450 <alloc_socket+0xd4>)
 800e3da:	f00f fc11 	bl	801dc00 <iprintf>
      sockets[i].rcvevent   = 0;
 800e3de:	4a19      	ldr	r2, [pc, #100]	@ (800e444 <alloc_socket+0xc8>)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	011b      	lsls	r3, r3, #4
 800e3e4:	4413      	add	r3, r2
 800e3e6:	3308      	adds	r3, #8
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e3f4:	2b10      	cmp	r3, #16
 800e3f6:	d102      	bne.n	800e3fe <alloc_socket+0x82>
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <alloc_socket+0x86>
 800e3fe:	2301      	movs	r3, #1
 800e400:	e000      	b.n	800e404 <alloc_socket+0x88>
 800e402:	2300      	movs	r3, #0
 800e404:	b299      	uxth	r1, r3
 800e406:	4a0f      	ldr	r2, [pc, #60]	@ (800e444 <alloc_socket+0xc8>)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	011b      	lsls	r3, r3, #4
 800e40c:	4413      	add	r3, r2
 800e40e:	330a      	adds	r3, #10
 800e410:	460a      	mov	r2, r1
 800e412:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e414:	4a0b      	ldr	r2, [pc, #44]	@ (800e444 <alloc_socket+0xc8>)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	011b      	lsls	r3, r3, #4
 800e41a:	4413      	add	r3, r2
 800e41c:	330c      	adds	r3, #12
 800e41e:	2200      	movs	r2, #0
 800e420:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	e00a      	b.n	800e43c <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e426:	68b8      	ldr	r0, [r7, #8]
 800e428:	f00f fa92 	bl	801d950 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	3301      	adds	r3, #1
 800e430:	60fb      	str	r3, [r7, #12]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2b03      	cmp	r3, #3
 800e436:	dda9      	ble.n	800e38c <alloc_socket+0x10>
  }
  return -1;
 800e438:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	200086c0 	.word	0x200086c0
 800e448:	0801fb84 	.word	0x0801fb84
 800e44c:	0801fbe8 	.word	0x0801fbe8
 800e450:	0801f148 	.word	0x0801f148

0800e454 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	68fa      	ldr	r2, [r7, #12]
 800e466:	6852      	ldr	r2, [r2, #4]
 800e468:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2200      	movs	r2, #0
 800e46e:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2200      	movs	r2, #0
 800e47c:	601a      	str	r2, [r3, #0]
  return 1;
 800e47e:	2301      	movs	r3, #1
}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00d      	beq.n	800e4bc <free_socket_free_elements+0x30>
    if (is_tcp) {
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d005      	beq.n	800e4b2 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f007 fd88 	bl	8015fc0 <pbuf_free>
 800e4b0:	e004      	b.n	800e4bc <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7ff fe78 	bl	800e1ac <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800e4c2:	68b8      	ldr	r0, [r7, #8]
 800e4c4:	f7ff f986 	bl	800d7d4 <netconn_delete>
  }
}
 800e4c8:	bf00      	nop
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800e4da:	f00f fa2b 	bl	801d934 <sys_arch_protect>
 800e4de:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800e4e0:	f107 0308 	add.w	r3, r7, #8
 800e4e4:	f107 020c 	add.w	r2, r7, #12
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7ff ffb2 	bl	800e454 <free_socket_locked>
 800e4f0:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800e4f2:	6978      	ldr	r0, [r7, #20]
 800e4f4:	f00f fa2c 	bl	801d950 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d006      	beq.n	800e50c <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f107 0208 	add.w	r2, r7, #8
 800e504:	4619      	mov	r1, r3
 800e506:	6838      	ldr	r0, [r7, #0]
 800e508:	f7ff ffc0 	bl	800e48c <free_socket_free_elements>
  }
}
 800e50c:	bf00      	nop
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800e514:	b590      	push	{r4, r7, lr}
 800e516:	b099      	sub	sp, #100	@ 0x64
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800e520:	2300      	movs	r3, #0
 800e522:	84fb      	strh	r3, [r7, #38]	@ 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7ff ff11 	bl	800e34c <get_socket>
 800e52a:	65b8      	str	r0, [r7, #88]	@ 0x58
  if (!sock) {
 800e52c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d102      	bne.n	800e538 <lwip_accept+0x24>
    return -1;
 800e532:	f04f 33ff 	mov.w	r3, #4294967295
 800e536:	e0f8      	b.n	800e72a <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800e538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e540:	4611      	mov	r1, r2
 800e542:	4618      	mov	r0, r3
 800e544:	f7ff fa18 	bl	800d978 <netconn_accept>
 800e548:	4603      	mov	r3, r0
 800e54a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  if (err != ERR_OK) {
 800e54e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e552:	2b00      	cmp	r3, #0
 800e554:	d02c      	beq.n	800e5b0 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e556:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e560:	2b10      	cmp	r3, #16
 800e562:	d008      	beq.n	800e576 <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800e564:	235f      	movs	r3, #95	@ 0x5f
 800e566:	633b      	str	r3, [r7, #48]	@ 0x30
 800e568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d01d      	beq.n	800e5aa <lwip_accept+0x96>
 800e56e:	4a71      	ldr	r2, [pc, #452]	@ (800e734 <lwip_accept+0x220>)
 800e570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e572:	6013      	str	r3, [r2, #0]
 800e574:	e019      	b.n	800e5aa <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800e576:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e57a:	f113 0f0f 	cmn.w	r3, #15
 800e57e:	d108      	bne.n	800e592 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800e580:	2316      	movs	r3, #22
 800e582:	637b      	str	r3, [r7, #52]	@ 0x34
 800e584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00f      	beq.n	800e5aa <lwip_accept+0x96>
 800e58a:	4a6a      	ldr	r2, [pc, #424]	@ (800e734 <lwip_accept+0x220>)
 800e58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e58e:	6013      	str	r3, [r2, #0]
 800e590:	e00b      	b.n	800e5aa <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800e592:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e596:	4618      	mov	r0, r3
 800e598:	f7fd fad8 	bl	800bb4c <err_to_errno>
 800e59c:	63b8      	str	r0, [r7, #56]	@ 0x38
 800e59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <lwip_accept+0x96>
 800e5a4:	4a63      	ldr	r2, [pc, #396]	@ (800e734 <lwip_accept+0x220>)
 800e5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a8:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800e5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ae:	e0bc      	b.n	800e72a <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800e5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d106      	bne.n	800e5c4 <lwip_accept+0xb0>
 800e5b6:	4b60      	ldr	r3, [pc, #384]	@ (800e738 <lwip_accept+0x224>)
 800e5b8:	f240 228b 	movw	r2, #651	@ 0x28b
 800e5bc:	495f      	ldr	r1, [pc, #380]	@ (800e73c <lwip_accept+0x228>)
 800e5be:	4860      	ldr	r0, [pc, #384]	@ (800e740 <lwip_accept+0x22c>)
 800e5c0:	f00f fb1e 	bl	801dc00 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800e5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff fed7 	bl	800e37c <alloc_socket>
 800e5ce:	6538      	str	r0, [r7, #80]	@ 0x50
  if (newsock == -1) {
 800e5d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d6:	d10e      	bne.n	800e5f6 <lwip_accept+0xe2>
    netconn_delete(newconn);
 800e5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff f8fa 	bl	800d7d4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800e5e0:	2317      	movs	r3, #23
 800e5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e5e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d002      	beq.n	800e5f0 <lwip_accept+0xdc>
 800e5ea:	4a52      	ldr	r2, [pc, #328]	@ (800e734 <lwip_accept+0x220>)
 800e5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ee:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f4:	e099      	b.n	800e72a <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800e5f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	db02      	blt.n	800e602 <lwip_accept+0xee>
 800e5fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5fe:	2b03      	cmp	r3, #3
 800e600:	dd06      	ble.n	800e610 <lwip_accept+0xfc>
 800e602:	4b4d      	ldr	r3, [pc, #308]	@ (800e738 <lwip_accept+0x224>)
 800e604:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800e608:	494e      	ldr	r1, [pc, #312]	@ (800e744 <lwip_accept+0x230>)
 800e60a:	484d      	ldr	r0, [pc, #308]	@ (800e740 <lwip_accept+0x22c>)
 800e60c:	f00f faf8 	bl	801dc00 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800e610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e612:	011b      	lsls	r3, r3, #4
 800e614:	4a4c      	ldr	r2, [pc, #304]	@ (800e748 <lwip_accept+0x234>)
 800e616:	4413      	add	r3, r2
 800e618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800e61a:	f00f f98b 	bl	801d934 <sys_arch_protect>
 800e61e:	64b8      	str	r0, [r7, #72]	@ 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800e620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e622:	699b      	ldr	r3, [r3, #24]
 800e624:	b21b      	sxth	r3, r3
 800e626:	43db      	mvns	r3, r3
 800e628:	b21b      	sxth	r3, r3
 800e62a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  newconn->socket = newsock;
 800e62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e630:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800e632:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e634:	f00f f98c 	bl	801d950 <sys_arch_unprotect>

  if (newconn->callback) {
 800e638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d012      	beq.n	800e666 <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800e640:	4842      	ldr	r0, [pc, #264]	@ (800e74c <lwip_accept+0x238>)
 800e642:	f00f f93b 	bl	801d8bc <sys_mutex_lock>
    while (recvevent > 0) {
 800e646:	e008      	b.n	800e65a <lwip_accept+0x146>
      recvevent--;
 800e648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e64a:	3b01      	subs	r3, #1
 800e64c:	65fb      	str	r3, [r7, #92]	@ 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800e64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e652:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e654:	2200      	movs	r2, #0
 800e656:	2100      	movs	r1, #0
 800e658:	4798      	blx	r3
    while (recvevent > 0) {
 800e65a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	dcf3      	bgt.n	800e648 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800e660:	483a      	ldr	r0, [pc, #232]	@ (800e74c <lwip_accept+0x238>)
 800e662:	f00f f93a 	bl	801d8da <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d055      	beq.n	800e718 <lwip_accept+0x204>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d052      	beq.n	800e718 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800e672:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e674:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 800e678:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e67c:	2300      	movs	r3, #0
 800e67e:	f7ff f8c5 	bl	800d80c <netconn_getaddr>
 800e682:	4603      	mov	r3, r0
 800e684:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (err != ERR_OK) {
 800e688:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d016      	beq.n	800e6be <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800e690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff f89e 	bl	800d7d4 <netconn_delete>
      free_socket(nsock, 1);
 800e698:	2101      	movs	r1, #1
 800e69a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e69c:	f7ff ff18 	bl	800e4d0 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800e6a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7fd fa51 	bl	800bb4c <err_to_errno>
 800e6aa:	6478      	str	r0, [r7, #68]	@ 0x44
 800e6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d002      	beq.n	800e6b8 <lwip_accept+0x1a4>
 800e6b2:	4a20      	ldr	r2, [pc, #128]	@ (800e734 <lwip_accept+0x220>)
 800e6b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6b6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800e6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6bc:	e035      	b.n	800e72a <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800e6be:	f107 0314 	add.w	r3, r7, #20
 800e6c2:	2210      	movs	r2, #16
 800e6c4:	701a      	strb	r2, [r3, #0]
 800e6c6:	f107 0314 	add.w	r3, r7, #20
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	705a      	strb	r2, [r3, #1]
 800e6ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e6d0:	f107 0414 	add.w	r4, r7, #20
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f005 ffc1 	bl	801465c <lwip_htons>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	8063      	strh	r3, [r4, #2]
 800e6de:	f107 0314 	add.w	r3, r7, #20
 800e6e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6e4:	605a      	str	r2, [r3, #4]
 800e6e6:	f107 0314 	add.w	r3, r7, #20
 800e6ea:	3308      	adds	r3, #8
 800e6ec:	2208      	movs	r2, #8
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f00f fb24 	bl	801dd3e <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	7d3a      	ldrb	r2, [r7, #20]
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d903      	bls.n	800e708 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800e700:	7d3b      	ldrb	r3, [r7, #20]
 800e702:	461a      	mov	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	f107 0314 	add.w	r3, r7, #20
 800e710:	4619      	mov	r1, r3
 800e712:	68b8      	ldr	r0, [r7, #8]
 800e714:	f00f fbb7 	bl	801de86 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800e718:	2300      	movs	r3, #0
 800e71a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e71c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d002      	beq.n	800e728 <lwip_accept+0x214>
 800e722:	4a04      	ldr	r2, [pc, #16]	@ (800e734 <lwip_accept+0x220>)
 800e724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e726:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800e728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3764      	adds	r7, #100	@ 0x64
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd90      	pop	{r4, r7, pc}
 800e732:	bf00      	nop
 800e734:	2000fa10 	.word	0x2000fa10
 800e738:	0801fb84 	.word	0x0801fb84
 800e73c:	0801fc08 	.word	0x0801fc08
 800e740:	0801f148 	.word	0x0801f148
 800e744:	0801fc18 	.word	0x0801fc18
 800e748:	200086c0 	.word	0x200086c0
 800e74c:	20008710 	.word	0x20008710

0800e750 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08a      	sub	sp, #40	@ 0x28
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f7ff fdf5 	bl	800e34c <get_socket>
 800e762:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!sock) {
 800e764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e766:	2b00      	cmp	r3, #0
 800e768:	d102      	bne.n	800e770 <lwip_bind+0x20>
    return -1;
 800e76a:	f04f 33ff 	mov.w	r3, #4294967295
 800e76e:	e051      	b.n	800e814 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2b10      	cmp	r3, #16
 800e774:	d108      	bne.n	800e788 <lwip_bind+0x38>
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	785b      	ldrb	r3, [r3, #1]
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d104      	bne.n	800e788 <lwip_bind+0x38>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	f003 0303 	and.w	r3, r3, #3
 800e784:	2b00      	cmp	r3, #0
 800e786:	d014      	beq.n	800e7b2 <lwip_bind+0x62>
 800e788:	4b24      	ldr	r3, [pc, #144]	@ (800e81c <lwip_bind+0xcc>)
 800e78a:	f240 22e2 	movw	r2, #738	@ 0x2e2
 800e78e:	4924      	ldr	r1, [pc, #144]	@ (800e820 <lwip_bind+0xd0>)
 800e790:	4824      	ldr	r0, [pc, #144]	@ (800e824 <lwip_bind+0xd4>)
 800e792:	f00f fa35 	bl	801dc00 <iprintf>
 800e796:	f06f 000f 	mvn.w	r0, #15
 800e79a:	f7fd f9d7 	bl	800bb4c <err_to_errno>
 800e79e:	6178      	str	r0, [r7, #20]
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <lwip_bind+0x5c>
 800e7a6:	4a20      	ldr	r2, [pc, #128]	@ (800e828 <lwip_bind+0xd8>)
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	6013      	str	r3, [r2, #0]
 800e7ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b0:	e030      	b.n	800e814 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	613b      	str	r3, [r7, #16]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	885b      	ldrh	r3, [r3, #2]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f005 ff4d 	bl	801465c <lwip_htons>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	847b      	strh	r3, [r7, #34]	@ 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800e7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e7cc:	f107 0110 	add.w	r1, r7, #16
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7ff f86d 	bl	800d8b0 <netconn_bind>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  if (err != ERR_OK) {
 800e7dc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d00e      	beq.n	800e802 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800e7e4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fd f9af 	bl	800bb4c <err_to_errno>
 800e7ee:	61b8      	str	r0, [r7, #24]
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <lwip_bind+0xac>
 800e7f6:	4a0c      	ldr	r2, [pc, #48]	@ (800e828 <lwip_bind+0xd8>)
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e800:	e008      	b.n	800e814 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800e802:	2300      	movs	r3, #0
 800e804:	61fb      	str	r3, [r7, #28]
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d002      	beq.n	800e812 <lwip_bind+0xc2>
 800e80c:	4a06      	ldr	r2, [pc, #24]	@ (800e828 <lwip_bind+0xd8>)
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3728      	adds	r7, #40	@ 0x28
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	0801fb84 	.word	0x0801fb84
 800e820:	0801fc30 	.word	0x0801fc30
 800e824:	0801f148 	.word	0x0801f148
 800e828:	2000fa10 	.word	0x2000fa10

0800e82c <lwip_close>:

int
lwip_close(int s)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7ff fd87 	bl	800e34c <get_socket>
 800e83e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d102      	bne.n	800e84c <lwip_close+0x20>
    return -1;
 800e846:	f04f 33ff 	mov.w	r3, #4294967295
 800e84a:	e03c      	b.n	800e8c6 <lwip_close+0x9a>
  }

  if (sock->conn != NULL) {
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00b      	beq.n	800e86c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e85e:	2b10      	cmp	r3, #16
 800e860:	bf0c      	ite	eq
 800e862:	2301      	moveq	r3, #1
 800e864:	2300      	movne	r3, #0
 800e866:	b2db      	uxtb	r3, r3
 800e868:	617b      	str	r3, [r7, #20]
 800e86a:	e00a      	b.n	800e882 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d006      	beq.n	800e882 <lwip_close+0x56>
 800e874:	4b16      	ldr	r3, [pc, #88]	@ (800e8d0 <lwip_close+0xa4>)
 800e876:	f44f 7245 	mov.w	r2, #788	@ 0x314
 800e87a:	4916      	ldr	r1, [pc, #88]	@ (800e8d4 <lwip_close+0xa8>)
 800e87c:	4816      	ldr	r0, [pc, #88]	@ (800e8d8 <lwip_close+0xac>)
 800e87e:	f00f f9bf 	bl	801dc00 <iprintf>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 feb8 	bl	800f5f8 <lwip_socket_drop_registered_memberships>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fe ff7d 	bl	800d78c <netconn_prepare_delete>
 800e892:	4603      	mov	r3, r0
 800e894:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d00e      	beq.n	800e8bc <lwip_close+0x90>
    sock_set_errno(sock, err_to_errno(err));
 800e89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fd f952 	bl	800bb4c <err_to_errno>
 800e8a8:	60b8      	str	r0, [r7, #8]
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <lwip_close+0x8a>
 800e8b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e8dc <lwip_close+0xb0>)
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ba:	e004      	b.n	800e8c6 <lwip_close+0x9a>
  }

  free_socket(sock, is_tcp);
 800e8bc:	6979      	ldr	r1, [r7, #20]
 800e8be:	6938      	ldr	r0, [r7, #16]
 800e8c0:	f7ff fe06 	bl	800e4d0 <free_socket>
  set_errno(0);
  return 0;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3718      	adds	r7, #24
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	0801fb84 	.word	0x0801fb84
 800e8d4:	0801fc4c 	.word	0x0801fc4c
 800e8d8:	0801f148 	.word	0x0801f148
 800e8dc:	2000fa10 	.word	0x2000fa10

0800e8e0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b088      	sub	sp, #32
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f7ff fd2e 	bl	800e34c <get_socket>
 800e8f0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d102      	bne.n	800e8fe <lwip_listen+0x1e>
    return -1;
 800e8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fc:	e03e      	b.n	800e97c <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2bfe      	cmp	r3, #254	@ 0xfe
 800e902:	dc03      	bgt.n	800e90c <lwip_listen+0x2c>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e90a:	e000      	b.n	800e90e <lwip_listen+0x2e>
 800e90c:	23ff      	movs	r3, #255	@ 0xff
 800e90e:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	683a      	ldr	r2, [r7, #0]
 800e916:	b2d2      	uxtb	r2, r2
 800e918:	4611      	mov	r1, r2
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7ff f800 	bl	800d920 <netconn_listen_with_backlog>
 800e920:	4603      	mov	r3, r0
 800e922:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800e924:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d01e      	beq.n	800e96a <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e936:	2b10      	cmp	r3, #16
 800e938:	d008      	beq.n	800e94c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800e93a:	235f      	movs	r3, #95	@ 0x5f
 800e93c:	60fb      	str	r3, [r7, #12]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00f      	beq.n	800e964 <lwip_listen+0x84>
 800e944:	4a0f      	ldr	r2, [pc, #60]	@ (800e984 <lwip_listen+0xa4>)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	e00b      	b.n	800e964 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800e94c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e950:	4618      	mov	r0, r3
 800e952:	f7fd f8fb 	bl	800bb4c <err_to_errno>
 800e956:	6138      	str	r0, [r7, #16]
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d002      	beq.n	800e964 <lwip_listen+0x84>
 800e95e:	4a09      	ldr	r2, [pc, #36]	@ (800e984 <lwip_listen+0xa4>)
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800e964:	f04f 33ff 	mov.w	r3, #4294967295
 800e968:	e008      	b.n	800e97c <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800e96a:	2300      	movs	r3, #0
 800e96c:	617b      	str	r3, [r7, #20]
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d002      	beq.n	800e97a <lwip_listen+0x9a>
 800e974:	4a03      	ldr	r2, [pc, #12]	@ (800e984 <lwip_listen+0xa4>)
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3720      	adds	r7, #32
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	2000fa10 	.word	0x2000fa10

0800e988 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b08c      	sub	sp, #48	@ 0x30
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
 800e994:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800e996:	2308      	movs	r3, #8
 800e998:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 800e99c:	2300      	movs	r3, #0
 800e99e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	db01      	blt.n	800e9aa <lwip_recv_tcp+0x22>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	e001      	b.n	800e9ae <lwip_recv_tcp+0x26>
 800e9aa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e9ae:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d106      	bne.n	800e9c4 <lwip_recv_tcp+0x3c>
 800e9b6:	4b74      	ldr	r3, [pc, #464]	@ (800eb88 <lwip_recv_tcp+0x200>)
 800e9b8:	f240 329e 	movw	r2, #926	@ 0x39e
 800e9bc:	4973      	ldr	r1, [pc, #460]	@ (800eb8c <lwip_recv_tcp+0x204>)
 800e9be:	4874      	ldr	r0, [pc, #464]	@ (800eb90 <lwip_recv_tcp+0x208>)
 800e9c0:	f00f f91e 	bl	801dc00 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e9ce:	2b10      	cmp	r3, #16
 800e9d0:	d006      	beq.n	800e9e0 <lwip_recv_tcp+0x58>
 800e9d2:	4b6d      	ldr	r3, [pc, #436]	@ (800eb88 <lwip_recv_tcp+0x200>)
 800e9d4:	f240 329f 	movw	r2, #927	@ 0x39f
 800e9d8:	496e      	ldr	r1, [pc, #440]	@ (800eb94 <lwip_recv_tcp+0x20c>)
 800e9da:	486d      	ldr	r0, [pc, #436]	@ (800eb90 <lwip_recv_tcp+0x208>)
 800e9dc:	f00f f910 	bl	801dc00 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	f003 0308 	and.w	r3, r3, #8
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d005      	beq.n	800e9f6 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e9ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9ee:	f043 0304 	orr.w	r3, r3, #4
 800e9f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d003      	beq.n	800ea06 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	685b      	ldr	r3, [r3, #4]
 800ea02:	617b      	str	r3, [r7, #20]
 800ea04:	e036      	b.n	800ea74 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ea0e:	f107 0114 	add.w	r1, r7, #20
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff f9e6 	bl	800dde4 <netconn_recv_tcp_pbuf_flags>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800ea1e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d019      	beq.n	800ea5a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800ea26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f300 808d 	bgt.w	800eb48 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800ea2e:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fd f88a 	bl	800bb4c <err_to_errno>
 800ea38:	61f8      	str	r0, [r7, #28]
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d002      	beq.n	800ea46 <lwip_recv_tcp+0xbe>
 800ea40:	4a55      	ldr	r2, [pc, #340]	@ (800eb98 <lwip_recv_tcp+0x210>)
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800ea46:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800ea4a:	f113 0f0f 	cmn.w	r3, #15
 800ea4e:	d101      	bne.n	800ea54 <lwip_recv_tcp+0xcc>
          return 0;
 800ea50:	2300      	movs	r3, #0
 800ea52:	e094      	b.n	800eb7e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800ea54:	f04f 33ff 	mov.w	r3, #4294967295
 800ea58:	e091      	b.n	800eb7e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d106      	bne.n	800ea6e <lwip_recv_tcp+0xe6>
 800ea60:	4b49      	ldr	r3, [pc, #292]	@ (800eb88 <lwip_recv_tcp+0x200>)
 800ea62:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800ea66:	494d      	ldr	r1, [pc, #308]	@ (800eb9c <lwip_recv_tcp+0x214>)
 800ea68:	4849      	ldr	r0, [pc, #292]	@ (800eb90 <lwip_recv_tcp+0x208>)
 800ea6a:	f00f f8c9 	bl	801dc00 <iprintf>
      sock->lastdata.pbuf = p;
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	891b      	ldrh	r3, [r3, #8]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	dd03      	ble.n	800ea88 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	891b      	ldrh	r3, [r3, #8]
 800ea84:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ea86:	e001      	b.n	800ea8c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8a:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 800ea8c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ea8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea90:	4413      	add	r3, r2
 800ea92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea94:	429a      	cmp	r2, r3
 800ea96:	dd03      	ble.n	800eaa0 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800ea98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	43db      	mvns	r3, r3
 800ea9e:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800eaa0:	6978      	ldr	r0, [r7, #20]
 800eaa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa4:	68ba      	ldr	r2, [r7, #8]
 800eaa6:	18d1      	adds	r1, r2, r3
 800eaa8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f007 fc8e 	bl	80163cc <pbuf_copy_partial>

    recvd += copylen;
 800eab0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eab4:	4413      	add	r3, r2
 800eab6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800eab8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eaba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eabc:	429a      	cmp	r2, r3
 800eabe:	da06      	bge.n	800eace <lwip_recv_tcp+0x146>
 800eac0:	4b31      	ldr	r3, [pc, #196]	@ (800eb88 <lwip_recv_tcp+0x200>)
 800eac2:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800eac6:	4936      	ldr	r1, [pc, #216]	@ (800eba0 <lwip_recv_tcp+0x218>)
 800eac8:	4831      	ldr	r0, [pc, #196]	@ (800eb90 <lwip_recv_tcp+0x208>)
 800eaca:	f00f f899 	bl	801dc00 <iprintf>
    recv_left -= copylen;
 800eace:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ead0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	f003 0301 	and.w	r3, r3, #1
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d123      	bne.n	800eb28 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	891b      	ldrh	r3, [r3, #8]
 800eae4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d906      	bls.n	800eaf8 <lwip_recv_tcp+0x170>
 800eaea:	4b27      	ldr	r3, [pc, #156]	@ (800eb88 <lwip_recv_tcp+0x200>)
 800eaec:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800eaf0:	492c      	ldr	r1, [pc, #176]	@ (800eba4 <lwip_recv_tcp+0x21c>)
 800eaf2:	4827      	ldr	r0, [pc, #156]	@ (800eb90 <lwip_recv_tcp+0x208>)
 800eaf4:	f00f f884 	bl	801dc00 <iprintf>
      if (p->tot_len - copylen > 0) {
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	891b      	ldrh	r3, [r3, #8]
 800eafc:	461a      	mov	r2, r3
 800eafe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	dd09      	ble.n	800eb1a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800eb0a:	4611      	mov	r1, r2
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f007 fa24 	bl	8015f5a <pbuf_free_header>
 800eb12:	4602      	mov	r2, r0
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	605a      	str	r2, [r3, #4]
 800eb18:	e006      	b.n	800eb28 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	4618      	mov	r0, r3
 800eb24:	f007 fa4c 	bl	8015fc0 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800eb28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb2c:	f043 0314 	orr.w	r3, r3, #20
 800eb30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800eb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	dd08      	ble.n	800eb4c <lwip_recv_tcp+0x1c4>
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	f43f af58 	beq.w	800e9f6 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800eb46:	e001      	b.n	800eb4c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800eb48:	bf00      	nop
 800eb4a:	e000      	b.n	800eb4e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800eb4c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800eb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dd0b      	ble.n	800eb6c <lwip_recv_tcp+0x1e4>
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	f003 0301 	and.w	r3, r3, #1
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb64:	4611      	mov	r1, r2
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff f88a 	bl	800dc80 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	61bb      	str	r3, [r7, #24]
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d002      	beq.n	800eb7c <lwip_recv_tcp+0x1f4>
 800eb76:	4a08      	ldr	r2, [pc, #32]	@ (800eb98 <lwip_recv_tcp+0x210>)
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	6013      	str	r3, [r2, #0]
  return recvd;
 800eb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3730      	adds	r7, #48	@ 0x30
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	0801fb84 	.word	0x0801fb84
 800eb8c:	0801fc84 	.word	0x0801fc84
 800eb90:	0801f148 	.word	0x0801f148
 800eb94:	0801fc94 	.word	0x0801fc94
 800eb98:	2000fa10 	.word	0x2000fa10
 800eb9c:	0801f914 	.word	0x0801f914
 800eba0:	0801fcb8 	.word	0x0801fcb8
 800eba4:	0801fce0 	.word	0x0801fce0

0800eba8 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800eba8:	b590      	push	{r4, r7, lr}
 800ebaa:	b08b      	sub	sp, #44	@ 0x2c
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	603b      	str	r3, [r7, #0]
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d106      	bne.n	800ebd0 <lwip_sock_make_addr+0x28>
 800ebc2:	4b2b      	ldr	r3, [pc, #172]	@ (800ec70 <lwip_sock_make_addr+0xc8>)
 800ebc4:	f240 4207 	movw	r2, #1031	@ 0x407
 800ebc8:	492a      	ldr	r1, [pc, #168]	@ (800ec74 <lwip_sock_make_addr+0xcc>)
 800ebca:	482b      	ldr	r0, [pc, #172]	@ (800ec78 <lwip_sock_make_addr+0xd0>)
 800ebcc:	f00f f818 	bl	801dc00 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d106      	bne.n	800ebe4 <lwip_sock_make_addr+0x3c>
 800ebd6:	4b26      	ldr	r3, [pc, #152]	@ (800ec70 <lwip_sock_make_addr+0xc8>)
 800ebd8:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800ebdc:	4927      	ldr	r1, [pc, #156]	@ (800ec7c <lwip_sock_make_addr+0xd4>)
 800ebde:	4826      	ldr	r0, [pc, #152]	@ (800ec78 <lwip_sock_make_addr+0xd0>)
 800ebe0:	f00f f80e 	bl	801dc00 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ebe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d106      	bne.n	800ebf8 <lwip_sock_make_addr+0x50>
 800ebea:	4b21      	ldr	r3, [pc, #132]	@ (800ec70 <lwip_sock_make_addr+0xc8>)
 800ebec:	f240 4209 	movw	r2, #1033	@ 0x409
 800ebf0:	4923      	ldr	r1, [pc, #140]	@ (800ec80 <lwip_sock_make_addr+0xd8>)
 800ebf2:	4821      	ldr	r0, [pc, #132]	@ (800ec78 <lwip_sock_make_addr+0xd0>)
 800ebf4:	f00f f804 	bl	801dc00 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ebf8:	f107 0314 	add.w	r3, r7, #20
 800ebfc:	2210      	movs	r2, #16
 800ebfe:	701a      	strb	r2, [r3, #0]
 800ec00:	f107 0314 	add.w	r3, r7, #20
 800ec04:	2202      	movs	r2, #2
 800ec06:	705a      	strb	r2, [r3, #1]
 800ec08:	f107 0414 	add.w	r4, r7, #20
 800ec0c:	88fb      	ldrh	r3, [r7, #6]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f005 fd24 	bl	801465c <lwip_htons>
 800ec14:	4603      	mov	r3, r0
 800ec16:	8063      	strh	r3, [r4, #2]
 800ec18:	f107 0314 	add.w	r3, r7, #20
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	6812      	ldr	r2, [r2, #0]
 800ec20:	605a      	str	r2, [r3, #4]
 800ec22:	f107 0314 	add.w	r3, r7, #20
 800ec26:	3308      	adds	r3, #8
 800ec28:	2208      	movs	r2, #8
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f00f f886 	bl	801dd3e <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800ec32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	7d3a      	ldrb	r2, [r7, #20]
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d202      	bcs.n	800ec42 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec40:	e008      	b.n	800ec54 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800ec42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	7d3a      	ldrb	r2, [r7, #20]
 800ec48:	4293      	cmp	r3, r2
 800ec4a:	d903      	bls.n	800ec54 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800ec4c:	7d3b      	ldrb	r3, [r7, #20]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec52:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800ec54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	f107 0314 	add.w	r3, r7, #20
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	6838      	ldr	r0, [r7, #0]
 800ec60:	f00f f911 	bl	801de86 <memcpy>
  return truncated;
 800ec64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	372c      	adds	r7, #44	@ 0x2c
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd90      	pop	{r4, r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	0801fb84 	.word	0x0801fb84
 800ec74:	0801fcf0 	.word	0x0801fcf0
 800ec78:	0801f148 	.word	0x0801f148
 800ec7c:	0801fd04 	.word	0x0801fd04
 800ec80:	0801fd14 	.word	0x0801fd14

0800ec84 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b088      	sub	sp, #32
 800ec88:	af02      	add	r7, sp, #8
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
 800ec90:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d101      	bne.n	800ec9c <lwip_recv_tcp_from+0x18>
    return 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	e021      	b.n	800ece0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d01d      	beq.n	800ecde <lwip_recv_tcp_from+0x5a>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d01a      	beq.n	800ecde <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	f107 0216 	add.w	r2, r7, #22
 800ecb0:	f107 0110 	add.w	r1, r7, #16
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f7fe fda9 	bl	800d80c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00e      	beq.n	800ecde <lwip_recv_tcp_from+0x5a>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00b      	beq.n	800ecde <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6818      	ldr	r0, [r3, #0]
 800ecca:	8afa      	ldrh	r2, [r7, #22]
 800eccc:	f107 0110 	add.w	r1, r7, #16
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	f7ff ff67 	bl	800eba8 <lwip_sock_make_addr>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	e000      	b.n	800ece0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800ecde:	2300      	movs	r3, #0
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3718      	adds	r7, #24
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b08d      	sub	sp, #52	@ 0x34
 800ecec:	af02      	add	r7, sp, #8
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
 800ecf4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	689b      	ldr	r3, [r3, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d10d      	bne.n	800ed1a <lwip_recvfrom_udp_raw+0x32>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	dd09      	ble.n	800ed1a <lwip_recvfrom_udp_raw+0x32>
 800ed06:	4b5e      	ldr	r3, [pc, #376]	@ (800ee80 <lwip_recvfrom_udp_raw+0x198>)
 800ed08:	f240 4249 	movw	r2, #1097	@ 0x449
 800ed0c:	495d      	ldr	r1, [pc, #372]	@ (800ee84 <lwip_recvfrom_udp_raw+0x19c>)
 800ed0e:	485e      	ldr	r0, [pc, #376]	@ (800ee88 <lwip_recvfrom_udp_raw+0x1a0>)
 800ed10:	f00e ff76 	bl	801dc00 <iprintf>
 800ed14:	f06f 030f 	mvn.w	r3, #15
 800ed18:	e0ad      	b.n	800ee76 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	f003 0308 	and.w	r3, r3, #8
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d003      	beq.n	800ed2c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ed24:	2304      	movs	r3, #4
 800ed26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed2a:	e002      	b.n	800ed32 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d11e      	bne.n	800ed7c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ed46:	f107 0110 	add.w	r1, r7, #16
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7ff f876 	bl	800de3c <netconn_recv_udp_raw_netbuf_flags>
 800ed50:	4603      	mov	r3, r0
 800ed52:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ed54:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d002      	beq.n	800ed62 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ed5c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed60:	e089      	b.n	800ee76 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d106      	bne.n	800ed76 <lwip_recvfrom_udp_raw+0x8e>
 800ed68:	4b45      	ldr	r3, [pc, #276]	@ (800ee80 <lwip_recvfrom_udp_raw+0x198>)
 800ed6a:	f240 425e 	movw	r2, #1118	@ 0x45e
 800ed6e:	4947      	ldr	r1, [pc, #284]	@ (800ee8c <lwip_recvfrom_udp_raw+0x1a4>)
 800ed70:	4845      	ldr	r0, [pc, #276]	@ (800ee88 <lwip_recvfrom_udp_raw+0x1a0>)
 800ed72:	f00e ff45 	bl	801dc00 <iprintf>
    sock->lastdata.netbuf = buf;
 800ed76:	693a      	ldr	r2, [r7, #16]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	891b      	ldrh	r3, [r3, #8]
 800ed82:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ed88:	2300      	movs	r3, #0
 800ed8a:	61fb      	str	r3, [r7, #28]
 800ed8c:	e029      	b.n	800ede2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ed8e:	8b3a      	ldrh	r2, [r7, #24]
 800ed90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed92:	1ad3      	subs	r3, r2, r3
 800ed94:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	689a      	ldr	r2, [r3, #8]
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	00db      	lsls	r3, r3, #3
 800ed9e:	4413      	add	r3, r2
 800eda0:	685a      	ldr	r2, [r3, #4]
 800eda2:	8afb      	ldrh	r3, [r7, #22]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d902      	bls.n	800edae <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800eda8:	8afb      	ldrh	r3, [r7, #22]
 800edaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800edac:	e006      	b.n	800edbc <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	689a      	ldr	r2, [r3, #8]
 800edb2:	69fb      	ldr	r3, [r7, #28]
 800edb4:	00db      	lsls	r3, r3, #3
 800edb6:	4413      	add	r3, r2
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	6818      	ldr	r0, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	4413      	add	r3, r2
 800edca:	6819      	ldr	r1, [r3, #0]
 800edcc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800edce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800edd0:	f007 fafc 	bl	80163cc <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800edd4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800edd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800edd8:	4413      	add	r3, r2
 800edda:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	3301      	adds	r3, #1
 800ede0:	61fb      	str	r3, [r7, #28]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68db      	ldr	r3, [r3, #12]
 800ede6:	69fa      	ldr	r2, [r7, #28]
 800ede8:	429a      	cmp	r2, r3
 800edea:	da03      	bge.n	800edf4 <lwip_recvfrom_udp_raw+0x10c>
 800edec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800edee:	8b3b      	ldrh	r3, [r7, #24]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d3cc      	bcc.n	800ed8e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d01a      	beq.n	800ee32 <lwip_recvfrom_udp_raw+0x14a>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d016      	beq.n	800ee32 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d012      	beq.n	800ee32 <lwip_recvfrom_udp_raw+0x14a>
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00e      	beq.n	800ee32 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	6818      	ldr	r0, [r3, #0]
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	f103 0108 	add.w	r1, r3, #8
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4623      	mov	r3, r4
 800ee2e:	f7ff febb 	bl	800eba8 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	691b      	ldr	r3, [r3, #16]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d007      	beq.n	800ee50 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ee40:	2300      	movs	r3, #0
 800ee42:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ee44:	7d7b      	ldrb	r3, [r7, #21]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d102      	bne.n	800ee50 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	f003 0301 	and.w	r3, r3, #1
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d106      	bne.n	800ee68 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800ee60:	693b      	ldr	r3, [r7, #16]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7ff f9a2 	bl	800e1ac <netbuf_delete>
  }
  if (datagram_len) {
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d002      	beq.n	800ee74 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	8b3a      	ldrh	r2, [r7, #24]
 800ee72:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ee74:	2300      	movs	r3, #0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	372c      	adds	r7, #44	@ 0x2c
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd90      	pop	{r4, r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	0801fb84 	.word	0x0801fb84
 800ee84:	0801fd24 	.word	0x0801fd24
 800ee88:	0801f148 	.word	0x0801f148
 800ee8c:	0801f8b8 	.word	0x0801f8b8

0800ee90 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b096      	sub	sp, #88	@ 0x58
 800ee94:	af02      	add	r7, sp, #8
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	607a      	str	r2, [r7, #4]
 800ee9c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f7ff fa54 	bl	800e34c <get_socket>
 800eea4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800eea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d102      	bne.n	800eeb2 <lwip_recvfrom+0x22>
    return -1;
 800eeac:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb0:	e078      	b.n	800efa4 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800eeb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eebc:	2b10      	cmp	r3, #16
 800eebe:	d112      	bne.n	800eee6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	68b9      	ldr	r1, [r7, #8]
 800eec6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800eec8:	f7ff fd5e 	bl	800e988 <lwip_recv_tcp>
 800eecc:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800eece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	4b35      	ldr	r3, [pc, #212]	@ (800efac <lwip_recvfrom+0x11c>)
 800eed8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eeda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eedc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800eede:	f7ff fed1 	bl	800ec84 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800eee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eee4:	e05e      	b.n	800efa4 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800eef2:	2300      	movs	r3, #0
 800eef4:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800eefa:	2300      	movs	r3, #0
 800eefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800eefe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ef02:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800ef04:	2301      	movs	r3, #1
 800ef06:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800ef08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef0a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ef0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d002      	beq.n	800ef18 <lwip_recvfrom+0x88>
 800ef12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	e000      	b.n	800ef1a <lwip_recvfrom+0x8a>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ef1c:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800ef20:	f107 0214 	add.w	r2, r7, #20
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	6839      	ldr	r1, [r7, #0]
 800ef2c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ef2e:	f7ff fedb 	bl	800ece8 <lwip_recvfrom_udp_raw>
 800ef32:	4603      	mov	r3, r0
 800ef34:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800ef38:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00e      	beq.n	800ef5e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800ef40:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fc fe01 	bl	800bb4c <err_to_errno>
 800ef4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800ef4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d002      	beq.n	800ef58 <lwip_recvfrom+0xc8>
 800ef52:	4a17      	ldr	r2, [pc, #92]	@ (800efb0 <lwip_recvfrom+0x120>)
 800ef54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef56:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800ef58:	f04f 33ff 	mov.w	r3, #4294967295
 800ef5c:	e022      	b.n	800efa4 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ef5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ef60:	461a      	mov	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4293      	cmp	r3, r2
 800ef66:	bf28      	it	cs
 800ef68:	4613      	movcs	r3, r2
 800ef6a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d206      	bcs.n	800ef80 <lwip_recvfrom+0xf0>
 800ef72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ef74:	461a      	mov	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	bf28      	it	cs
 800ef7c:	4613      	movcs	r3, r2
 800ef7e:	e001      	b.n	800ef84 <lwip_recvfrom+0xf4>
 800ef80:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ef84:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800ef86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d002      	beq.n	800ef92 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef90:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ef92:	2300      	movs	r3, #0
 800ef94:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <lwip_recvfrom+0x112>
 800ef9c:	4a04      	ldr	r2, [pc, #16]	@ (800efb0 <lwip_recvfrom+0x120>)
 800ef9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efa0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800efa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3750      	adds	r7, #80	@ 0x50
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	0801fd50 	.word	0x0801fd50
 800efb0:	2000fa10 	.word	0x2000fa10

0800efb4 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af02      	add	r7, sp, #8
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 800efc0:	2300      	movs	r3, #0
 800efc2:	9301      	str	r3, [sp, #4]
 800efc4:	2300      	movs	r3, #0
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	2300      	movs	r3, #0
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	68b9      	ldr	r1, [r7, #8]
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7ff ff5e 	bl	800ee90 <lwip_recvfrom>
 800efd4:	4603      	mov	r3, r0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
	...

0800efe0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b08a      	sub	sp, #40	@ 0x28
 800efe4:	af02      	add	r7, sp, #8
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	f7ff f9ac 	bl	800e34c <get_socket>
 800eff4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <lwip_send+0x22>
    return -1;
 800effc:	f04f 33ff 	mov.w	r3, #4294967295
 800f000:	e046      	b.n	800f090 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f00c:	2b10      	cmp	r3, #16
 800f00e:	d00b      	beq.n	800f028 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800f010:	2300      	movs	r3, #0
 800f012:	9301      	str	r3, [sp, #4]
 800f014:	2300      	movs	r3, #0
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	68b9      	ldr	r1, [r7, #8]
 800f01e:	68f8      	ldr	r0, [r7, #12]
 800f020:	f000 f83c 	bl	800f09c <lwip_sendto>
 800f024:	4603      	mov	r3, r0
 800f026:	e033      	b.n	800f090 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <lwip_send+0x56>
 800f032:	2203      	movs	r2, #3
 800f034:	e000      	b.n	800f038 <lwip_send+0x58>
 800f036:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	105b      	asrs	r3, r3, #1
 800f03c:	b25b      	sxtb	r3, r3
 800f03e:	f003 0304 	and.w	r3, r3, #4
 800f042:	b25b      	sxtb	r3, r3
 800f044:	4313      	orrs	r3, r2
 800f046:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800f048:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	6818      	ldr	r0, [r3, #0]
 800f052:	7efa      	ldrb	r2, [r7, #27]
 800f054:	f107 0310 	add.w	r3, r7, #16
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	4613      	mov	r3, r2
 800f05c:	687a      	ldr	r2, [r7, #4]
 800f05e:	68b9      	ldr	r1, [r7, #8]
 800f060:	f7fe ff46 	bl	800def0 <netconn_write_partly>
 800f064:	4603      	mov	r3, r0
 800f066:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800f068:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fc fd6d 	bl	800bb4c <err_to_errno>
 800f072:	6178      	str	r0, [r7, #20]
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d002      	beq.n	800f080 <lwip_send+0xa0>
 800f07a:	4a07      	ldr	r2, [pc, #28]	@ (800f098 <lwip_send+0xb8>)
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800f080:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d101      	bne.n	800f08c <lwip_send+0xac>
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	e001      	b.n	800f090 <lwip_send+0xb0>
 800f08c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f090:	4618      	mov	r0, r3
 800f092:	3720      	adds	r7, #32
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	2000fa10 	.word	0x2000fa10

0800f09c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b08e      	sub	sp, #56	@ 0x38
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	607a      	str	r2, [r7, #4]
 800f0a8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800f0aa:	68f8      	ldr	r0, [r7, #12]
 800f0ac:	f7ff f94e 	bl	800e34c <get_socket>
 800f0b0:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <lwip_sendto+0x22>
    return -1;
 800f0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0bc:	e093      	b.n	800f1e6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800f0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f0c8:	2b10      	cmp	r3, #16
 800f0ca:	d107      	bne.n	800f0dc <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	68b9      	ldr	r1, [r7, #8]
 800f0d2:	68f8      	ldr	r0, [r7, #12]
 800f0d4:	f7ff ff84 	bl	800efe0 <lwip_send>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	e084      	b.n	800f1e6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0e2:	d30a      	bcc.n	800f0fa <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800f0e4:	235a      	movs	r3, #90	@ 0x5a
 800f0e6:	623b      	str	r3, [r7, #32]
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d002      	beq.n	800f0f4 <lwip_sendto+0x58>
 800f0ee:	4a40      	ldr	r2, [pc, #256]	@ (800f1f0 <lwip_sendto+0x154>)
 800f0f0:	6a3b      	ldr	r3, [r7, #32]
 800f0f2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800f0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f8:	e075      	b.n	800f1e6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800f0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f100:	2b00      	cmp	r3, #0
 800f102:	d102      	bne.n	800f10a <lwip_sendto+0x6e>
 800f104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f106:	2b00      	cmp	r3, #0
 800f108:	d023      	beq.n	800f152 <lwip_sendto+0xb6>
 800f10a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f10c:	2b10      	cmp	r3, #16
 800f10e:	d10b      	bne.n	800f128 <lwip_sendto+0x8c>
 800f110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f112:	2b00      	cmp	r3, #0
 800f114:	d008      	beq.n	800f128 <lwip_sendto+0x8c>
 800f116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f118:	785b      	ldrb	r3, [r3, #1]
 800f11a:	2b02      	cmp	r3, #2
 800f11c:	d104      	bne.n	800f128 <lwip_sendto+0x8c>
 800f11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f120:	f003 0303 	and.w	r3, r3, #3
 800f124:	2b00      	cmp	r3, #0
 800f126:	d014      	beq.n	800f152 <lwip_sendto+0xb6>
 800f128:	4b32      	ldr	r3, [pc, #200]	@ (800f1f4 <lwip_sendto+0x158>)
 800f12a:	f240 6252 	movw	r2, #1618	@ 0x652
 800f12e:	4932      	ldr	r1, [pc, #200]	@ (800f1f8 <lwip_sendto+0x15c>)
 800f130:	4832      	ldr	r0, [pc, #200]	@ (800f1fc <lwip_sendto+0x160>)
 800f132:	f00e fd65 	bl	801dc00 <iprintf>
 800f136:	f06f 000f 	mvn.w	r0, #15
 800f13a:	f7fc fd07 	bl	800bb4c <err_to_errno>
 800f13e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f142:	2b00      	cmp	r3, #0
 800f144:	d002      	beq.n	800f14c <lwip_sendto+0xb0>
 800f146:	4a2a      	ldr	r2, [pc, #168]	@ (800f1f0 <lwip_sendto+0x154>)
 800f148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14a:	6013      	str	r3, [r2, #0]
 800f14c:	f04f 33ff 	mov.w	r3, #4294967295
 800f150:	e049      	b.n	800f1e6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800f152:	2300      	movs	r3, #0
 800f154:	617b      	str	r3, [r7, #20]
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800f15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00a      	beq.n	800f176 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800f160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	61bb      	str	r3, [r7, #24]
 800f166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f168:	885b      	ldrh	r3, [r3, #2]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f005 fa76 	bl	801465c <lwip_htons>
 800f170:	4603      	mov	r3, r0
 800f172:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800f174:	e003      	b.n	800f17e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800f17a:	2300      	movs	r3, #0
 800f17c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800f17e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f180:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800f182:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f184:	f107 0310 	add.w	r3, r7, #16
 800f188:	68b9      	ldr	r1, [r7, #8]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff f856 	bl	800e23c <netbuf_ref>
 800f190:	4603      	mov	r3, r0
 800f192:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800f196:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10a      	bne.n	800f1b4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800f19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f107 0210 	add.w	r2, r7, #16
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7fe fe73 	bl	800de94 <netconn_send>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800f1b4:	f107 0310 	add.w	r3, r7, #16
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7ff f817 	bl	800e1ec <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800f1be:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fc fcc2 	bl	800bb4c <err_to_errno>
 800f1c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d002      	beq.n	800f1d6 <lwip_sendto+0x13a>
 800f1d0:	4a07      	ldr	r2, [pc, #28]	@ (800f1f0 <lwip_sendto+0x154>)
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800f1d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d101      	bne.n	800f1e2 <lwip_sendto+0x146>
 800f1de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f1e0:	e001      	b.n	800f1e6 <lwip_sendto+0x14a>
 800f1e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3738      	adds	r7, #56	@ 0x38
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	2000fa10 	.word	0x2000fa10
 800f1f4:	0801fb84 	.word	0x0801fb84
 800f1f8:	0801fe54 	.word	0x0801fe54
 800f1fc:	0801f148 	.word	0x0801f148

0800f200 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b086      	sub	sp, #24
 800f204:	af00      	add	r7, sp, #0
 800f206:	60f8      	str	r0, [r7, #12]
 800f208:	60b9      	str	r1, [r7, #8]
 800f20a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	2b03      	cmp	r3, #3
 800f210:	d009      	beq.n	800f226 <lwip_socket+0x26>
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	2b03      	cmp	r3, #3
 800f216:	dc23      	bgt.n	800f260 <lwip_socket+0x60>
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d019      	beq.n	800f252 <lwip_socket+0x52>
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2b02      	cmp	r3, #2
 800f222:	d009      	beq.n	800f238 <lwip_socket+0x38>
 800f224:	e01c      	b.n	800f260 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	4a22      	ldr	r2, [pc, #136]	@ (800f2b4 <lwip_socket+0xb4>)
 800f22c:	4619      	mov	r1, r3
 800f22e:	2040      	movs	r0, #64	@ 0x40
 800f230:	f7fe fa32 	bl	800d698 <netconn_new_with_proto_and_callback>
 800f234:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f236:	e019      	b.n	800f26c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b88      	cmp	r3, #136	@ 0x88
 800f23c:	d101      	bne.n	800f242 <lwip_socket+0x42>
 800f23e:	2321      	movs	r3, #33	@ 0x21
 800f240:	e000      	b.n	800f244 <lwip_socket+0x44>
 800f242:	2320      	movs	r3, #32
 800f244:	4a1b      	ldr	r2, [pc, #108]	@ (800f2b4 <lwip_socket+0xb4>)
 800f246:	2100      	movs	r1, #0
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fe fa25 	bl	800d698 <netconn_new_with_proto_and_callback>
 800f24e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f250:	e00c      	b.n	800f26c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800f252:	4a18      	ldr	r2, [pc, #96]	@ (800f2b4 <lwip_socket+0xb4>)
 800f254:	2100      	movs	r1, #0
 800f256:	2010      	movs	r0, #16
 800f258:	f7fe fa1e 	bl	800d698 <netconn_new_with_proto_and_callback>
 800f25c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f25e:	e005      	b.n	800f26c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800f260:	4b15      	ldr	r3, [pc, #84]	@ (800f2b8 <lwip_socket+0xb8>)
 800f262:	2216      	movs	r2, #22
 800f264:	601a      	str	r2, [r3, #0]
      return -1;
 800f266:	f04f 33ff 	mov.w	r3, #4294967295
 800f26a:	e01e      	b.n	800f2aa <lwip_socket+0xaa>
  }

  if (!conn) {
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d105      	bne.n	800f27e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800f272:	4b11      	ldr	r3, [pc, #68]	@ (800f2b8 <lwip_socket+0xb8>)
 800f274:	2269      	movs	r2, #105	@ 0x69
 800f276:	601a      	str	r2, [r3, #0]
    return -1;
 800f278:	f04f 33ff 	mov.w	r3, #4294967295
 800f27c:	e015      	b.n	800f2aa <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800f27e:	2100      	movs	r1, #0
 800f280:	6978      	ldr	r0, [r7, #20]
 800f282:	f7ff f87b 	bl	800e37c <alloc_socket>
 800f286:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28e:	d108      	bne.n	800f2a2 <lwip_socket+0xa2>
    netconn_delete(conn);
 800f290:	6978      	ldr	r0, [r7, #20]
 800f292:	f7fe fa9f 	bl	800d7d4 <netconn_delete>
    set_errno(ENFILE);
 800f296:	4b08      	ldr	r3, [pc, #32]	@ (800f2b8 <lwip_socket+0xb8>)
 800f298:	2217      	movs	r2, #23
 800f29a:	601a      	str	r2, [r3, #0]
    return -1;
 800f29c:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a0:	e003      	b.n	800f2aa <lwip_socket+0xaa>
  }
  conn->socket = i;
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	693a      	ldr	r2, [r7, #16]
 800f2a6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800f2a8:	693b      	ldr	r3, [r7, #16]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3718      	adds	r7, #24
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	0800f365 	.word	0x0800f365
 800f2b8:	2000fa10 	.word	0x2000fa10

0800f2bc <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	68b9      	ldr	r1, [r7, #8]
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	f7ff fe86 	bl	800efe0 <lwip_send>
 800f2d4:	4603      	mov	r3, r0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3710      	adds	r7, #16
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	b087      	sub	sp, #28
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	60f8      	str	r0, [r7, #12]
 800f2e6:	60b9      	str	r1, [r7, #8]
 800f2e8:	607a      	str	r2, [r7, #4]
 800f2ea:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	617b      	str	r3, [r7, #20]
 800f2f0:	e02c      	b.n	800f34c <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	695a      	ldr	r2, [r3, #20]
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	00db      	lsls	r3, r3, #3
 800f2fa:	4413      	add	r3, r2
 800f2fc:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	429a      	cmp	r2, r3
 800f306:	d11e      	bne.n	800f346 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d009      	beq.n	800f322 <lwip_poll_should_wake+0x44>
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f314:	b29b      	uxth	r3, r3
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <lwip_poll_should_wake+0x44>
        return 1;
 800f31e:	2301      	movs	r3, #1
 800f320:	e01a      	b.n	800f358 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d009      	beq.n	800f33c <lwip_poll_should_wake+0x5e>
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	f003 0302 	and.w	r3, r3, #2
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <lwip_poll_should_wake+0x5e>
        return 1;
 800f338:	2301      	movs	r3, #1
 800f33a:	e00d      	b.n	800f358 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800f33c:	6a3b      	ldr	r3, [r7, #32]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d001      	beq.n	800f346 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800f342:	2301      	movs	r3, #1
 800f344:	e008      	b.n	800f358 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	3301      	adds	r3, #1
 800f34a:	617b      	str	r3, [r7, #20]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	699b      	ldr	r3, [r3, #24]
 800f350:	697a      	ldr	r2, [r7, #20]
 800f352:	429a      	cmp	r2, r3
 800f354:	d3cd      	bcc.n	800f2f2 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800f356:	2300      	movs	r3, #0
}
 800f358:	4618      	mov	r0, r3
 800f35a:	371c      	adds	r7, #28
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08a      	sub	sp, #40	@ 0x28
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	460b      	mov	r3, r1
 800f36e:	70fb      	strb	r3, [r7, #3]
 800f370:	4613      	mov	r3, r2
 800f372:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 80a4 	beq.w	800f4c4 <event_callback+0x160>
    s = conn->socket;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	699b      	ldr	r3, [r3, #24]
 800f380:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800f382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f384:	2b00      	cmp	r3, #0
 800f386:	da18      	bge.n	800f3ba <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800f388:	f00e fad4 	bl	801d934 <sys_arch_protect>
 800f38c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	699b      	ldr	r3, [r3, #24]
 800f392:	2b00      	cmp	r3, #0
 800f394:	da0b      	bge.n	800f3ae <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800f396:	78fb      	ldrb	r3, [r7, #3]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d104      	bne.n	800f3a6 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	699b      	ldr	r3, [r3, #24]
 800f3a0:	1e5a      	subs	r2, r3, #1
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800f3a6:	69f8      	ldr	r0, [r7, #28]
 800f3a8:	f00e fad2 	bl	801d950 <sys_arch_unprotect>
        return;
 800f3ac:	e08d      	b.n	800f4ca <event_callback+0x166>
      }
      s = conn->socket;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	699b      	ldr	r3, [r3, #24]
 800f3b2:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800f3b4:	69f8      	ldr	r0, [r7, #28]
 800f3b6:	f00e facb 	bl	801d950 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800f3ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3bc:	f7fe ffc6 	bl	800e34c <get_socket>
 800f3c0:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d07f      	beq.n	800f4c8 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800f3cc:	f00e fab2 	bl	801d934 <sys_arch_protect>
 800f3d0:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800f3d2:	78fb      	ldrb	r3, [r7, #3]
 800f3d4:	2b04      	cmp	r3, #4
 800f3d6:	d83e      	bhi.n	800f456 <event_callback+0xf2>
 800f3d8:	a201      	add	r2, pc, #4	@ (adr r2, 800f3e0 <event_callback+0x7c>)
 800f3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3de:	bf00      	nop
 800f3e0:	0800f3f5 	.word	0x0800f3f5
 800f3e4:	0800f417 	.word	0x0800f417
 800f3e8:	0800f42f 	.word	0x0800f42f
 800f3ec:	0800f443 	.word	0x0800f443
 800f3f0:	0800f44f 	.word	0x0800f44f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	b21a      	sxth	r2, r3
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	dd2a      	ble.n	800f466 <event_callback+0x102>
        check_waiters = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	623b      	str	r3, [r7, #32]
      }
      break;
 800f414:	e027      	b.n	800f466 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f41c:	b29b      	uxth	r3, r3
 800f41e:	3b01      	subs	r3, #1
 800f420:	b29b      	uxth	r3, r3
 800f422:	b21a      	sxth	r2, r3
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800f428:	2300      	movs	r3, #0
 800f42a:	623b      	str	r3, [r7, #32]
      break;
 800f42c:	e01c      	b.n	800f468 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	895b      	ldrh	r3, [r3, #10]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <event_callback+0xd6>
        check_waiters = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800f43a:	69bb      	ldr	r3, [r7, #24]
 800f43c:	2201      	movs	r2, #1
 800f43e:	815a      	strh	r2, [r3, #10]
      break;
 800f440:	e012      	b.n	800f468 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	2200      	movs	r2, #0
 800f446:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	623b      	str	r3, [r7, #32]
      break;
 800f44c:	e00c      	b.n	800f468 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	2201      	movs	r2, #1
 800f452:	819a      	strh	r2, [r3, #12]
      break;
 800f454:	e008      	b.n	800f468 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800f456:	4b1e      	ldr	r3, [pc, #120]	@ (800f4d0 <event_callback+0x16c>)
 800f458:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800f45c:	491d      	ldr	r1, [pc, #116]	@ (800f4d4 <event_callback+0x170>)
 800f45e:	481e      	ldr	r0, [pc, #120]	@ (800f4d8 <event_callback+0x174>)
 800f460:	f00e fbce 	bl	801dc00 <iprintf>
      break;
 800f464:	e000      	b.n	800f468 <event_callback+0x104>
      break;
 800f466:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	7b9b      	ldrb	r3, [r3, #14]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d025      	beq.n	800f4bc <event_callback+0x158>
 800f470:	6a3b      	ldr	r3, [r7, #32]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d022      	beq.n	800f4bc <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	bfcc      	ite	gt
 800f480:	2301      	movgt	r3, #1
 800f482:	2300      	movle	r3, #0
 800f484:	b2db      	uxtb	r3, r3
 800f486:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800f488:	69bb      	ldr	r3, [r7, #24]
 800f48a:	895b      	ldrh	r3, [r3, #10]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	bf14      	ite	ne
 800f490:	2301      	movne	r3, #1
 800f492:	2300      	moveq	r3, #0
 800f494:	b2db      	uxtb	r3, r3
 800f496:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	899b      	ldrh	r3, [r3, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	bf14      	ite	ne
 800f4a0:	2301      	movne	r3, #1
 800f4a2:	2300      	moveq	r3, #0
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800f4a8:	69f8      	ldr	r0, [r7, #28]
 800f4aa:	f00e fa51 	bl	801d950 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	693a      	ldr	r2, [r7, #16]
 800f4b2:	6979      	ldr	r1, [r7, #20]
 800f4b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f4b6:	f000 f811 	bl	800f4dc <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800f4ba:	e006      	b.n	800f4ca <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800f4bc:	69f8      	ldr	r0, [r7, #28]
 800f4be:	f00e fa47 	bl	801d950 <sys_arch_unprotect>
 800f4c2:	e002      	b.n	800f4ca <event_callback+0x166>
    return;
 800f4c4:	bf00      	nop
 800f4c6:	e000      	b.n	800f4ca <event_callback+0x166>
      return;
 800f4c8:	bf00      	nop
  }
  done_socket(sock);
}
 800f4ca:	3728      	adds	r7, #40	@ 0x28
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}
 800f4d0:	0801fb84 	.word	0x0801fb84
 800f4d4:	0801fef0 	.word	0x0801fef0
 800f4d8:	0801f148 	.word	0x0801f148

0800f4dc <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b088      	sub	sp, #32
 800f4e0:	af02      	add	r7, sp, #8
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]
 800f4e8:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f4ea:	4b42      	ldr	r3, [pc, #264]	@ (800f5f4 <select_check_waiters+0x118>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	617b      	str	r3, [r7, #20]
 800f4f0:	e078      	b.n	800f5e4 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	69db      	ldr	r3, [r3, #28]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d171      	bne.n	800f5de <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d009      	beq.n	800f51a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	68f9      	ldr	r1, [r7, #12]
 800f510:	6978      	ldr	r0, [r7, #20]
 800f512:	f7ff fee4 	bl	800f2de <lwip_poll_should_wake>
 800f516:	6138      	str	r0, [r7, #16]
 800f518:	e056      	b.n	800f5c8 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d017      	beq.n	800f550 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d013      	beq.n	800f550 <select_check_waiters+0x74>
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	689a      	ldr	r2, [r3, #8]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	da00      	bge.n	800f534 <select_check_waiters+0x58>
 800f532:	331f      	adds	r3, #31
 800f534:	115b      	asrs	r3, r3, #5
 800f536:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f003 031f 	and.w	r3, r3, #31
 800f540:	fa22 f303 	lsr.w	r3, r2, r3
 800f544:	f003 0301 	and.w	r3, r3, #1
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d001      	beq.n	800f550 <select_check_waiters+0x74>
            do_signal = 1;
 800f54c:	2301      	movs	r3, #1
 800f54e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d01a      	beq.n	800f58c <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d117      	bne.n	800f58c <select_check_waiters+0xb0>
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d013      	beq.n	800f58c <select_check_waiters+0xb0>
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	68da      	ldr	r2, [r3, #12]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	da00      	bge.n	800f570 <select_check_waiters+0x94>
 800f56e:	331f      	adds	r3, #31
 800f570:	115b      	asrs	r3, r3, #5
 800f572:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f003 031f 	and.w	r3, r3, #31
 800f57c:	fa22 f303 	lsr.w	r3, r2, r3
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	2b00      	cmp	r3, #0
 800f586:	d001      	beq.n	800f58c <select_check_waiters+0xb0>
            do_signal = 1;
 800f588:	2301      	movs	r3, #1
 800f58a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d01a      	beq.n	800f5c8 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d117      	bne.n	800f5c8 <select_check_waiters+0xec>
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d013      	beq.n	800f5c8 <select_check_waiters+0xec>
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	691a      	ldr	r2, [r3, #16]
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	da00      	bge.n	800f5ac <select_check_waiters+0xd0>
 800f5aa:	331f      	adds	r3, #31
 800f5ac:	115b      	asrs	r3, r3, #5
 800f5ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f003 031f 	and.w	r3, r3, #31
 800f5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800f5bc:	f003 0301 	and.w	r3, r3, #1
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d001      	beq.n	800f5c8 <select_check_waiters+0xec>
            do_signal = 1;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d007      	beq.n	800f5de <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800f5ce:	697b      	ldr	r3, [r7, #20]
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	3320      	adds	r3, #32
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f00e f915 	bl	801d808 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	617b      	str	r3, [r7, #20]
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d183      	bne.n	800f4f2 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800f5ea:	bf00      	nop
 800f5ec:	bf00      	nop
 800f5ee:	3718      	adds	r7, #24
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	20008700 	.word	0x20008700

0800f5f8 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b086      	sub	sp, #24
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7fe fea3 	bl	800e34c <get_socket>
 800f606:	6138      	str	r0, [r7, #16]
  int i;

  if (!sock) {
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d04e      	beq.n	800f6ac <lwip_socket_drop_registered_memberships+0xb4>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f60e:	2300      	movs	r3, #0
 800f610:	617b      	str	r3, [r7, #20]
 800f612:	e047      	b.n	800f6a4 <lwip_socket_drop_registered_memberships+0xac>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
 800f614:	4927      	ldr	r1, [pc, #156]	@ (800f6b4 <lwip_socket_drop_registered_memberships+0xbc>)
 800f616:	697a      	ldr	r2, [r7, #20]
 800f618:	4613      	mov	r3, r2
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	4413      	add	r3, r2
 800f61e:	009b      	lsls	r3, r3, #2
 800f620:	440b      	add	r3, r1
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	429a      	cmp	r2, r3
 800f628:	d139      	bne.n	800f69e <lwip_socket_drop_registered_memberships+0xa6>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
 800f62a:	4922      	ldr	r1, [pc, #136]	@ (800f6b4 <lwip_socket_drop_registered_memberships+0xbc>)
 800f62c:	697a      	ldr	r2, [r7, #20]
 800f62e:	4613      	mov	r3, r2
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	4413      	add	r3, r2
 800f634:	009b      	lsls	r3, r3, #2
 800f636:	440b      	add	r3, r1
 800f638:	3308      	adds	r3, #8
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	60fb      	str	r3, [r7, #12]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
 800f63e:	491d      	ldr	r1, [pc, #116]	@ (800f6b4 <lwip_socket_drop_registered_memberships+0xbc>)
 800f640:	697a      	ldr	r2, [r7, #20]
 800f642:	4613      	mov	r3, r2
 800f644:	005b      	lsls	r3, r3, #1
 800f646:	4413      	add	r3, r2
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	440b      	add	r3, r1
 800f64c:	3304      	adds	r3, #4
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	60bb      	str	r3, [r7, #8]
      socket_ipv4_multicast_memberships[i].sock = NULL;
 800f652:	4918      	ldr	r1, [pc, #96]	@ (800f6b4 <lwip_socket_drop_registered_memberships+0xbc>)
 800f654:	697a      	ldr	r2, [r7, #20]
 800f656:	4613      	mov	r3, r2
 800f658:	005b      	lsls	r3, r3, #1
 800f65a:	4413      	add	r3, r2
 800f65c:	009b      	lsls	r3, r3, #2
 800f65e:	440b      	add	r3, r1
 800f660:	2200      	movs	r2, #0
 800f662:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
 800f664:	4913      	ldr	r1, [pc, #76]	@ (800f6b4 <lwip_socket_drop_registered_memberships+0xbc>)
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	4613      	mov	r3, r2
 800f66a:	005b      	lsls	r3, r3, #1
 800f66c:	4413      	add	r3, r2
 800f66e:	009b      	lsls	r3, r3, #2
 800f670:	440b      	add	r3, r1
 800f672:	3304      	adds	r3, #4
 800f674:	2200      	movs	r2, #0
 800f676:	601a      	str	r2, [r3, #0]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
 800f678:	490e      	ldr	r1, [pc, #56]	@ (800f6b4 <lwip_socket_drop_registered_memberships+0xbc>)
 800f67a:	697a      	ldr	r2, [r7, #20]
 800f67c:	4613      	mov	r3, r2
 800f67e:	005b      	lsls	r3, r3, #1
 800f680:	4413      	add	r3, r2
 800f682:	009b      	lsls	r3, r3, #2
 800f684:	440b      	add	r3, r1
 800f686:	3308      	adds	r3, #8
 800f688:	2200      	movs	r2, #0
 800f68a:	601a      	str	r2, [r3, #0]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	6818      	ldr	r0, [r3, #0]
 800f690:	f107 0208 	add.w	r2, r7, #8
 800f694:	f107 010c 	add.w	r1, r7, #12
 800f698:	2301      	movs	r3, #1
 800f69a:	f7fe fd47 	bl	800e12c <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	617b      	str	r3, [r7, #20]
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2b03      	cmp	r3, #3
 800f6a8:	ddb4      	ble.n	800f614 <lwip_socket_drop_registered_memberships+0x1c>
 800f6aa:	e000      	b.n	800f6ae <lwip_socket_drop_registered_memberships+0xb6>
    return;
 800f6ac:	bf00      	nop
    }
  }
  done_socket(sock);
}
 800f6ae:	3718      	adds	r7, #24
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	20008690 	.word	0x20008690

0800f6b8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f6c2:	f00d f8f1 	bl	801c8a8 <sys_timeouts_sleeptime>
 800f6c6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ce:	d10b      	bne.n	800f6e8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f6d0:	4813      	ldr	r0, [pc, #76]	@ (800f720 <tcpip_timeouts_mbox_fetch+0x68>)
 800f6d2:	f00e f902 	bl	801d8da <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	6839      	ldr	r1, [r7, #0]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f00d ffd8 	bl	801d690 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f6e0:	480f      	ldr	r0, [pc, #60]	@ (800f720 <tcpip_timeouts_mbox_fetch+0x68>)
 800f6e2:	f00e f8eb 	bl	801d8bc <sys_mutex_lock>
    return;
 800f6e6:	e018      	b.n	800f71a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d102      	bne.n	800f6f4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f6ee:	f00d f8a1 	bl	801c834 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f6f2:	e7e6      	b.n	800f6c2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f6f4:	480a      	ldr	r0, [pc, #40]	@ (800f720 <tcpip_timeouts_mbox_fetch+0x68>)
 800f6f6:	f00e f8f0 	bl	801d8da <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	6839      	ldr	r1, [r7, #0]
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f00d ffc6 	bl	801d690 <sys_arch_mbox_fetch>
 800f704:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f706:	4806      	ldr	r0, [pc, #24]	@ (800f720 <tcpip_timeouts_mbox_fetch+0x68>)
 800f708:	f00e f8d8 	bl	801d8bc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f712:	d102      	bne.n	800f71a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f714:	f00d f88e 	bl	801c834 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f718:	e7d3      	b.n	800f6c2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	20008710 	.word	0x20008710

0800f724 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b084      	sub	sp, #16
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f72c:	4810      	ldr	r0, [pc, #64]	@ (800f770 <tcpip_thread+0x4c>)
 800f72e:	f00e f8c5 	bl	801d8bc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f732:	4b10      	ldr	r3, [pc, #64]	@ (800f774 <tcpip_thread+0x50>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d005      	beq.n	800f746 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f73a:	4b0e      	ldr	r3, [pc, #56]	@ (800f774 <tcpip_thread+0x50>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4a0e      	ldr	r2, [pc, #56]	@ (800f778 <tcpip_thread+0x54>)
 800f740:	6812      	ldr	r2, [r2, #0]
 800f742:	4610      	mov	r0, r2
 800f744:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f746:	f107 030c 	add.w	r3, r7, #12
 800f74a:	4619      	mov	r1, r3
 800f74c:	480b      	ldr	r0, [pc, #44]	@ (800f77c <tcpip_thread+0x58>)
 800f74e:	f7ff ffb3 	bl	800f6b8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f758:	4b09      	ldr	r3, [pc, #36]	@ (800f780 <tcpip_thread+0x5c>)
 800f75a:	2291      	movs	r2, #145	@ 0x91
 800f75c:	4909      	ldr	r1, [pc, #36]	@ (800f784 <tcpip_thread+0x60>)
 800f75e:	480a      	ldr	r0, [pc, #40]	@ (800f788 <tcpip_thread+0x64>)
 800f760:	f00e fa4e 	bl	801dc00 <iprintf>
      continue;
 800f764:	e003      	b.n	800f76e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	4618      	mov	r0, r3
 800f76a:	f000 f80f 	bl	800f78c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f76e:	e7ea      	b.n	800f746 <tcpip_thread+0x22>
 800f770:	20008710 	.word	0x20008710
 800f774:	20008704 	.word	0x20008704
 800f778:	20008708 	.word	0x20008708
 800f77c:	2000870c 	.word	0x2000870c
 800f780:	0801ff44 	.word	0x0801ff44
 800f784:	0801ffa4 	.word	0x0801ffa4
 800f788:	0801ffc4 	.word	0x0801ffc4

0800f78c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d026      	beq.n	800f7ea <tcpip_thread_handle_msg+0x5e>
 800f79c:	2b02      	cmp	r3, #2
 800f79e:	dc2b      	bgt.n	800f7f8 <tcpip_thread_handle_msg+0x6c>
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d002      	beq.n	800f7aa <tcpip_thread_handle_msg+0x1e>
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d015      	beq.n	800f7d4 <tcpip_thread_handle_msg+0x48>
 800f7a8:	e026      	b.n	800f7f8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	687a      	ldr	r2, [r7, #4]
 800f7b0:	6850      	ldr	r0, [r2, #4]
 800f7b2:	687a      	ldr	r2, [r7, #4]
 800f7b4:	6892      	ldr	r2, [r2, #8]
 800f7b6:	4611      	mov	r1, r2
 800f7b8:	4798      	blx	r3
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d004      	beq.n	800f7ca <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f006 fbfb 	bl	8015fc0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f7ca:	6879      	ldr	r1, [r7, #4]
 800f7cc:	2009      	movs	r0, #9
 800f7ce:	f005 fcff 	bl	80151d0 <memp_free>
      break;
 800f7d2:	e018      	b.n	800f806 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	6892      	ldr	r2, [r2, #8]
 800f7dc:	4610      	mov	r0, r2
 800f7de:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f7e0:	6879      	ldr	r1, [r7, #4]
 800f7e2:	2008      	movs	r0, #8
 800f7e4:	f005 fcf4 	bl	80151d0 <memp_free>
      break;
 800f7e8:	e00d      	b.n	800f806 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	6892      	ldr	r2, [r2, #8]
 800f7f2:	4610      	mov	r0, r2
 800f7f4:	4798      	blx	r3
      break;
 800f7f6:	e006      	b.n	800f806 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f7f8:	4b05      	ldr	r3, [pc, #20]	@ (800f810 <tcpip_thread_handle_msg+0x84>)
 800f7fa:	22cf      	movs	r2, #207	@ 0xcf
 800f7fc:	4905      	ldr	r1, [pc, #20]	@ (800f814 <tcpip_thread_handle_msg+0x88>)
 800f7fe:	4806      	ldr	r0, [pc, #24]	@ (800f818 <tcpip_thread_handle_msg+0x8c>)
 800f800:	f00e f9fe 	bl	801dc00 <iprintf>
      break;
 800f804:	bf00      	nop
  }
}
 800f806:	bf00      	nop
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	0801ff44 	.word	0x0801ff44
 800f814:	0801ffa4 	.word	0x0801ffa4
 800f818:	0801ffc4 	.word	0x0801ffc4

0800f81c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b086      	sub	sp, #24
 800f820:	af00      	add	r7, sp, #0
 800f822:	60f8      	str	r0, [r7, #12]
 800f824:	60b9      	str	r1, [r7, #8]
 800f826:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f828:	481a      	ldr	r0, [pc, #104]	@ (800f894 <tcpip_inpkt+0x78>)
 800f82a:	f00d ff79 	bl	801d720 <sys_mbox_valid>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d105      	bne.n	800f840 <tcpip_inpkt+0x24>
 800f834:	4b18      	ldr	r3, [pc, #96]	@ (800f898 <tcpip_inpkt+0x7c>)
 800f836:	22fc      	movs	r2, #252	@ 0xfc
 800f838:	4918      	ldr	r1, [pc, #96]	@ (800f89c <tcpip_inpkt+0x80>)
 800f83a:	4819      	ldr	r0, [pc, #100]	@ (800f8a0 <tcpip_inpkt+0x84>)
 800f83c:	f00e f9e0 	bl	801dc00 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f840:	2009      	movs	r0, #9
 800f842:	f005 fc4f 	bl	80150e4 <memp_malloc>
 800f846:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d102      	bne.n	800f854 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f84e:	f04f 33ff 	mov.w	r3, #4294967295
 800f852:	e01a      	b.n	800f88a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f854:	697b      	ldr	r3, [r7, #20]
 800f856:	2200      	movs	r2, #0
 800f858:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	68fa      	ldr	r2, [r7, #12]
 800f85e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f86c:	6979      	ldr	r1, [r7, #20]
 800f86e:	4809      	ldr	r0, [pc, #36]	@ (800f894 <tcpip_inpkt+0x78>)
 800f870:	f00d fef4 	bl	801d65c <sys_mbox_trypost>
 800f874:	4603      	mov	r3, r0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d006      	beq.n	800f888 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f87a:	6979      	ldr	r1, [r7, #20]
 800f87c:	2009      	movs	r0, #9
 800f87e:	f005 fca7 	bl	80151d0 <memp_free>
    return ERR_MEM;
 800f882:	f04f 33ff 	mov.w	r3, #4294967295
 800f886:	e000      	b.n	800f88a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f888:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3718      	adds	r7, #24
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	2000870c 	.word	0x2000870c
 800f898:	0801ff44 	.word	0x0801ff44
 800f89c:	0801ffec 	.word	0x0801ffec
 800f8a0:	0801ffc4 	.word	0x0801ffc4

0800f8a4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800f8b4:	f003 0318 	and.w	r3, r3, #24
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d006      	beq.n	800f8ca <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f8bc:	4a08      	ldr	r2, [pc, #32]	@ (800f8e0 <tcpip_input+0x3c>)
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f7ff ffab 	bl	800f81c <tcpip_inpkt>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	e005      	b.n	800f8d6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f8ca:	4a06      	ldr	r2, [pc, #24]	@ (800f8e4 <tcpip_input+0x40>)
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7ff ffa4 	bl	800f81c <tcpip_inpkt>
 800f8d4:	4603      	mov	r3, r0
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	0801d459 	.word	0x0801d459
 800f8e4:	080133cd 	.word	0x080133cd

0800f8e8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f8f2:	4819      	ldr	r0, [pc, #100]	@ (800f958 <tcpip_try_callback+0x70>)
 800f8f4:	f00d ff14 	bl	801d720 <sys_mbox_valid>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d106      	bne.n	800f90c <tcpip_try_callback+0x24>
 800f8fe:	4b17      	ldr	r3, [pc, #92]	@ (800f95c <tcpip_try_callback+0x74>)
 800f900:	f240 125d 	movw	r2, #349	@ 0x15d
 800f904:	4916      	ldr	r1, [pc, #88]	@ (800f960 <tcpip_try_callback+0x78>)
 800f906:	4817      	ldr	r0, [pc, #92]	@ (800f964 <tcpip_try_callback+0x7c>)
 800f908:	f00e f97a 	bl	801dc00 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f90c:	2008      	movs	r0, #8
 800f90e:	f005 fbe9 	bl	80150e4 <memp_malloc>
 800f912:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d102      	bne.n	800f920 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f91a:	f04f 33ff 	mov.w	r3, #4294967295
 800f91e:	e017      	b.n	800f950 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2201      	movs	r2, #1
 800f924:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f932:	68f9      	ldr	r1, [r7, #12]
 800f934:	4808      	ldr	r0, [pc, #32]	@ (800f958 <tcpip_try_callback+0x70>)
 800f936:	f00d fe91 	bl	801d65c <sys_mbox_trypost>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d006      	beq.n	800f94e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f940:	68f9      	ldr	r1, [r7, #12]
 800f942:	2008      	movs	r0, #8
 800f944:	f005 fc44 	bl	80151d0 <memp_free>
    return ERR_MEM;
 800f948:	f04f 33ff 	mov.w	r3, #4294967295
 800f94c:	e000      	b.n	800f950 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3710      	adds	r7, #16
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}
 800f958:	2000870c 	.word	0x2000870c
 800f95c:	0801ff44 	.word	0x0801ff44
 800f960:	0801ffec 	.word	0x0801ffec
 800f964:	0801ffc4 	.word	0x0801ffc4

0800f968 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f974:	4806      	ldr	r0, [pc, #24]	@ (800f990 <tcpip_send_msg_wait_sem+0x28>)
 800f976:	f00d ffa1 	bl	801d8bc <sys_mutex_lock>
  fn(apimsg);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	68b8      	ldr	r0, [r7, #8]
 800f97e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f980:	4803      	ldr	r0, [pc, #12]	@ (800f990 <tcpip_send_msg_wait_sem+0x28>)
 800f982:	f00d ffaa 	bl	801d8da <sys_mutex_unlock>
  return ERR_OK;
 800f986:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3710      	adds	r7, #16
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	20008710 	.word	0x20008710

0800f994 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800f99e:	4808      	ldr	r0, [pc, #32]	@ (800f9c0 <tcpip_api_call+0x2c>)
 800f9a0:	f00d ff8c 	bl	801d8bc <sys_mutex_lock>
  err = fn(call);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6838      	ldr	r0, [r7, #0]
 800f9a8:	4798      	blx	r3
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800f9ae:	4804      	ldr	r0, [pc, #16]	@ (800f9c0 <tcpip_api_call+0x2c>)
 800f9b0:	f00d ff93 	bl	801d8da <sys_mutex_unlock>
  return err;
 800f9b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3710      	adds	r7, #16
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	20008710 	.word	0x20008710

0800f9c4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af02      	add	r7, sp, #8
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f9ce:	f004 fee2 	bl	8014796 <lwip_init>

  tcpip_init_done = initfunc;
 800f9d2:	4a17      	ldr	r2, [pc, #92]	@ (800fa30 <tcpip_init+0x6c>)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f9d8:	4a16      	ldr	r2, [pc, #88]	@ (800fa34 <tcpip_init+0x70>)
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f9de:	2106      	movs	r1, #6
 800f9e0:	4815      	ldr	r0, [pc, #84]	@ (800fa38 <tcpip_init+0x74>)
 800f9e2:	f00d fe0f 	bl	801d604 <sys_mbox_new>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d006      	beq.n	800f9fa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f9ec:	4b13      	ldr	r3, [pc, #76]	@ (800fa3c <tcpip_init+0x78>)
 800f9ee:	f240 2261 	movw	r2, #609	@ 0x261
 800f9f2:	4913      	ldr	r1, [pc, #76]	@ (800fa40 <tcpip_init+0x7c>)
 800f9f4:	4813      	ldr	r0, [pc, #76]	@ (800fa44 <tcpip_init+0x80>)
 800f9f6:	f00e f903 	bl	801dc00 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f9fa:	4813      	ldr	r0, [pc, #76]	@ (800fa48 <tcpip_init+0x84>)
 800f9fc:	f00d ff48 	bl	801d890 <sys_mutex_new>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d006      	beq.n	800fa14 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800fa06:	4b0d      	ldr	r3, [pc, #52]	@ (800fa3c <tcpip_init+0x78>)
 800fa08:	f240 2265 	movw	r2, #613	@ 0x265
 800fa0c:	490f      	ldr	r1, [pc, #60]	@ (800fa4c <tcpip_init+0x88>)
 800fa0e:	480d      	ldr	r0, [pc, #52]	@ (800fa44 <tcpip_init+0x80>)
 800fa10:	f00e f8f6 	bl	801dc00 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800fa14:	2328      	movs	r3, #40	@ 0x28
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	490c      	ldr	r1, [pc, #48]	@ (800fa50 <tcpip_init+0x8c>)
 800fa20:	480c      	ldr	r0, [pc, #48]	@ (800fa54 <tcpip_init+0x90>)
 800fa22:	f00d ff67 	bl	801d8f4 <sys_thread_new>
}
 800fa26:	bf00      	nop
 800fa28:	3708      	adds	r7, #8
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	20008704 	.word	0x20008704
 800fa34:	20008708 	.word	0x20008708
 800fa38:	2000870c 	.word	0x2000870c
 800fa3c:	0801ff44 	.word	0x0801ff44
 800fa40:	0801fffc 	.word	0x0801fffc
 800fa44:	0801ffc4 	.word	0x0801ffc4
 800fa48:	20008710 	.word	0x20008710
 800fa4c:	08020020 	.word	0x08020020
 800fa50:	0800f725 	.word	0x0800f725
 800fa54:	08020044 	.word	0x08020044

0800fa58 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fa5c:	4b20      	ldr	r3, [pc, #128]	@ (800fae0 <dhcp_inc_pcb_refcount+0x88>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d133      	bne.n	800facc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fa64:	4b1f      	ldr	r3, [pc, #124]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d005      	beq.n	800fa78 <dhcp_inc_pcb_refcount+0x20>
 800fa6c:	4b1e      	ldr	r3, [pc, #120]	@ (800fae8 <dhcp_inc_pcb_refcount+0x90>)
 800fa6e:	22e5      	movs	r2, #229	@ 0xe5
 800fa70:	491e      	ldr	r1, [pc, #120]	@ (800faec <dhcp_inc_pcb_refcount+0x94>)
 800fa72:	481f      	ldr	r0, [pc, #124]	@ (800faf0 <dhcp_inc_pcb_refcount+0x98>)
 800fa74:	f00e f8c4 	bl	801dc00 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fa78:	f00d fc96 	bl	801d3a8 <udp_new>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	4a19      	ldr	r2, [pc, #100]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa80:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800fa82:	4b18      	ldr	r3, [pc, #96]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d102      	bne.n	800fa90 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8e:	e024      	b.n	800fada <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fa90:	4b14      	ldr	r3, [pc, #80]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	7a5a      	ldrb	r2, [r3, #9]
 800fa96:	4b13      	ldr	r3, [pc, #76]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f042 0220 	orr.w	r2, r2, #32
 800fa9e:	b2d2      	uxtb	r2, r2
 800faa0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800faa2:	4b10      	ldr	r3, [pc, #64]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2244      	movs	r2, #68	@ 0x44
 800faa8:	4912      	ldr	r1, [pc, #72]	@ (800faf4 <dhcp_inc_pcb_refcount+0x9c>)
 800faaa:	4618      	mov	r0, r3
 800faac:	f00d fb24 	bl	801d0f8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800fab0:	4b0c      	ldr	r3, [pc, #48]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2243      	movs	r2, #67	@ 0x43
 800fab6:	490f      	ldr	r1, [pc, #60]	@ (800faf4 <dhcp_inc_pcb_refcount+0x9c>)
 800fab8:	4618      	mov	r0, r3
 800faba:	f00d fba5 	bl	801d208 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800fabe:	4b09      	ldr	r3, [pc, #36]	@ (800fae4 <dhcp_inc_pcb_refcount+0x8c>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	2200      	movs	r2, #0
 800fac4:	490c      	ldr	r1, [pc, #48]	@ (800faf8 <dhcp_inc_pcb_refcount+0xa0>)
 800fac6:	4618      	mov	r0, r3
 800fac8:	f00d fc0c 	bl	801d2e4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800facc:	4b04      	ldr	r3, [pc, #16]	@ (800fae0 <dhcp_inc_pcb_refcount+0x88>)
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	3301      	adds	r3, #1
 800fad2:	b2da      	uxtb	r2, r3
 800fad4:	4b02      	ldr	r3, [pc, #8]	@ (800fae0 <dhcp_inc_pcb_refcount+0x88>)
 800fad6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fad8:	2300      	movs	r3, #0
}
 800fada:	4618      	mov	r0, r3
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	20008740 	.word	0x20008740
 800fae4:	2000873c 	.word	0x2000873c
 800fae8:	0802004c 	.word	0x0802004c
 800faec:	080200b4 	.word	0x080200b4
 800faf0:	080200dc 	.word	0x080200dc
 800faf4:	08023abc 	.word	0x08023abc
 800faf8:	08011385 	.word	0x08011385

0800fafc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fb00:	4b0e      	ldr	r3, [pc, #56]	@ (800fb3c <dhcp_dec_pcb_refcount+0x40>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d105      	bne.n	800fb14 <dhcp_dec_pcb_refcount+0x18>
 800fb08:	4b0d      	ldr	r3, [pc, #52]	@ (800fb40 <dhcp_dec_pcb_refcount+0x44>)
 800fb0a:	22ff      	movs	r2, #255	@ 0xff
 800fb0c:	490d      	ldr	r1, [pc, #52]	@ (800fb44 <dhcp_dec_pcb_refcount+0x48>)
 800fb0e:	480e      	ldr	r0, [pc, #56]	@ (800fb48 <dhcp_dec_pcb_refcount+0x4c>)
 800fb10:	f00e f876 	bl	801dc00 <iprintf>
  dhcp_pcb_refcount--;
 800fb14:	4b09      	ldr	r3, [pc, #36]	@ (800fb3c <dhcp_dec_pcb_refcount+0x40>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	b2da      	uxtb	r2, r3
 800fb1c:	4b07      	ldr	r3, [pc, #28]	@ (800fb3c <dhcp_dec_pcb_refcount+0x40>)
 800fb1e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fb20:	4b06      	ldr	r3, [pc, #24]	@ (800fb3c <dhcp_dec_pcb_refcount+0x40>)
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d107      	bne.n	800fb38 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fb28:	4b08      	ldr	r3, [pc, #32]	@ (800fb4c <dhcp_dec_pcb_refcount+0x50>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f00d fbf9 	bl	801d324 <udp_remove>
    dhcp_pcb = NULL;
 800fb32:	4b06      	ldr	r3, [pc, #24]	@ (800fb4c <dhcp_dec_pcb_refcount+0x50>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	601a      	str	r2, [r3, #0]
  }
}
 800fb38:	bf00      	nop
 800fb3a:	bd80      	pop	{r7, pc}
 800fb3c:	20008740 	.word	0x20008740
 800fb40:	0802004c 	.word	0x0802004c
 800fb44:	08020104 	.word	0x08020104
 800fb48:	080200dc 	.word	0x080200dc
 800fb4c:	2000873c 	.word	0x2000873c

0800fb50 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb5c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fb5e:	210c      	movs	r1, #12
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f001 f851 	bl	8010c08 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fb66:	4b06      	ldr	r3, [pc, #24]	@ (800fb80 <dhcp_handle_nak+0x30>)
 800fb68:	4a05      	ldr	r2, [pc, #20]	@ (800fb80 <dhcp_handle_nak+0x30>)
 800fb6a:	4905      	ldr	r1, [pc, #20]	@ (800fb80 <dhcp_handle_nak+0x30>)
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f005 fcdd 	bl	801552c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fc4a 	bl	801040c <dhcp_discover>
}
 800fb78:	bf00      	nop
 800fb7a:	3710      	adds	r7, #16
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	08023abc 	.word	0x08023abc

0800fb84 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb90:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fb92:	2108      	movs	r1, #8
 800fb94:	68f8      	ldr	r0, [r7, #12]
 800fb96:	f001 f837 	bl	8010c08 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	331c      	adds	r3, #28
 800fb9e:	2200      	movs	r2, #0
 800fba0:	4619      	mov	r1, r3
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f002 fb38 	bl	8012218 <etharp_query>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	799b      	ldrb	r3, [r3, #6]
 800fbb0:	2bff      	cmp	r3, #255	@ 0xff
 800fbb2:	d005      	beq.n	800fbc0 <dhcp_check+0x3c>
    dhcp->tries++;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	799b      	ldrb	r3, [r3, #6]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	b2da      	uxtb	r2, r3
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fbc0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800fbc4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fbc6:	893b      	ldrh	r3, [r7, #8]
 800fbc8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fbcc:	4a06      	ldr	r2, [pc, #24]	@ (800fbe8 <dhcp_check+0x64>)
 800fbce:	fb82 1203 	smull	r1, r2, r2, r3
 800fbd2:	1152      	asrs	r2, r2, #5
 800fbd4:	17db      	asrs	r3, r3, #31
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fbde:	bf00      	nop
 800fbe0:	3710      	adds	r7, #16
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	10624dd3 	.word	0x10624dd3

0800fbec <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbfa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fbfc:	4b0c      	ldr	r3, [pc, #48]	@ (800fc30 <dhcp_handle_offer+0x44>)
 800fbfe:	789b      	ldrb	r3, [r3, #2]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d011      	beq.n	800fc28 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2200      	movs	r2, #0
 800fc08:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fc0a:	4b0a      	ldr	r3, [pc, #40]	@ (800fc34 <dhcp_handle_offer+0x48>)
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f004 fd39 	bl	8014686 <lwip_htonl>
 800fc14:	4602      	mov	r2, r0
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	691a      	ldr	r2, [r3, #16]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 f808 	bl	800fc38 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fc28:	bf00      	nop
 800fc2a:	3710      	adds	r7, #16
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	20008734 	.word	0x20008734
 800fc34:	20008714 	.word	0x20008714

0800fc38 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fc38:	b5b0      	push	{r4, r5, r7, lr}
 800fc3a:	b08a      	sub	sp, #40	@ 0x28
 800fc3c:	af02      	add	r7, sp, #8
 800fc3e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d109      	bne.n	800fc5a <dhcp_select+0x22>
 800fc46:	4b71      	ldr	r3, [pc, #452]	@ (800fe0c <dhcp_select+0x1d4>)
 800fc48:	f240 1277 	movw	r2, #375	@ 0x177
 800fc4c:	4970      	ldr	r1, [pc, #448]	@ (800fe10 <dhcp_select+0x1d8>)
 800fc4e:	4871      	ldr	r0, [pc, #452]	@ (800fe14 <dhcp_select+0x1dc>)
 800fc50:	f00d ffd6 	bl	801dc00 <iprintf>
 800fc54:	f06f 030f 	mvn.w	r3, #15
 800fc58:	e0d3      	b.n	800fe02 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc5e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d109      	bne.n	800fc7a <dhcp_select+0x42>
 800fc66:	4b69      	ldr	r3, [pc, #420]	@ (800fe0c <dhcp_select+0x1d4>)
 800fc68:	f240 1279 	movw	r2, #377	@ 0x179
 800fc6c:	496a      	ldr	r1, [pc, #424]	@ (800fe18 <dhcp_select+0x1e0>)
 800fc6e:	4869      	ldr	r0, [pc, #420]	@ (800fe14 <dhcp_select+0x1dc>)
 800fc70:	f00d ffc6 	bl	801dc00 <iprintf>
 800fc74:	f06f 0305 	mvn.w	r3, #5
 800fc78:	e0c3      	b.n	800fe02 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	69b8      	ldr	r0, [r7, #24]
 800fc7e:	f000 ffc3 	bl	8010c08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fc82:	f107 030c 	add.w	r3, r7, #12
 800fc86:	2203      	movs	r2, #3
 800fc88:	69b9      	ldr	r1, [r7, #24]
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f001 fc48 	bl	8011520 <dhcp_create_msg>
 800fc90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 8085 	beq.w	800fda4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fca0:	89b8      	ldrh	r0, [r7, #12]
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fca8:	2302      	movs	r3, #2
 800fcaa:	2239      	movs	r2, #57	@ 0x39
 800fcac:	f000 ffc6 	bl	8010c3c <dhcp_option>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fcb4:	89b8      	ldrh	r0, [r7, #12]
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	f001 f815 	bl	8010cf0 <dhcp_option_short>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fcca:	89b8      	ldrh	r0, [r7, #12]
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fcd2:	2304      	movs	r3, #4
 800fcd4:	2232      	movs	r2, #50	@ 0x32
 800fcd6:	f000 ffb1 	bl	8010c3c <dhcp_option>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fcde:	89bc      	ldrh	r4, [r7, #12]
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	69db      	ldr	r3, [r3, #28]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f004 fccb 	bl	8014686 <lwip_htonl>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f001 f82c 	bl	8010d54 <dhcp_option_long>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fd00:	89b8      	ldrh	r0, [r7, #12]
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fd08:	2304      	movs	r3, #4
 800fd0a:	2236      	movs	r2, #54	@ 0x36
 800fd0c:	f000 ff96 	bl	8010c3c <dhcp_option>
 800fd10:	4603      	mov	r3, r0
 800fd12:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fd14:	89bc      	ldrh	r4, [r7, #12]
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	699b      	ldr	r3, [r3, #24]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f004 fcb0 	bl	8014686 <lwip_htonl>
 800fd26:	4603      	mov	r3, r0
 800fd28:	461a      	mov	r2, r3
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f001 f811 	bl	8010d54 <dhcp_option_long>
 800fd32:	4603      	mov	r3, r0
 800fd34:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd36:	89b8      	ldrh	r0, [r7, #12]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fd3e:	2303      	movs	r3, #3
 800fd40:	2237      	movs	r2, #55	@ 0x37
 800fd42:	f000 ff7b 	bl	8010c3c <dhcp_option>
 800fd46:	4603      	mov	r3, r0
 800fd48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	77bb      	strb	r3, [r7, #30]
 800fd4e:	e00e      	b.n	800fd6e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fd50:	89b8      	ldrh	r0, [r7, #12]
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fd58:	7fbb      	ldrb	r3, [r7, #30]
 800fd5a:	4a30      	ldr	r2, [pc, #192]	@ (800fe1c <dhcp_select+0x1e4>)
 800fd5c:	5cd3      	ldrb	r3, [r2, r3]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	f000 ffa0 	bl	8010ca4 <dhcp_option_byte>
 800fd64:	4603      	mov	r3, r0
 800fd66:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd68:	7fbb      	ldrb	r3, [r7, #30]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	77bb      	strb	r3, [r7, #30]
 800fd6e:	7fbb      	ldrb	r3, [r7, #30]
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	d9ed      	bls.n	800fd50 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fd74:	89b8      	ldrh	r0, [r7, #12]
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	33f0      	adds	r3, #240	@ 0xf0
 800fd7a:	697a      	ldr	r2, [r7, #20]
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	f001 fca5 	bl	80116cc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fd82:	4b27      	ldr	r3, [pc, #156]	@ (800fe20 <dhcp_select+0x1e8>)
 800fd84:	6818      	ldr	r0, [r3, #0]
 800fd86:	4b27      	ldr	r3, [pc, #156]	@ (800fe24 <dhcp_select+0x1ec>)
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	2343      	movs	r3, #67	@ 0x43
 800fd90:	4a25      	ldr	r2, [pc, #148]	@ (800fe28 <dhcp_select+0x1f0>)
 800fd92:	6979      	ldr	r1, [r7, #20]
 800fd94:	f00d f8ae 	bl	801cef4 <udp_sendto_if_src>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fd9c:	6978      	ldr	r0, [r7, #20]
 800fd9e:	f006 f90f 	bl	8015fc0 <pbuf_free>
 800fda2:	e001      	b.n	800fda8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fda4:	23ff      	movs	r3, #255	@ 0xff
 800fda6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	799b      	ldrb	r3, [r3, #6]
 800fdac:	2bff      	cmp	r3, #255	@ 0xff
 800fdae:	d005      	beq.n	800fdbc <dhcp_select+0x184>
    dhcp->tries++;
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	799b      	ldrb	r3, [r3, #6]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	69bb      	ldr	r3, [r7, #24]
 800fdba:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fdbc:	69bb      	ldr	r3, [r7, #24]
 800fdbe:	799b      	ldrb	r3, [r3, #6]
 800fdc0:	2b05      	cmp	r3, #5
 800fdc2:	d80d      	bhi.n	800fde0 <dhcp_select+0x1a8>
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	799b      	ldrb	r3, [r3, #6]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	2301      	movs	r3, #1
 800fdcc:	4093      	lsls	r3, r2
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	0152      	lsls	r2, r2, #5
 800fdd4:	1ad2      	subs	r2, r2, r3
 800fdd6:	0092      	lsls	r2, r2, #2
 800fdd8:	4413      	add	r3, r2
 800fdda:	00db      	lsls	r3, r3, #3
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	e001      	b.n	800fde4 <dhcp_select+0x1ac>
 800fde0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800fde4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fde6:	89fb      	ldrh	r3, [r7, #14]
 800fde8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fdec:	4a0f      	ldr	r2, [pc, #60]	@ (800fe2c <dhcp_select+0x1f4>)
 800fdee:	fb82 1203 	smull	r1, r2, r2, r3
 800fdf2:	1152      	asrs	r2, r2, #5
 800fdf4:	17db      	asrs	r3, r3, #31
 800fdf6:	1ad3      	subs	r3, r2, r3
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fdfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3720      	adds	r7, #32
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bdb0      	pop	{r4, r5, r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	0802004c 	.word	0x0802004c
 800fe10:	08020128 	.word	0x08020128
 800fe14:	080200dc 	.word	0x080200dc
 800fe18:	08020144 	.word	0x08020144
 800fe1c:	20000034 	.word	0x20000034
 800fe20:	2000873c 	.word	0x2000873c
 800fe24:	08023abc 	.word	0x08023abc
 800fe28:	08023ac0 	.word	0x08023ac0
 800fe2c:	10624dd3 	.word	0x10624dd3

0800fe30 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fe36:	4b27      	ldr	r3, [pc, #156]	@ (800fed4 <dhcp_coarse_tmr+0xa4>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	607b      	str	r3, [r7, #4]
 800fe3c:	e042      	b.n	800fec4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe42:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d039      	beq.n	800febe <dhcp_coarse_tmr+0x8e>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	795b      	ldrb	r3, [r3, #5]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d035      	beq.n	800febe <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	8a9b      	ldrh	r3, [r3, #20]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d012      	beq.n	800fe80 <dhcp_coarse_tmr+0x50>
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	8a5b      	ldrh	r3, [r3, #18]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	825a      	strh	r2, [r3, #18]
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	8a5a      	ldrh	r2, [r3, #18]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	8a9b      	ldrh	r3, [r3, #20]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d106      	bne.n	800fe80 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f000 fe2e 	bl	8010ad4 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 f96b 	bl	8010154 <dhcp_start>
 800fe7e:	e01e      	b.n	800febe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	8a1b      	ldrh	r3, [r3, #16]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00b      	beq.n	800fea0 <dhcp_coarse_tmr+0x70>
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	8a1b      	ldrh	r3, [r3, #16]
 800fe8c:	1e5a      	subs	r2, r3, #1
 800fe8e:	b291      	uxth	r1, r2
 800fe90:	683a      	ldr	r2, [r7, #0]
 800fe92:	8211      	strh	r1, [r2, #16]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d103      	bne.n	800fea0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f8c7 	bl	801002c <dhcp_t2_timeout>
 800fe9e:	e00e      	b.n	800febe <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	89db      	ldrh	r3, [r3, #14]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00a      	beq.n	800febe <dhcp_coarse_tmr+0x8e>
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	89db      	ldrh	r3, [r3, #14]
 800feac:	1e5a      	subs	r2, r3, #1
 800feae:	b291      	uxth	r1, r2
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	81d1      	strh	r1, [r2, #14]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d102      	bne.n	800febe <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 f888 	bl	800ffce <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	607b      	str	r3, [r7, #4]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1b9      	bne.n	800fe3e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800feca:	bf00      	nop
 800fecc:	bf00      	nop
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	2000f9a4 	.word	0x2000f9a4

0800fed8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fede:	4b16      	ldr	r3, [pc, #88]	@ (800ff38 <dhcp_fine_tmr+0x60>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	607b      	str	r3, [r7, #4]
 800fee4:	e020      	b.n	800ff28 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feea:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d017      	beq.n	800ff22 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	891b      	ldrh	r3, [r3, #8]
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d906      	bls.n	800ff08 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	891b      	ldrh	r3, [r3, #8]
 800fefe:	3b01      	subs	r3, #1
 800ff00:	b29a      	uxth	r2, r3
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	811a      	strh	r2, [r3, #8]
 800ff06:	e00c      	b.n	800ff22 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	891b      	ldrh	r3, [r3, #8]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d108      	bne.n	800ff22 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	891b      	ldrh	r3, [r3, #8]
 800ff14:	3b01      	subs	r3, #1
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f80d 	bl	800ff3c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	607b      	str	r3, [r7, #4]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1db      	bne.n	800fee6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ff2e:	bf00      	nop
 800ff30:	bf00      	nop
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	2000f9a4 	.word	0x2000f9a4

0800ff3c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff48:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	795b      	ldrb	r3, [r3, #5]
 800ff4e:	2b0c      	cmp	r3, #12
 800ff50:	d003      	beq.n	800ff5a <dhcp_timeout+0x1e>
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	795b      	ldrb	r3, [r3, #5]
 800ff56:	2b06      	cmp	r3, #6
 800ff58:	d103      	bne.n	800ff62 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fa56 	bl	801040c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ff60:	e031      	b.n	800ffc6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	795b      	ldrb	r3, [r3, #5]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d10e      	bne.n	800ff88 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	799b      	ldrb	r3, [r3, #6]
 800ff6e:	2b05      	cmp	r3, #5
 800ff70:	d803      	bhi.n	800ff7a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f7ff fe60 	bl	800fc38 <dhcp_select>
}
 800ff78:	e025      	b.n	800ffc6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 fdaa 	bl	8010ad4 <dhcp_release_and_stop>
      dhcp_start(netif);
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 f8e7 	bl	8010154 <dhcp_start>
}
 800ff86:	e01e      	b.n	800ffc6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	795b      	ldrb	r3, [r3, #5]
 800ff8c:	2b08      	cmp	r3, #8
 800ff8e:	d10b      	bne.n	800ffa8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	799b      	ldrb	r3, [r3, #6]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d803      	bhi.n	800ffa0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f7ff fdf3 	bl	800fb84 <dhcp_check>
}
 800ff9e:	e012      	b.n	800ffc6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 fad5 	bl	8010550 <dhcp_bind>
}
 800ffa6:	e00e      	b.n	800ffc6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	795b      	ldrb	r3, [r3, #5]
 800ffac:	2b03      	cmp	r3, #3
 800ffae:	d10a      	bne.n	800ffc6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	799b      	ldrb	r3, [r3, #6]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d803      	bhi.n	800ffc0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fcd7 	bl	801096c <dhcp_reboot>
}
 800ffbe:	e002      	b.n	800ffc6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 fa23 	bl	801040c <dhcp_discover>
}
 800ffc6:	bf00      	nop
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b084      	sub	sp, #16
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffda:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	795b      	ldrb	r3, [r3, #5]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d007      	beq.n	800fff4 <dhcp_t1_timeout+0x26>
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	795b      	ldrb	r3, [r3, #5]
 800ffe8:	2b0a      	cmp	r3, #10
 800ffea:	d003      	beq.n	800fff4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fff0:	2b05      	cmp	r3, #5
 800fff2:	d117      	bne.n	8010024 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 fb85 	bl	8010704 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	899b      	ldrh	r3, [r3, #12]
 800fffe:	461a      	mov	r2, r3
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	8a5b      	ldrh	r3, [r3, #18]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	2b01      	cmp	r3, #1
 8010008:	dd0c      	ble.n	8010024 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	899b      	ldrh	r3, [r3, #12]
 801000e:	461a      	mov	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	8a5b      	ldrh	r3, [r3, #18]
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	da00      	bge.n	801001c <dhcp_t1_timeout+0x4e>
 801001a:	3301      	adds	r3, #1
 801001c:	105b      	asrs	r3, r3, #1
 801001e:	b29a      	uxth	r2, r3
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8010024:	bf00      	nop
 8010026:	3710      	adds	r7, #16
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010038:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	795b      	ldrb	r3, [r3, #5]
 801003e:	2b01      	cmp	r3, #1
 8010040:	d00b      	beq.n	801005a <dhcp_t2_timeout+0x2e>
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	795b      	ldrb	r3, [r3, #5]
 8010046:	2b0a      	cmp	r3, #10
 8010048:	d007      	beq.n	801005a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801004e:	2b05      	cmp	r3, #5
 8010050:	d003      	beq.n	801005a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	795b      	ldrb	r3, [r3, #5]
 8010056:	2b04      	cmp	r3, #4
 8010058:	d117      	bne.n	801008a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 fbec 	bl	8010838 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	8a9b      	ldrh	r3, [r3, #20]
 8010064:	461a      	mov	r2, r3
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	8a5b      	ldrh	r3, [r3, #18]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	2b01      	cmp	r3, #1
 801006e:	dd0c      	ble.n	801008a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	8a9b      	ldrh	r3, [r3, #20]
 8010074:	461a      	mov	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	8a5b      	ldrh	r3, [r3, #18]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	2b00      	cmp	r3, #0
 801007e:	da00      	bge.n	8010082 <dhcp_t2_timeout+0x56>
 8010080:	3301      	adds	r3, #1
 8010082:	105b      	asrs	r3, r3, #1
 8010084:	b29a      	uxth	r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801008a:	bf00      	nop
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
	...

08010094 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100a2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2200      	movs	r2, #0
 80100a8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	2200      	movs	r2, #0
 80100ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80100b0:	4b26      	ldr	r3, [pc, #152]	@ (801014c <dhcp_handle_ack+0xb8>)
 80100b2:	78db      	ldrb	r3, [r3, #3]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d003      	beq.n	80100c0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80100b8:	4b25      	ldr	r3, [pc, #148]	@ (8010150 <dhcp_handle_ack+0xbc>)
 80100ba:	68da      	ldr	r2, [r3, #12]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80100c0:	4b22      	ldr	r3, [pc, #136]	@ (801014c <dhcp_handle_ack+0xb8>)
 80100c2:	791b      	ldrb	r3, [r3, #4]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d004      	beq.n	80100d2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80100c8:	4b21      	ldr	r3, [pc, #132]	@ (8010150 <dhcp_handle_ack+0xbc>)
 80100ca:	691a      	ldr	r2, [r3, #16]
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80100d0:	e004      	b.n	80100dc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100d6:	085a      	lsrs	r2, r3, #1
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80100dc:	4b1b      	ldr	r3, [pc, #108]	@ (801014c <dhcp_handle_ack+0xb8>)
 80100de:	795b      	ldrb	r3, [r3, #5]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80100e4:	4b1a      	ldr	r3, [pc, #104]	@ (8010150 <dhcp_handle_ack+0xbc>)
 80100e6:	695a      	ldr	r2, [r3, #20]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80100ec:	e007      	b.n	80100fe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80100f2:	4613      	mov	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	1a9b      	subs	r3, r3, r2
 80100f8:	08da      	lsrs	r2, r3, #3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	691a      	ldr	r2, [r3, #16]
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8010106:	4b11      	ldr	r3, [pc, #68]	@ (801014c <dhcp_handle_ack+0xb8>)
 8010108:	799b      	ldrb	r3, [r3, #6]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d00b      	beq.n	8010126 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801010e:	4b10      	ldr	r3, [pc, #64]	@ (8010150 <dhcp_handle_ack+0xbc>)
 8010110:	699b      	ldr	r3, [r3, #24]
 8010112:	4618      	mov	r0, r3
 8010114:	f004 fab7 	bl	8014686 <lwip_htonl>
 8010118:	4602      	mov	r2, r0
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2201      	movs	r2, #1
 8010122:	71da      	strb	r2, [r3, #7]
 8010124:	e002      	b.n	801012c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801012c:	4b07      	ldr	r3, [pc, #28]	@ (801014c <dhcp_handle_ack+0xb8>)
 801012e:	79db      	ldrb	r3, [r3, #7]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d007      	beq.n	8010144 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010134:	4b06      	ldr	r3, [pc, #24]	@ (8010150 <dhcp_handle_ack+0xbc>)
 8010136:	69db      	ldr	r3, [r3, #28]
 8010138:	4618      	mov	r0, r3
 801013a:	f004 faa4 	bl	8014686 <lwip_htonl>
 801013e:	4602      	mov	r2, r0
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010144:	bf00      	nop
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	20008734 	.word	0x20008734
 8010150:	20008714 	.word	0x20008714

08010154 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d109      	bne.n	8010176 <dhcp_start+0x22>
 8010162:	4b37      	ldr	r3, [pc, #220]	@ (8010240 <dhcp_start+0xec>)
 8010164:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8010168:	4936      	ldr	r1, [pc, #216]	@ (8010244 <dhcp_start+0xf0>)
 801016a:	4837      	ldr	r0, [pc, #220]	@ (8010248 <dhcp_start+0xf4>)
 801016c:	f00d fd48 	bl	801dc00 <iprintf>
 8010170:	f06f 030f 	mvn.w	r3, #15
 8010174:	e060      	b.n	8010238 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801017c:	f003 0301 	and.w	r3, r3, #1
 8010180:	2b00      	cmp	r3, #0
 8010182:	d109      	bne.n	8010198 <dhcp_start+0x44>
 8010184:	4b2e      	ldr	r3, [pc, #184]	@ (8010240 <dhcp_start+0xec>)
 8010186:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801018a:	4930      	ldr	r1, [pc, #192]	@ (801024c <dhcp_start+0xf8>)
 801018c:	482e      	ldr	r0, [pc, #184]	@ (8010248 <dhcp_start+0xf4>)
 801018e:	f00d fd37 	bl	801dc00 <iprintf>
 8010192:	f06f 030f 	mvn.w	r3, #15
 8010196:	e04f      	b.n	8010238 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801019c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80101a2:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80101a6:	d202      	bcs.n	80101ae <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80101a8:	f04f 33ff 	mov.w	r3, #4294967295
 80101ac:	e044      	b.n	8010238 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d10d      	bne.n	80101d0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80101b4:	2034      	movs	r0, #52	@ 0x34
 80101b6:	f004 fdf1 	bl	8014d9c <mem_malloc>
 80101ba:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d102      	bne.n	80101c8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80101c2:	f04f 33ff 	mov.w	r3, #4294967295
 80101c6:	e037      	b.n	8010238 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	68fa      	ldr	r2, [r7, #12]
 80101cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80101ce:	e005      	b.n	80101dc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	791b      	ldrb	r3, [r3, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d001      	beq.n	80101dc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80101d8:	f7ff fc90 	bl	800fafc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80101dc:	2234      	movs	r2, #52	@ 0x34
 80101de:	2100      	movs	r1, #0
 80101e0:	68f8      	ldr	r0, [r7, #12]
 80101e2:	f00d fdac 	bl	801dd3e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80101e6:	f7ff fc37 	bl	800fa58 <dhcp_inc_pcb_refcount>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d002      	beq.n	80101f6 <dhcp_start+0xa2>
    return ERR_MEM;
 80101f0:	f04f 33ff 	mov.w	r3, #4294967295
 80101f4:	e020      	b.n	8010238 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2201      	movs	r2, #1
 80101fa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010202:	f003 0304 	and.w	r3, r3, #4
 8010206:	2b00      	cmp	r3, #0
 8010208:	d105      	bne.n	8010216 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801020a:	2102      	movs	r1, #2
 801020c:	68f8      	ldr	r0, [r7, #12]
 801020e:	f000 fcfb 	bl	8010c08 <dhcp_set_state>
    return ERR_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	e010      	b.n	8010238 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 f8f8 	bl	801040c <dhcp_discover>
 801021c:	4603      	mov	r3, r0
 801021e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010220:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d005      	beq.n	8010234 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fc53 	bl	8010ad4 <dhcp_release_and_stop>
    return ERR_MEM;
 801022e:	f04f 33ff 	mov.w	r3, #4294967295
 8010232:	e001      	b.n	8010238 <dhcp_start+0xe4>
  }
  return result;
 8010234:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010238:	4618      	mov	r0, r3
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	0802004c 	.word	0x0802004c
 8010244:	08020160 	.word	0x08020160
 8010248:	080200dc 	.word	0x080200dc
 801024c:	080201a4 	.word	0x080201a4

08010250 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b084      	sub	sp, #16
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801025c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d025      	beq.n	80102b0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	795b      	ldrb	r3, [r3, #5]
 8010268:	2b0a      	cmp	r3, #10
 801026a:	d008      	beq.n	801027e <dhcp_network_changed+0x2e>
 801026c:	2b0a      	cmp	r3, #10
 801026e:	dc0d      	bgt.n	801028c <dhcp_network_changed+0x3c>
 8010270:	2b00      	cmp	r3, #0
 8010272:	d01f      	beq.n	80102b4 <dhcp_network_changed+0x64>
 8010274:	2b00      	cmp	r3, #0
 8010276:	db09      	blt.n	801028c <dhcp_network_changed+0x3c>
 8010278:	3b03      	subs	r3, #3
 801027a:	2b02      	cmp	r3, #2
 801027c:	d806      	bhi.n	801028c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2200      	movs	r2, #0
 8010282:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 fb71 	bl	801096c <dhcp_reboot>
      break;
 801028a:	e014      	b.n	80102b6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	795b      	ldrb	r3, [r3, #5]
 8010290:	2b0c      	cmp	r3, #12
 8010292:	d906      	bls.n	80102a2 <dhcp_network_changed+0x52>
 8010294:	4b09      	ldr	r3, [pc, #36]	@ (80102bc <dhcp_network_changed+0x6c>)
 8010296:	f240 326d 	movw	r2, #877	@ 0x36d
 801029a:	4909      	ldr	r1, [pc, #36]	@ (80102c0 <dhcp_network_changed+0x70>)
 801029c:	4809      	ldr	r0, [pc, #36]	@ (80102c4 <dhcp_network_changed+0x74>)
 801029e:	f00d fcaf 	bl	801dc00 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	2200      	movs	r2, #0
 80102a6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 f8af 	bl	801040c <dhcp_discover>
      break;
 80102ae:	e002      	b.n	80102b6 <dhcp_network_changed+0x66>
    return;
 80102b0:	bf00      	nop
 80102b2:	e000      	b.n	80102b6 <dhcp_network_changed+0x66>
      break;
 80102b4:	bf00      	nop
  }
}
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	0802004c 	.word	0x0802004c
 80102c0:	080201c8 	.word	0x080201c8
 80102c4:	080200dc 	.word	0x080200dc

080102c8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d107      	bne.n	80102e8 <dhcp_arp_reply+0x20>
 80102d8:	4b0e      	ldr	r3, [pc, #56]	@ (8010314 <dhcp_arp_reply+0x4c>)
 80102da:	f240 328b 	movw	r2, #907	@ 0x38b
 80102de:	490e      	ldr	r1, [pc, #56]	@ (8010318 <dhcp_arp_reply+0x50>)
 80102e0:	480e      	ldr	r0, [pc, #56]	@ (801031c <dhcp_arp_reply+0x54>)
 80102e2:	f00d fc8d 	bl	801dc00 <iprintf>
 80102e6:	e012      	b.n	801030e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00c      	beq.n	801030e <dhcp_arp_reply+0x46>
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	795b      	ldrb	r3, [r3, #5]
 80102f8:	2b08      	cmp	r3, #8
 80102fa:	d108      	bne.n	801030e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	681a      	ldr	r2, [r3, #0]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	69db      	ldr	r3, [r3, #28]
 8010304:	429a      	cmp	r2, r3
 8010306:	d102      	bne.n	801030e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f000 f809 	bl	8010320 <dhcp_decline>
    }
  }
}
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	0802004c 	.word	0x0802004c
 8010318:	08020160 	.word	0x08020160
 801031c:	080200dc 	.word	0x080200dc

08010320 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010320:	b5b0      	push	{r4, r5, r7, lr}
 8010322:	b08a      	sub	sp, #40	@ 0x28
 8010324:	af02      	add	r7, sp, #8
 8010326:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801032c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801032e:	210c      	movs	r1, #12
 8010330:	69b8      	ldr	r0, [r7, #24]
 8010332:	f000 fc69 	bl	8010c08 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010336:	f107 030c 	add.w	r3, r7, #12
 801033a:	2204      	movs	r2, #4
 801033c:	69b9      	ldr	r1, [r7, #24]
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f001 f8ee 	bl	8011520 <dhcp_create_msg>
 8010344:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d035      	beq.n	80103b8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010352:	89b8      	ldrh	r0, [r7, #12]
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801035a:	2304      	movs	r3, #4
 801035c:	2232      	movs	r2, #50	@ 0x32
 801035e:	f000 fc6d 	bl	8010c3c <dhcp_option>
 8010362:	4603      	mov	r3, r0
 8010364:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010366:	89bc      	ldrh	r4, [r7, #12]
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801036e:	69bb      	ldr	r3, [r7, #24]
 8010370:	69db      	ldr	r3, [r3, #28]
 8010372:	4618      	mov	r0, r3
 8010374:	f004 f987 	bl	8014686 <lwip_htonl>
 8010378:	4603      	mov	r3, r0
 801037a:	461a      	mov	r2, r3
 801037c:	4629      	mov	r1, r5
 801037e:	4620      	mov	r0, r4
 8010380:	f000 fce8 	bl	8010d54 <dhcp_option_long>
 8010384:	4603      	mov	r3, r0
 8010386:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010388:	89b8      	ldrh	r0, [r7, #12]
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	33f0      	adds	r3, #240	@ 0xf0
 801038e:	697a      	ldr	r2, [r7, #20]
 8010390:	4619      	mov	r1, r3
 8010392:	f001 f99b 	bl	80116cc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010396:	4b19      	ldr	r3, [pc, #100]	@ (80103fc <dhcp_decline+0xdc>)
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	4b19      	ldr	r3, [pc, #100]	@ (8010400 <dhcp_decline+0xe0>)
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	9300      	str	r3, [sp, #0]
 80103a2:	2343      	movs	r3, #67	@ 0x43
 80103a4:	4a17      	ldr	r2, [pc, #92]	@ (8010404 <dhcp_decline+0xe4>)
 80103a6:	6979      	ldr	r1, [r7, #20]
 80103a8:	f00c fda4 	bl	801cef4 <udp_sendto_if_src>
 80103ac:	4603      	mov	r3, r0
 80103ae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80103b0:	6978      	ldr	r0, [r7, #20]
 80103b2:	f005 fe05 	bl	8015fc0 <pbuf_free>
 80103b6:	e001      	b.n	80103bc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80103b8:	23ff      	movs	r3, #255	@ 0xff
 80103ba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	799b      	ldrb	r3, [r3, #6]
 80103c0:	2bff      	cmp	r3, #255	@ 0xff
 80103c2:	d005      	beq.n	80103d0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	799b      	ldrb	r3, [r3, #6]
 80103c8:	3301      	adds	r3, #1
 80103ca:	b2da      	uxtb	r2, r3
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80103d0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80103d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80103d6:	89fb      	ldrh	r3, [r7, #14]
 80103d8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80103dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010408 <dhcp_decline+0xe8>)
 80103de:	fb82 1203 	smull	r1, r2, r2, r3
 80103e2:	1152      	asrs	r2, r2, #5
 80103e4:	17db      	asrs	r3, r3, #31
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	b29a      	uxth	r2, r3
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80103ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3720      	adds	r7, #32
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bdb0      	pop	{r4, r5, r7, pc}
 80103fa:	bf00      	nop
 80103fc:	2000873c 	.word	0x2000873c
 8010400:	08023abc 	.word	0x08023abc
 8010404:	08023ac0 	.word	0x08023ac0
 8010408:	10624dd3 	.word	0x10624dd3

0801040c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b08a      	sub	sp, #40	@ 0x28
 8010410:	af02      	add	r7, sp, #8
 8010412:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010418:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801041a:	2300      	movs	r3, #0
 801041c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	2200      	movs	r2, #0
 8010422:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010424:	2106      	movs	r1, #6
 8010426:	69b8      	ldr	r0, [r7, #24]
 8010428:	f000 fbee 	bl	8010c08 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	2201      	movs	r2, #1
 8010432:	69b9      	ldr	r1, [r7, #24]
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f001 f873 	bl	8011520 <dhcp_create_msg>
 801043a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d04b      	beq.n	80104da <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010442:	693b      	ldr	r3, [r7, #16]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010448:	8938      	ldrh	r0, [r7, #8]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010450:	2302      	movs	r3, #2
 8010452:	2239      	movs	r2, #57	@ 0x39
 8010454:	f000 fbf2 	bl	8010c3c <dhcp_option>
 8010458:	4603      	mov	r3, r0
 801045a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801045c:	8938      	ldrh	r0, [r7, #8]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010468:	461a      	mov	r2, r3
 801046a:	f000 fc41 	bl	8010cf0 <dhcp_option_short>
 801046e:	4603      	mov	r3, r0
 8010470:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010472:	8938      	ldrh	r0, [r7, #8]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801047a:	2303      	movs	r3, #3
 801047c:	2237      	movs	r2, #55	@ 0x37
 801047e:	f000 fbdd 	bl	8010c3c <dhcp_option>
 8010482:	4603      	mov	r3, r0
 8010484:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010486:	2300      	movs	r3, #0
 8010488:	77fb      	strb	r3, [r7, #31]
 801048a:	e00e      	b.n	80104aa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801048c:	8938      	ldrh	r0, [r7, #8]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010494:	7ffb      	ldrb	r3, [r7, #31]
 8010496:	4a29      	ldr	r2, [pc, #164]	@ (801053c <dhcp_discover+0x130>)
 8010498:	5cd3      	ldrb	r3, [r2, r3]
 801049a:	461a      	mov	r2, r3
 801049c:	f000 fc02 	bl	8010ca4 <dhcp_option_byte>
 80104a0:	4603      	mov	r3, r0
 80104a2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104a4:	7ffb      	ldrb	r3, [r7, #31]
 80104a6:	3301      	adds	r3, #1
 80104a8:	77fb      	strb	r3, [r7, #31]
 80104aa:	7ffb      	ldrb	r3, [r7, #31]
 80104ac:	2b02      	cmp	r3, #2
 80104ae:	d9ed      	bls.n	801048c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80104b0:	8938      	ldrh	r0, [r7, #8]
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	33f0      	adds	r3, #240	@ 0xf0
 80104b6:	693a      	ldr	r2, [r7, #16]
 80104b8:	4619      	mov	r1, r3
 80104ba:	f001 f907 	bl	80116cc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80104be:	4b20      	ldr	r3, [pc, #128]	@ (8010540 <dhcp_discover+0x134>)
 80104c0:	6818      	ldr	r0, [r3, #0]
 80104c2:	4b20      	ldr	r3, [pc, #128]	@ (8010544 <dhcp_discover+0x138>)
 80104c4:	9301      	str	r3, [sp, #4]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	2343      	movs	r3, #67	@ 0x43
 80104cc:	4a1e      	ldr	r2, [pc, #120]	@ (8010548 <dhcp_discover+0x13c>)
 80104ce:	6939      	ldr	r1, [r7, #16]
 80104d0:	f00c fd10 	bl	801cef4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80104d4:	6938      	ldr	r0, [r7, #16]
 80104d6:	f005 fd73 	bl	8015fc0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	799b      	ldrb	r3, [r3, #6]
 80104de:	2bff      	cmp	r3, #255	@ 0xff
 80104e0:	d005      	beq.n	80104ee <dhcp_discover+0xe2>
    dhcp->tries++;
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	799b      	ldrb	r3, [r3, #6]
 80104e6:	3301      	adds	r3, #1
 80104e8:	b2da      	uxtb	r2, r3
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	799b      	ldrb	r3, [r3, #6]
 80104f2:	2b05      	cmp	r3, #5
 80104f4:	d80d      	bhi.n	8010512 <dhcp_discover+0x106>
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	799b      	ldrb	r3, [r3, #6]
 80104fa:	461a      	mov	r2, r3
 80104fc:	2301      	movs	r3, #1
 80104fe:	4093      	lsls	r3, r2
 8010500:	b29b      	uxth	r3, r3
 8010502:	461a      	mov	r2, r3
 8010504:	0152      	lsls	r2, r2, #5
 8010506:	1ad2      	subs	r2, r2, r3
 8010508:	0092      	lsls	r2, r2, #2
 801050a:	4413      	add	r3, r2
 801050c:	00db      	lsls	r3, r3, #3
 801050e:	b29b      	uxth	r3, r3
 8010510:	e001      	b.n	8010516 <dhcp_discover+0x10a>
 8010512:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8010516:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010518:	897b      	ldrh	r3, [r7, #10]
 801051a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801051e:	4a0b      	ldr	r2, [pc, #44]	@ (801054c <dhcp_discover+0x140>)
 8010520:	fb82 1203 	smull	r1, r2, r2, r3
 8010524:	1152      	asrs	r2, r2, #5
 8010526:	17db      	asrs	r3, r3, #31
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	b29a      	uxth	r2, r3
 801052c:	69bb      	ldr	r3, [r7, #24]
 801052e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010530:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3720      	adds	r7, #32
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}
 801053c:	20000034 	.word	0x20000034
 8010540:	2000873c 	.word	0x2000873c
 8010544:	08023abc 	.word	0x08023abc
 8010548:	08023ac0 	.word	0x08023ac0
 801054c:	10624dd3 	.word	0x10624dd3

08010550 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b088      	sub	sp, #32
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d107      	bne.n	801056e <dhcp_bind+0x1e>
 801055e:	4b64      	ldr	r3, [pc, #400]	@ (80106f0 <dhcp_bind+0x1a0>)
 8010560:	f240 4215 	movw	r2, #1045	@ 0x415
 8010564:	4963      	ldr	r1, [pc, #396]	@ (80106f4 <dhcp_bind+0x1a4>)
 8010566:	4864      	ldr	r0, [pc, #400]	@ (80106f8 <dhcp_bind+0x1a8>)
 8010568:	f00d fb4a 	bl	801dc00 <iprintf>
 801056c:	e0bc      	b.n	80106e8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010572:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d107      	bne.n	801058a <dhcp_bind+0x3a>
 801057a:	4b5d      	ldr	r3, [pc, #372]	@ (80106f0 <dhcp_bind+0x1a0>)
 801057c:	f240 4217 	movw	r2, #1047	@ 0x417
 8010580:	495e      	ldr	r1, [pc, #376]	@ (80106fc <dhcp_bind+0x1ac>)
 8010582:	485d      	ldr	r0, [pc, #372]	@ (80106f8 <dhcp_bind+0x1a8>)
 8010584:	f00d fb3c 	bl	801dc00 <iprintf>
 8010588:	e0ae      	b.n	80106e8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	2200      	movs	r2, #0
 801058e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010598:	d019      	beq.n	80105ce <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801059e:	331e      	adds	r3, #30
 80105a0:	4a57      	ldr	r2, [pc, #348]	@ (8010700 <dhcp_bind+0x1b0>)
 80105a2:	fba2 2303 	umull	r2, r3, r2, r3
 80105a6:	095b      	lsrs	r3, r3, #5
 80105a8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80105aa:	69fb      	ldr	r3, [r7, #28]
 80105ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105b0:	d302      	bcc.n	80105b8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80105b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80105b6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80105b8:	69fb      	ldr	r3, [r7, #28]
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	69bb      	ldr	r3, [r7, #24]
 80105be:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	8a9b      	ldrh	r3, [r3, #20]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	2201      	movs	r2, #1
 80105cc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d6:	d01d      	beq.n	8010614 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105dc:	331e      	adds	r3, #30
 80105de:	4a48      	ldr	r2, [pc, #288]	@ (8010700 <dhcp_bind+0x1b0>)
 80105e0:	fba2 2303 	umull	r2, r3, r2, r3
 80105e4:	095b      	lsrs	r3, r3, #5
 80105e6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105ee:	d302      	bcc.n	80105f6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80105f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80105f4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80105f6:	69fb      	ldr	r3, [r7, #28]
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	895b      	ldrh	r3, [r3, #10]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d102      	bne.n	801060c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	2201      	movs	r2, #1
 801060a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	895a      	ldrh	r2, [r3, #10]
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801061c:	d01d      	beq.n	801065a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010622:	331e      	adds	r3, #30
 8010624:	4a36      	ldr	r2, [pc, #216]	@ (8010700 <dhcp_bind+0x1b0>)
 8010626:	fba2 2303 	umull	r2, r3, r2, r3
 801062a:	095b      	lsrs	r3, r3, #5
 801062c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010634:	d302      	bcc.n	801063c <dhcp_bind+0xec>
      timeout = 0xffff;
 8010636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801063a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	b29a      	uxth	r2, r3
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	899b      	ldrh	r3, [r3, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d102      	bne.n	8010652 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	2201      	movs	r2, #1
 8010650:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	899a      	ldrh	r2, [r3, #12]
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	895a      	ldrh	r2, [r3, #10]
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	899b      	ldrh	r3, [r3, #12]
 8010662:	429a      	cmp	r2, r3
 8010664:	d306      	bcc.n	8010674 <dhcp_bind+0x124>
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	899b      	ldrh	r3, [r3, #12]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d002      	beq.n	8010674 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	2200      	movs	r2, #0
 8010672:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	79db      	ldrb	r3, [r3, #7]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d003      	beq.n	8010684 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	6a1b      	ldr	r3, [r3, #32]
 8010680:	613b      	str	r3, [r7, #16]
 8010682:	e014      	b.n	80106ae <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	331c      	adds	r3, #28
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801068c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010690:	2b00      	cmp	r3, #0
 8010692:	db02      	blt.n	801069a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010694:	23ff      	movs	r3, #255	@ 0xff
 8010696:	613b      	str	r3, [r7, #16]
 8010698:	e009      	b.n	80106ae <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801069a:	7dfb      	ldrb	r3, [r7, #23]
 801069c:	2bbf      	cmp	r3, #191	@ 0xbf
 801069e:	d903      	bls.n	80106a8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80106a0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80106a4:	613b      	str	r3, [r7, #16]
 80106a6:	e002      	b.n	80106ae <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80106a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106ac:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106b2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d108      	bne.n	80106cc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	69da      	ldr	r2, [r3, #28]
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	4013      	ands	r3, r2
 80106c2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80106ca:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80106cc:	210a      	movs	r1, #10
 80106ce:	69b8      	ldr	r0, [r7, #24]
 80106d0:	f000 fa9a 	bl	8010c08 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	f103 011c 	add.w	r1, r3, #28
 80106da:	f107 030c 	add.w	r3, r7, #12
 80106de:	f107 0210 	add.w	r2, r7, #16
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f004 ff22 	bl	801552c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80106e8:	3720      	adds	r7, #32
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	0802004c 	.word	0x0802004c
 80106f4:	080201dc 	.word	0x080201dc
 80106f8:	080200dc 	.word	0x080200dc
 80106fc:	080201f8 	.word	0x080201f8
 8010700:	88888889 	.word	0x88888889

08010704 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b08a      	sub	sp, #40	@ 0x28
 8010708:	af02      	add	r7, sp, #8
 801070a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010710:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8010712:	2105      	movs	r1, #5
 8010714:	69b8      	ldr	r0, [r7, #24]
 8010716:	f000 fa77 	bl	8010c08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801071a:	f107 030c 	add.w	r3, r7, #12
 801071e:	2203      	movs	r2, #3
 8010720:	69b9      	ldr	r1, [r7, #24]
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 fefc 	bl	8011520 <dhcp_create_msg>
 8010728:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d04e      	beq.n	80107ce <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010736:	89b8      	ldrh	r0, [r7, #12]
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801073e:	2302      	movs	r3, #2
 8010740:	2239      	movs	r2, #57	@ 0x39
 8010742:	f000 fa7b 	bl	8010c3c <dhcp_option>
 8010746:	4603      	mov	r3, r0
 8010748:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801074a:	89b8      	ldrh	r0, [r7, #12]
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010756:	461a      	mov	r2, r3
 8010758:	f000 faca 	bl	8010cf0 <dhcp_option_short>
 801075c:	4603      	mov	r3, r0
 801075e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010760:	89b8      	ldrh	r0, [r7, #12]
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010768:	2303      	movs	r3, #3
 801076a:	2237      	movs	r2, #55	@ 0x37
 801076c:	f000 fa66 	bl	8010c3c <dhcp_option>
 8010770:	4603      	mov	r3, r0
 8010772:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010774:	2300      	movs	r3, #0
 8010776:	77bb      	strb	r3, [r7, #30]
 8010778:	e00e      	b.n	8010798 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801077a:	89b8      	ldrh	r0, [r7, #12]
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010782:	7fbb      	ldrb	r3, [r7, #30]
 8010784:	4a29      	ldr	r2, [pc, #164]	@ (801082c <dhcp_renew+0x128>)
 8010786:	5cd3      	ldrb	r3, [r2, r3]
 8010788:	461a      	mov	r2, r3
 801078a:	f000 fa8b 	bl	8010ca4 <dhcp_option_byte>
 801078e:	4603      	mov	r3, r0
 8010790:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010792:	7fbb      	ldrb	r3, [r7, #30]
 8010794:	3301      	adds	r3, #1
 8010796:	77bb      	strb	r3, [r7, #30]
 8010798:	7fbb      	ldrb	r3, [r7, #30]
 801079a:	2b02      	cmp	r3, #2
 801079c:	d9ed      	bls.n	801077a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801079e:	89b8      	ldrh	r0, [r7, #12]
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	33f0      	adds	r3, #240	@ 0xf0
 80107a4:	697a      	ldr	r2, [r7, #20]
 80107a6:	4619      	mov	r1, r3
 80107a8:	f000 ff90 	bl	80116cc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107ac:	4b20      	ldr	r3, [pc, #128]	@ (8010830 <dhcp_renew+0x12c>)
 80107ae:	6818      	ldr	r0, [r3, #0]
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	f103 0218 	add.w	r2, r3, #24
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	2343      	movs	r3, #67	@ 0x43
 80107bc:	6979      	ldr	r1, [r7, #20]
 80107be:	f00c fb25 	bl	801ce0c <udp_sendto_if>
 80107c2:	4603      	mov	r3, r0
 80107c4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107c6:	6978      	ldr	r0, [r7, #20]
 80107c8:	f005 fbfa 	bl	8015fc0 <pbuf_free>
 80107cc:	e001      	b.n	80107d2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80107ce:	23ff      	movs	r3, #255	@ 0xff
 80107d0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	799b      	ldrb	r3, [r3, #6]
 80107d6:	2bff      	cmp	r3, #255	@ 0xff
 80107d8:	d005      	beq.n	80107e6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	799b      	ldrb	r3, [r3, #6]
 80107de:	3301      	adds	r3, #1
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	799b      	ldrb	r3, [r3, #6]
 80107ea:	2b09      	cmp	r3, #9
 80107ec:	d809      	bhi.n	8010802 <dhcp_renew+0xfe>
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	799b      	ldrb	r3, [r3, #6]
 80107f2:	461a      	mov	r2, r3
 80107f4:	0152      	lsls	r2, r2, #5
 80107f6:	1ad2      	subs	r2, r2, r3
 80107f8:	0092      	lsls	r2, r2, #2
 80107fa:	4413      	add	r3, r2
 80107fc:	011b      	lsls	r3, r3, #4
 80107fe:	b29b      	uxth	r3, r3
 8010800:	e001      	b.n	8010806 <dhcp_renew+0x102>
 8010802:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010806:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010808:	89fb      	ldrh	r3, [r7, #14]
 801080a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801080e:	4a09      	ldr	r2, [pc, #36]	@ (8010834 <dhcp_renew+0x130>)
 8010810:	fb82 1203 	smull	r1, r2, r2, r3
 8010814:	1152      	asrs	r2, r2, #5
 8010816:	17db      	asrs	r3, r3, #31
 8010818:	1ad3      	subs	r3, r2, r3
 801081a:	b29a      	uxth	r2, r3
 801081c:	69bb      	ldr	r3, [r7, #24]
 801081e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010820:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010824:	4618      	mov	r0, r3
 8010826:	3720      	adds	r7, #32
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	20000034 	.word	0x20000034
 8010830:	2000873c 	.word	0x2000873c
 8010834:	10624dd3 	.word	0x10624dd3

08010838 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08a      	sub	sp, #40	@ 0x28
 801083c:	af02      	add	r7, sp, #8
 801083e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010844:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8010846:	2104      	movs	r1, #4
 8010848:	69b8      	ldr	r0, [r7, #24]
 801084a:	f000 f9dd 	bl	8010c08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801084e:	f107 030c 	add.w	r3, r7, #12
 8010852:	2203      	movs	r2, #3
 8010854:	69b9      	ldr	r1, [r7, #24]
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 fe62 	bl	8011520 <dhcp_create_msg>
 801085c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d04c      	beq.n	80108fe <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801086a:	89b8      	ldrh	r0, [r7, #12]
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010872:	2302      	movs	r3, #2
 8010874:	2239      	movs	r2, #57	@ 0x39
 8010876:	f000 f9e1 	bl	8010c3c <dhcp_option>
 801087a:	4603      	mov	r3, r0
 801087c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801087e:	89b8      	ldrh	r0, [r7, #12]
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801088a:	461a      	mov	r2, r3
 801088c:	f000 fa30 	bl	8010cf0 <dhcp_option_short>
 8010890:	4603      	mov	r3, r0
 8010892:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010894:	89b8      	ldrh	r0, [r7, #12]
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801089c:	2303      	movs	r3, #3
 801089e:	2237      	movs	r2, #55	@ 0x37
 80108a0:	f000 f9cc 	bl	8010c3c <dhcp_option>
 80108a4:	4603      	mov	r3, r0
 80108a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108a8:	2300      	movs	r3, #0
 80108aa:	77bb      	strb	r3, [r7, #30]
 80108ac:	e00e      	b.n	80108cc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80108ae:	89b8      	ldrh	r0, [r7, #12]
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108b6:	7fbb      	ldrb	r3, [r7, #30]
 80108b8:	4a28      	ldr	r2, [pc, #160]	@ (801095c <dhcp_rebind+0x124>)
 80108ba:	5cd3      	ldrb	r3, [r2, r3]
 80108bc:	461a      	mov	r2, r3
 80108be:	f000 f9f1 	bl	8010ca4 <dhcp_option_byte>
 80108c2:	4603      	mov	r3, r0
 80108c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108c6:	7fbb      	ldrb	r3, [r7, #30]
 80108c8:	3301      	adds	r3, #1
 80108ca:	77bb      	strb	r3, [r7, #30]
 80108cc:	7fbb      	ldrb	r3, [r7, #30]
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d9ed      	bls.n	80108ae <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80108d2:	89b8      	ldrh	r0, [r7, #12]
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	33f0      	adds	r3, #240	@ 0xf0
 80108d8:	697a      	ldr	r2, [r7, #20]
 80108da:	4619      	mov	r1, r3
 80108dc:	f000 fef6 	bl	80116cc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80108e0:	4b1f      	ldr	r3, [pc, #124]	@ (8010960 <dhcp_rebind+0x128>)
 80108e2:	6818      	ldr	r0, [r3, #0]
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	9300      	str	r3, [sp, #0]
 80108e8:	2343      	movs	r3, #67	@ 0x43
 80108ea:	4a1e      	ldr	r2, [pc, #120]	@ (8010964 <dhcp_rebind+0x12c>)
 80108ec:	6979      	ldr	r1, [r7, #20]
 80108ee:	f00c fa8d 	bl	801ce0c <udp_sendto_if>
 80108f2:	4603      	mov	r3, r0
 80108f4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80108f6:	6978      	ldr	r0, [r7, #20]
 80108f8:	f005 fb62 	bl	8015fc0 <pbuf_free>
 80108fc:	e001      	b.n	8010902 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80108fe:	23ff      	movs	r3, #255	@ 0xff
 8010900:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	799b      	ldrb	r3, [r3, #6]
 8010906:	2bff      	cmp	r3, #255	@ 0xff
 8010908:	d005      	beq.n	8010916 <dhcp_rebind+0xde>
    dhcp->tries++;
 801090a:	69bb      	ldr	r3, [r7, #24]
 801090c:	799b      	ldrb	r3, [r3, #6]
 801090e:	3301      	adds	r3, #1
 8010910:	b2da      	uxtb	r2, r3
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	799b      	ldrb	r3, [r3, #6]
 801091a:	2b09      	cmp	r3, #9
 801091c:	d809      	bhi.n	8010932 <dhcp_rebind+0xfa>
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	799b      	ldrb	r3, [r3, #6]
 8010922:	461a      	mov	r2, r3
 8010924:	0152      	lsls	r2, r2, #5
 8010926:	1ad2      	subs	r2, r2, r3
 8010928:	0092      	lsls	r2, r2, #2
 801092a:	4413      	add	r3, r2
 801092c:	00db      	lsls	r3, r3, #3
 801092e:	b29b      	uxth	r3, r3
 8010930:	e001      	b.n	8010936 <dhcp_rebind+0xfe>
 8010932:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010936:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010938:	89fb      	ldrh	r3, [r7, #14]
 801093a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801093e:	4a0a      	ldr	r2, [pc, #40]	@ (8010968 <dhcp_rebind+0x130>)
 8010940:	fb82 1203 	smull	r1, r2, r2, r3
 8010944:	1152      	asrs	r2, r2, #5
 8010946:	17db      	asrs	r3, r3, #31
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	b29a      	uxth	r2, r3
 801094c:	69bb      	ldr	r3, [r7, #24]
 801094e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010950:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010954:	4618      	mov	r0, r3
 8010956:	3720      	adds	r7, #32
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	20000034 	.word	0x20000034
 8010960:	2000873c 	.word	0x2000873c
 8010964:	08023ac0 	.word	0x08023ac0
 8010968:	10624dd3 	.word	0x10624dd3

0801096c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801096c:	b5b0      	push	{r4, r5, r7, lr}
 801096e:	b08a      	sub	sp, #40	@ 0x28
 8010970:	af02      	add	r7, sp, #8
 8010972:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010978:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801097a:	2103      	movs	r1, #3
 801097c:	69b8      	ldr	r0, [r7, #24]
 801097e:	f000 f943 	bl	8010c08 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010982:	f107 030c 	add.w	r3, r7, #12
 8010986:	2203      	movs	r2, #3
 8010988:	69b9      	ldr	r1, [r7, #24]
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f000 fdc8 	bl	8011520 <dhcp_create_msg>
 8010990:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d066      	beq.n	8010a66 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801099e:	89b8      	ldrh	r0, [r7, #12]
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80109a6:	2302      	movs	r3, #2
 80109a8:	2239      	movs	r2, #57	@ 0x39
 80109aa:	f000 f947 	bl	8010c3c <dhcp_option>
 80109ae:	4603      	mov	r3, r0
 80109b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80109b2:	89b8      	ldrh	r0, [r7, #12]
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	33f0      	adds	r3, #240	@ 0xf0
 80109b8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80109bc:	4619      	mov	r1, r3
 80109be:	f000 f997 	bl	8010cf0 <dhcp_option_short>
 80109c2:	4603      	mov	r3, r0
 80109c4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80109c6:	89b8      	ldrh	r0, [r7, #12]
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80109ce:	2304      	movs	r3, #4
 80109d0:	2232      	movs	r2, #50	@ 0x32
 80109d2:	f000 f933 	bl	8010c3c <dhcp_option>
 80109d6:	4603      	mov	r3, r0
 80109d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80109da:	89bc      	ldrh	r4, [r7, #12]
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	4618      	mov	r0, r3
 80109e8:	f003 fe4d 	bl	8014686 <lwip_htonl>
 80109ec:	4603      	mov	r3, r0
 80109ee:	461a      	mov	r2, r3
 80109f0:	4629      	mov	r1, r5
 80109f2:	4620      	mov	r0, r4
 80109f4:	f000 f9ae 	bl	8010d54 <dhcp_option_long>
 80109f8:	4603      	mov	r3, r0
 80109fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80109fc:	89b8      	ldrh	r0, [r7, #12]
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010a04:	2303      	movs	r3, #3
 8010a06:	2237      	movs	r2, #55	@ 0x37
 8010a08:	f000 f918 	bl	8010c3c <dhcp_option>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a10:	2300      	movs	r3, #0
 8010a12:	77bb      	strb	r3, [r7, #30]
 8010a14:	e00e      	b.n	8010a34 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010a16:	89b8      	ldrh	r0, [r7, #12]
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010a1e:	7fbb      	ldrb	r3, [r7, #30]
 8010a20:	4a28      	ldr	r2, [pc, #160]	@ (8010ac4 <dhcp_reboot+0x158>)
 8010a22:	5cd3      	ldrb	r3, [r2, r3]
 8010a24:	461a      	mov	r2, r3
 8010a26:	f000 f93d 	bl	8010ca4 <dhcp_option_byte>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a2e:	7fbb      	ldrb	r3, [r7, #30]
 8010a30:	3301      	adds	r3, #1
 8010a32:	77bb      	strb	r3, [r7, #30]
 8010a34:	7fbb      	ldrb	r3, [r7, #30]
 8010a36:	2b02      	cmp	r3, #2
 8010a38:	d9ed      	bls.n	8010a16 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a3a:	89b8      	ldrh	r0, [r7, #12]
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	33f0      	adds	r3, #240	@ 0xf0
 8010a40:	697a      	ldr	r2, [r7, #20]
 8010a42:	4619      	mov	r1, r3
 8010a44:	f000 fe42 	bl	80116cc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a48:	4b1f      	ldr	r3, [pc, #124]	@ (8010ac8 <dhcp_reboot+0x15c>)
 8010a4a:	6818      	ldr	r0, [r3, #0]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	9300      	str	r3, [sp, #0]
 8010a50:	2343      	movs	r3, #67	@ 0x43
 8010a52:	4a1e      	ldr	r2, [pc, #120]	@ (8010acc <dhcp_reboot+0x160>)
 8010a54:	6979      	ldr	r1, [r7, #20]
 8010a56:	f00c f9d9 	bl	801ce0c <udp_sendto_if>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010a5e:	6978      	ldr	r0, [r7, #20]
 8010a60:	f005 faae 	bl	8015fc0 <pbuf_free>
 8010a64:	e001      	b.n	8010a6a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010a66:	23ff      	movs	r3, #255	@ 0xff
 8010a68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	799b      	ldrb	r3, [r3, #6]
 8010a6e:	2bff      	cmp	r3, #255	@ 0xff
 8010a70:	d005      	beq.n	8010a7e <dhcp_reboot+0x112>
    dhcp->tries++;
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	799b      	ldrb	r3, [r3, #6]
 8010a76:	3301      	adds	r3, #1
 8010a78:	b2da      	uxtb	r2, r3
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	799b      	ldrb	r3, [r3, #6]
 8010a82:	2b09      	cmp	r3, #9
 8010a84:	d809      	bhi.n	8010a9a <dhcp_reboot+0x12e>
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	799b      	ldrb	r3, [r3, #6]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	0152      	lsls	r2, r2, #5
 8010a8e:	1ad2      	subs	r2, r2, r3
 8010a90:	0092      	lsls	r2, r2, #2
 8010a92:	4413      	add	r3, r2
 8010a94:	00db      	lsls	r3, r3, #3
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	e001      	b.n	8010a9e <dhcp_reboot+0x132>
 8010a9a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010a9e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010aa0:	89fb      	ldrh	r3, [r7, #14]
 8010aa2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8010ad0 <dhcp_reboot+0x164>)
 8010aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8010aac:	1152      	asrs	r2, r2, #5
 8010aae:	17db      	asrs	r3, r3, #31
 8010ab0:	1ad3      	subs	r3, r2, r3
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	69bb      	ldr	r3, [r7, #24]
 8010ab6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010ab8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3720      	adds	r7, #32
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8010ac4:	20000034 	.word	0x20000034
 8010ac8:	2000873c 	.word	0x2000873c
 8010acc:	08023ac0 	.word	0x08023ac0
 8010ad0:	10624dd3 	.word	0x10624dd3

08010ad4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010ad4:	b5b0      	push	{r4, r5, r7, lr}
 8010ad6:	b08a      	sub	sp, #40	@ 0x28
 8010ad8:	af02      	add	r7, sp, #8
 8010ada:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010ae2:	69fb      	ldr	r3, [r7, #28]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f000 8084 	beq.w	8010bf2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010aea:	69fb      	ldr	r3, [r7, #28]
 8010aec:	795b      	ldrb	r3, [r3, #5]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f000 8081 	beq.w	8010bf6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	699b      	ldr	r3, [r3, #24]
 8010af8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	2200      	movs	r2, #0
 8010afe:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	2200      	movs	r2, #0
 8010b04:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	2200      	movs	r2, #0
 8010b10:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010b12:	69fb      	ldr	r3, [r7, #28]
 8010b14:	2200      	movs	r2, #0
 8010b16:	631a      	str	r2, [r3, #48]	@ 0x30
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	829a      	strh	r2, [r3, #20]
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	8a9a      	ldrh	r2, [r3, #20]
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	825a      	strh	r2, [r3, #18]
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	8a5a      	ldrh	r2, [r3, #18]
 8010b3a:	69fb      	ldr	r3, [r7, #28]
 8010b3c:	821a      	strh	r2, [r3, #16]
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	8a1a      	ldrh	r2, [r3, #16]
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 fdee 	bl	8011728 <dhcp_supplied_address>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d03b      	beq.n	8010bca <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010b52:	f107 030e 	add.w	r3, r7, #14
 8010b56:	2207      	movs	r2, #7
 8010b58:	69f9      	ldr	r1, [r7, #28]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 fce0 	bl	8011520 <dhcp_create_msg>
 8010b60:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d030      	beq.n	8010bca <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010b68:	69bb      	ldr	r3, [r7, #24]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010b6e:	89f8      	ldrh	r0, [r7, #14]
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010b76:	2304      	movs	r3, #4
 8010b78:	2236      	movs	r2, #54	@ 0x36
 8010b7a:	f000 f85f 	bl	8010c3c <dhcp_option>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010b82:	89fc      	ldrh	r4, [r7, #14]
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f003 fd7a 	bl	8014686 <lwip_htonl>
 8010b92:	4603      	mov	r3, r0
 8010b94:	461a      	mov	r2, r3
 8010b96:	4629      	mov	r1, r5
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f000 f8db 	bl	8010d54 <dhcp_option_long>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010ba2:	89f8      	ldrh	r0, [r7, #14]
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	33f0      	adds	r3, #240	@ 0xf0
 8010ba8:	69ba      	ldr	r2, [r7, #24]
 8010baa:	4619      	mov	r1, r3
 8010bac:	f000 fd8e 	bl	80116cc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010bb0:	4b13      	ldr	r3, [pc, #76]	@ (8010c00 <dhcp_release_and_stop+0x12c>)
 8010bb2:	6818      	ldr	r0, [r3, #0]
 8010bb4:	f107 0210 	add.w	r2, r7, #16
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	9300      	str	r3, [sp, #0]
 8010bbc:	2343      	movs	r3, #67	@ 0x43
 8010bbe:	69b9      	ldr	r1, [r7, #24]
 8010bc0:	f00c f924 	bl	801ce0c <udp_sendto_if>
      pbuf_free(p_out);
 8010bc4:	69b8      	ldr	r0, [r7, #24]
 8010bc6:	f005 f9fb 	bl	8015fc0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010bca:	4b0e      	ldr	r3, [pc, #56]	@ (8010c04 <dhcp_release_and_stop+0x130>)
 8010bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8010c04 <dhcp_release_and_stop+0x130>)
 8010bce:	490d      	ldr	r1, [pc, #52]	@ (8010c04 <dhcp_release_and_stop+0x130>)
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f004 fcab 	bl	801552c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010bd6:	2100      	movs	r1, #0
 8010bd8:	69f8      	ldr	r0, [r7, #28]
 8010bda:	f000 f815 	bl	8010c08 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	791b      	ldrb	r3, [r3, #4]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d008      	beq.n	8010bf8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010be6:	f7fe ff89 	bl	800fafc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	2200      	movs	r2, #0
 8010bee:	711a      	strb	r2, [r3, #4]
 8010bf0:	e002      	b.n	8010bf8 <dhcp_release_and_stop+0x124>
    return;
 8010bf2:	bf00      	nop
 8010bf4:	e000      	b.n	8010bf8 <dhcp_release_and_stop+0x124>
    return;
 8010bf6:	bf00      	nop
  }
}
 8010bf8:	3720      	adds	r7, #32
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	2000873c 	.word	0x2000873c
 8010c04:	08023abc 	.word	0x08023abc

08010c08 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	460b      	mov	r3, r1
 8010c12:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	795b      	ldrb	r3, [r3, #5]
 8010c18:	78fa      	ldrb	r2, [r7, #3]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d008      	beq.n	8010c30 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	78fa      	ldrb	r2, [r7, #3]
 8010c22:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	811a      	strh	r2, [r3, #8]
  }
}
 8010c30:	bf00      	nop
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6039      	str	r1, [r7, #0]
 8010c44:	4611      	mov	r1, r2
 8010c46:	461a      	mov	r2, r3
 8010c48:	4603      	mov	r3, r0
 8010c4a:	80fb      	strh	r3, [r7, #6]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	717b      	strb	r3, [r7, #5]
 8010c50:	4613      	mov	r3, r2
 8010c52:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010c54:	88fa      	ldrh	r2, [r7, #6]
 8010c56:	793b      	ldrb	r3, [r7, #4]
 8010c58:	4413      	add	r3, r2
 8010c5a:	3302      	adds	r3, #2
 8010c5c:	2b44      	cmp	r3, #68	@ 0x44
 8010c5e:	d906      	bls.n	8010c6e <dhcp_option+0x32>
 8010c60:	4b0d      	ldr	r3, [pc, #52]	@ (8010c98 <dhcp_option+0x5c>)
 8010c62:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010c66:	490d      	ldr	r1, [pc, #52]	@ (8010c9c <dhcp_option+0x60>)
 8010c68:	480d      	ldr	r0, [pc, #52]	@ (8010ca0 <dhcp_option+0x64>)
 8010c6a:	f00c ffc9 	bl	801dc00 <iprintf>
  options[options_out_len++] = option_type;
 8010c6e:	88fb      	ldrh	r3, [r7, #6]
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	80fa      	strh	r2, [r7, #6]
 8010c74:	461a      	mov	r2, r3
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	4413      	add	r3, r2
 8010c7a:	797a      	ldrb	r2, [r7, #5]
 8010c7c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010c7e:	88fb      	ldrh	r3, [r7, #6]
 8010c80:	1c5a      	adds	r2, r3, #1
 8010c82:	80fa      	strh	r2, [r7, #6]
 8010c84:	461a      	mov	r2, r3
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	4413      	add	r3, r2
 8010c8a:	793a      	ldrb	r2, [r7, #4]
 8010c8c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010c8e:	88fb      	ldrh	r3, [r7, #6]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	0802004c 	.word	0x0802004c
 8010c9c:	08020210 	.word	0x08020210
 8010ca0:	080200dc 	.word	0x080200dc

08010ca4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	4603      	mov	r3, r0
 8010cac:	6039      	str	r1, [r7, #0]
 8010cae:	80fb      	strh	r3, [r7, #6]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010cb4:	88fb      	ldrh	r3, [r7, #6]
 8010cb6:	2b43      	cmp	r3, #67	@ 0x43
 8010cb8:	d906      	bls.n	8010cc8 <dhcp_option_byte+0x24>
 8010cba:	4b0a      	ldr	r3, [pc, #40]	@ (8010ce4 <dhcp_option_byte+0x40>)
 8010cbc:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8010cc0:	4909      	ldr	r1, [pc, #36]	@ (8010ce8 <dhcp_option_byte+0x44>)
 8010cc2:	480a      	ldr	r0, [pc, #40]	@ (8010cec <dhcp_option_byte+0x48>)
 8010cc4:	f00c ff9c 	bl	801dc00 <iprintf>
  options[options_out_len++] = value;
 8010cc8:	88fb      	ldrh	r3, [r7, #6]
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	80fa      	strh	r2, [r7, #6]
 8010cce:	461a      	mov	r2, r3
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	797a      	ldrb	r2, [r7, #5]
 8010cd6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010cd8:	88fb      	ldrh	r3, [r7, #6]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3708      	adds	r7, #8
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	0802004c 	.word	0x0802004c
 8010ce8:	08020254 	.word	0x08020254
 8010cec:	080200dc 	.word	0x080200dc

08010cf0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	6039      	str	r1, [r7, #0]
 8010cfa:	80fb      	strh	r3, [r7, #6]
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010d00:	88fb      	ldrh	r3, [r7, #6]
 8010d02:	3302      	adds	r3, #2
 8010d04:	2b44      	cmp	r3, #68	@ 0x44
 8010d06:	d906      	bls.n	8010d16 <dhcp_option_short+0x26>
 8010d08:	4b0f      	ldr	r3, [pc, #60]	@ (8010d48 <dhcp_option_short+0x58>)
 8010d0a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8010d0e:	490f      	ldr	r1, [pc, #60]	@ (8010d4c <dhcp_option_short+0x5c>)
 8010d10:	480f      	ldr	r0, [pc, #60]	@ (8010d50 <dhcp_option_short+0x60>)
 8010d12:	f00c ff75 	bl	801dc00 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010d16:	88bb      	ldrh	r3, [r7, #4]
 8010d18:	0a1b      	lsrs	r3, r3, #8
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	88fb      	ldrh	r3, [r7, #6]
 8010d1e:	1c59      	adds	r1, r3, #1
 8010d20:	80f9      	strh	r1, [r7, #6]
 8010d22:	4619      	mov	r1, r3
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	440b      	add	r3, r1
 8010d28:	b2d2      	uxtb	r2, r2
 8010d2a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010d2c:	88fb      	ldrh	r3, [r7, #6]
 8010d2e:	1c5a      	adds	r2, r3, #1
 8010d30:	80fa      	strh	r2, [r7, #6]
 8010d32:	461a      	mov	r2, r3
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	4413      	add	r3, r2
 8010d38:	88ba      	ldrh	r2, [r7, #4]
 8010d3a:	b2d2      	uxtb	r2, r2
 8010d3c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d3e:	88fb      	ldrh	r3, [r7, #6]
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	0802004c 	.word	0x0802004c
 8010d4c:	0802028c 	.word	0x0802028c
 8010d50:	080200dc 	.word	0x080200dc

08010d54 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
 8010d60:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010d62:	89fb      	ldrh	r3, [r7, #14]
 8010d64:	3304      	adds	r3, #4
 8010d66:	2b44      	cmp	r3, #68	@ 0x44
 8010d68:	d906      	bls.n	8010d78 <dhcp_option_long+0x24>
 8010d6a:	4b19      	ldr	r3, [pc, #100]	@ (8010dd0 <dhcp_option_long+0x7c>)
 8010d6c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8010d70:	4918      	ldr	r1, [pc, #96]	@ (8010dd4 <dhcp_option_long+0x80>)
 8010d72:	4819      	ldr	r0, [pc, #100]	@ (8010dd8 <dhcp_option_long+0x84>)
 8010d74:	f00c ff44 	bl	801dc00 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	0e1a      	lsrs	r2, r3, #24
 8010d7c:	89fb      	ldrh	r3, [r7, #14]
 8010d7e:	1c59      	adds	r1, r3, #1
 8010d80:	81f9      	strh	r1, [r7, #14]
 8010d82:	4619      	mov	r1, r3
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	440b      	add	r3, r1
 8010d88:	b2d2      	uxtb	r2, r2
 8010d8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	0c1a      	lsrs	r2, r3, #16
 8010d90:	89fb      	ldrh	r3, [r7, #14]
 8010d92:	1c59      	adds	r1, r3, #1
 8010d94:	81f9      	strh	r1, [r7, #14]
 8010d96:	4619      	mov	r1, r3
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	440b      	add	r3, r1
 8010d9c:	b2d2      	uxtb	r2, r2
 8010d9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	0a1a      	lsrs	r2, r3, #8
 8010da4:	89fb      	ldrh	r3, [r7, #14]
 8010da6:	1c59      	adds	r1, r3, #1
 8010da8:	81f9      	strh	r1, [r7, #14]
 8010daa:	4619      	mov	r1, r3
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	440b      	add	r3, r1
 8010db0:	b2d2      	uxtb	r2, r2
 8010db2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010db4:	89fb      	ldrh	r3, [r7, #14]
 8010db6:	1c5a      	adds	r2, r3, #1
 8010db8:	81fa      	strh	r2, [r7, #14]
 8010dba:	461a      	mov	r2, r3
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	4413      	add	r3, r2
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	b2d2      	uxtb	r2, r2
 8010dc4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	0802004c 	.word	0x0802004c
 8010dd4:	080202c8 	.word	0x080202c8
 8010dd8:	080200dc 	.word	0x080200dc

08010ddc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b090      	sub	sp, #64	@ 0x40
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010de6:	2300      	movs	r3, #0
 8010de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8010dea:	2300      	movs	r3, #0
 8010dec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010dee:	2208      	movs	r2, #8
 8010df0:	2100      	movs	r1, #0
 8010df2:	48b5      	ldr	r0, [pc, #724]	@ (80110c8 <dhcp_parse_reply+0x2ec>)
 8010df4:	f00c ffa3 	bl	801dd3e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	895b      	ldrh	r3, [r3, #10]
 8010dfc:	2b2b      	cmp	r3, #43	@ 0x2b
 8010dfe:	d802      	bhi.n	8010e06 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010e00:	f06f 0301 	mvn.w	r3, #1
 8010e04:	e2a7      	b.n	8011356 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010e0c:	23f0      	movs	r3, #240	@ 0xf0
 8010e0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	891b      	ldrh	r3, [r3, #8]
 8010e14:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e1a:	e00c      	b.n	8010e36 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	895b      	ldrh	r3, [r3, #10]
 8010e20:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010e22:	1ad3      	subs	r3, r2, r3
 8010e24:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e28:	895b      	ldrh	r3, [r3, #10]
 8010e2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010e2c:	1ad3      	subs	r3, r2, r3
 8010e2e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8010e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d004      	beq.n	8010e46 <dhcp_parse_reply+0x6a>
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3e:	895b      	ldrh	r3, [r3, #10]
 8010e40:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d2ea      	bcs.n	8010e1c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d102      	bne.n	8010e52 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010e4c:	f06f 0301 	mvn.w	r3, #1
 8010e50:	e281      	b.n	8011356 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010e52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e54:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8010e56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010e58:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8010e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010e60:	e239      	b.n	80112d6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010e62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e66:	4413      	add	r3, r2
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8010e72:	f04f 33ff 	mov.w	r3, #4294967295
 8010e76:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010e78:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e7a:	3302      	adds	r3, #2
 8010e7c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010e7e:	8bfa      	ldrh	r2, [r7, #30]
 8010e80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d202      	bcs.n	8010e8c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010e86:	f06f 0301 	mvn.w	r3, #1
 8010e8a:	e264      	b.n	8011356 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010e8c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e8e:	3301      	adds	r3, #1
 8010e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e92:	8952      	ldrh	r2, [r2, #10]
 8010e94:	4293      	cmp	r3, r2
 8010e96:	da07      	bge.n	8010ea8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010e98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e9e:	4413      	add	r3, r2
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ea6:	e00b      	b.n	8010ec0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <dhcp_parse_reply+0xde>
 8010eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	e000      	b.n	8010ebc <dhcp_parse_reply+0xe0>
 8010eba:	2300      	movs	r3, #0
 8010ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8010ec8:	7dfb      	ldrb	r3, [r7, #23]
 8010eca:	2b3b      	cmp	r3, #59	@ 0x3b
 8010ecc:	f200 812c 	bhi.w	8011128 <dhcp_parse_reply+0x34c>
 8010ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8010ed8 <dhcp_parse_reply+0xfc>)
 8010ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed6:	bf00      	nop
 8010ed8:	08010fc9 	.word	0x08010fc9
 8010edc:	08010fd9 	.word	0x08010fd9
 8010ee0:	08011129 	.word	0x08011129
 8010ee4:	08010ffb 	.word	0x08010ffb
 8010ee8:	08011129 	.word	0x08011129
 8010eec:	08011129 	.word	0x08011129
 8010ef0:	08011129 	.word	0x08011129
 8010ef4:	08011129 	.word	0x08011129
 8010ef8:	08011129 	.word	0x08011129
 8010efc:	08011129 	.word	0x08011129
 8010f00:	08011129 	.word	0x08011129
 8010f04:	08011129 	.word	0x08011129
 8010f08:	08011129 	.word	0x08011129
 8010f0c:	08011129 	.word	0x08011129
 8010f10:	08011129 	.word	0x08011129
 8010f14:	08011129 	.word	0x08011129
 8010f18:	08011129 	.word	0x08011129
 8010f1c:	08011129 	.word	0x08011129
 8010f20:	08011129 	.word	0x08011129
 8010f24:	08011129 	.word	0x08011129
 8010f28:	08011129 	.word	0x08011129
 8010f2c:	08011129 	.word	0x08011129
 8010f30:	08011129 	.word	0x08011129
 8010f34:	08011129 	.word	0x08011129
 8010f38:	08011129 	.word	0x08011129
 8010f3c:	08011129 	.word	0x08011129
 8010f40:	08011129 	.word	0x08011129
 8010f44:	08011129 	.word	0x08011129
 8010f48:	08011129 	.word	0x08011129
 8010f4c:	08011129 	.word	0x08011129
 8010f50:	08011129 	.word	0x08011129
 8010f54:	08011129 	.word	0x08011129
 8010f58:	08011129 	.word	0x08011129
 8010f5c:	08011129 	.word	0x08011129
 8010f60:	08011129 	.word	0x08011129
 8010f64:	08011129 	.word	0x08011129
 8010f68:	08011129 	.word	0x08011129
 8010f6c:	08011129 	.word	0x08011129
 8010f70:	08011129 	.word	0x08011129
 8010f74:	08011129 	.word	0x08011129
 8010f78:	08011129 	.word	0x08011129
 8010f7c:	08011129 	.word	0x08011129
 8010f80:	08011129 	.word	0x08011129
 8010f84:	08011129 	.word	0x08011129
 8010f88:	08011129 	.word	0x08011129
 8010f8c:	08011129 	.word	0x08011129
 8010f90:	08011129 	.word	0x08011129
 8010f94:	08011129 	.word	0x08011129
 8010f98:	08011129 	.word	0x08011129
 8010f9c:	08011129 	.word	0x08011129
 8010fa0:	08011129 	.word	0x08011129
 8010fa4:	08011027 	.word	0x08011027
 8010fa8:	08011049 	.word	0x08011049
 8010fac:	08011085 	.word	0x08011085
 8010fb0:	080110a7 	.word	0x080110a7
 8010fb4:	08011129 	.word	0x08011129
 8010fb8:	08011129 	.word	0x08011129
 8010fbc:	08011129 	.word	0x08011129
 8010fc0:	080110e5 	.word	0x080110e5
 8010fc4:	08011107 	.word	0x08011107
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010fce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fd2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8010fd6:	e0ab      	b.n	8011130 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fdc:	2b04      	cmp	r3, #4
 8010fde:	d009      	beq.n	8010ff4 <dhcp_parse_reply+0x218>
 8010fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80110cc <dhcp_parse_reply+0x2f0>)
 8010fe2:	f240 622e 	movw	r2, #1582	@ 0x62e
 8010fe6:	493a      	ldr	r1, [pc, #232]	@ (80110d0 <dhcp_parse_reply+0x2f4>)
 8010fe8:	483a      	ldr	r0, [pc, #232]	@ (80110d4 <dhcp_parse_reply+0x2f8>)
 8010fea:	f00c fe09 	bl	801dc00 <iprintf>
 8010fee:	f06f 0305 	mvn.w	r3, #5
 8010ff2:	e1b0      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010ff4:	2306      	movs	r3, #6
 8010ff6:	623b      	str	r3, [r7, #32]
        break;
 8010ff8:	e09a      	b.n	8011130 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010ffa:	2304      	movs	r3, #4
 8010ffc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011000:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011008:	429a      	cmp	r2, r3
 801100a:	d209      	bcs.n	8011020 <dhcp_parse_reply+0x244>
 801100c:	4b2f      	ldr	r3, [pc, #188]	@ (80110cc <dhcp_parse_reply+0x2f0>)
 801100e:	f240 6233 	movw	r2, #1587	@ 0x633
 8011012:	4931      	ldr	r1, [pc, #196]	@ (80110d8 <dhcp_parse_reply+0x2fc>)
 8011014:	482f      	ldr	r0, [pc, #188]	@ (80110d4 <dhcp_parse_reply+0x2f8>)
 8011016:	f00c fdf3 	bl	801dc00 <iprintf>
 801101a:	f06f 0305 	mvn.w	r3, #5
 801101e:	e19a      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011020:	2307      	movs	r3, #7
 8011022:	623b      	str	r3, [r7, #32]
        break;
 8011024:	e084      	b.n	8011130 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011026:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801102a:	2b04      	cmp	r3, #4
 801102c:	d009      	beq.n	8011042 <dhcp_parse_reply+0x266>
 801102e:	4b27      	ldr	r3, [pc, #156]	@ (80110cc <dhcp_parse_reply+0x2f0>)
 8011030:	f240 6241 	movw	r2, #1601	@ 0x641
 8011034:	4926      	ldr	r1, [pc, #152]	@ (80110d0 <dhcp_parse_reply+0x2f4>)
 8011036:	4827      	ldr	r0, [pc, #156]	@ (80110d4 <dhcp_parse_reply+0x2f8>)
 8011038:	f00c fde2 	bl	801dc00 <iprintf>
 801103c:	f06f 0305 	mvn.w	r3, #5
 8011040:	e189      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8011042:	2303      	movs	r3, #3
 8011044:	623b      	str	r3, [r7, #32]
        break;
 8011046:	e073      	b.n	8011130 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801104c:	2b01      	cmp	r3, #1
 801104e:	d009      	beq.n	8011064 <dhcp_parse_reply+0x288>
 8011050:	4b1e      	ldr	r3, [pc, #120]	@ (80110cc <dhcp_parse_reply+0x2f0>)
 8011052:	f240 624f 	movw	r2, #1615	@ 0x64f
 8011056:	4921      	ldr	r1, [pc, #132]	@ (80110dc <dhcp_parse_reply+0x300>)
 8011058:	481e      	ldr	r0, [pc, #120]	@ (80110d4 <dhcp_parse_reply+0x2f8>)
 801105a:	f00c fdd1 	bl	801dc00 <iprintf>
 801105e:	f06f 0305 	mvn.w	r3, #5
 8011062:	e178      	b.n	8011356 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8011064:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011066:	2bf0      	cmp	r3, #240	@ 0xf0
 8011068:	d009      	beq.n	801107e <dhcp_parse_reply+0x2a2>
 801106a:	4b18      	ldr	r3, [pc, #96]	@ (80110cc <dhcp_parse_reply+0x2f0>)
 801106c:	f240 6251 	movw	r2, #1617	@ 0x651
 8011070:	491b      	ldr	r1, [pc, #108]	@ (80110e0 <dhcp_parse_reply+0x304>)
 8011072:	4818      	ldr	r0, [pc, #96]	@ (80110d4 <dhcp_parse_reply+0x2f8>)
 8011074:	f00c fdc4 	bl	801dc00 <iprintf>
 8011078:	f06f 0305 	mvn.w	r3, #5
 801107c:	e16b      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801107e:	2300      	movs	r3, #0
 8011080:	623b      	str	r3, [r7, #32]
        break;
 8011082:	e055      	b.n	8011130 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011088:	2b01      	cmp	r3, #1
 801108a:	d009      	beq.n	80110a0 <dhcp_parse_reply+0x2c4>
 801108c:	4b0f      	ldr	r3, [pc, #60]	@ (80110cc <dhcp_parse_reply+0x2f0>)
 801108e:	f240 6255 	movw	r2, #1621	@ 0x655
 8011092:	4912      	ldr	r1, [pc, #72]	@ (80110dc <dhcp_parse_reply+0x300>)
 8011094:	480f      	ldr	r0, [pc, #60]	@ (80110d4 <dhcp_parse_reply+0x2f8>)
 8011096:	f00c fdb3 	bl	801dc00 <iprintf>
 801109a:	f06f 0305 	mvn.w	r3, #5
 801109e:	e15a      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80110a0:	2301      	movs	r3, #1
 80110a2:	623b      	str	r3, [r7, #32]
        break;
 80110a4:	e044      	b.n	8011130 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80110a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110aa:	2b04      	cmp	r3, #4
 80110ac:	d009      	beq.n	80110c2 <dhcp_parse_reply+0x2e6>
 80110ae:	4b07      	ldr	r3, [pc, #28]	@ (80110cc <dhcp_parse_reply+0x2f0>)
 80110b0:	f240 6259 	movw	r2, #1625	@ 0x659
 80110b4:	4906      	ldr	r1, [pc, #24]	@ (80110d0 <dhcp_parse_reply+0x2f4>)
 80110b6:	4807      	ldr	r0, [pc, #28]	@ (80110d4 <dhcp_parse_reply+0x2f8>)
 80110b8:	f00c fda2 	bl	801dc00 <iprintf>
 80110bc:	f06f 0305 	mvn.w	r3, #5
 80110c0:	e149      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80110c2:	2302      	movs	r3, #2
 80110c4:	623b      	str	r3, [r7, #32]
        break;
 80110c6:	e033      	b.n	8011130 <dhcp_parse_reply+0x354>
 80110c8:	20008734 	.word	0x20008734
 80110cc:	0802004c 	.word	0x0802004c
 80110d0:	08020304 	.word	0x08020304
 80110d4:	080200dc 	.word	0x080200dc
 80110d8:	08020310 	.word	0x08020310
 80110dc:	08020324 	.word	0x08020324
 80110e0:	08020330 	.word	0x08020330
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80110e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110e8:	2b04      	cmp	r3, #4
 80110ea:	d009      	beq.n	8011100 <dhcp_parse_reply+0x324>
 80110ec:	4b9c      	ldr	r3, [pc, #624]	@ (8011360 <dhcp_parse_reply+0x584>)
 80110ee:	f240 625d 	movw	r2, #1629	@ 0x65d
 80110f2:	499c      	ldr	r1, [pc, #624]	@ (8011364 <dhcp_parse_reply+0x588>)
 80110f4:	489c      	ldr	r0, [pc, #624]	@ (8011368 <dhcp_parse_reply+0x58c>)
 80110f6:	f00c fd83 	bl	801dc00 <iprintf>
 80110fa:	f06f 0305 	mvn.w	r3, #5
 80110fe:	e12a      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011100:	2304      	movs	r3, #4
 8011102:	623b      	str	r3, [r7, #32]
        break;
 8011104:	e014      	b.n	8011130 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801110a:	2b04      	cmp	r3, #4
 801110c:	d009      	beq.n	8011122 <dhcp_parse_reply+0x346>
 801110e:	4b94      	ldr	r3, [pc, #592]	@ (8011360 <dhcp_parse_reply+0x584>)
 8011110:	f240 6261 	movw	r2, #1633	@ 0x661
 8011114:	4993      	ldr	r1, [pc, #588]	@ (8011364 <dhcp_parse_reply+0x588>)
 8011116:	4894      	ldr	r0, [pc, #592]	@ (8011368 <dhcp_parse_reply+0x58c>)
 8011118:	f00c fd72 	bl	801dc00 <iprintf>
 801111c:	f06f 0305 	mvn.w	r3, #5
 8011120:	e119      	b.n	8011356 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011122:	2305      	movs	r3, #5
 8011124:	623b      	str	r3, [r7, #32]
        break;
 8011126:	e003      	b.n	8011130 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8011128:	2300      	movs	r3, #0
 801112a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801112e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8011130:	7dfb      	ldrb	r3, [r7, #23]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d103      	bne.n	801113e <dhcp_parse_reply+0x362>
      offset++;
 8011136:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011138:	3301      	adds	r3, #1
 801113a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801113c:	e0a1      	b.n	8011282 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801113e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011144:	4413      	add	r3, r2
 8011146:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801114a:	4293      	cmp	r3, r2
 801114c:	dd02      	ble.n	8011154 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801114e:	f06f 0301 	mvn.w	r3, #1
 8011152:	e100      	b.n	8011356 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8011154:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011158:	b29a      	uxth	r2, r3
 801115a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801115c:	4413      	add	r3, r2
 801115e:	b29b      	uxth	r3, r3
 8011160:	3302      	adds	r3, #2
 8011162:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8011164:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 808a 	beq.w	8011282 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011172:	6a3b      	ldr	r3, [r7, #32]
 8011174:	2b00      	cmp	r3, #0
 8011176:	db02      	blt.n	801117e <dhcp_parse_reply+0x3a2>
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	2b07      	cmp	r3, #7
 801117c:	dd06      	ble.n	801118c <dhcp_parse_reply+0x3b0>
 801117e:	4b78      	ldr	r3, [pc, #480]	@ (8011360 <dhcp_parse_reply+0x584>)
 8011180:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8011184:	4979      	ldr	r1, [pc, #484]	@ (801136c <dhcp_parse_reply+0x590>)
 8011186:	4878      	ldr	r0, [pc, #480]	@ (8011368 <dhcp_parse_reply+0x58c>)
 8011188:	f00c fd3a 	bl	801dc00 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801118c:	4a78      	ldr	r2, [pc, #480]	@ (8011370 <dhcp_parse_reply+0x594>)
 801118e:	6a3b      	ldr	r3, [r7, #32]
 8011190:	4413      	add	r3, r2
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d174      	bne.n	8011282 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8011198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801119c:	2b04      	cmp	r3, #4
 801119e:	bf28      	it	cs
 80111a0:	2304      	movcs	r3, #4
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80111a6:	8bfb      	ldrh	r3, [r7, #30]
 80111a8:	8aba      	ldrh	r2, [r7, #20]
 80111aa:	f107 0108 	add.w	r1, r7, #8
 80111ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80111b0:	f005 f90c 	bl	80163cc <pbuf_copy_partial>
 80111b4:	4603      	mov	r3, r0
 80111b6:	461a      	mov	r2, r3
 80111b8:	8abb      	ldrh	r3, [r7, #20]
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d002      	beq.n	80111c4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80111be:	f06f 0301 	mvn.w	r3, #1
 80111c2:	e0c8      	b.n	8011356 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80111c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111c8:	2b04      	cmp	r3, #4
 80111ca:	d933      	bls.n	8011234 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80111cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111d0:	f003 0303 	and.w	r3, r3, #3
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d009      	beq.n	80111ee <dhcp_parse_reply+0x412>
 80111da:	4b61      	ldr	r3, [pc, #388]	@ (8011360 <dhcp_parse_reply+0x584>)
 80111dc:	f240 6281 	movw	r2, #1665	@ 0x681
 80111e0:	4964      	ldr	r1, [pc, #400]	@ (8011374 <dhcp_parse_reply+0x598>)
 80111e2:	4861      	ldr	r0, [pc, #388]	@ (8011368 <dhcp_parse_reply+0x58c>)
 80111e4:	f00c fd0c 	bl	801dc00 <iprintf>
 80111e8:	f06f 0305 	mvn.w	r3, #5
 80111ec:	e0b3      	b.n	8011356 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80111ee:	4a60      	ldr	r2, [pc, #384]	@ (8011370 <dhcp_parse_reply+0x594>)
 80111f0:	6a3b      	ldr	r3, [r7, #32]
 80111f2:	4413      	add	r3, r2
 80111f4:	2201      	movs	r2, #1
 80111f6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f003 fa43 	bl	8014686 <lwip_htonl>
 8011200:	4602      	mov	r2, r0
 8011202:	495d      	ldr	r1, [pc, #372]	@ (8011378 <dhcp_parse_reply+0x59c>)
 8011204:	6a3b      	ldr	r3, [r7, #32]
 8011206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801120a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801120e:	3b04      	subs	r3, #4
 8011210:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011214:	8bfb      	ldrh	r3, [r7, #30]
 8011216:	3304      	adds	r3, #4
 8011218:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801121a:	8a7a      	ldrh	r2, [r7, #18]
 801121c:	8bfb      	ldrh	r3, [r7, #30]
 801121e:	429a      	cmp	r2, r3
 8011220:	d202      	bcs.n	8011228 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8011222:	f06f 0301 	mvn.w	r3, #1
 8011226:	e096      	b.n	8011356 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8011228:	8a7b      	ldrh	r3, [r7, #18]
 801122a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801122c:	6a3b      	ldr	r3, [r7, #32]
 801122e:	3301      	adds	r3, #1
 8011230:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011232:	e79e      	b.n	8011172 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8011234:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011238:	2b04      	cmp	r3, #4
 801123a:	d106      	bne.n	801124a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	4618      	mov	r0, r3
 8011240:	f003 fa21 	bl	8014686 <lwip_htonl>
 8011244:	4603      	mov	r3, r0
 8011246:	60bb      	str	r3, [r7, #8]
 8011248:	e011      	b.n	801126e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801124a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801124e:	2b01      	cmp	r3, #1
 8011250:	d009      	beq.n	8011266 <dhcp_parse_reply+0x48a>
 8011252:	4b43      	ldr	r3, [pc, #268]	@ (8011360 <dhcp_parse_reply+0x584>)
 8011254:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8011258:	4948      	ldr	r1, [pc, #288]	@ (801137c <dhcp_parse_reply+0x5a0>)
 801125a:	4843      	ldr	r0, [pc, #268]	@ (8011368 <dhcp_parse_reply+0x58c>)
 801125c:	f00c fcd0 	bl	801dc00 <iprintf>
 8011260:	f06f 0305 	mvn.w	r3, #5
 8011264:	e077      	b.n	8011356 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8011266:	f107 0308 	add.w	r3, r7, #8
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801126e:	4a40      	ldr	r2, [pc, #256]	@ (8011370 <dhcp_parse_reply+0x594>)
 8011270:	6a3b      	ldr	r3, [r7, #32]
 8011272:	4413      	add	r3, r2
 8011274:	2201      	movs	r2, #1
 8011276:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011278:	68ba      	ldr	r2, [r7, #8]
 801127a:	493f      	ldr	r1, [pc, #252]	@ (8011378 <dhcp_parse_reply+0x59c>)
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8011282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011284:	895b      	ldrh	r3, [r3, #10]
 8011286:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011288:	429a      	cmp	r2, r3
 801128a:	d324      	bcc.n	80112d6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801128c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801128e:	895b      	ldrh	r3, [r3, #10]
 8011290:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8011296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011298:	895b      	ldrh	r3, [r3, #10]
 801129a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801129c:	1ad3      	subs	r3, r2, r3
 801129e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80112a0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80112a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d213      	bcs.n	80112d0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80112a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80112ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d109      	bne.n	80112c8 <dhcp_parse_reply+0x4ec>
 80112b4:	4b2a      	ldr	r3, [pc, #168]	@ (8011360 <dhcp_parse_reply+0x584>)
 80112b6:	f240 629d 	movw	r2, #1693	@ 0x69d
 80112ba:	4931      	ldr	r1, [pc, #196]	@ (8011380 <dhcp_parse_reply+0x5a4>)
 80112bc:	482a      	ldr	r0, [pc, #168]	@ (8011368 <dhcp_parse_reply+0x58c>)
 80112be:	f00c fc9f 	bl	801dc00 <iprintf>
 80112c2:	f06f 0305 	mvn.w	r3, #5
 80112c6:	e046      	b.n	8011356 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80112c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112ce:	e002      	b.n	80112d6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80112d0:	f06f 0301 	mvn.w	r3, #1
 80112d4:	e03f      	b.n	8011356 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80112d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d00a      	beq.n	80112f2 <dhcp_parse_reply+0x516>
 80112dc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80112de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d206      	bcs.n	80112f2 <dhcp_parse_reply+0x516>
 80112e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80112e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80112e8:	4413      	add	r3, r2
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	2bff      	cmp	r3, #255	@ 0xff
 80112ee:	f47f adb8 	bne.w	8010e62 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80112f2:	4b1f      	ldr	r3, [pc, #124]	@ (8011370 <dhcp_parse_reply+0x594>)
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d018      	beq.n	801132c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80112fa:	4b1f      	ldr	r3, [pc, #124]	@ (8011378 <dhcp_parse_reply+0x59c>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011300:	4b1b      	ldr	r3, [pc, #108]	@ (8011370 <dhcp_parse_reply+0x594>)
 8011302:	2200      	movs	r2, #0
 8011304:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2b01      	cmp	r3, #1
 801130a:	d102      	bne.n	8011312 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801130c:	2301      	movs	r3, #1
 801130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011310:	e00c      	b.n	801132c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b02      	cmp	r3, #2
 8011316:	d102      	bne.n	801131e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8011318:	2301      	movs	r3, #1
 801131a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801131c:	e006      	b.n	801132c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2b03      	cmp	r3, #3
 8011322:	d103      	bne.n	801132c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8011324:	2301      	movs	r3, #1
 8011326:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8011328:	2301      	movs	r3, #1
 801132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132e:	2b00      	cmp	r3, #0
 8011330:	d006      	beq.n	8011340 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8011336:	236c      	movs	r3, #108	@ 0x6c
 8011338:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801133a:	23ec      	movs	r3, #236	@ 0xec
 801133c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801133e:	e56a      	b.n	8010e16 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8011340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011342:	2b00      	cmp	r3, #0
 8011344:	d006      	beq.n	8011354 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8011346:	2300      	movs	r3, #0
 8011348:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801134a:	232c      	movs	r3, #44	@ 0x2c
 801134c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801134e:	236c      	movs	r3, #108	@ 0x6c
 8011350:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8011352:	e560      	b.n	8010e16 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3740      	adds	r7, #64	@ 0x40
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	0802004c 	.word	0x0802004c
 8011364:	08020304 	.word	0x08020304
 8011368:	080200dc 	.word	0x080200dc
 801136c:	08020348 	.word	0x08020348
 8011370:	20008734 	.word	0x20008734
 8011374:	0802035c 	.word	0x0802035c
 8011378:	20008714 	.word	0x20008714
 801137c:	08020374 	.word	0x08020374
 8011380:	08020388 	.word	0x08020388

08011384 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b08a      	sub	sp, #40	@ 0x28
 8011388:	af00      	add	r7, sp, #0
 801138a:	60f8      	str	r0, [r7, #12]
 801138c:	60b9      	str	r1, [r7, #8]
 801138e:	607a      	str	r2, [r7, #4]
 8011390:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8011392:	4b60      	ldr	r3, [pc, #384]	@ (8011514 <dhcp_recv+0x190>)
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011398:	6a3b      	ldr	r3, [r7, #32]
 801139a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801139c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f000 809d 	beq.w	80114e6 <dhcp_recv+0x162>
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	791b      	ldrb	r3, [r3, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	f000 8098 	beq.w	80114e6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	895b      	ldrh	r3, [r3, #10]
 80113ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80113bc:	f240 8095 	bls.w	80114ea <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	2b02      	cmp	r3, #2
 80113c6:	f040 8092 	bne.w	80114ee <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80113ca:	2300      	movs	r3, #0
 80113cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80113d0:	e012      	b.n	80113f8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80113d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113d6:	6a3a      	ldr	r2, [r7, #32]
 80113d8:	4413      	add	r3, r2
 80113da:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80113de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113e2:	69b9      	ldr	r1, [r7, #24]
 80113e4:	440b      	add	r3, r1
 80113e6:	7f1b      	ldrb	r3, [r3, #28]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	f040 8082 	bne.w	80114f2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80113ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113f2:	3301      	adds	r3, #1
 80113f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011402:	429a      	cmp	r2, r3
 8011404:	d203      	bcs.n	801140e <dhcp_recv+0x8a>
 8011406:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801140a:	2b05      	cmp	r3, #5
 801140c:	d9e1      	bls.n	80113d2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	4618      	mov	r0, r3
 8011414:	f003 f937 	bl	8014686 <lwip_htonl>
 8011418:	4602      	mov	r2, r0
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	429a      	cmp	r2, r3
 8011420:	d169      	bne.n	80114f6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8011422:	69f9      	ldr	r1, [r7, #28]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff fcd9 	bl	8010ddc <dhcp_parse_reply>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d164      	bne.n	80114fa <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8011430:	4b39      	ldr	r3, [pc, #228]	@ (8011518 <dhcp_recv+0x194>)
 8011432:	785b      	ldrb	r3, [r3, #1]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d062      	beq.n	80114fe <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801143e:	4b37      	ldr	r3, [pc, #220]	@ (801151c <dhcp_recv+0x198>)
 8011440:	685b      	ldr	r3, [r3, #4]
 8011442:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011444:	7cfb      	ldrb	r3, [r7, #19]
 8011446:	2b05      	cmp	r3, #5
 8011448:	d12a      	bne.n	80114a0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	795b      	ldrb	r3, [r3, #5]
 801144e:	2b01      	cmp	r3, #1
 8011450:	d112      	bne.n	8011478 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8011452:	6979      	ldr	r1, [r7, #20]
 8011454:	6a38      	ldr	r0, [r7, #32]
 8011456:	f7fe fe1d 	bl	8010094 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801145a:	6a3b      	ldr	r3, [r7, #32]
 801145c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8011460:	f003 0308 	and.w	r3, r3, #8
 8011464:	2b00      	cmp	r3, #0
 8011466:	d003      	beq.n	8011470 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8011468:	6a38      	ldr	r0, [r7, #32]
 801146a:	f7fe fb8b 	bl	800fb84 <dhcp_check>
 801146e:	e049      	b.n	8011504 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8011470:	6a38      	ldr	r0, [r7, #32]
 8011472:	f7ff f86d 	bl	8010550 <dhcp_bind>
 8011476:	e045      	b.n	8011504 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	795b      	ldrb	r3, [r3, #5]
 801147c:	2b03      	cmp	r3, #3
 801147e:	d007      	beq.n	8011490 <dhcp_recv+0x10c>
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	795b      	ldrb	r3, [r3, #5]
 8011484:	2b04      	cmp	r3, #4
 8011486:	d003      	beq.n	8011490 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801148c:	2b05      	cmp	r3, #5
 801148e:	d139      	bne.n	8011504 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8011490:	6979      	ldr	r1, [r7, #20]
 8011492:	6a38      	ldr	r0, [r7, #32]
 8011494:	f7fe fdfe 	bl	8010094 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011498:	6a38      	ldr	r0, [r7, #32]
 801149a:	f7ff f859 	bl	8010550 <dhcp_bind>
 801149e:	e031      	b.n	8011504 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80114a0:	7cfb      	ldrb	r3, [r7, #19]
 80114a2:	2b06      	cmp	r3, #6
 80114a4:	d113      	bne.n	80114ce <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80114aa:	2b03      	cmp	r3, #3
 80114ac:	d00b      	beq.n	80114c6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114ae:	69fb      	ldr	r3, [r7, #28]
 80114b0:	795b      	ldrb	r3, [r3, #5]
 80114b2:	2b01      	cmp	r3, #1
 80114b4:	d007      	beq.n	80114c6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80114ba:	2b04      	cmp	r3, #4
 80114bc:	d003      	beq.n	80114c6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	795b      	ldrb	r3, [r3, #5]
 80114c2:	2b05      	cmp	r3, #5
 80114c4:	d103      	bne.n	80114ce <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80114c6:	6a38      	ldr	r0, [r7, #32]
 80114c8:	f7fe fb42 	bl	800fb50 <dhcp_handle_nak>
 80114cc:	e01a      	b.n	8011504 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80114ce:	7cfb      	ldrb	r3, [r7, #19]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d116      	bne.n	8011502 <dhcp_recv+0x17e>
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	795b      	ldrb	r3, [r3, #5]
 80114d8:	2b06      	cmp	r3, #6
 80114da:	d112      	bne.n	8011502 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80114dc:	6979      	ldr	r1, [r7, #20]
 80114de:	6a38      	ldr	r0, [r7, #32]
 80114e0:	f7fe fb84 	bl	800fbec <dhcp_handle_offer>
 80114e4:	e00e      	b.n	8011504 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114e6:	bf00      	nop
 80114e8:	e00c      	b.n	8011504 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114ea:	bf00      	nop
 80114ec:	e00a      	b.n	8011504 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114ee:	bf00      	nop
 80114f0:	e008      	b.n	8011504 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80114f2:	bf00      	nop
 80114f4:	e006      	b.n	8011504 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114f6:	bf00      	nop
 80114f8:	e004      	b.n	8011504 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114fa:	bf00      	nop
 80114fc:	e002      	b.n	8011504 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80114fe:	bf00      	nop
 8011500:	e000      	b.n	8011504 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8011502:	bf00      	nop
  pbuf_free(p);
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f004 fd5b 	bl	8015fc0 <pbuf_free>
}
 801150a:	bf00      	nop
 801150c:	3728      	adds	r7, #40	@ 0x28
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	20008854 	.word	0x20008854
 8011518:	20008734 	.word	0x20008734
 801151c:	20008714 	.word	0x20008714

08011520 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b088      	sub	sp, #32
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	603b      	str	r3, [r7, #0]
 801152c:	4613      	mov	r3, r2
 801152e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d108      	bne.n	8011548 <dhcp_create_msg+0x28>
 8011536:	4b5f      	ldr	r3, [pc, #380]	@ (80116b4 <dhcp_create_msg+0x194>)
 8011538:	f240 7269 	movw	r2, #1897	@ 0x769
 801153c:	495e      	ldr	r1, [pc, #376]	@ (80116b8 <dhcp_create_msg+0x198>)
 801153e:	485f      	ldr	r0, [pc, #380]	@ (80116bc <dhcp_create_msg+0x19c>)
 8011540:	f00c fb5e 	bl	801dc00 <iprintf>
 8011544:	2300      	movs	r3, #0
 8011546:	e0b1      	b.n	80116ac <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d108      	bne.n	8011560 <dhcp_create_msg+0x40>
 801154e:	4b59      	ldr	r3, [pc, #356]	@ (80116b4 <dhcp_create_msg+0x194>)
 8011550:	f240 726a 	movw	r2, #1898	@ 0x76a
 8011554:	495a      	ldr	r1, [pc, #360]	@ (80116c0 <dhcp_create_msg+0x1a0>)
 8011556:	4859      	ldr	r0, [pc, #356]	@ (80116bc <dhcp_create_msg+0x19c>)
 8011558:	f00c fb52 	bl	801dc00 <iprintf>
 801155c:	2300      	movs	r3, #0
 801155e:	e0a5      	b.n	80116ac <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8011560:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011564:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8011568:	2036      	movs	r0, #54	@ 0x36
 801156a:	f004 fa13 	bl	8015994 <pbuf_alloc>
 801156e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d101      	bne.n	801157a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011576:	2300      	movs	r3, #0
 8011578:	e098      	b.n	80116ac <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	895b      	ldrh	r3, [r3, #10]
 801157e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8011582:	d206      	bcs.n	8011592 <dhcp_create_msg+0x72>
 8011584:	4b4b      	ldr	r3, [pc, #300]	@ (80116b4 <dhcp_create_msg+0x194>)
 8011586:	f240 7271 	movw	r2, #1905	@ 0x771
 801158a:	494e      	ldr	r1, [pc, #312]	@ (80116c4 <dhcp_create_msg+0x1a4>)
 801158c:	484b      	ldr	r0, [pc, #300]	@ (80116bc <dhcp_create_msg+0x19c>)
 801158e:	f00c fb37 	bl	801dc00 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011592:	79fb      	ldrb	r3, [r7, #7]
 8011594:	2b03      	cmp	r3, #3
 8011596:	d103      	bne.n	80115a0 <dhcp_create_msg+0x80>
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	795b      	ldrb	r3, [r3, #5]
 801159c:	2b03      	cmp	r3, #3
 801159e:	d10d      	bne.n	80115bc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80115a0:	68bb      	ldr	r3, [r7, #8]
 80115a2:	799b      	ldrb	r3, [r3, #6]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d105      	bne.n	80115b4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80115a8:	f00c fa2a 	bl	801da00 <rand>
 80115ac:	4603      	mov	r3, r0
 80115ae:	461a      	mov	r2, r3
 80115b0:	4b45      	ldr	r3, [pc, #276]	@ (80116c8 <dhcp_create_msg+0x1a8>)
 80115b2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80115b4:	4b44      	ldr	r3, [pc, #272]	@ (80116c8 <dhcp_create_msg+0x1a8>)
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80115bc:	69bb      	ldr	r3, [r7, #24]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80115c2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80115c6:	2100      	movs	r1, #0
 80115c8:	6978      	ldr	r0, [r7, #20]
 80115ca:	f00c fbb8 	bl	801dd3e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	2201      	movs	r2, #1
 80115d2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	2201      	movs	r2, #1
 80115d8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f003 f84c 	bl	8014686 <lwip_htonl>
 80115ee:	4602      	mov	r2, r0
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80115f4:	79fb      	ldrb	r3, [r7, #7]
 80115f6:	2b08      	cmp	r3, #8
 80115f8:	d010      	beq.n	801161c <dhcp_create_msg+0xfc>
 80115fa:	79fb      	ldrb	r3, [r7, #7]
 80115fc:	2b04      	cmp	r3, #4
 80115fe:	d00d      	beq.n	801161c <dhcp_create_msg+0xfc>
 8011600:	79fb      	ldrb	r3, [r7, #7]
 8011602:	2b07      	cmp	r3, #7
 8011604:	d00a      	beq.n	801161c <dhcp_create_msg+0xfc>
 8011606:	79fb      	ldrb	r3, [r7, #7]
 8011608:	2b03      	cmp	r3, #3
 801160a:	d10c      	bne.n	8011626 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8011610:	2b05      	cmp	r3, #5
 8011612:	d003      	beq.n	801161c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	795b      	ldrb	r3, [r3, #5]
 8011618:	2b04      	cmp	r3, #4
 801161a:	d104      	bne.n	8011626 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	3304      	adds	r3, #4
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011626:	2300      	movs	r3, #0
 8011628:	83fb      	strh	r3, [r7, #30]
 801162a:	e00c      	b.n	8011646 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801162c:	8bfa      	ldrh	r2, [r7, #30]
 801162e:	8bfb      	ldrh	r3, [r7, #30]
 8011630:	68f9      	ldr	r1, [r7, #12]
 8011632:	440a      	add	r2, r1
 8011634:	f892 102e 	ldrb.w	r1, [r2, #46]	@ 0x2e
 8011638:	697a      	ldr	r2, [r7, #20]
 801163a:	4413      	add	r3, r2
 801163c:	460a      	mov	r2, r1
 801163e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011640:	8bfb      	ldrh	r3, [r7, #30]
 8011642:	3301      	adds	r3, #1
 8011644:	83fb      	strh	r3, [r7, #30]
 8011646:	8bfb      	ldrh	r3, [r7, #30]
 8011648:	2b05      	cmp	r3, #5
 801164a:	d9ef      	bls.n	801162c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	2200      	movs	r2, #0
 8011650:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011654:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8011658:	2200      	movs	r2, #0
 801165a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801165e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8011662:	2200      	movs	r2, #0
 8011664:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8011668:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801166c:	2200      	movs	r2, #0
 801166e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8011672:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801167c:	2301      	movs	r3, #1
 801167e:	2235      	movs	r2, #53	@ 0x35
 8011680:	2000      	movs	r0, #0
 8011682:	f7ff fadb 	bl	8010c3c <dhcp_option>
 8011686:	4603      	mov	r3, r0
 8011688:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011690:	79fa      	ldrb	r2, [r7, #7]
 8011692:	8a7b      	ldrh	r3, [r7, #18]
 8011694:	4618      	mov	r0, r3
 8011696:	f7ff fb05 	bl	8010ca4 <dhcp_option_byte>
 801169a:	4603      	mov	r3, r0
 801169c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d002      	beq.n	80116aa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	8a7a      	ldrh	r2, [r7, #18]
 80116a8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80116aa:	69bb      	ldr	r3, [r7, #24]
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3720      	adds	r7, #32
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	0802004c 	.word	0x0802004c
 80116b8:	0802039c 	.word	0x0802039c
 80116bc:	080200dc 	.word	0x080200dc
 80116c0:	080203bc 	.word	0x080203bc
 80116c4:	080203dc 	.word	0x080203dc
 80116c8:	20008744 	.word	0x20008744

080116cc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	4603      	mov	r3, r0
 80116d4:	60b9      	str	r1, [r7, #8]
 80116d6:	607a      	str	r2, [r7, #4]
 80116d8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80116da:	89fb      	ldrh	r3, [r7, #14]
 80116dc:	1c5a      	adds	r2, r3, #1
 80116de:	81fa      	strh	r2, [r7, #14]
 80116e0:	461a      	mov	r2, r3
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	4413      	add	r3, r2
 80116e6:	22ff      	movs	r2, #255	@ 0xff
 80116e8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80116ea:	e007      	b.n	80116fc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80116ec:	89fb      	ldrh	r3, [r7, #14]
 80116ee:	1c5a      	adds	r2, r3, #1
 80116f0:	81fa      	strh	r2, [r7, #14]
 80116f2:	461a      	mov	r2, r3
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	4413      	add	r3, r2
 80116f8:	2200      	movs	r2, #0
 80116fa:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80116fc:	89fb      	ldrh	r3, [r7, #14]
 80116fe:	2b43      	cmp	r3, #67	@ 0x43
 8011700:	d904      	bls.n	801170c <dhcp_option_trailer+0x40>
 8011702:	89fb      	ldrh	r3, [r7, #14]
 8011704:	f003 0303 	and.w	r3, r3, #3
 8011708:	2b00      	cmp	r3, #0
 801170a:	d002      	beq.n	8011712 <dhcp_option_trailer+0x46>
 801170c:	89fb      	ldrh	r3, [r7, #14]
 801170e:	2b43      	cmp	r3, #67	@ 0x43
 8011710:	d9ec      	bls.n	80116ec <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8011712:	89fb      	ldrh	r3, [r7, #14]
 8011714:	33f0      	adds	r3, #240	@ 0xf0
 8011716:	b29b      	uxth	r3, r3
 8011718:	4619      	mov	r1, r3
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f004 fa98 	bl	8015c50 <pbuf_realloc>
}
 8011720:	bf00      	nop
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011728:	b480      	push	{r7}
 801172a:	b085      	sub	sp, #20
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d017      	beq.n	8011766 <dhcp_supplied_address+0x3e>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801173a:	2b00      	cmp	r3, #0
 801173c:	d013      	beq.n	8011766 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011742:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	795b      	ldrb	r3, [r3, #5]
 8011748:	2b0a      	cmp	r3, #10
 801174a:	d007      	beq.n	801175c <dhcp_supplied_address+0x34>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	795b      	ldrb	r3, [r3, #5]
 8011750:	2b05      	cmp	r3, #5
 8011752:	d003      	beq.n	801175c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011758:	2b04      	cmp	r3, #4
 801175a:	d101      	bne.n	8011760 <dhcp_supplied_address+0x38>
 801175c:	2301      	movs	r3, #1
 801175e:	e000      	b.n	8011762 <dhcp_supplied_address+0x3a>
 8011760:	2300      	movs	r3, #0
 8011762:	b2db      	uxtb	r3, r3
 8011764:	e000      	b.n	8011768 <dhcp_supplied_address+0x40>
  }
  return 0;
 8011766:	2300      	movs	r3, #0
}
 8011768:	4618      	mov	r0, r3
 801176a:	3714      	adds	r7, #20
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801177c:	4915      	ldr	r1, [pc, #84]	@ (80117d4 <etharp_free_entry+0x60>)
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	4613      	mov	r3, r2
 8011782:	005b      	lsls	r3, r3, #1
 8011784:	4413      	add	r3, r2
 8011786:	00db      	lsls	r3, r3, #3
 8011788:	440b      	add	r3, r1
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d013      	beq.n	80117b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011790:	4910      	ldr	r1, [pc, #64]	@ (80117d4 <etharp_free_entry+0x60>)
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	4613      	mov	r3, r2
 8011796:	005b      	lsls	r3, r3, #1
 8011798:	4413      	add	r3, r2
 801179a:	00db      	lsls	r3, r3, #3
 801179c:	440b      	add	r3, r1
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4618      	mov	r0, r3
 80117a2:	f004 fc0d 	bl	8015fc0 <pbuf_free>
    arp_table[i].q = NULL;
 80117a6:	490b      	ldr	r1, [pc, #44]	@ (80117d4 <etharp_free_entry+0x60>)
 80117a8:	687a      	ldr	r2, [r7, #4]
 80117aa:	4613      	mov	r3, r2
 80117ac:	005b      	lsls	r3, r3, #1
 80117ae:	4413      	add	r3, r2
 80117b0:	00db      	lsls	r3, r3, #3
 80117b2:	440b      	add	r3, r1
 80117b4:	2200      	movs	r2, #0
 80117b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80117b8:	4906      	ldr	r1, [pc, #24]	@ (80117d4 <etharp_free_entry+0x60>)
 80117ba:	687a      	ldr	r2, [r7, #4]
 80117bc:	4613      	mov	r3, r2
 80117be:	005b      	lsls	r3, r3, #1
 80117c0:	4413      	add	r3, r2
 80117c2:	00db      	lsls	r3, r3, #3
 80117c4:	440b      	add	r3, r1
 80117c6:	3314      	adds	r3, #20
 80117c8:	2200      	movs	r2, #0
 80117ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80117cc:	bf00      	nop
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	20008748 	.word	0x20008748

080117d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80117de:	2300      	movs	r3, #0
 80117e0:	607b      	str	r3, [r7, #4]
 80117e2:	e096      	b.n	8011912 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80117e4:	494f      	ldr	r1, [pc, #316]	@ (8011924 <etharp_tmr+0x14c>)
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	4613      	mov	r3, r2
 80117ea:	005b      	lsls	r3, r3, #1
 80117ec:	4413      	add	r3, r2
 80117ee:	00db      	lsls	r3, r3, #3
 80117f0:	440b      	add	r3, r1
 80117f2:	3314      	adds	r3, #20
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80117f8:	78fb      	ldrb	r3, [r7, #3]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	f000 8086 	beq.w	801190c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011800:	4948      	ldr	r1, [pc, #288]	@ (8011924 <etharp_tmr+0x14c>)
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	4613      	mov	r3, r2
 8011806:	005b      	lsls	r3, r3, #1
 8011808:	4413      	add	r3, r2
 801180a:	00db      	lsls	r3, r3, #3
 801180c:	440b      	add	r3, r1
 801180e:	3312      	adds	r3, #18
 8011810:	881b      	ldrh	r3, [r3, #0]
 8011812:	3301      	adds	r3, #1
 8011814:	b298      	uxth	r0, r3
 8011816:	4943      	ldr	r1, [pc, #268]	@ (8011924 <etharp_tmr+0x14c>)
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	4613      	mov	r3, r2
 801181c:	005b      	lsls	r3, r3, #1
 801181e:	4413      	add	r3, r2
 8011820:	00db      	lsls	r3, r3, #3
 8011822:	440b      	add	r3, r1
 8011824:	3312      	adds	r3, #18
 8011826:	4602      	mov	r2, r0
 8011828:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801182a:	493e      	ldr	r1, [pc, #248]	@ (8011924 <etharp_tmr+0x14c>)
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	4613      	mov	r3, r2
 8011830:	005b      	lsls	r3, r3, #1
 8011832:	4413      	add	r3, r2
 8011834:	00db      	lsls	r3, r3, #3
 8011836:	440b      	add	r3, r1
 8011838:	3312      	adds	r3, #18
 801183a:	881b      	ldrh	r3, [r3, #0]
 801183c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8011840:	d215      	bcs.n	801186e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011842:	4938      	ldr	r1, [pc, #224]	@ (8011924 <etharp_tmr+0x14c>)
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	4613      	mov	r3, r2
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	4413      	add	r3, r2
 801184c:	00db      	lsls	r3, r3, #3
 801184e:	440b      	add	r3, r1
 8011850:	3314      	adds	r3, #20
 8011852:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011854:	2b01      	cmp	r3, #1
 8011856:	d10e      	bne.n	8011876 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011858:	4932      	ldr	r1, [pc, #200]	@ (8011924 <etharp_tmr+0x14c>)
 801185a:	687a      	ldr	r2, [r7, #4]
 801185c:	4613      	mov	r3, r2
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	4413      	add	r3, r2
 8011862:	00db      	lsls	r3, r3, #3
 8011864:	440b      	add	r3, r1
 8011866:	3312      	adds	r3, #18
 8011868:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801186a:	2b04      	cmp	r3, #4
 801186c:	d903      	bls.n	8011876 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7ff ff80 	bl	8011774 <etharp_free_entry>
 8011874:	e04a      	b.n	801190c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011876:	492b      	ldr	r1, [pc, #172]	@ (8011924 <etharp_tmr+0x14c>)
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	4613      	mov	r3, r2
 801187c:	005b      	lsls	r3, r3, #1
 801187e:	4413      	add	r3, r2
 8011880:	00db      	lsls	r3, r3, #3
 8011882:	440b      	add	r3, r1
 8011884:	3314      	adds	r3, #20
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	2b03      	cmp	r3, #3
 801188a:	d10a      	bne.n	80118a2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801188c:	4925      	ldr	r1, [pc, #148]	@ (8011924 <etharp_tmr+0x14c>)
 801188e:	687a      	ldr	r2, [r7, #4]
 8011890:	4613      	mov	r3, r2
 8011892:	005b      	lsls	r3, r3, #1
 8011894:	4413      	add	r3, r2
 8011896:	00db      	lsls	r3, r3, #3
 8011898:	440b      	add	r3, r1
 801189a:	3314      	adds	r3, #20
 801189c:	2204      	movs	r2, #4
 801189e:	701a      	strb	r2, [r3, #0]
 80118a0:	e034      	b.n	801190c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80118a2:	4920      	ldr	r1, [pc, #128]	@ (8011924 <etharp_tmr+0x14c>)
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	4613      	mov	r3, r2
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	4413      	add	r3, r2
 80118ac:	00db      	lsls	r3, r3, #3
 80118ae:	440b      	add	r3, r1
 80118b0:	3314      	adds	r3, #20
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b04      	cmp	r3, #4
 80118b6:	d10a      	bne.n	80118ce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80118b8:	491a      	ldr	r1, [pc, #104]	@ (8011924 <etharp_tmr+0x14c>)
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	4613      	mov	r3, r2
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	4413      	add	r3, r2
 80118c2:	00db      	lsls	r3, r3, #3
 80118c4:	440b      	add	r3, r1
 80118c6:	3314      	adds	r3, #20
 80118c8:	2202      	movs	r2, #2
 80118ca:	701a      	strb	r2, [r3, #0]
 80118cc:	e01e      	b.n	801190c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80118ce:	4915      	ldr	r1, [pc, #84]	@ (8011924 <etharp_tmr+0x14c>)
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	4613      	mov	r3, r2
 80118d4:	005b      	lsls	r3, r3, #1
 80118d6:	4413      	add	r3, r2
 80118d8:	00db      	lsls	r3, r3, #3
 80118da:	440b      	add	r3, r1
 80118dc:	3314      	adds	r3, #20
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d113      	bne.n	801190c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80118e4:	490f      	ldr	r1, [pc, #60]	@ (8011924 <etharp_tmr+0x14c>)
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	4613      	mov	r3, r2
 80118ea:	005b      	lsls	r3, r3, #1
 80118ec:	4413      	add	r3, r2
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	440b      	add	r3, r1
 80118f2:	3308      	adds	r3, #8
 80118f4:	6818      	ldr	r0, [r3, #0]
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	4613      	mov	r3, r2
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	4413      	add	r3, r2
 80118fe:	00db      	lsls	r3, r3, #3
 8011900:	4a08      	ldr	r2, [pc, #32]	@ (8011924 <etharp_tmr+0x14c>)
 8011902:	4413      	add	r3, r2
 8011904:	3304      	adds	r3, #4
 8011906:	4619      	mov	r1, r3
 8011908:	f000 fe72 	bl	80125f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3301      	adds	r3, #1
 8011910:	607b      	str	r3, [r7, #4]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b09      	cmp	r3, #9
 8011916:	f77f af65 	ble.w	80117e4 <etharp_tmr+0xc>
      }
    }
  }
}
 801191a:	bf00      	nop
 801191c:	bf00      	nop
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	20008748 	.word	0x20008748

08011928 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08a      	sub	sp, #40	@ 0x28
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	460b      	mov	r3, r1
 8011932:	607a      	str	r2, [r7, #4]
 8011934:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011936:	230a      	movs	r3, #10
 8011938:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801193a:	230a      	movs	r3, #10
 801193c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801193e:	230a      	movs	r3, #10
 8011940:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8011942:	2300      	movs	r3, #0
 8011944:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011946:	230a      	movs	r3, #10
 8011948:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	83bb      	strh	r3, [r7, #28]
 801194e:	2300      	movs	r3, #0
 8011950:	837b      	strh	r3, [r7, #26]
 8011952:	2300      	movs	r3, #0
 8011954:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011956:	2300      	movs	r3, #0
 8011958:	843b      	strh	r3, [r7, #32]
 801195a:	e0ae      	b.n	8011aba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801195c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011960:	49a6      	ldr	r1, [pc, #664]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011962:	4613      	mov	r3, r2
 8011964:	005b      	lsls	r3, r3, #1
 8011966:	4413      	add	r3, r2
 8011968:	00db      	lsls	r3, r3, #3
 801196a:	440b      	add	r3, r1
 801196c:	3314      	adds	r3, #20
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011972:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011976:	2b0a      	cmp	r3, #10
 8011978:	d105      	bne.n	8011986 <etharp_find_entry+0x5e>
 801197a:	7dfb      	ldrb	r3, [r7, #23]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d102      	bne.n	8011986 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011980:	8c3b      	ldrh	r3, [r7, #32]
 8011982:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011984:	e095      	b.n	8011ab2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011986:	7dfb      	ldrb	r3, [r7, #23]
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 8092 	beq.w	8011ab2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801198e:	7dfb      	ldrb	r3, [r7, #23]
 8011990:	2b01      	cmp	r3, #1
 8011992:	d009      	beq.n	80119a8 <etharp_find_entry+0x80>
 8011994:	7dfb      	ldrb	r3, [r7, #23]
 8011996:	2b01      	cmp	r3, #1
 8011998:	d806      	bhi.n	80119a8 <etharp_find_entry+0x80>
 801199a:	4b99      	ldr	r3, [pc, #612]	@ (8011c00 <etharp_find_entry+0x2d8>)
 801199c:	f240 1223 	movw	r2, #291	@ 0x123
 80119a0:	4998      	ldr	r1, [pc, #608]	@ (8011c04 <etharp_find_entry+0x2dc>)
 80119a2:	4899      	ldr	r0, [pc, #612]	@ (8011c08 <etharp_find_entry+0x2e0>)
 80119a4:	f00c f92c 	bl	801dc00 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d020      	beq.n	80119f0 <etharp_find_entry+0xc8>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6819      	ldr	r1, [r3, #0]
 80119b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119b6:	4891      	ldr	r0, [pc, #580]	@ (8011bfc <etharp_find_entry+0x2d4>)
 80119b8:	4613      	mov	r3, r2
 80119ba:	005b      	lsls	r3, r3, #1
 80119bc:	4413      	add	r3, r2
 80119be:	00db      	lsls	r3, r3, #3
 80119c0:	4403      	add	r3, r0
 80119c2:	3304      	adds	r3, #4
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	4299      	cmp	r1, r3
 80119c8:	d112      	bne.n	80119f0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d00c      	beq.n	80119ea <etharp_find_entry+0xc2>
 80119d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119d4:	4989      	ldr	r1, [pc, #548]	@ (8011bfc <etharp_find_entry+0x2d4>)
 80119d6:	4613      	mov	r3, r2
 80119d8:	005b      	lsls	r3, r3, #1
 80119da:	4413      	add	r3, r2
 80119dc:	00db      	lsls	r3, r3, #3
 80119de:	440b      	add	r3, r1
 80119e0:	3308      	adds	r3, #8
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d102      	bne.n	80119f0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80119ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119ee:	e100      	b.n	8011bf2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80119f0:	7dfb      	ldrb	r3, [r7, #23]
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	d140      	bne.n	8011a78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80119f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119fa:	4980      	ldr	r1, [pc, #512]	@ (8011bfc <etharp_find_entry+0x2d4>)
 80119fc:	4613      	mov	r3, r2
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	4413      	add	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	440b      	add	r3, r1
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d01a      	beq.n	8011a42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011a0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a10:	497a      	ldr	r1, [pc, #488]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011a12:	4613      	mov	r3, r2
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	4413      	add	r3, r2
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	440b      	add	r3, r1
 8011a1c:	3312      	adds	r3, #18
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	8bba      	ldrh	r2, [r7, #28]
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d845      	bhi.n	8011ab2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011a26:	8c3b      	ldrh	r3, [r7, #32]
 8011a28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011a2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a2e:	4973      	ldr	r1, [pc, #460]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011a30:	4613      	mov	r3, r2
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	4413      	add	r3, r2
 8011a36:	00db      	lsls	r3, r3, #3
 8011a38:	440b      	add	r3, r1
 8011a3a:	3312      	adds	r3, #18
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	83bb      	strh	r3, [r7, #28]
 8011a40:	e037      	b.n	8011ab2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011a42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a46:	496d      	ldr	r1, [pc, #436]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011a48:	4613      	mov	r3, r2
 8011a4a:	005b      	lsls	r3, r3, #1
 8011a4c:	4413      	add	r3, r2
 8011a4e:	00db      	lsls	r3, r3, #3
 8011a50:	440b      	add	r3, r1
 8011a52:	3312      	adds	r3, #18
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	8b7a      	ldrh	r2, [r7, #26]
 8011a58:	429a      	cmp	r2, r3
 8011a5a:	d82a      	bhi.n	8011ab2 <etharp_find_entry+0x18a>
            old_pending = i;
 8011a5c:	8c3b      	ldrh	r3, [r7, #32]
 8011a5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8011a60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a64:	4965      	ldr	r1, [pc, #404]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011a66:	4613      	mov	r3, r2
 8011a68:	005b      	lsls	r3, r3, #1
 8011a6a:	4413      	add	r3, r2
 8011a6c:	00db      	lsls	r3, r3, #3
 8011a6e:	440b      	add	r3, r1
 8011a70:	3312      	adds	r3, #18
 8011a72:	881b      	ldrh	r3, [r3, #0]
 8011a74:	837b      	strh	r3, [r7, #26]
 8011a76:	e01c      	b.n	8011ab2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011a78:	7dfb      	ldrb	r3, [r7, #23]
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d919      	bls.n	8011ab2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011a7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a82:	495e      	ldr	r1, [pc, #376]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011a84:	4613      	mov	r3, r2
 8011a86:	005b      	lsls	r3, r3, #1
 8011a88:	4413      	add	r3, r2
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	440b      	add	r3, r1
 8011a8e:	3312      	adds	r3, #18
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	8b3a      	ldrh	r2, [r7, #24]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d80c      	bhi.n	8011ab2 <etharp_find_entry+0x18a>
            old_stable = i;
 8011a98:	8c3b      	ldrh	r3, [r7, #32]
 8011a9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8011a9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aa0:	4956      	ldr	r1, [pc, #344]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011aa2:	4613      	mov	r3, r2
 8011aa4:	005b      	lsls	r3, r3, #1
 8011aa6:	4413      	add	r3, r2
 8011aa8:	00db      	lsls	r3, r3, #3
 8011aaa:	440b      	add	r3, r1
 8011aac:	3312      	adds	r3, #18
 8011aae:	881b      	ldrh	r3, [r3, #0]
 8011ab0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ab2:	8c3b      	ldrh	r3, [r7, #32]
 8011ab4:	3301      	adds	r3, #1
 8011ab6:	b29b      	uxth	r3, r3
 8011ab8:	843b      	strh	r3, [r7, #32]
 8011aba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011abe:	2b09      	cmp	r3, #9
 8011ac0:	f77f af4c 	ble.w	801195c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011ac4:	7afb      	ldrb	r3, [r7, #11]
 8011ac6:	f003 0302 	and.w	r3, r3, #2
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d108      	bne.n	8011ae0 <etharp_find_entry+0x1b8>
 8011ace:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011ad2:	2b0a      	cmp	r3, #10
 8011ad4:	d107      	bne.n	8011ae6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011ad6:	7afb      	ldrb	r3, [r7, #11]
 8011ad8:	f003 0301 	and.w	r3, r3, #1
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d102      	bne.n	8011ae6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae4:	e085      	b.n	8011bf2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011ae6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011aea:	2b09      	cmp	r3, #9
 8011aec:	dc02      	bgt.n	8011af4 <etharp_find_entry+0x1cc>
    i = empty;
 8011aee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011af0:	843b      	strh	r3, [r7, #32]
 8011af2:	e039      	b.n	8011b68 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011af4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011af8:	2b09      	cmp	r3, #9
 8011afa:	dc14      	bgt.n	8011b26 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011afc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011afe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011b00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b04:	493d      	ldr	r1, [pc, #244]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011b06:	4613      	mov	r3, r2
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	4413      	add	r3, r2
 8011b0c:	00db      	lsls	r3, r3, #3
 8011b0e:	440b      	add	r3, r1
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d018      	beq.n	8011b48 <etharp_find_entry+0x220>
 8011b16:	4b3a      	ldr	r3, [pc, #232]	@ (8011c00 <etharp_find_entry+0x2d8>)
 8011b18:	f240 126d 	movw	r2, #365	@ 0x16d
 8011b1c:	493b      	ldr	r1, [pc, #236]	@ (8011c0c <etharp_find_entry+0x2e4>)
 8011b1e:	483a      	ldr	r0, [pc, #232]	@ (8011c08 <etharp_find_entry+0x2e0>)
 8011b20:	f00c f86e 	bl	801dc00 <iprintf>
 8011b24:	e010      	b.n	8011b48 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011b26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011b2a:	2b09      	cmp	r3, #9
 8011b2c:	dc02      	bgt.n	8011b34 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011b2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b30:	843b      	strh	r3, [r7, #32]
 8011b32:	e009      	b.n	8011b48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011b34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011b38:	2b09      	cmp	r3, #9
 8011b3a:	dc02      	bgt.n	8011b42 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011b3c:	8bfb      	ldrh	r3, [r7, #30]
 8011b3e:	843b      	strh	r3, [r7, #32]
 8011b40:	e002      	b.n	8011b48 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011b42:	f04f 33ff 	mov.w	r3, #4294967295
 8011b46:	e054      	b.n	8011bf2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b4c:	2b09      	cmp	r3, #9
 8011b4e:	dd06      	ble.n	8011b5e <etharp_find_entry+0x236>
 8011b50:	4b2b      	ldr	r3, [pc, #172]	@ (8011c00 <etharp_find_entry+0x2d8>)
 8011b52:	f240 127f 	movw	r2, #383	@ 0x17f
 8011b56:	492e      	ldr	r1, [pc, #184]	@ (8011c10 <etharp_find_entry+0x2e8>)
 8011b58:	482b      	ldr	r0, [pc, #172]	@ (8011c08 <etharp_find_entry+0x2e0>)
 8011b5a:	f00c f851 	bl	801dc00 <iprintf>
    etharp_free_entry(i);
 8011b5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7ff fe06 	bl	8011774 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011b68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b6c:	2b09      	cmp	r3, #9
 8011b6e:	dd06      	ble.n	8011b7e <etharp_find_entry+0x256>
 8011b70:	4b23      	ldr	r3, [pc, #140]	@ (8011c00 <etharp_find_entry+0x2d8>)
 8011b72:	f240 1283 	movw	r2, #387	@ 0x183
 8011b76:	4926      	ldr	r1, [pc, #152]	@ (8011c10 <etharp_find_entry+0x2e8>)
 8011b78:	4823      	ldr	r0, [pc, #140]	@ (8011c08 <etharp_find_entry+0x2e0>)
 8011b7a:	f00c f841 	bl	801dc00 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011b7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b82:	491e      	ldr	r1, [pc, #120]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011b84:	4613      	mov	r3, r2
 8011b86:	005b      	lsls	r3, r3, #1
 8011b88:	4413      	add	r3, r2
 8011b8a:	00db      	lsls	r3, r3, #3
 8011b8c:	440b      	add	r3, r1
 8011b8e:	3314      	adds	r3, #20
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d006      	beq.n	8011ba4 <etharp_find_entry+0x27c>
 8011b96:	4b1a      	ldr	r3, [pc, #104]	@ (8011c00 <etharp_find_entry+0x2d8>)
 8011b98:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011b9c:	491d      	ldr	r1, [pc, #116]	@ (8011c14 <etharp_find_entry+0x2ec>)
 8011b9e:	481a      	ldr	r0, [pc, #104]	@ (8011c08 <etharp_find_entry+0x2e0>)
 8011ba0:	f00c f82e 	bl	801dc00 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00b      	beq.n	8011bc2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011baa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	6819      	ldr	r1, [r3, #0]
 8011bb2:	4812      	ldr	r0, [pc, #72]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011bb4:	4613      	mov	r3, r2
 8011bb6:	005b      	lsls	r3, r3, #1
 8011bb8:	4413      	add	r3, r2
 8011bba:	00db      	lsls	r3, r3, #3
 8011bbc:	4403      	add	r3, r0
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011bc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bc6:	490d      	ldr	r1, [pc, #52]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011bc8:	4613      	mov	r3, r2
 8011bca:	005b      	lsls	r3, r3, #1
 8011bcc:	4413      	add	r3, r2
 8011bce:	00db      	lsls	r3, r3, #3
 8011bd0:	440b      	add	r3, r1
 8011bd2:	3312      	adds	r3, #18
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011bd8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bdc:	4907      	ldr	r1, [pc, #28]	@ (8011bfc <etharp_find_entry+0x2d4>)
 8011bde:	4613      	mov	r3, r2
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	4413      	add	r3, r2
 8011be4:	00db      	lsls	r3, r3, #3
 8011be6:	440b      	add	r3, r1
 8011be8:	3308      	adds	r3, #8
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011bee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3728      	adds	r7, #40	@ 0x28
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	20008748 	.word	0x20008748
 8011c00:	0802041c 	.word	0x0802041c
 8011c04:	08020484 	.word	0x08020484
 8011c08:	080204c4 	.word	0x080204c4
 8011c0c:	080204ec 	.word	0x080204ec
 8011c10:	08020504 	.word	0x08020504
 8011c14:	08020518 	.word	0x08020518

08011c18 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b088      	sub	sp, #32
 8011c1c:	af02      	add	r7, sp, #8
 8011c1e:	60f8      	str	r0, [r7, #12]
 8011c20:	60b9      	str	r1, [r7, #8]
 8011c22:	607a      	str	r2, [r7, #4]
 8011c24:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011c2c:	2b06      	cmp	r3, #6
 8011c2e:	d006      	beq.n	8011c3e <etharp_update_arp_entry+0x26>
 8011c30:	4b48      	ldr	r3, [pc, #288]	@ (8011d54 <etharp_update_arp_entry+0x13c>)
 8011c32:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011c36:	4948      	ldr	r1, [pc, #288]	@ (8011d58 <etharp_update_arp_entry+0x140>)
 8011c38:	4848      	ldr	r0, [pc, #288]	@ (8011d5c <etharp_update_arp_entry+0x144>)
 8011c3a:	f00b ffe1 	bl	801dc00 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011c3e:	68bb      	ldr	r3, [r7, #8]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d012      	beq.n	8011c6a <etharp_update_arp_entry+0x52>
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d00e      	beq.n	8011c6a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	68f9      	ldr	r1, [r7, #12]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f001 fe82 	bl	801395c <ip4_addr_isbroadcast_u32>
 8011c58:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d105      	bne.n	8011c6a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011c5e:	68bb      	ldr	r3, [r7, #8]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011c66:	2be0      	cmp	r3, #224	@ 0xe0
 8011c68:	d102      	bne.n	8011c70 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011c6a:	f06f 030f 	mvn.w	r3, #15
 8011c6e:	e06c      	b.n	8011d4a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011c70:	78fb      	ldrb	r3, [r7, #3]
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	4619      	mov	r1, r3
 8011c76:	68b8      	ldr	r0, [r7, #8]
 8011c78:	f7ff fe56 	bl	8011928 <etharp_find_entry>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011c80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	da02      	bge.n	8011c8e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011c88:	8afb      	ldrh	r3, [r7, #22]
 8011c8a:	b25b      	sxtb	r3, r3
 8011c8c:	e05d      	b.n	8011d4a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011c8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c92:	4933      	ldr	r1, [pc, #204]	@ (8011d60 <etharp_update_arp_entry+0x148>)
 8011c94:	4613      	mov	r3, r2
 8011c96:	005b      	lsls	r3, r3, #1
 8011c98:	4413      	add	r3, r2
 8011c9a:	00db      	lsls	r3, r3, #3
 8011c9c:	440b      	add	r3, r1
 8011c9e:	3314      	adds	r3, #20
 8011ca0:	2202      	movs	r2, #2
 8011ca2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ca8:	492d      	ldr	r1, [pc, #180]	@ (8011d60 <etharp_update_arp_entry+0x148>)
 8011caa:	4613      	mov	r3, r2
 8011cac:	005b      	lsls	r3, r3, #1
 8011cae:	4413      	add	r3, r2
 8011cb0:	00db      	lsls	r3, r3, #3
 8011cb2:	440b      	add	r3, r1
 8011cb4:	3308      	adds	r3, #8
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011cba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	005b      	lsls	r3, r3, #1
 8011cc2:	4413      	add	r3, r2
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	3308      	adds	r3, #8
 8011cc8:	4a25      	ldr	r2, [pc, #148]	@ (8011d60 <etharp_update_arp_entry+0x148>)
 8011cca:	4413      	add	r3, r2
 8011ccc:	3304      	adds	r3, #4
 8011cce:	2206      	movs	r2, #6
 8011cd0:	6879      	ldr	r1, [r7, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f00c f8d7 	bl	801de86 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011cd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cdc:	4920      	ldr	r1, [pc, #128]	@ (8011d60 <etharp_update_arp_entry+0x148>)
 8011cde:	4613      	mov	r3, r2
 8011ce0:	005b      	lsls	r3, r3, #1
 8011ce2:	4413      	add	r3, r2
 8011ce4:	00db      	lsls	r3, r3, #3
 8011ce6:	440b      	add	r3, r1
 8011ce8:	3312      	adds	r3, #18
 8011cea:	2200      	movs	r2, #0
 8011cec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011cee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011cf2:	491b      	ldr	r1, [pc, #108]	@ (8011d60 <etharp_update_arp_entry+0x148>)
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	005b      	lsls	r3, r3, #1
 8011cf8:	4413      	add	r3, r2
 8011cfa:	00db      	lsls	r3, r3, #3
 8011cfc:	440b      	add	r3, r1
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d021      	beq.n	8011d48 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011d04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d08:	4915      	ldr	r1, [pc, #84]	@ (8011d60 <etharp_update_arp_entry+0x148>)
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	005b      	lsls	r3, r3, #1
 8011d0e:	4413      	add	r3, r2
 8011d10:	00db      	lsls	r3, r3, #3
 8011d12:	440b      	add	r3, r1
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011d18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d1c:	4910      	ldr	r1, [pc, #64]	@ (8011d60 <etharp_update_arp_entry+0x148>)
 8011d1e:	4613      	mov	r3, r2
 8011d20:	005b      	lsls	r3, r3, #1
 8011d22:	4413      	add	r3, r2
 8011d24:	00db      	lsls	r3, r3, #3
 8011d26:	440b      	add	r3, r1
 8011d28:	2200      	movs	r2, #0
 8011d2a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8011d32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011d36:	9300      	str	r3, [sp, #0]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6939      	ldr	r1, [r7, #16]
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f00b fc19 	bl	801d574 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011d42:	6938      	ldr	r0, [r7, #16]
 8011d44:	f004 f93c 	bl	8015fc0 <pbuf_free>
  }
  return ERR_OK;
 8011d48:	2300      	movs	r3, #0
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	0802041c 	.word	0x0802041c
 8011d58:	08020544 	.word	0x08020544
 8011d5c:	080204c4 	.word	0x080204c4
 8011d60:	20008748 	.word	0x20008748

08011d64 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	60fb      	str	r3, [r7, #12]
 8011d70:	e01e      	b.n	8011db0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011d72:	4913      	ldr	r1, [pc, #76]	@ (8011dc0 <etharp_cleanup_netif+0x5c>)
 8011d74:	68fa      	ldr	r2, [r7, #12]
 8011d76:	4613      	mov	r3, r2
 8011d78:	005b      	lsls	r3, r3, #1
 8011d7a:	4413      	add	r3, r2
 8011d7c:	00db      	lsls	r3, r3, #3
 8011d7e:	440b      	add	r3, r1
 8011d80:	3314      	adds	r3, #20
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011d86:	7afb      	ldrb	r3, [r7, #11]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00e      	beq.n	8011daa <etharp_cleanup_netif+0x46>
 8011d8c:	490c      	ldr	r1, [pc, #48]	@ (8011dc0 <etharp_cleanup_netif+0x5c>)
 8011d8e:	68fa      	ldr	r2, [r7, #12]
 8011d90:	4613      	mov	r3, r2
 8011d92:	005b      	lsls	r3, r3, #1
 8011d94:	4413      	add	r3, r2
 8011d96:	00db      	lsls	r3, r3, #3
 8011d98:	440b      	add	r3, r1
 8011d9a:	3308      	adds	r3, #8
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d102      	bne.n	8011daa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f7ff fce5 	bl	8011774 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	3301      	adds	r3, #1
 8011dae:	60fb      	str	r3, [r7, #12]
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	2b09      	cmp	r3, #9
 8011db4:	dddd      	ble.n	8011d72 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011db6:	bf00      	nop
 8011db8:	bf00      	nop
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	20008748 	.word	0x20008748

08011dc4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011dc4:	b5b0      	push	{r4, r5, r7, lr}
 8011dc6:	b08a      	sub	sp, #40	@ 0x28
 8011dc8:	af04      	add	r7, sp, #16
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d107      	bne.n	8011de4 <etharp_input+0x20>
 8011dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8011ed4 <etharp_input+0x110>)
 8011dd6:	f240 228a 	movw	r2, #650	@ 0x28a
 8011dda:	493f      	ldr	r1, [pc, #252]	@ (8011ed8 <etharp_input+0x114>)
 8011ddc:	483f      	ldr	r0, [pc, #252]	@ (8011edc <etharp_input+0x118>)
 8011dde:	f00b ff0f 	bl	801dc00 <iprintf>
 8011de2:	e074      	b.n	8011ece <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011dea:	693b      	ldr	r3, [r7, #16]
 8011dec:	881b      	ldrh	r3, [r3, #0]
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011df4:	d10c      	bne.n	8011e10 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011dfa:	2b06      	cmp	r3, #6
 8011dfc:	d108      	bne.n	8011e10 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e02:	2b04      	cmp	r3, #4
 8011e04:	d104      	bne.n	8011e10 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	885b      	ldrh	r3, [r3, #2]
 8011e0a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e0c:	2b08      	cmp	r3, #8
 8011e0e:	d003      	beq.n	8011e18 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011e10:	6878      	ldr	r0, [r7, #4]
 8011e12:	f004 f8d5 	bl	8015fc0 <pbuf_free>
    return;
 8011e16:	e05a      	b.n	8011ece <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	330e      	adds	r3, #14
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011e20:	693b      	ldr	r3, [r7, #16]
 8011e22:	3318      	adds	r3, #24
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	3304      	adds	r3, #4
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d102      	bne.n	8011e38 <etharp_input+0x74>
    for_us = 0;
 8011e32:	2300      	movs	r3, #0
 8011e34:	75fb      	strb	r3, [r7, #23]
 8011e36:	e009      	b.n	8011e4c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	bf0c      	ite	eq
 8011e44:	2301      	moveq	r3, #1
 8011e46:	2300      	movne	r3, #0
 8011e48:	b2db      	uxtb	r3, r3
 8011e4a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	f103 0208 	add.w	r2, r3, #8
 8011e52:	7dfb      	ldrb	r3, [r7, #23]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d001      	beq.n	8011e5c <etharp_input+0x98>
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e000      	b.n	8011e5e <etharp_input+0x9a>
 8011e5c:	2302      	movs	r3, #2
 8011e5e:	f107 010c 	add.w	r1, r7, #12
 8011e62:	6838      	ldr	r0, [r7, #0]
 8011e64:	f7ff fed8 	bl	8011c18 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	88db      	ldrh	r3, [r3, #6]
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e72:	d003      	beq.n	8011e7c <etharp_input+0xb8>
 8011e74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011e78:	d01e      	beq.n	8011eb8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011e7a:	e025      	b.n	8011ec8 <etharp_input+0x104>
      if (for_us) {
 8011e7c:	7dfb      	ldrb	r3, [r7, #23]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d021      	beq.n	8011ec6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	f103 052e 	add.w	r5, r3, #46	@ 0x2e
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011e98:	693a      	ldr	r2, [r7, #16]
 8011e9a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011e9c:	2102      	movs	r1, #2
 8011e9e:	9103      	str	r1, [sp, #12]
 8011ea0:	f107 010c 	add.w	r1, r7, #12
 8011ea4:	9102      	str	r1, [sp, #8]
 8011ea6:	9201      	str	r2, [sp, #4]
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	462b      	mov	r3, r5
 8011eac:	4622      	mov	r2, r4
 8011eae:	4601      	mov	r1, r0
 8011eb0:	6838      	ldr	r0, [r7, #0]
 8011eb2:	f000 faef 	bl	8012494 <etharp_raw>
      break;
 8011eb6:	e006      	b.n	8011ec6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011eb8:	f107 030c 	add.w	r3, r7, #12
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	6838      	ldr	r0, [r7, #0]
 8011ec0:	f7fe fa02 	bl	80102c8 <dhcp_arp_reply>
      break;
 8011ec4:	e000      	b.n	8011ec8 <etharp_input+0x104>
      break;
 8011ec6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f004 f879 	bl	8015fc0 <pbuf_free>
}
 8011ece:	3718      	adds	r7, #24
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8011ed4:	0802041c 	.word	0x0802041c
 8011ed8:	0802059c 	.word	0x0802059c
 8011edc:	080204c4 	.word	0x080204c4

08011ee0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af02      	add	r7, sp, #8
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	4613      	mov	r3, r2
 8011eec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011eee:	79fa      	ldrb	r2, [r7, #7]
 8011ef0:	4944      	ldr	r1, [pc, #272]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011ef2:	4613      	mov	r3, r2
 8011ef4:	005b      	lsls	r3, r3, #1
 8011ef6:	4413      	add	r3, r2
 8011ef8:	00db      	lsls	r3, r3, #3
 8011efa:	440b      	add	r3, r1
 8011efc:	3314      	adds	r3, #20
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d806      	bhi.n	8011f12 <etharp_output_to_arp_index+0x32>
 8011f04:	4b40      	ldr	r3, [pc, #256]	@ (8012008 <etharp_output_to_arp_index+0x128>)
 8011f06:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011f0a:	4940      	ldr	r1, [pc, #256]	@ (801200c <etharp_output_to_arp_index+0x12c>)
 8011f0c:	4840      	ldr	r0, [pc, #256]	@ (8012010 <etharp_output_to_arp_index+0x130>)
 8011f0e:	f00b fe77 	bl	801dc00 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011f12:	79fa      	ldrb	r2, [r7, #7]
 8011f14:	493b      	ldr	r1, [pc, #236]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011f16:	4613      	mov	r3, r2
 8011f18:	005b      	lsls	r3, r3, #1
 8011f1a:	4413      	add	r3, r2
 8011f1c:	00db      	lsls	r3, r3, #3
 8011f1e:	440b      	add	r3, r1
 8011f20:	3314      	adds	r3, #20
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	2b02      	cmp	r3, #2
 8011f26:	d153      	bne.n	8011fd0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011f28:	79fa      	ldrb	r2, [r7, #7]
 8011f2a:	4936      	ldr	r1, [pc, #216]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011f2c:	4613      	mov	r3, r2
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	4413      	add	r3, r2
 8011f32:	00db      	lsls	r3, r3, #3
 8011f34:	440b      	add	r3, r1
 8011f36:	3312      	adds	r3, #18
 8011f38:	881b      	ldrh	r3, [r3, #0]
 8011f3a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011f3e:	d919      	bls.n	8011f74 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011f40:	79fa      	ldrb	r2, [r7, #7]
 8011f42:	4613      	mov	r3, r2
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	4413      	add	r3, r2
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011f4c:	4413      	add	r3, r2
 8011f4e:	3304      	adds	r3, #4
 8011f50:	4619      	mov	r1, r3
 8011f52:	68f8      	ldr	r0, [r7, #12]
 8011f54:	f000 fb4c 	bl	80125f0 <etharp_request>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d138      	bne.n	8011fd0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f5e:	79fa      	ldrb	r2, [r7, #7]
 8011f60:	4928      	ldr	r1, [pc, #160]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011f62:	4613      	mov	r3, r2
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	4413      	add	r3, r2
 8011f68:	00db      	lsls	r3, r3, #3
 8011f6a:	440b      	add	r3, r1
 8011f6c:	3314      	adds	r3, #20
 8011f6e:	2203      	movs	r2, #3
 8011f70:	701a      	strb	r2, [r3, #0]
 8011f72:	e02d      	b.n	8011fd0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011f74:	79fa      	ldrb	r2, [r7, #7]
 8011f76:	4923      	ldr	r1, [pc, #140]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011f78:	4613      	mov	r3, r2
 8011f7a:	005b      	lsls	r3, r3, #1
 8011f7c:	4413      	add	r3, r2
 8011f7e:	00db      	lsls	r3, r3, #3
 8011f80:	440b      	add	r3, r1
 8011f82:	3312      	adds	r3, #18
 8011f84:	881b      	ldrh	r3, [r3, #0]
 8011f86:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011f8a:	d321      	bcc.n	8011fd0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011f8c:	79fa      	ldrb	r2, [r7, #7]
 8011f8e:	4613      	mov	r3, r2
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	4413      	add	r3, r2
 8011f94:	00db      	lsls	r3, r3, #3
 8011f96:	4a1b      	ldr	r2, [pc, #108]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011f98:	4413      	add	r3, r2
 8011f9a:	1d19      	adds	r1, r3, #4
 8011f9c:	79fa      	ldrb	r2, [r7, #7]
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	00db      	lsls	r3, r3, #3
 8011fa6:	3308      	adds	r3, #8
 8011fa8:	4a16      	ldr	r2, [pc, #88]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011faa:	4413      	add	r3, r2
 8011fac:	3304      	adds	r3, #4
 8011fae:	461a      	mov	r2, r3
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	f000 fafb 	bl	80125ac <etharp_request_dst>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d109      	bne.n	8011fd0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011fbc:	79fa      	ldrb	r2, [r7, #7]
 8011fbe:	4911      	ldr	r1, [pc, #68]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011fc0:	4613      	mov	r3, r2
 8011fc2:	005b      	lsls	r3, r3, #1
 8011fc4:	4413      	add	r3, r2
 8011fc6:	00db      	lsls	r3, r3, #3
 8011fc8:	440b      	add	r3, r1
 8011fca:	3314      	adds	r3, #20
 8011fcc:	2203      	movs	r2, #3
 8011fce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
 8011fd6:	79fa      	ldrb	r2, [r7, #7]
 8011fd8:	4613      	mov	r3, r2
 8011fda:	005b      	lsls	r3, r3, #1
 8011fdc:	4413      	add	r3, r2
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	3308      	adds	r3, #8
 8011fe2:	4a08      	ldr	r2, [pc, #32]	@ (8012004 <etharp_output_to_arp_index+0x124>)
 8011fe4:	4413      	add	r3, r2
 8011fe6:	3304      	adds	r3, #4
 8011fe8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011fec:	9200      	str	r2, [sp, #0]
 8011fee:	460a      	mov	r2, r1
 8011ff0:	68b9      	ldr	r1, [r7, #8]
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f00b fabe 	bl	801d574 <ethernet_output>
 8011ff8:	4603      	mov	r3, r0
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	20008748 	.word	0x20008748
 8012008:	0802041c 	.word	0x0802041c
 801200c:	080205bc 	.word	0x080205bc
 8012010:	080204c4 	.word	0x080204c4

08012014 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b08a      	sub	sp, #40	@ 0x28
 8012018:	af02      	add	r7, sp, #8
 801201a:	60f8      	str	r0, [r7, #12]
 801201c:	60b9      	str	r1, [r7, #8]
 801201e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d106      	bne.n	8012038 <etharp_output+0x24>
 801202a:	4b73      	ldr	r3, [pc, #460]	@ (80121f8 <etharp_output+0x1e4>)
 801202c:	f240 321e 	movw	r2, #798	@ 0x31e
 8012030:	4972      	ldr	r1, [pc, #456]	@ (80121fc <etharp_output+0x1e8>)
 8012032:	4873      	ldr	r0, [pc, #460]	@ (8012200 <etharp_output+0x1ec>)
 8012034:	f00b fde4 	bl	801dc00 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d106      	bne.n	801204c <etharp_output+0x38>
 801203e:	4b6e      	ldr	r3, [pc, #440]	@ (80121f8 <etharp_output+0x1e4>)
 8012040:	f240 321f 	movw	r2, #799	@ 0x31f
 8012044:	496f      	ldr	r1, [pc, #444]	@ (8012204 <etharp_output+0x1f0>)
 8012046:	486e      	ldr	r0, [pc, #440]	@ (8012200 <etharp_output+0x1ec>)
 8012048:	f00b fdda 	bl	801dc00 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <etharp_output+0x4c>
 8012052:	4b69      	ldr	r3, [pc, #420]	@ (80121f8 <etharp_output+0x1e4>)
 8012054:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8012058:	496b      	ldr	r1, [pc, #428]	@ (8012208 <etharp_output+0x1f4>)
 801205a:	4869      	ldr	r0, [pc, #420]	@ (8012200 <etharp_output+0x1ec>)
 801205c:	f00b fdd0 	bl	801dc00 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	68f9      	ldr	r1, [r7, #12]
 8012066:	4618      	mov	r0, r3
 8012068:	f001 fc78 	bl	801395c <ip4_addr_isbroadcast_u32>
 801206c:	4603      	mov	r3, r0
 801206e:	2b00      	cmp	r3, #0
 8012070:	d002      	beq.n	8012078 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012072:	4b66      	ldr	r3, [pc, #408]	@ (801220c <etharp_output+0x1f8>)
 8012074:	61fb      	str	r3, [r7, #28]
 8012076:	e0af      	b.n	80121d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012080:	2be0      	cmp	r3, #224	@ 0xe0
 8012082:	d118      	bne.n	80120b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012084:	2301      	movs	r3, #1
 8012086:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012088:	2300      	movs	r3, #0
 801208a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801208c:	235e      	movs	r3, #94	@ 0x5e
 801208e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	3301      	adds	r3, #1
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801209a:	b2db      	uxtb	r3, r3
 801209c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	3302      	adds	r3, #2
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	3303      	adds	r3, #3
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80120ae:	f107 0310 	add.w	r3, r7, #16
 80120b2:	61fb      	str	r3, [r7, #28]
 80120b4:	e090      	b.n	80121d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	3304      	adds	r3, #4
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	405a      	eors	r2, r3
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	3308      	adds	r3, #8
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4013      	ands	r3, r2
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d012      	beq.n	80120f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80120d4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80120d8:	4293      	cmp	r3, r2
 80120da:	d00b      	beq.n	80120f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	330c      	adds	r3, #12
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	330c      	adds	r3, #12
 80120ea:	61bb      	str	r3, [r7, #24]
 80120ec:	e002      	b.n	80120f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80120ee:	f06f 0303 	mvn.w	r3, #3
 80120f2:	e07d      	b.n	80121f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80120f4:	4b46      	ldr	r3, [pc, #280]	@ (8012210 <etharp_output+0x1fc>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	4619      	mov	r1, r3
 80120fa:	4a46      	ldr	r2, [pc, #280]	@ (8012214 <etharp_output+0x200>)
 80120fc:	460b      	mov	r3, r1
 80120fe:	005b      	lsls	r3, r3, #1
 8012100:	440b      	add	r3, r1
 8012102:	00db      	lsls	r3, r3, #3
 8012104:	4413      	add	r3, r2
 8012106:	3314      	adds	r3, #20
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	2b01      	cmp	r3, #1
 801210c:	d925      	bls.n	801215a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801210e:	4b40      	ldr	r3, [pc, #256]	@ (8012210 <etharp_output+0x1fc>)
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	4619      	mov	r1, r3
 8012114:	4a3f      	ldr	r2, [pc, #252]	@ (8012214 <etharp_output+0x200>)
 8012116:	460b      	mov	r3, r1
 8012118:	005b      	lsls	r3, r3, #1
 801211a:	440b      	add	r3, r1
 801211c:	00db      	lsls	r3, r3, #3
 801211e:	4413      	add	r3, r2
 8012120:	3308      	adds	r3, #8
 8012122:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	429a      	cmp	r2, r3
 8012128:	d117      	bne.n	801215a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	681a      	ldr	r2, [r3, #0]
 801212e:	4b38      	ldr	r3, [pc, #224]	@ (8012210 <etharp_output+0x1fc>)
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	4618      	mov	r0, r3
 8012134:	4937      	ldr	r1, [pc, #220]	@ (8012214 <etharp_output+0x200>)
 8012136:	4603      	mov	r3, r0
 8012138:	005b      	lsls	r3, r3, #1
 801213a:	4403      	add	r3, r0
 801213c:	00db      	lsls	r3, r3, #3
 801213e:	440b      	add	r3, r1
 8012140:	3304      	adds	r3, #4
 8012142:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012144:	429a      	cmp	r2, r3
 8012146:	d108      	bne.n	801215a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012148:	4b31      	ldr	r3, [pc, #196]	@ (8012210 <etharp_output+0x1fc>)
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	461a      	mov	r2, r3
 801214e:	68b9      	ldr	r1, [r7, #8]
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7ff fec5 	bl	8011ee0 <etharp_output_to_arp_index>
 8012156:	4603      	mov	r3, r0
 8012158:	e04a      	b.n	80121f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801215a:	2300      	movs	r3, #0
 801215c:	75fb      	strb	r3, [r7, #23]
 801215e:	e031      	b.n	80121c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012160:	7dfa      	ldrb	r2, [r7, #23]
 8012162:	492c      	ldr	r1, [pc, #176]	@ (8012214 <etharp_output+0x200>)
 8012164:	4613      	mov	r3, r2
 8012166:	005b      	lsls	r3, r3, #1
 8012168:	4413      	add	r3, r2
 801216a:	00db      	lsls	r3, r3, #3
 801216c:	440b      	add	r3, r1
 801216e:	3314      	adds	r3, #20
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	2b01      	cmp	r3, #1
 8012174:	d923      	bls.n	80121be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012176:	7dfa      	ldrb	r2, [r7, #23]
 8012178:	4926      	ldr	r1, [pc, #152]	@ (8012214 <etharp_output+0x200>)
 801217a:	4613      	mov	r3, r2
 801217c:	005b      	lsls	r3, r3, #1
 801217e:	4413      	add	r3, r2
 8012180:	00db      	lsls	r3, r3, #3
 8012182:	440b      	add	r3, r1
 8012184:	3308      	adds	r3, #8
 8012186:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012188:	68fa      	ldr	r2, [r7, #12]
 801218a:	429a      	cmp	r2, r3
 801218c:	d117      	bne.n	80121be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801218e:	69bb      	ldr	r3, [r7, #24]
 8012190:	6819      	ldr	r1, [r3, #0]
 8012192:	7dfa      	ldrb	r2, [r7, #23]
 8012194:	481f      	ldr	r0, [pc, #124]	@ (8012214 <etharp_output+0x200>)
 8012196:	4613      	mov	r3, r2
 8012198:	005b      	lsls	r3, r3, #1
 801219a:	4413      	add	r3, r2
 801219c:	00db      	lsls	r3, r3, #3
 801219e:	4403      	add	r3, r0
 80121a0:	3304      	adds	r3, #4
 80121a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80121a4:	4299      	cmp	r1, r3
 80121a6:	d10a      	bne.n	80121be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80121a8:	4a19      	ldr	r2, [pc, #100]	@ (8012210 <etharp_output+0x1fc>)
 80121aa:	7dfb      	ldrb	r3, [r7, #23]
 80121ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80121ae:	7dfb      	ldrb	r3, [r7, #23]
 80121b0:	461a      	mov	r2, r3
 80121b2:	68b9      	ldr	r1, [r7, #8]
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	f7ff fe93 	bl	8011ee0 <etharp_output_to_arp_index>
 80121ba:	4603      	mov	r3, r0
 80121bc:	e018      	b.n	80121f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80121be:	7dfb      	ldrb	r3, [r7, #23]
 80121c0:	3301      	adds	r3, #1
 80121c2:	75fb      	strb	r3, [r7, #23]
 80121c4:	7dfb      	ldrb	r3, [r7, #23]
 80121c6:	2b09      	cmp	r3, #9
 80121c8:	d9ca      	bls.n	8012160 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80121ca:	68ba      	ldr	r2, [r7, #8]
 80121cc:	69b9      	ldr	r1, [r7, #24]
 80121ce:	68f8      	ldr	r0, [r7, #12]
 80121d0:	f000 f822 	bl	8012218 <etharp_query>
 80121d4:	4603      	mov	r3, r0
 80121d6:	e00b      	b.n	80121f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 80121de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	68b9      	ldr	r1, [r7, #8]
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f00b f9c3 	bl	801d574 <ethernet_output>
 80121ee:	4603      	mov	r3, r0
}
 80121f0:	4618      	mov	r0, r3
 80121f2:	3720      	adds	r7, #32
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	0802041c 	.word	0x0802041c
 80121fc:	0802059c 	.word	0x0802059c
 8012200:	080204c4 	.word	0x080204c4
 8012204:	080205ec 	.word	0x080205ec
 8012208:	0802058c 	.word	0x0802058c
 801220c:	08023bfc 	.word	0x08023bfc
 8012210:	20008838 	.word	0x20008838
 8012214:	20008748 	.word	0x20008748

08012218 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b08c      	sub	sp, #48	@ 0x30
 801221c:	af02      	add	r7, sp, #8
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	332e      	adds	r3, #46	@ 0x2e
 8012228:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801222a:	23ff      	movs	r3, #255	@ 0xff
 801222c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8012230:	2300      	movs	r3, #0
 8012232:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	68f9      	ldr	r1, [r7, #12]
 801223a:	4618      	mov	r0, r3
 801223c:	f001 fb8e 	bl	801395c <ip4_addr_isbroadcast_u32>
 8012240:	4603      	mov	r3, r0
 8012242:	2b00      	cmp	r3, #0
 8012244:	d10c      	bne.n	8012260 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801224e:	2be0      	cmp	r3, #224	@ 0xe0
 8012250:	d006      	beq.n	8012260 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d003      	beq.n	8012260 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012258:	68bb      	ldr	r3, [r7, #8]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d102      	bne.n	8012266 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012260:	f06f 030f 	mvn.w	r3, #15
 8012264:	e101      	b.n	801246a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012266:	68fa      	ldr	r2, [r7, #12]
 8012268:	2101      	movs	r1, #1
 801226a:	68b8      	ldr	r0, [r7, #8]
 801226c:	f7ff fb5c 	bl	8011928 <etharp_find_entry>
 8012270:	4603      	mov	r3, r0
 8012272:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012274:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012278:	2b00      	cmp	r3, #0
 801227a:	da02      	bge.n	8012282 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801227c:	8a7b      	ldrh	r3, [r7, #18]
 801227e:	b25b      	sxtb	r3, r3
 8012280:	e0f3      	b.n	801246a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012282:	8a7b      	ldrh	r3, [r7, #18]
 8012284:	2b7e      	cmp	r3, #126	@ 0x7e
 8012286:	d906      	bls.n	8012296 <etharp_query+0x7e>
 8012288:	4b7a      	ldr	r3, [pc, #488]	@ (8012474 <etharp_query+0x25c>)
 801228a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801228e:	497a      	ldr	r1, [pc, #488]	@ (8012478 <etharp_query+0x260>)
 8012290:	487a      	ldr	r0, [pc, #488]	@ (801247c <etharp_query+0x264>)
 8012292:	f00b fcb5 	bl	801dc00 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012296:	8a7b      	ldrh	r3, [r7, #18]
 8012298:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801229a:	7c7a      	ldrb	r2, [r7, #17]
 801229c:	4978      	ldr	r1, [pc, #480]	@ (8012480 <etharp_query+0x268>)
 801229e:	4613      	mov	r3, r2
 80122a0:	005b      	lsls	r3, r3, #1
 80122a2:	4413      	add	r3, r2
 80122a4:	00db      	lsls	r3, r3, #3
 80122a6:	440b      	add	r3, r1
 80122a8:	3314      	adds	r3, #20
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d115      	bne.n	80122dc <etharp_query+0xc4>
    is_new_entry = 1;
 80122b0:	2301      	movs	r3, #1
 80122b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80122b4:	7c7a      	ldrb	r2, [r7, #17]
 80122b6:	4972      	ldr	r1, [pc, #456]	@ (8012480 <etharp_query+0x268>)
 80122b8:	4613      	mov	r3, r2
 80122ba:	005b      	lsls	r3, r3, #1
 80122bc:	4413      	add	r3, r2
 80122be:	00db      	lsls	r3, r3, #3
 80122c0:	440b      	add	r3, r1
 80122c2:	3314      	adds	r3, #20
 80122c4:	2201      	movs	r2, #1
 80122c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80122c8:	7c7a      	ldrb	r2, [r7, #17]
 80122ca:	496d      	ldr	r1, [pc, #436]	@ (8012480 <etharp_query+0x268>)
 80122cc:	4613      	mov	r3, r2
 80122ce:	005b      	lsls	r3, r3, #1
 80122d0:	4413      	add	r3, r2
 80122d2:	00db      	lsls	r3, r3, #3
 80122d4:	440b      	add	r3, r1
 80122d6:	3308      	adds	r3, #8
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80122dc:	7c7a      	ldrb	r2, [r7, #17]
 80122de:	4968      	ldr	r1, [pc, #416]	@ (8012480 <etharp_query+0x268>)
 80122e0:	4613      	mov	r3, r2
 80122e2:	005b      	lsls	r3, r3, #1
 80122e4:	4413      	add	r3, r2
 80122e6:	00db      	lsls	r3, r3, #3
 80122e8:	440b      	add	r3, r1
 80122ea:	3314      	adds	r3, #20
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	d011      	beq.n	8012316 <etharp_query+0xfe>
 80122f2:	7c7a      	ldrb	r2, [r7, #17]
 80122f4:	4962      	ldr	r1, [pc, #392]	@ (8012480 <etharp_query+0x268>)
 80122f6:	4613      	mov	r3, r2
 80122f8:	005b      	lsls	r3, r3, #1
 80122fa:	4413      	add	r3, r2
 80122fc:	00db      	lsls	r3, r3, #3
 80122fe:	440b      	add	r3, r1
 8012300:	3314      	adds	r3, #20
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	2b01      	cmp	r3, #1
 8012306:	d806      	bhi.n	8012316 <etharp_query+0xfe>
 8012308:	4b5a      	ldr	r3, [pc, #360]	@ (8012474 <etharp_query+0x25c>)
 801230a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801230e:	495d      	ldr	r1, [pc, #372]	@ (8012484 <etharp_query+0x26c>)
 8012310:	485a      	ldr	r0, [pc, #360]	@ (801247c <etharp_query+0x264>)
 8012312:	f00b fc75 	bl	801dc00 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d102      	bne.n	8012322 <etharp_query+0x10a>
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d10c      	bne.n	801233c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012322:	68b9      	ldr	r1, [r7, #8]
 8012324:	68f8      	ldr	r0, [r7, #12]
 8012326:	f000 f963 	bl	80125f0 <etharp_request>
 801232a:	4603      	mov	r3, r0
 801232c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d102      	bne.n	801233c <etharp_query+0x124>
      return result;
 8012336:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801233a:	e096      	b.n	801246a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d106      	bne.n	8012350 <etharp_query+0x138>
 8012342:	4b4c      	ldr	r3, [pc, #304]	@ (8012474 <etharp_query+0x25c>)
 8012344:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8012348:	494f      	ldr	r1, [pc, #316]	@ (8012488 <etharp_query+0x270>)
 801234a:	484c      	ldr	r0, [pc, #304]	@ (801247c <etharp_query+0x264>)
 801234c:	f00b fc58 	bl	801dc00 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012350:	7c7a      	ldrb	r2, [r7, #17]
 8012352:	494b      	ldr	r1, [pc, #300]	@ (8012480 <etharp_query+0x268>)
 8012354:	4613      	mov	r3, r2
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	4413      	add	r3, r2
 801235a:	00db      	lsls	r3, r3, #3
 801235c:	440b      	add	r3, r1
 801235e:	3314      	adds	r3, #20
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	2b01      	cmp	r3, #1
 8012364:	d917      	bls.n	8012396 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012366:	4a49      	ldr	r2, [pc, #292]	@ (801248c <etharp_query+0x274>)
 8012368:	7c7b      	ldrb	r3, [r7, #17]
 801236a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801236c:	7c7a      	ldrb	r2, [r7, #17]
 801236e:	4613      	mov	r3, r2
 8012370:	005b      	lsls	r3, r3, #1
 8012372:	4413      	add	r3, r2
 8012374:	00db      	lsls	r3, r3, #3
 8012376:	3308      	adds	r3, #8
 8012378:	4a41      	ldr	r2, [pc, #260]	@ (8012480 <etharp_query+0x268>)
 801237a:	4413      	add	r3, r2
 801237c:	3304      	adds	r3, #4
 801237e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012382:	9200      	str	r2, [sp, #0]
 8012384:	697a      	ldr	r2, [r7, #20]
 8012386:	6879      	ldr	r1, [r7, #4]
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f00b f8f3 	bl	801d574 <ethernet_output>
 801238e:	4603      	mov	r3, r0
 8012390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012394:	e067      	b.n	8012466 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012396:	7c7a      	ldrb	r2, [r7, #17]
 8012398:	4939      	ldr	r1, [pc, #228]	@ (8012480 <etharp_query+0x268>)
 801239a:	4613      	mov	r3, r2
 801239c:	005b      	lsls	r3, r3, #1
 801239e:	4413      	add	r3, r2
 80123a0:	00db      	lsls	r3, r3, #3
 80123a2:	440b      	add	r3, r1
 80123a4:	3314      	adds	r3, #20
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d15c      	bne.n	8012466 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80123ac:	2300      	movs	r3, #0
 80123ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123b4:	e01c      	b.n	80123f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	895a      	ldrh	r2, [r3, #10]
 80123ba:	69fb      	ldr	r3, [r7, #28]
 80123bc:	891b      	ldrh	r3, [r3, #8]
 80123be:	429a      	cmp	r2, r3
 80123c0:	d10a      	bne.n	80123d8 <etharp_query+0x1c0>
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d006      	beq.n	80123d8 <etharp_query+0x1c0>
 80123ca:	4b2a      	ldr	r3, [pc, #168]	@ (8012474 <etharp_query+0x25c>)
 80123cc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80123d0:	492f      	ldr	r1, [pc, #188]	@ (8012490 <etharp_query+0x278>)
 80123d2:	482a      	ldr	r0, [pc, #168]	@ (801247c <etharp_query+0x264>)
 80123d4:	f00b fc14 	bl	801dc00 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	7b1b      	ldrb	r3, [r3, #12]
 80123dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d002      	beq.n	80123ea <etharp_query+0x1d2>
        copy_needed = 1;
 80123e4:	2301      	movs	r3, #1
 80123e6:	61bb      	str	r3, [r7, #24]
        break;
 80123e8:	e005      	b.n	80123f6 <etharp_query+0x1de>
      }
      p = p->next;
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1df      	bne.n	80123b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80123f6:	69bb      	ldr	r3, [r7, #24]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d007      	beq.n	801240c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012402:	200e      	movs	r0, #14
 8012404:	f004 f854 	bl	80164b0 <pbuf_clone>
 8012408:	61f8      	str	r0, [r7, #28]
 801240a:	e004      	b.n	8012416 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012410:	69f8      	ldr	r0, [r7, #28]
 8012412:	f003 fe7b 	bl	801610c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012416:	69fb      	ldr	r3, [r7, #28]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d021      	beq.n	8012460 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801241c:	7c7a      	ldrb	r2, [r7, #17]
 801241e:	4918      	ldr	r1, [pc, #96]	@ (8012480 <etharp_query+0x268>)
 8012420:	4613      	mov	r3, r2
 8012422:	005b      	lsls	r3, r3, #1
 8012424:	4413      	add	r3, r2
 8012426:	00db      	lsls	r3, r3, #3
 8012428:	440b      	add	r3, r1
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d00a      	beq.n	8012446 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012430:	7c7a      	ldrb	r2, [r7, #17]
 8012432:	4913      	ldr	r1, [pc, #76]	@ (8012480 <etharp_query+0x268>)
 8012434:	4613      	mov	r3, r2
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	4413      	add	r3, r2
 801243a:	00db      	lsls	r3, r3, #3
 801243c:	440b      	add	r3, r1
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4618      	mov	r0, r3
 8012442:	f003 fdbd 	bl	8015fc0 <pbuf_free>
      }
      arp_table[i].q = p;
 8012446:	7c7a      	ldrb	r2, [r7, #17]
 8012448:	490d      	ldr	r1, [pc, #52]	@ (8012480 <etharp_query+0x268>)
 801244a:	4613      	mov	r3, r2
 801244c:	005b      	lsls	r3, r3, #1
 801244e:	4413      	add	r3, r2
 8012450:	00db      	lsls	r3, r3, #3
 8012452:	440b      	add	r3, r1
 8012454:	69fa      	ldr	r2, [r7, #28]
 8012456:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012458:	2300      	movs	r3, #0
 801245a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801245e:	e002      	b.n	8012466 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012460:	23ff      	movs	r3, #255	@ 0xff
 8012462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8012466:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801246a:	4618      	mov	r0, r3
 801246c:	3728      	adds	r7, #40	@ 0x28
 801246e:	46bd      	mov	sp, r7
 8012470:	bd80      	pop	{r7, pc}
 8012472:	bf00      	nop
 8012474:	0802041c 	.word	0x0802041c
 8012478:	080205f8 	.word	0x080205f8
 801247c:	080204c4 	.word	0x080204c4
 8012480:	20008748 	.word	0x20008748
 8012484:	08020608 	.word	0x08020608
 8012488:	080205ec 	.word	0x080205ec
 801248c:	20008838 	.word	0x20008838
 8012490:	08020630 	.word	0x08020630

08012494 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b08a      	sub	sp, #40	@ 0x28
 8012498:	af02      	add	r7, sp, #8
 801249a:	60f8      	str	r0, [r7, #12]
 801249c:	60b9      	str	r1, [r7, #8]
 801249e:	607a      	str	r2, [r7, #4]
 80124a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80124a2:	2300      	movs	r3, #0
 80124a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d106      	bne.n	80124ba <etharp_raw+0x26>
 80124ac:	4b3a      	ldr	r3, [pc, #232]	@ (8012598 <etharp_raw+0x104>)
 80124ae:	f240 4257 	movw	r2, #1111	@ 0x457
 80124b2:	493a      	ldr	r1, [pc, #232]	@ (801259c <etharp_raw+0x108>)
 80124b4:	483a      	ldr	r0, [pc, #232]	@ (80125a0 <etharp_raw+0x10c>)
 80124b6:	f00b fba3 	bl	801dc00 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80124ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80124be:	211c      	movs	r1, #28
 80124c0:	200e      	movs	r0, #14
 80124c2:	f003 fa67 	bl	8015994 <pbuf_alloc>
 80124c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80124c8:	69bb      	ldr	r3, [r7, #24]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d102      	bne.n	80124d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80124ce:	f04f 33ff 	mov.w	r3, #4294967295
 80124d2:	e05d      	b.n	8012590 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80124d4:	69bb      	ldr	r3, [r7, #24]
 80124d6:	895b      	ldrh	r3, [r3, #10]
 80124d8:	2b1b      	cmp	r3, #27
 80124da:	d806      	bhi.n	80124ea <etharp_raw+0x56>
 80124dc:	4b2e      	ldr	r3, [pc, #184]	@ (8012598 <etharp_raw+0x104>)
 80124de:	f240 4262 	movw	r2, #1122	@ 0x462
 80124e2:	4930      	ldr	r1, [pc, #192]	@ (80125a4 <etharp_raw+0x110>)
 80124e4:	482e      	ldr	r0, [pc, #184]	@ (80125a0 <etharp_raw+0x10c>)
 80124e6:	f00b fb8b 	bl	801dc00 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80124f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80124f2:	4618      	mov	r0, r3
 80124f4:	f002 f8b2 	bl	801465c <lwip_htons>
 80124f8:	4603      	mov	r3, r0
 80124fa:	461a      	mov	r2, r3
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012506:	2b06      	cmp	r3, #6
 8012508:	d006      	beq.n	8012518 <etharp_raw+0x84>
 801250a:	4b23      	ldr	r3, [pc, #140]	@ (8012598 <etharp_raw+0x104>)
 801250c:	f240 4269 	movw	r2, #1129	@ 0x469
 8012510:	4925      	ldr	r1, [pc, #148]	@ (80125a8 <etharp_raw+0x114>)
 8012512:	4823      	ldr	r0, [pc, #140]	@ (80125a0 <etharp_raw+0x10c>)
 8012514:	f00b fb74 	bl	801dc00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	3308      	adds	r3, #8
 801251c:	2206      	movs	r2, #6
 801251e:	6839      	ldr	r1, [r7, #0]
 8012520:	4618      	mov	r0, r3
 8012522:	f00b fcb0 	bl	801de86 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	3312      	adds	r3, #18
 801252a:	2206      	movs	r2, #6
 801252c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801252e:	4618      	mov	r0, r3
 8012530:	f00b fca9 	bl	801de86 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	330e      	adds	r3, #14
 8012538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801253a:	6812      	ldr	r2, [r2, #0]
 801253c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	3318      	adds	r3, #24
 8012542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012544:	6812      	ldr	r2, [r2, #0]
 8012546:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	2200      	movs	r2, #0
 801254c:	701a      	strb	r2, [r3, #0]
 801254e:	2200      	movs	r2, #0
 8012550:	f042 0201 	orr.w	r2, r2, #1
 8012554:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	2200      	movs	r2, #0
 801255a:	f042 0208 	orr.w	r2, r2, #8
 801255e:	709a      	strb	r2, [r3, #2]
 8012560:	2200      	movs	r2, #0
 8012562:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2206      	movs	r2, #6
 8012568:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	2204      	movs	r2, #4
 801256e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012570:	f640 0306 	movw	r3, #2054	@ 0x806
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	68ba      	ldr	r2, [r7, #8]
 801257a:	69b9      	ldr	r1, [r7, #24]
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f00a fff9 	bl	801d574 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012582:	69b8      	ldr	r0, [r7, #24]
 8012584:	f003 fd1c 	bl	8015fc0 <pbuf_free>
  p = NULL;
 8012588:	2300      	movs	r3, #0
 801258a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801258c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3720      	adds	r7, #32
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	0802041c 	.word	0x0802041c
 801259c:	0802059c 	.word	0x0802059c
 80125a0:	080204c4 	.word	0x080204c4
 80125a4:	0802064c 	.word	0x0802064c
 80125a8:	08020680 	.word	0x08020680

080125ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b088      	sub	sp, #32
 80125b0:	af04      	add	r7, sp, #16
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	f103 012e 	add.w	r1, r3, #46	@ 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	f103 002e 	add.w	r0, r3, #46	@ 0x2e
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80125c8:	2201      	movs	r2, #1
 80125ca:	9203      	str	r2, [sp, #12]
 80125cc:	68ba      	ldr	r2, [r7, #8]
 80125ce:	9202      	str	r2, [sp, #8]
 80125d0:	4a06      	ldr	r2, [pc, #24]	@ (80125ec <etharp_request_dst+0x40>)
 80125d2:	9201      	str	r2, [sp, #4]
 80125d4:	9300      	str	r3, [sp, #0]
 80125d6:	4603      	mov	r3, r0
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	68f8      	ldr	r0, [r7, #12]
 80125dc:	f7ff ff5a 	bl	8012494 <etharp_raw>
 80125e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3710      	adds	r7, #16
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	08023c04 	.word	0x08023c04

080125f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b082      	sub	sp, #8
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80125fa:	4a05      	ldr	r2, [pc, #20]	@ (8012610 <etharp_request+0x20>)
 80125fc:	6839      	ldr	r1, [r7, #0]
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f7ff ffd4 	bl	80125ac <etharp_request_dst>
 8012604:	4603      	mov	r3, r0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3708      	adds	r7, #8
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	08023bfc 	.word	0x08023bfc

08012614 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b08e      	sub	sp, #56	@ 0x38
 8012618:	af04      	add	r7, sp, #16
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801261e:	4b82      	ldr	r3, [pc, #520]	@ (8012828 <icmp_input+0x214>)
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	f003 030f 	and.w	r3, r3, #15
 801262c:	b2db      	uxtb	r3, r3
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	b2db      	uxtb	r3, r3
 8012632:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012634:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012636:	2b13      	cmp	r3, #19
 8012638:	f240 80de 	bls.w	80127f8 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	895b      	ldrh	r3, [r3, #10]
 8012640:	2b03      	cmp	r3, #3
 8012642:	f240 80db 	bls.w	80127fc <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	685b      	ldr	r3, [r3, #4]
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012650:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012654:	2b00      	cmp	r3, #0
 8012656:	f000 80c8 	beq.w	80127ea <icmp_input+0x1d6>
 801265a:	2b08      	cmp	r3, #8
 801265c:	f040 80c8 	bne.w	80127f0 <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012660:	4b72      	ldr	r3, [pc, #456]	@ (801282c <icmp_input+0x218>)
 8012662:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012664:	4b70      	ldr	r3, [pc, #448]	@ (8012828 <icmp_input+0x214>)
 8012666:	695b      	ldr	r3, [r3, #20]
 8012668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801266c:	2be0      	cmp	r3, #224	@ 0xe0
 801266e:	f000 80cc 	beq.w	801280a <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012672:	4b6d      	ldr	r3, [pc, #436]	@ (8012828 <icmp_input+0x214>)
 8012674:	695b      	ldr	r3, [r3, #20]
 8012676:	4a6c      	ldr	r2, [pc, #432]	@ (8012828 <icmp_input+0x214>)
 8012678:	6812      	ldr	r2, [r2, #0]
 801267a:	4611      	mov	r1, r2
 801267c:	4618      	mov	r0, r3
 801267e:	f001 f96d 	bl	801395c <ip4_addr_isbroadcast_u32>
 8012682:	4603      	mov	r3, r0
 8012684:	2b00      	cmp	r3, #0
 8012686:	f040 80c2 	bne.w	801280e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	891b      	ldrh	r3, [r3, #8]
 801268e:	2b07      	cmp	r3, #7
 8012690:	f240 80b6 	bls.w	8012800 <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012694:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012696:	330e      	adds	r3, #14
 8012698:	4619      	mov	r1, r3
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f003 fbc8 	bl	8015e30 <pbuf_add_header>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d04b      	beq.n	801273e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	891a      	ldrh	r2, [r3, #8]
 80126aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126ac:	4413      	add	r3, r2
 80126ae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	891b      	ldrh	r3, [r3, #8]
 80126b4:	8b7a      	ldrh	r2, [r7, #26]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	f0c0 80ab 	bcc.w	8012812 <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80126bc:	8b7b      	ldrh	r3, [r7, #26]
 80126be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80126c2:	4619      	mov	r1, r3
 80126c4:	200e      	movs	r0, #14
 80126c6:	f003 f965 	bl	8015994 <pbuf_alloc>
 80126ca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	f000 80a1 	beq.w	8012816 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	895b      	ldrh	r3, [r3, #10]
 80126d8:	461a      	mov	r2, r3
 80126da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126dc:	3308      	adds	r3, #8
 80126de:	429a      	cmp	r2, r3
 80126e0:	d203      	bcs.n	80126ea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80126e2:	6978      	ldr	r0, [r7, #20]
 80126e4:	f003 fc6c 	bl	8015fc0 <pbuf_free>
          goto icmperr;
 80126e8:	e096      	b.n	8012818 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80126f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80126f2:	4618      	mov	r0, r3
 80126f4:	f00b fbc7 	bl	801de86 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80126f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126fa:	4619      	mov	r1, r3
 80126fc:	6978      	ldr	r0, [r7, #20]
 80126fe:	f003 fba7 	bl	8015e50 <pbuf_remove_header>
 8012702:	4603      	mov	r3, r0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d009      	beq.n	801271c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012708:	4b49      	ldr	r3, [pc, #292]	@ (8012830 <icmp_input+0x21c>)
 801270a:	22b6      	movs	r2, #182	@ 0xb6
 801270c:	4949      	ldr	r1, [pc, #292]	@ (8012834 <icmp_input+0x220>)
 801270e:	484a      	ldr	r0, [pc, #296]	@ (8012838 <icmp_input+0x224>)
 8012710:	f00b fa76 	bl	801dc00 <iprintf>
          pbuf_free(r);
 8012714:	6978      	ldr	r0, [r7, #20]
 8012716:	f003 fc53 	bl	8015fc0 <pbuf_free>
          goto icmperr;
 801271a:	e07d      	b.n	8012818 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801271c:	6879      	ldr	r1, [r7, #4]
 801271e:	6978      	ldr	r0, [r7, #20]
 8012720:	f003 fd82 	bl	8016228 <pbuf_copy>
 8012724:	4603      	mov	r3, r0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d003      	beq.n	8012732 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801272a:	6978      	ldr	r0, [r7, #20]
 801272c:	f003 fc48 	bl	8015fc0 <pbuf_free>
          goto icmperr;
 8012730:	e072      	b.n	8012818 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f003 fc44 	bl	8015fc0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	607b      	str	r3, [r7, #4]
 801273c:	e00f      	b.n	801275e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801273e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012740:	330e      	adds	r3, #14
 8012742:	4619      	mov	r1, r3
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f003 fb83 	bl	8015e50 <pbuf_remove_header>
 801274a:	4603      	mov	r3, r0
 801274c:	2b00      	cmp	r3, #0
 801274e:	d006      	beq.n	801275e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012750:	4b37      	ldr	r3, [pc, #220]	@ (8012830 <icmp_input+0x21c>)
 8012752:	22c7      	movs	r2, #199	@ 0xc7
 8012754:	4939      	ldr	r1, [pc, #228]	@ (801283c <icmp_input+0x228>)
 8012756:	4838      	ldr	r0, [pc, #224]	@ (8012838 <icmp_input+0x224>)
 8012758:	f00b fa52 	bl	801dc00 <iprintf>
          goto icmperr;
 801275c:	e05c      	b.n	8012818 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012764:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012766:	4619      	mov	r1, r3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f003 fb61 	bl	8015e30 <pbuf_add_header>
 801276e:	4603      	mov	r3, r0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d13c      	bne.n	80127ee <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012782:	4b29      	ldr	r3, [pc, #164]	@ (8012828 <icmp_input+0x214>)
 8012784:	691a      	ldr	r2, [r3, #16]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	2200      	movs	r2, #0
 801278e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	885b      	ldrh	r3, [r3, #2]
 8012794:	b29b      	uxth	r3, r3
 8012796:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801279a:	4293      	cmp	r3, r2
 801279c:	d907      	bls.n	80127ae <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	885b      	ldrh	r3, [r3, #2]
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	3309      	adds	r3, #9
 80127a6:	b29a      	uxth	r2, r3
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	805a      	strh	r2, [r3, #2]
 80127ac:	e006      	b.n	80127bc <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	885b      	ldrh	r3, [r3, #2]
 80127b2:	b29b      	uxth	r3, r3
 80127b4:	3308      	adds	r3, #8
 80127b6:	b29a      	uxth	r2, r3
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	22ff      	movs	r2, #255	@ 0xff
 80127c0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2200      	movs	r2, #0
 80127c6:	729a      	strb	r2, [r3, #10]
 80127c8:	2200      	movs	r2, #0
 80127ca:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	9302      	str	r3, [sp, #8]
 80127d0:	2301      	movs	r3, #1
 80127d2:	9301      	str	r3, [sp, #4]
 80127d4:	2300      	movs	r3, #0
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	23ff      	movs	r3, #255	@ 0xff
 80127da:	2200      	movs	r2, #0
 80127dc:	69f9      	ldr	r1, [r7, #28]
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f000 ff6e 	bl	80136c0 <ip4_output_if>
 80127e4:	4603      	mov	r3, r0
 80127e6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80127e8:	e001      	b.n	80127ee <icmp_input+0x1da>
      break;
 80127ea:	bf00      	nop
 80127ec:	e000      	b.n	80127f0 <icmp_input+0x1dc>
      break;
 80127ee:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f003 fbe5 	bl	8015fc0 <pbuf_free>
  return;
 80127f6:	e013      	b.n	8012820 <icmp_input+0x20c>
    goto lenerr;
 80127f8:	bf00      	nop
 80127fa:	e002      	b.n	8012802 <icmp_input+0x1ee>
    goto lenerr;
 80127fc:	bf00      	nop
 80127fe:	e000      	b.n	8012802 <icmp_input+0x1ee>
        goto lenerr;
 8012800:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f003 fbdc 	bl	8015fc0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012808:	e00a      	b.n	8012820 <icmp_input+0x20c>
        goto icmperr;
 801280a:	bf00      	nop
 801280c:	e004      	b.n	8012818 <icmp_input+0x204>
        goto icmperr;
 801280e:	bf00      	nop
 8012810:	e002      	b.n	8012818 <icmp_input+0x204>
          goto icmperr;
 8012812:	bf00      	nop
 8012814:	e000      	b.n	8012818 <icmp_input+0x204>
          goto icmperr;
 8012816:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f003 fbd1 	bl	8015fc0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801281e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012820:	3728      	adds	r7, #40	@ 0x28
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
 8012826:	bf00      	nop
 8012828:	20008854 	.word	0x20008854
 801282c:	20008868 	.word	0x20008868
 8012830:	080206c4 	.word	0x080206c4
 8012834:	0802072c 	.word	0x0802072c
 8012838:	08020764 	.word	0x08020764
 801283c:	0802078c 	.word	0x0802078c

08012840 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	460b      	mov	r3, r1
 801284a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801284c:	78fb      	ldrb	r3, [r7, #3]
 801284e:	461a      	mov	r2, r3
 8012850:	2103      	movs	r1, #3
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 f814 	bl	8012880 <icmp_send_response>
}
 8012858:	bf00      	nop
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	460b      	mov	r3, r1
 801286a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801286c:	78fb      	ldrb	r3, [r7, #3]
 801286e:	461a      	mov	r2, r3
 8012870:	210b      	movs	r1, #11
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f000 f804 	bl	8012880 <icmp_send_response>
}
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b08c      	sub	sp, #48	@ 0x30
 8012884:	af04      	add	r7, sp, #16
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	460b      	mov	r3, r1
 801288a:	70fb      	strb	r3, [r7, #3]
 801288c:	4613      	mov	r3, r2
 801288e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012890:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012894:	2124      	movs	r1, #36	@ 0x24
 8012896:	2022      	movs	r0, #34	@ 0x22
 8012898:	f003 f87c 	bl	8015994 <pbuf_alloc>
 801289c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801289e:	69fb      	ldr	r3, [r7, #28]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d056      	beq.n	8012952 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	895b      	ldrh	r3, [r3, #10]
 80128a8:	2b23      	cmp	r3, #35	@ 0x23
 80128aa:	d806      	bhi.n	80128ba <icmp_send_response+0x3a>
 80128ac:	4b2b      	ldr	r3, [pc, #172]	@ (801295c <icmp_send_response+0xdc>)
 80128ae:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80128b2:	492b      	ldr	r1, [pc, #172]	@ (8012960 <icmp_send_response+0xe0>)
 80128b4:	482b      	ldr	r0, [pc, #172]	@ (8012964 <icmp_send_response+0xe4>)
 80128b6:	f00b f9a3 	bl	801dc00 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	78fa      	ldrb	r2, [r7, #3]
 80128ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	78ba      	ldrb	r2, [r7, #2]
 80128d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	2200      	movs	r2, #0
 80128d6:	711a      	strb	r2, [r3, #4]
 80128d8:	2200      	movs	r2, #0
 80128da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	2200      	movs	r2, #0
 80128e0:	719a      	strb	r2, [r3, #6]
 80128e2:	2200      	movs	r2, #0
 80128e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80128e6:	69fb      	ldr	r3, [r7, #28]
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	f103 0008 	add.w	r0, r3, #8
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	221c      	movs	r2, #28
 80128f4:	4619      	mov	r1, r3
 80128f6:	f00b fac6 	bl	801de86 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012900:	f107 030c 	add.w	r3, r7, #12
 8012904:	4618      	mov	r0, r3
 8012906:	f000 fcb9 	bl	801327c <ip4_route>
 801290a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d01b      	beq.n	801294a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	2200      	movs	r2, #0
 8012916:	709a      	strb	r2, [r3, #2]
 8012918:	2200      	movs	r2, #0
 801291a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801291c:	69fb      	ldr	r3, [r7, #28]
 801291e:	895b      	ldrh	r3, [r3, #10]
 8012920:	4619      	mov	r1, r3
 8012922:	6978      	ldr	r0, [r7, #20]
 8012924:	f001 ff25 	bl	8014772 <inet_chksum>
 8012928:	4603      	mov	r3, r0
 801292a:	461a      	mov	r2, r3
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012930:	f107 020c 	add.w	r2, r7, #12
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	9302      	str	r3, [sp, #8]
 8012938:	2301      	movs	r3, #1
 801293a:	9301      	str	r3, [sp, #4]
 801293c:	2300      	movs	r3, #0
 801293e:	9300      	str	r3, [sp, #0]
 8012940:	23ff      	movs	r3, #255	@ 0xff
 8012942:	2100      	movs	r1, #0
 8012944:	69f8      	ldr	r0, [r7, #28]
 8012946:	f000 febb 	bl	80136c0 <ip4_output_if>
  }
  pbuf_free(q);
 801294a:	69f8      	ldr	r0, [r7, #28]
 801294c:	f003 fb38 	bl	8015fc0 <pbuf_free>
 8012950:	e000      	b.n	8012954 <icmp_send_response+0xd4>
    return;
 8012952:	bf00      	nop
}
 8012954:	3720      	adds	r7, #32
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	080206c4 	.word	0x080206c4
 8012960:	080207c0 	.word	0x080207c0
 8012964:	08020764 	.word	0x08020764

08012968 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 8012968:	b480      	push	{r7}
 801296a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801296c:	4b05      	ldr	r3, [pc, #20]	@ (8012984 <igmp_init+0x1c>)
 801296e:	4a06      	ldr	r2, [pc, #24]	@ (8012988 <igmp_init+0x20>)
 8012970:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 8012972:	4b06      	ldr	r3, [pc, #24]	@ (801298c <igmp_init+0x24>)
 8012974:	4a06      	ldr	r2, [pc, #24]	@ (8012990 <igmp_init+0x28>)
 8012976:	601a      	str	r2, [r3, #0]
}
 8012978:	bf00      	nop
 801297a:	46bd      	mov	sp, r7
 801297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012980:	4770      	bx	lr
 8012982:	bf00      	nop
 8012984:	2000883c 	.word	0x2000883c
 8012988:	010000e0 	.word	0x010000e0
 801298c:	20008840 	.word	0x20008840
 8012990:	020000e0 	.word	0x020000e0

08012994 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b084      	sub	sp, #16
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 801299c:	4911      	ldr	r1, [pc, #68]	@ (80129e4 <igmp_start+0x50>)
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 f85e 	bl	8012a60 <igmp_lookup_group>
 80129a4:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d014      	beq.n	80129d6 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	2202      	movs	r2, #2
 80129b0:	725a      	strb	r2, [r3, #9]
    group->use++;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	7b1b      	ldrb	r3, [r3, #12]
 80129b6:	3301      	adds	r3, #1
 80129b8:	b2da      	uxtb	r2, r3
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d005      	beq.n	80129d2 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80129ca:	2201      	movs	r2, #1
 80129cc:	4905      	ldr	r1, [pc, #20]	@ (80129e4 <igmp_start+0x50>)
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	4798      	blx	r3
    }

    return ERR_OK;
 80129d2:	2300      	movs	r3, #0
 80129d4:	e001      	b.n	80129da <igmp_start+0x46>
  }

  return ERR_MEM;
 80129d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129da:	4618      	mov	r0, r3
 80129dc:	3710      	adds	r7, #16
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	2000883c 	.word	0x2000883c

080129e8 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b084      	sub	sp, #16
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129f4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d00a      	beq.n	8012a12 <igmp_report_groups+0x2a>
    group = group->next;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 8012a02:	e006      	b.n	8012a12 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8012a04:	2105      	movs	r1, #5
 8012a06:	68f8      	ldr	r0, [r7, #12]
 8012a08:	f000 fb7d 	bl	8013106 <igmp_delaying_member>
    group = group->next;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1f5      	bne.n	8012a04 <igmp_report_groups+0x1c>
  }
}
 8012a18:	bf00      	nop
 8012a1a:	bf00      	nop
 8012a1c:	3710      	adds	r7, #16
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8012a22:	b480      	push	{r7}
 8012a24:	b085      	sub	sp, #20
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a30:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8012a32:	e00a      	b.n	8012a4a <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	685a      	ldr	r2, [r3, #4]
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d101      	bne.n	8012a44 <igmp_lookfor_group+0x22>
      return group;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	e006      	b.n	8012a52 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d1f1      	bne.n	8012a34 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8012a50:	2300      	movs	r3, #0
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3714      	adds	r7, #20
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr
	...

08012a60 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a6e:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8012a70:	6839      	ldr	r1, [r7, #0]
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f7ff ffd5 	bl	8012a22 <igmp_lookfor_group>
 8012a78:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	e047      	b.n	8012b14 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8012a84:	200a      	movs	r0, #10
 8012a86:	f002 fb2d 	bl	80150e4 <memp_malloc>
 8012a8a:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d03f      	beq.n	8012b12 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d002      	beq.n	8012a9e <igmp_lookup_group+0x3e>
 8012a98:	683b      	ldr	r3, [r7, #0]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	e000      	b.n	8012aa0 <igmp_lookup_group+0x40>
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	68ba      	ldr	r2, [r7, #8]
 8012aa2:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2200      	movs	r2, #0
 8012aae:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d113      	bne.n	8012aea <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	4b15      	ldr	r3, [pc, #84]	@ (8012b1c <igmp_lookup_group+0xbc>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d006      	beq.n	8012adc <igmp_lookup_group+0x7c>
 8012ace:	4b14      	ldr	r3, [pc, #80]	@ (8012b20 <igmp_lookup_group+0xc0>)
 8012ad0:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8012ad4:	4913      	ldr	r1, [pc, #76]	@ (8012b24 <igmp_lookup_group+0xc4>)
 8012ad6:	4814      	ldr	r0, [pc, #80]	@ (8012b28 <igmp_lookup_group+0xc8>)
 8012ad8:	f00b f892 	bl	801dc00 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	629a      	str	r2, [r3, #40]	@ 0x28
 8012ae8:	e013      	b.n	8012b12 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	4b0b      	ldr	r3, [pc, #44]	@ (8012b1c <igmp_lookup_group+0xbc>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d106      	bne.n	8012b04 <igmp_lookup_group+0xa4>
 8012af6:	4b0a      	ldr	r3, [pc, #40]	@ (8012b20 <igmp_lookup_group+0xc0>)
 8012af8:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012afc:	490b      	ldr	r1, [pc, #44]	@ (8012b2c <igmp_lookup_group+0xcc>)
 8012afe:	480a      	ldr	r0, [pc, #40]	@ (8012b28 <igmp_lookup_group+0xc8>)
 8012b00:	f00b f87e 	bl	801dc00 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 8012b12:	68bb      	ldr	r3, [r7, #8]
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3710      	adds	r7, #16
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	2000883c 	.word	0x2000883c
 8012b20:	080207ec 	.word	0x080207ec
 8012b24:	08020854 	.word	0x08020854
 8012b28:	08020888 	.word	0x08020888
 8012b2c:	080208b0 	.word	0x080208b0

08012b30 <igmp_remove_group>:
 * @param group the group to remove from the netif's igmp group list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif *netif, struct igmp_group *group)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	73fb      	strb	r3, [r7, #15]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b42:	60bb      	str	r3, [r7, #8]
 8012b44:	e00c      	b.n	8012b60 <igmp_remove_group+0x30>
    if (tmp_group->next == group) {
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	683a      	ldr	r2, [r7, #0]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d104      	bne.n	8012b5a <igmp_remove_group+0x2a>
      tmp_group->next = group->next;
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	681a      	ldr	r2, [r3, #0]
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	601a      	str	r2, [r3, #0]
      break;
 8012b58:	e005      	b.n	8012b66 <igmp_remove_group+0x36>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	60bb      	str	r3, [r7, #8]
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d1ef      	bne.n	8012b46 <igmp_remove_group+0x16>
    }
  }
  /* Group not found in netif's igmp group list */
  if (tmp_group == NULL) {
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d101      	bne.n	8012b70 <igmp_remove_group+0x40>
    err = ERR_ARG;
 8012b6c:	23f0      	movs	r3, #240	@ 0xf0
 8012b6e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8012b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3714      	adds	r7, #20
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr

08012b80 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b088      	sub	sp, #32
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	895b      	ldrh	r3, [r3, #10]
 8012b90:	2b07      	cmp	r3, #7
 8012b92:	d803      	bhi.n	8012b9c <igmp_input+0x1c>
    pbuf_free(p);
 8012b94:	68f8      	ldr	r0, [r7, #12]
 8012b96:	f003 fa13 	bl	8015fc0 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8012b9a:	e086      	b.n	8012caa <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	895b      	ldrh	r3, [r3, #10]
 8012ba6:	4619      	mov	r1, r3
 8012ba8:	6978      	ldr	r0, [r7, #20]
 8012baa:	f001 fde2 	bl	8014772 <inet_chksum>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d003      	beq.n	8012bbc <igmp_input+0x3c>
    pbuf_free(p);
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f003 fa03 	bl	8015fc0 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8012bba:	e076      	b.n	8012caa <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8012bbc:	6879      	ldr	r1, [r7, #4]
 8012bbe:	68b8      	ldr	r0, [r7, #8]
 8012bc0:	f7ff ff2f 	bl	8012a22 <igmp_lookfor_group>
 8012bc4:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d103      	bne.n	8012bd4 <igmp_input+0x54>
    pbuf_free(p);
 8012bcc:	68f8      	ldr	r0, [r7, #12]
 8012bce:	f003 f9f7 	bl	8015fc0 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8012bd2:	e06a      	b.n	8012caa <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b11      	cmp	r3, #17
 8012bda:	d002      	beq.n	8012be2 <igmp_input+0x62>
 8012bdc:	2b16      	cmp	r3, #22
 8012bde:	d04f      	beq.n	8012c80 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8012be0:	e05f      	b.n	8012ca2 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	4b32      	ldr	r3, [pc, #200]	@ (8012cb0 <igmp_input+0x130>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d125      	bne.n	8012c3a <igmp_input+0xba>
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	3304      	adds	r3, #4
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d003      	beq.n	8012bfe <igmp_input+0x7e>
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d11d      	bne.n	8012c3a <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 8012bfe:	697b      	ldr	r3, [r7, #20]
 8012c00:	785b      	ldrb	r3, [r3, #1]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d102      	bne.n	8012c0c <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	220a      	movs	r2, #10
 8012c0a:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c10:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00c      	beq.n	8012c32 <igmp_input+0xb2>
          groupref = groupref->next;
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8012c1e:	e008      	b.n	8012c32 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	785b      	ldrb	r3, [r3, #1]
 8012c24:	4619      	mov	r1, r3
 8012c26:	69b8      	ldr	r0, [r7, #24]
 8012c28:	f000 fa6d 	bl	8013106 <igmp_delaying_member>
          groupref = groupref->next;
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8012c32:	69bb      	ldr	r3, [r7, #24]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1f3      	bne.n	8012c20 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8012c38:	e021      	b.n	8012c7e <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	3304      	adds	r3, #4
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d02c      	beq.n	8012c9c <igmp_input+0x11c>
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d028      	beq.n	8012c9c <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	4b18      	ldr	r3, [pc, #96]	@ (8012cb0 <igmp_input+0x130>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d109      	bne.n	8012c6a <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 8012c5c:	f107 0310 	add.w	r3, r7, #16
 8012c60:	4619      	mov	r1, r3
 8012c62:	68b8      	ldr	r0, [r7, #8]
 8012c64:	f7ff fedd 	bl	8012a22 <igmp_lookfor_group>
 8012c68:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 8012c6a:	69fb      	ldr	r3, [r7, #28]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d015      	beq.n	8012c9c <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	785b      	ldrb	r3, [r3, #1]
 8012c74:	4619      	mov	r1, r3
 8012c76:	69f8      	ldr	r0, [r7, #28]
 8012c78:	f000 fa45 	bl	8013106 <igmp_delaying_member>
      break;
 8012c7c:	e00e      	b.n	8012c9c <igmp_input+0x11c>
 8012c7e:	e00d      	b.n	8012c9c <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	7a5b      	ldrb	r3, [r3, #9]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d10b      	bne.n	8012ca0 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	2202      	movs	r2, #2
 8012c92:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8012c94:	69fb      	ldr	r3, [r7, #28]
 8012c96:	2200      	movs	r2, #0
 8012c98:	721a      	strb	r2, [r3, #8]
      break;
 8012c9a:	e001      	b.n	8012ca0 <igmp_input+0x120>
      break;
 8012c9c:	bf00      	nop
 8012c9e:	e000      	b.n	8012ca2 <igmp_input+0x122>
      break;
 8012ca0:	bf00      	nop
  }

  pbuf_free(p);
 8012ca2:	68f8      	ldr	r0, [r7, #12]
 8012ca4:	f003 f98c 	bl	8015fc0 <pbuf_free>
  return;
 8012ca8:	bf00      	nop
}
 8012caa:	3720      	adds	r7, #32
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	2000883c 	.word	0x2000883c

08012cb4 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b084      	sub	sp, #16
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8012cbe:	23fa      	movs	r3, #250	@ 0xfa
 8012cc0:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012cca:	2be0      	cmp	r3, #224	@ 0xe0
 8012ccc:	d009      	beq.n	8012ce2 <igmp_joingroup+0x2e>
 8012cce:	4b26      	ldr	r3, [pc, #152]	@ (8012d68 <igmp_joingroup+0xb4>)
 8012cd0:	f240 12c9 	movw	r2, #457	@ 0x1c9
 8012cd4:	4925      	ldr	r1, [pc, #148]	@ (8012d6c <igmp_joingroup+0xb8>)
 8012cd6:	4826      	ldr	r0, [pc, #152]	@ (8012d70 <igmp_joingroup+0xbc>)
 8012cd8:	f00a ff92 	bl	801dc00 <iprintf>
 8012cdc:	f06f 0305 	mvn.w	r3, #5
 8012ce0:	e03d      	b.n	8012d5e <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	4b23      	ldr	r3, [pc, #140]	@ (8012d74 <igmp_joingroup+0xc0>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d109      	bne.n	8012d02 <igmp_joingroup+0x4e>
 8012cee:	4b1e      	ldr	r3, [pc, #120]	@ (8012d68 <igmp_joingroup+0xb4>)
 8012cf0:	f44f 72e5 	mov.w	r2, #458	@ 0x1ca
 8012cf4:	4920      	ldr	r1, [pc, #128]	@ (8012d78 <igmp_joingroup+0xc4>)
 8012cf6:	481e      	ldr	r0, [pc, #120]	@ (8012d70 <igmp_joingroup+0xbc>)
 8012cf8:	f00a ff82 	bl	801dc00 <iprintf>
 8012cfc:	f06f 0305 	mvn.w	r3, #5
 8012d00:	e02d      	b.n	8012d5e <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012d02:	4b1e      	ldr	r3, [pc, #120]	@ (8012d7c <igmp_joingroup+0xc8>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	60bb      	str	r3, [r7, #8]
 8012d08:	e024      	b.n	8012d54 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012d10:	f003 0320 	and.w	r3, r3, #32
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d01a      	beq.n	8012d4e <igmp_joingroup+0x9a>
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d00a      	beq.n	8012d34 <igmp_joingroup+0x80>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d006      	beq.n	8012d34 <igmp_joingroup+0x80>
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	3304      	adds	r3, #4
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d10c      	bne.n	8012d4e <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 8012d34:	6839      	ldr	r1, [r7, #0]
 8012d36:	68b8      	ldr	r0, [r7, #8]
 8012d38:	f000 f822 	bl	8012d80 <igmp_joingroup_netif>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8012d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d002      	beq.n	8012d4e <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 8012d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d4c:	e007      	b.n	8012d5e <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	60bb      	str	r3, [r7, #8]
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d1d7      	bne.n	8012d0a <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 8012d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3710      	adds	r7, #16
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	080207ec 	.word	0x080207ec
 8012d6c:	080208f4 	.word	0x080208f4
 8012d70:	08020888 	.word	0x08020888
 8012d74:	2000883c 	.word	0x2000883c
 8012d78:	0802092c 	.word	0x0802092c
 8012d7c:	2000f9a4 	.word	0x2000f9a4

08012d80 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b084      	sub	sp, #16
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012d92:	2be0      	cmp	r3, #224	@ 0xe0
 8012d94:	d009      	beq.n	8012daa <igmp_joingroup_netif+0x2a>
 8012d96:	4b2f      	ldr	r3, [pc, #188]	@ (8012e54 <igmp_joingroup_netif+0xd4>)
 8012d98:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8012d9c:	492e      	ldr	r1, [pc, #184]	@ (8012e58 <igmp_joingroup_netif+0xd8>)
 8012d9e:	482f      	ldr	r0, [pc, #188]	@ (8012e5c <igmp_joingroup_netif+0xdc>)
 8012da0:	f00a ff2e 	bl	801dc00 <iprintf>
 8012da4:	f06f 0305 	mvn.w	r3, #5
 8012da8:	e050      	b.n	8012e4c <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	4b2c      	ldr	r3, [pc, #176]	@ (8012e60 <igmp_joingroup_netif+0xe0>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d109      	bne.n	8012dca <igmp_joingroup_netif+0x4a>
 8012db6:	4b27      	ldr	r3, [pc, #156]	@ (8012e54 <igmp_joingroup_netif+0xd4>)
 8012db8:	f240 12ed 	movw	r2, #493	@ 0x1ed
 8012dbc:	4929      	ldr	r1, [pc, #164]	@ (8012e64 <igmp_joingroup_netif+0xe4>)
 8012dbe:	4827      	ldr	r0, [pc, #156]	@ (8012e5c <igmp_joingroup_netif+0xdc>)
 8012dc0:	f00a ff1e 	bl	801dc00 <iprintf>
 8012dc4:	f06f 0305 	mvn.w	r3, #5
 8012dc8:	e040      	b.n	8012e4c <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012dd0:	f003 0320 	and.w	r3, r3, #32
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d109      	bne.n	8012dec <igmp_joingroup_netif+0x6c>
 8012dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8012e54 <igmp_joingroup_netif+0xd4>)
 8012dda:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 8012dde:	4922      	ldr	r1, [pc, #136]	@ (8012e68 <igmp_joingroup_netif+0xe8>)
 8012de0:	481e      	ldr	r0, [pc, #120]	@ (8012e5c <igmp_joingroup_netif+0xdc>)
 8012de2:	f00a ff0d 	bl	801dc00 <iprintf>
 8012de6:	f06f 0305 	mvn.w	r3, #5
 8012dea:	e02f      	b.n	8012e4c <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 8012dec:	6839      	ldr	r1, [r7, #0]
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f7ff fe36 	bl	8012a60 <igmp_lookup_group>
 8012df4:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d025      	beq.n	8012e48 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	7a5b      	ldrb	r3, [r3, #9]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d119      	bne.n	8012e38 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	7b1b      	ldrb	r3, [r3, #12]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d109      	bne.n	8012e20 <igmp_joingroup_netif+0xa0>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d005      	beq.n	8012e20 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012e18:	2201      	movs	r2, #1
 8012e1a:	6839      	ldr	r1, [r7, #0]
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8012e20:	2216      	movs	r2, #22
 8012e22:	68f9      	ldr	r1, [r7, #12]
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 f9b5 	bl	8013194 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8012e2a:	2105      	movs	r1, #5
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 f947 	bl	80130c0 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	2201      	movs	r2, #1
 8012e36:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	7b1b      	ldrb	r3, [r3, #12]
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	b2da      	uxtb	r2, r3
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 8012e44:	2300      	movs	r3, #0
 8012e46:	e001      	b.n	8012e4c <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 8012e48:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3710      	adds	r7, #16
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	080207ec 	.word	0x080207ec
 8012e58:	08020960 	.word	0x08020960
 8012e5c:	08020888 	.word	0x08020888
 8012e60:	2000883c 	.word	0x2000883c
 8012e64:	0802099c 	.word	0x0802099c
 8012e68:	080209d8 	.word	0x080209d8

08012e6c <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b086      	sub	sp, #24
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8012e76:	23fa      	movs	r3, #250	@ 0xfa
 8012e78:	75fb      	strb	r3, [r7, #23]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012e82:	2be0      	cmp	r3, #224	@ 0xe0
 8012e84:	d009      	beq.n	8012e9a <igmp_leavegroup+0x2e>
 8012e86:	4b25      	ldr	r3, [pc, #148]	@ (8012f1c <igmp_leavegroup+0xb0>)
 8012e88:	f240 222a 	movw	r2, #554	@ 0x22a
 8012e8c:	4924      	ldr	r1, [pc, #144]	@ (8012f20 <igmp_leavegroup+0xb4>)
 8012e8e:	4825      	ldr	r0, [pc, #148]	@ (8012f24 <igmp_leavegroup+0xb8>)
 8012e90:	f00a feb6 	bl	801dc00 <iprintf>
 8012e94:	f06f 0305 	mvn.w	r3, #5
 8012e98:	e03c      	b.n	8012f14 <igmp_leavegroup+0xa8>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	681a      	ldr	r2, [r3, #0]
 8012e9e:	4b22      	ldr	r3, [pc, #136]	@ (8012f28 <igmp_leavegroup+0xbc>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d109      	bne.n	8012eba <igmp_leavegroup+0x4e>
 8012ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8012f1c <igmp_leavegroup+0xb0>)
 8012ea8:	f240 222b 	movw	r2, #555	@ 0x22b
 8012eac:	491f      	ldr	r1, [pc, #124]	@ (8012f2c <igmp_leavegroup+0xc0>)
 8012eae:	481d      	ldr	r0, [pc, #116]	@ (8012f24 <igmp_leavegroup+0xb8>)
 8012eb0:	f00a fea6 	bl	801dc00 <iprintf>
 8012eb4:	f06f 0305 	mvn.w	r3, #5
 8012eb8:	e02c      	b.n	8012f14 <igmp_leavegroup+0xa8>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012eba:	4b1d      	ldr	r3, [pc, #116]	@ (8012f30 <igmp_leavegroup+0xc4>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	613b      	str	r3, [r7, #16]
 8012ec0:	e023      	b.n	8012f0a <igmp_leavegroup+0x9e>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012ec8:	f003 0320 	and.w	r3, r3, #32
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d019      	beq.n	8012f04 <igmp_leavegroup+0x98>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d00a      	beq.n	8012eec <igmp_leavegroup+0x80>
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d006      	beq.n	8012eec <igmp_leavegroup+0x80>
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	3304      	adds	r3, #4
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d10b      	bne.n	8012f04 <igmp_leavegroup+0x98>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 8012eec:	6839      	ldr	r1, [r7, #0]
 8012eee:	6938      	ldr	r0, [r7, #16]
 8012ef0:	f000 f820 	bl	8012f34 <igmp_leavegroup_netif>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8012ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d001      	beq.n	8012f04 <igmp_leavegroup+0x98>
        /* Store this result if we have not yet gotten a success */
        err = res;
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
 8012f02:	75fb      	strb	r3, [r7, #23]
  NETIF_FOREACH(netif) {
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	613b      	str	r3, [r7, #16]
 8012f0a:	693b      	ldr	r3, [r7, #16]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d1d8      	bne.n	8012ec2 <igmp_leavegroup+0x56>
      }
    }
  }

  return err;
 8012f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3718      	adds	r7, #24
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	080207ec 	.word	0x080207ec
 8012f20:	08020a10 	.word	0x08020a10
 8012f24:	08020888 	.word	0x08020888
 8012f28:	2000883c 	.word	0x2000883c
 8012f2c:	08020a48 	.word	0x08020a48
 8012f30:	2000f9a4 	.word	0x2000f9a4

08012f34 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012f46:	2be0      	cmp	r3, #224	@ 0xe0
 8012f48:	d009      	beq.n	8012f5e <igmp_leavegroup_netif+0x2a>
 8012f4a:	4b30      	ldr	r3, [pc, #192]	@ (801300c <igmp_leavegroup_netif+0xd8>)
 8012f4c:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 8012f50:	492f      	ldr	r1, [pc, #188]	@ (8013010 <igmp_leavegroup_netif+0xdc>)
 8012f52:	4830      	ldr	r0, [pc, #192]	@ (8013014 <igmp_leavegroup_netif+0xe0>)
 8012f54:	f00a fe54 	bl	801dc00 <iprintf>
 8012f58:	f06f 0305 	mvn.w	r3, #5
 8012f5c:	e052      	b.n	8013004 <igmp_leavegroup_netif+0xd0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	4b2d      	ldr	r3, [pc, #180]	@ (8013018 <igmp_leavegroup_netif+0xe4>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d109      	bne.n	8012f7e <igmp_leavegroup_netif+0x4a>
 8012f6a:	4b28      	ldr	r3, [pc, #160]	@ (801300c <igmp_leavegroup_netif+0xd8>)
 8012f6c:	f240 224d 	movw	r2, #589	@ 0x24d
 8012f70:	492a      	ldr	r1, [pc, #168]	@ (801301c <igmp_leavegroup_netif+0xe8>)
 8012f72:	4828      	ldr	r0, [pc, #160]	@ (8013014 <igmp_leavegroup_netif+0xe0>)
 8012f74:	f00a fe44 	bl	801dc00 <iprintf>
 8012f78:	f06f 0305 	mvn.w	r3, #5
 8012f7c:	e042      	b.n	8013004 <igmp_leavegroup_netif+0xd0>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012f84:	f003 0320 	and.w	r3, r3, #32
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d109      	bne.n	8012fa0 <igmp_leavegroup_netif+0x6c>
 8012f8c:	4b1f      	ldr	r3, [pc, #124]	@ (801300c <igmp_leavegroup_netif+0xd8>)
 8012f8e:	f44f 7214 	mov.w	r2, #592	@ 0x250
 8012f92:	4923      	ldr	r1, [pc, #140]	@ (8013020 <igmp_leavegroup_netif+0xec>)
 8012f94:	481f      	ldr	r0, [pc, #124]	@ (8013014 <igmp_leavegroup_netif+0xe0>)
 8012f96:	f00a fe33 	bl	801dc00 <iprintf>
 8012f9a:	f06f 0305 	mvn.w	r3, #5
 8012f9e:	e031      	b.n	8013004 <igmp_leavegroup_netif+0xd0>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
 8012fa0:	6839      	ldr	r1, [r7, #0]
 8012fa2:	6878      	ldr	r0, [r7, #4]
 8012fa4:	f7ff fd3d 	bl	8012a22 <igmp_lookfor_group>
 8012fa8:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d027      	beq.n	8013000 <igmp_leavegroup_netif+0xcc>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	7b1b      	ldrb	r3, [r3, #12]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d81b      	bhi.n	8012ff0 <igmp_leavegroup_netif+0xbc>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
 8012fb8:	68f9      	ldr	r1, [r7, #12]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f7ff fdb8 	bl	8012b30 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	7a1b      	ldrb	r3, [r3, #8]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d004      	beq.n	8012fd2 <igmp_leavegroup_netif+0x9e>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 8012fc8:	2217      	movs	r2, #23
 8012fca:	68f9      	ldr	r1, [r7, #12]
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 f8e1 	bl	8013194 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d005      	beq.n	8012fe6 <igmp_leavegroup_netif+0xb2>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fde:	2200      	movs	r2, #0
 8012fe0:	6839      	ldr	r1, [r7, #0]
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	4798      	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
 8012fe6:	68f9      	ldr	r1, [r7, #12]
 8012fe8:	200a      	movs	r0, #10
 8012fea:	f002 f8f1 	bl	80151d0 <memp_free>
 8012fee:	e005      	b.n	8012ffc <igmp_leavegroup_netif+0xc8>
    } else {
      /* Decrement group use */
      group->use--;
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	7b1b      	ldrb	r3, [r3, #12]
 8012ff4:	3b01      	subs	r3, #1
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	731a      	strb	r2, [r3, #12]
    }
    return ERR_OK;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	e001      	b.n	8013004 <igmp_leavegroup_netif+0xd0>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
 8013000:	f06f 0305 	mvn.w	r3, #5
  }
}
 8013004:	4618      	mov	r0, r3
 8013006:	3710      	adds	r7, #16
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	080207ec 	.word	0x080207ec
 8013010:	08020a80 	.word	0x08020a80
 8013014:	08020888 	.word	0x08020888
 8013018:	2000883c 	.word	0x2000883c
 801301c:	08020ac0 	.word	0x08020ac0
 8013020:	08020afc 	.word	0x08020afc

08013024 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801302a:	4b15      	ldr	r3, [pc, #84]	@ (8013080 <igmp_tmr+0x5c>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	607b      	str	r3, [r7, #4]
 8013030:	e01e      	b.n	8013070 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013036:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8013038:	e014      	b.n	8013064 <igmp_tmr+0x40>
      if (group->timer > 0) {
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	895b      	ldrh	r3, [r3, #10]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d00d      	beq.n	801305e <igmp_tmr+0x3a>
        group->timer--;
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	895b      	ldrh	r3, [r3, #10]
 8013046:	3b01      	subs	r3, #1
 8013048:	b29a      	uxth	r2, r3
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	895b      	ldrh	r3, [r3, #10]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d103      	bne.n	801305e <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8013056:	6839      	ldr	r1, [r7, #0]
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f000 f813 	bl	8013084 <igmp_timeout>
        }
      }
      group = group->next;
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1e7      	bne.n	801303a <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	607b      	str	r3, [r7, #4]
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d1dd      	bne.n	8013032 <igmp_tmr+0xe>
    }
  }
}
 8013076:	bf00      	nop
 8013078:	bf00      	nop
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	2000f9a4 	.word	0x2000f9a4

08013084 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	7a5b      	ldrb	r3, [r3, #9]
 8013092:	2b01      	cmp	r3, #1
 8013094:	d10d      	bne.n	80130b2 <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	685a      	ldr	r2, [r3, #4]
 801309a:	4b08      	ldr	r3, [pc, #32]	@ (80130bc <igmp_timeout+0x38>)
 801309c:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801309e:	429a      	cmp	r2, r3
 80130a0:	d007      	beq.n	80130b2 <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	2202      	movs	r2, #2
 80130a6:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80130a8:	2216      	movs	r2, #22
 80130aa:	6839      	ldr	r1, [r7, #0]
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f000 f871 	bl	8013194 <igmp_send>
  }
}
 80130b2:	bf00      	nop
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	2000883c 	.word	0x2000883c

080130c0 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	460b      	mov	r3, r1
 80130ca:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 80130cc:	78fb      	ldrb	r3, [r7, #3]
 80130ce:	2b02      	cmp	r3, #2
 80130d0:	d90b      	bls.n	80130ea <igmp_start_timer+0x2a>
 80130d2:	f00a fc95 	bl	801da00 <rand>
 80130d6:	4603      	mov	r3, r0
 80130d8:	461a      	mov	r2, r3
 80130da:	78fb      	ldrb	r3, [r7, #3]
 80130dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80130e0:	fb01 f303 	mul.w	r3, r1, r3
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	b29a      	uxth	r2, r3
 80130e8:	e000      	b.n	80130ec <igmp_start_timer+0x2c>
 80130ea:	2201      	movs	r2, #1
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	895b      	ldrh	r3, [r3, #10]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d102      	bne.n	80130fe <igmp_start_timer+0x3e>
    group->timer = 1;
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2201      	movs	r2, #1
 80130fc:	815a      	strh	r2, [r3, #10]
  }
}
 80130fe:	bf00      	nop
 8013100:	3708      	adds	r7, #8
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}

08013106 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8013106:	b580      	push	{r7, lr}
 8013108:	b082      	sub	sp, #8
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	460b      	mov	r3, r1
 8013110:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	7a5b      	ldrb	r3, [r3, #9]
 8013116:	2b02      	cmp	r3, #2
 8013118:	d00d      	beq.n	8013136 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801311e:	2b01      	cmp	r3, #1
 8013120:	d111      	bne.n	8013146 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8013126:	2b00      	cmp	r3, #0
 8013128:	d005      	beq.n	8013136 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801312a:	78fb      	ldrb	r3, [r7, #3]
 801312c:	b29a      	uxth	r2, r3
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	895b      	ldrh	r3, [r3, #10]
 8013132:	429a      	cmp	r2, r3
 8013134:	d207      	bcs.n	8013146 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8013136:	78fb      	ldrb	r3, [r7, #3]
 8013138:	4619      	mov	r1, r3
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7ff ffc0 	bl	80130c0 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2201      	movs	r2, #1
 8013144:	725a      	strb	r2, [r3, #9]
  }
}
 8013146:	bf00      	nop
 8013148:	3708      	adds	r7, #8
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}

0801314e <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 801314e:	b580      	push	{r7, lr}
 8013150:	b08c      	sub	sp, #48	@ 0x30
 8013152:	af06      	add	r7, sp, #24
 8013154:	60f8      	str	r0, [r7, #12]
 8013156:	60b9      	str	r1, [r7, #8]
 8013158:	607a      	str	r2, [r7, #4]
 801315a:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 801315c:	f240 4394 	movw	r3, #1172	@ 0x494
 8013160:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8013162:	2300      	movs	r3, #0
 8013164:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8013166:	2304      	movs	r3, #4
 8013168:	9304      	str	r3, [sp, #16]
 801316a:	f107 0314 	add.w	r3, r7, #20
 801316e:	9303      	str	r3, [sp, #12]
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	9302      	str	r3, [sp, #8]
 8013174:	2302      	movs	r3, #2
 8013176:	9301      	str	r3, [sp, #4]
 8013178:	2300      	movs	r3, #0
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	2301      	movs	r3, #1
 801317e:	687a      	ldr	r2, [r7, #4]
 8013180:	68b9      	ldr	r1, [r7, #8]
 8013182:	68f8      	ldr	r0, [r7, #12]
 8013184:	f000 fab9 	bl	80136fa <ip4_output_if_opt>
 8013188:	4603      	mov	r3, r0
}
 801318a:	4618      	mov	r0, r3
 801318c:	3718      	adds	r7, #24
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
	...

08013194 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b088      	sub	sp, #32
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	4613      	mov	r3, r2
 80131a0:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 80131a2:	2300      	movs	r3, #0
 80131a4:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 80131a6:	2300      	movs	r3, #0
 80131a8:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 80131aa:	4b2f      	ldr	r3, [pc, #188]	@ (8013268 <igmp_send+0xd4>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 80131b0:	2300      	movs	r3, #0
 80131b2:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 80131b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80131b8:	2108      	movs	r1, #8
 80131ba:	2036      	movs	r0, #54	@ 0x36
 80131bc:	f002 fbea 	bl	8015994 <pbuf_alloc>
 80131c0:	61b8      	str	r0, [r7, #24]

  if (p) {
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d04b      	beq.n	8013260 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 80131c8:	69bb      	ldr	r3, [r7, #24]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 80131ce:	69bb      	ldr	r3, [r7, #24]
 80131d0:	895b      	ldrh	r3, [r3, #10]
 80131d2:	2b07      	cmp	r3, #7
 80131d4:	d806      	bhi.n	80131e4 <igmp_send+0x50>
 80131d6:	4b25      	ldr	r3, [pc, #148]	@ (801326c <igmp_send+0xd8>)
 80131d8:	f240 3202 	movw	r2, #770	@ 0x302
 80131dc:	4924      	ldr	r1, [pc, #144]	@ (8013270 <igmp_send+0xdc>)
 80131de:	4825      	ldr	r0, [pc, #148]	@ (8013274 <igmp_send+0xe0>)
 80131e0:	f00a fd0e 	bl	801dc00 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	3304      	adds	r3, #4
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 80131ec:	79fb      	ldrb	r3, [r7, #7]
 80131ee:	2b16      	cmp	r3, #22
 80131f0:	d10a      	bne.n	8013208 <igmp_send+0x74>
      dest = &(group->group_address);
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	3304      	adds	r3, #4
 80131f6:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	685a      	ldr	r2, [r3, #4]
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	2201      	movs	r2, #1
 8013204:	721a      	strb	r2, [r3, #8]
 8013206:	e008      	b.n	801321a <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8013208:	79fb      	ldrb	r3, [r7, #7]
 801320a:	2b17      	cmp	r3, #23
 801320c:	d105      	bne.n	801321a <igmp_send+0x86>
        dest = &allrouters;
 801320e:	4b1a      	ldr	r3, [pc, #104]	@ (8013278 <igmp_send+0xe4>)
 8013210:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	685a      	ldr	r2, [r3, #4]
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 801321a:	79fb      	ldrb	r3, [r7, #7]
 801321c:	2b16      	cmp	r3, #22
 801321e:	d002      	beq.n	8013226 <igmp_send+0x92>
 8013220:	79fb      	ldrb	r3, [r7, #7]
 8013222:	2b17      	cmp	r3, #23
 8013224:	d119      	bne.n	801325a <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	79fa      	ldrb	r2, [r7, #7]
 801322a:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	2200      	movs	r2, #0
 8013230:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2200      	movs	r2, #0
 8013236:	709a      	strb	r2, [r3, #2]
 8013238:	2200      	movs	r2, #0
 801323a:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 801323c:	2108      	movs	r1, #8
 801323e:	6978      	ldr	r0, [r7, #20]
 8013240:	f001 fa97 	bl	8014772 <inet_chksum>
 8013244:	4603      	mov	r3, r0
 8013246:	461a      	mov	r2, r3
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 801324c:	f107 0110 	add.w	r1, r7, #16
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	69fa      	ldr	r2, [r7, #28]
 8013254:	69b8      	ldr	r0, [r7, #24]
 8013256:	f7ff ff7a 	bl	801314e <igmp_ip_output_if>
    }

    pbuf_free(p);
 801325a:	69b8      	ldr	r0, [r7, #24]
 801325c:	f002 feb0 	bl	8015fc0 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8013260:	bf00      	nop
 8013262:	3720      	adds	r7, #32
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	08023abc 	.word	0x08023abc
 801326c:	080207ec 	.word	0x080207ec
 8013270:	08020b38 	.word	0x08020b38
 8013274:	08020888 	.word	0x08020888
 8013278:	20008840 	.word	0x20008840

0801327c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801327c:	b480      	push	{r7}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801328c:	2be0      	cmp	r3, #224	@ 0xe0
 801328e:	d106      	bne.n	801329e <ip4_route+0x22>
 8013290:	4b36      	ldr	r3, [pc, #216]	@ (801336c <ip4_route+0xf0>)
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8013298:	4b34      	ldr	r3, [pc, #208]	@ (801336c <ip4_route+0xf0>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	e060      	b.n	8013360 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801329e:	4b34      	ldr	r3, [pc, #208]	@ (8013370 <ip4_route+0xf4>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	60fb      	str	r3, [r7, #12]
 80132a4:	e036      	b.n	8013314 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80132ac:	f003 0301 	and.w	r3, r3, #1
 80132b0:	b2db      	uxtb	r3, r3
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d02b      	beq.n	801330e <ip4_route+0x92>
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80132bc:	089b      	lsrs	r3, r3, #2
 80132be:	f003 0301 	and.w	r3, r3, #1
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d022      	beq.n	801330e <ip4_route+0x92>
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	3304      	adds	r3, #4
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d01d      	beq.n	801330e <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	3304      	adds	r3, #4
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	405a      	eors	r2, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	3308      	adds	r3, #8
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	4013      	ands	r3, r2
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d101      	bne.n	80132ee <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	e038      	b.n	8013360 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80132f4:	f003 0302 	and.w	r3, r3, #2
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d108      	bne.n	801330e <ip4_route+0x92>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681a      	ldr	r2, [r3, #0]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	330c      	adds	r3, #12
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	429a      	cmp	r2, r3
 8013308:	d101      	bne.n	801330e <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	e028      	b.n	8013360 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	60fb      	str	r3, [r7, #12]
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d1c5      	bne.n	80132a6 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801331a:	4b16      	ldr	r3, [pc, #88]	@ (8013374 <ip4_route+0xf8>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d01a      	beq.n	8013358 <ip4_route+0xdc>
 8013322:	4b14      	ldr	r3, [pc, #80]	@ (8013374 <ip4_route+0xf8>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801332a:	f003 0301 	and.w	r3, r3, #1
 801332e:	2b00      	cmp	r3, #0
 8013330:	d012      	beq.n	8013358 <ip4_route+0xdc>
 8013332:	4b10      	ldr	r3, [pc, #64]	@ (8013374 <ip4_route+0xf8>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801333a:	f003 0304 	and.w	r3, r3, #4
 801333e:	2b00      	cmp	r3, #0
 8013340:	d00a      	beq.n	8013358 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013342:	4b0c      	ldr	r3, [pc, #48]	@ (8013374 <ip4_route+0xf8>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	3304      	adds	r3, #4
 8013348:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801334a:	2b00      	cmp	r3, #0
 801334c:	d004      	beq.n	8013358 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	b2db      	uxtb	r3, r3
 8013354:	2b7f      	cmp	r3, #127	@ 0x7f
 8013356:	d101      	bne.n	801335c <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013358:	2300      	movs	r3, #0
 801335a:	e001      	b.n	8013360 <ip4_route+0xe4>
  }

  return netif_default;
 801335c:	4b05      	ldr	r3, [pc, #20]	@ (8013374 <ip4_route+0xf8>)
 801335e:	681b      	ldr	r3, [r3, #0]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3714      	adds	r7, #20
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr
 801336c:	20008848 	.word	0x20008848
 8013370:	2000f9a4 	.word	0x2000f9a4
 8013374:	2000f9a8 	.word	0x2000f9a8

08013378 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013386:	f003 0301 	and.w	r3, r3, #1
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d016      	beq.n	80133be <ip4_input_accept+0x46>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	3304      	adds	r3, #4
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d011      	beq.n	80133be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801339a:	4b0b      	ldr	r3, [pc, #44]	@ (80133c8 <ip4_input_accept+0x50>)
 801339c:	695a      	ldr	r2, [r3, #20]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	3304      	adds	r3, #4
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d008      	beq.n	80133ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80133a8:	4b07      	ldr	r3, [pc, #28]	@ (80133c8 <ip4_input_accept+0x50>)
 80133aa:	695b      	ldr	r3, [r3, #20]
 80133ac:	6879      	ldr	r1, [r7, #4]
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 fad4 	bl	801395c <ip4_addr_isbroadcast_u32>
 80133b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d001      	beq.n	80133be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80133ba:	2301      	movs	r3, #1
 80133bc:	e000      	b.n	80133c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80133be:	2300      	movs	r3, #0
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	20008854 	.word	0x20008854

080133cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b088      	sub	sp, #32
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80133d6:	2301      	movs	r3, #1
 80133d8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	091b      	lsrs	r3, r3, #4
 80133e6:	b2db      	uxtb	r3, r3
 80133e8:	2b04      	cmp	r3, #4
 80133ea:	d004      	beq.n	80133f6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f002 fde7 	bl	8015fc0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80133f2:	2300      	movs	r3, #0
 80133f4:	e157      	b.n	80136a6 <ip4_input+0x2da>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	f003 030f 	and.w	r3, r3, #15
 80133fe:	b2db      	uxtb	r3, r3
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	b2db      	uxtb	r3, r3
 8013404:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013406:	69fb      	ldr	r3, [r7, #28]
 8013408:	885b      	ldrh	r3, [r3, #2]
 801340a:	b29b      	uxth	r3, r3
 801340c:	4618      	mov	r0, r3
 801340e:	f001 f925 	bl	801465c <lwip_htons>
 8013412:	4603      	mov	r3, r0
 8013414:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	891b      	ldrh	r3, [r3, #8]
 801341a:	8a3a      	ldrh	r2, [r7, #16]
 801341c:	429a      	cmp	r2, r3
 801341e:	d204      	bcs.n	801342a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013420:	8a3b      	ldrh	r3, [r7, #16]
 8013422:	4619      	mov	r1, r3
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f002 fc13 	bl	8015c50 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	895b      	ldrh	r3, [r3, #10]
 801342e:	8a7a      	ldrh	r2, [r7, #18]
 8013430:	429a      	cmp	r2, r3
 8013432:	d807      	bhi.n	8013444 <ip4_input+0x78>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	891b      	ldrh	r3, [r3, #8]
 8013438:	8a3a      	ldrh	r2, [r7, #16]
 801343a:	429a      	cmp	r2, r3
 801343c:	d802      	bhi.n	8013444 <ip4_input+0x78>
 801343e:	8a7b      	ldrh	r3, [r7, #18]
 8013440:	2b13      	cmp	r3, #19
 8013442:	d804      	bhi.n	801344e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f002 fdbb 	bl	8015fc0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801344a:	2300      	movs	r3, #0
 801344c:	e12b      	b.n	80136a6 <ip4_input+0x2da>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	691b      	ldr	r3, [r3, #16]
 8013452:	4a97      	ldr	r2, [pc, #604]	@ (80136b0 <ip4_input+0x2e4>)
 8013454:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013456:	69fb      	ldr	r3, [r7, #28]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	4a95      	ldr	r2, [pc, #596]	@ (80136b0 <ip4_input+0x2e4>)
 801345c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801345e:	4b94      	ldr	r3, [pc, #592]	@ (80136b0 <ip4_input+0x2e4>)
 8013460:	695b      	ldr	r3, [r3, #20]
 8013462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013466:	2be0      	cmp	r3, #224	@ 0xe0
 8013468:	d120      	bne.n	80134ac <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013470:	f003 0320 	and.w	r3, r3, #32
 8013474:	2b00      	cmp	r3, #0
 8013476:	d016      	beq.n	80134a6 <ip4_input+0xda>
 8013478:	498e      	ldr	r1, [pc, #568]	@ (80136b4 <ip4_input+0x2e8>)
 801347a:	6838      	ldr	r0, [r7, #0]
 801347c:	f7ff fad1 	bl	8012a22 <igmp_lookfor_group>
 8013480:	4603      	mov	r3, r0
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00f      	beq.n	80134a6 <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 8013486:	4b8c      	ldr	r3, [pc, #560]	@ (80136b8 <ip4_input+0x2ec>)
 8013488:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801348a:	4b89      	ldr	r3, [pc, #548]	@ (80136b0 <ip4_input+0x2e4>)
 801348c:	695a      	ldr	r2, [r3, #20]
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	429a      	cmp	r2, r3
 8013492:	d105      	bne.n	80134a0 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 8013494:	4b86      	ldr	r3, [pc, #536]	@ (80136b0 <ip4_input+0x2e4>)
 8013496:	691b      	ldr	r3, [r3, #16]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d101      	bne.n	80134a0 <ip4_input+0xd4>
        check_ip_src = 0;
 801349c:	2300      	movs	r3, #0
 801349e:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80134a4:	e02a      	b.n	80134fc <ip4_input+0x130>
    } else {
      netif = NULL;
 80134a6:	2300      	movs	r3, #0
 80134a8:	61bb      	str	r3, [r7, #24]
 80134aa:	e027      	b.n	80134fc <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80134ac:	6838      	ldr	r0, [r7, #0]
 80134ae:	f7ff ff63 	bl	8013378 <ip4_input_accept>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d002      	beq.n	80134be <ip4_input+0xf2>
      netif = inp;
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	61bb      	str	r3, [r7, #24]
 80134bc:	e01e      	b.n	80134fc <ip4_input+0x130>
    } else {
      netif = NULL;
 80134be:	2300      	movs	r3, #0
 80134c0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80134c2:	4b7b      	ldr	r3, [pc, #492]	@ (80136b0 <ip4_input+0x2e4>)
 80134c4:	695b      	ldr	r3, [r3, #20]
 80134c6:	b2db      	uxtb	r3, r3
 80134c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80134ca:	d017      	beq.n	80134fc <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80134cc:	4b7b      	ldr	r3, [pc, #492]	@ (80136bc <ip4_input+0x2f0>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	61bb      	str	r3, [r7, #24]
 80134d2:	e00e      	b.n	80134f2 <ip4_input+0x126>
          if (netif == inp) {
 80134d4:	69ba      	ldr	r2, [r7, #24]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d006      	beq.n	80134ea <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80134dc:	69b8      	ldr	r0, [r7, #24]
 80134de:	f7ff ff4b 	bl	8013378 <ip4_input_accept>
 80134e2:	4603      	mov	r3, r0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d108      	bne.n	80134fa <ip4_input+0x12e>
 80134e8:	e000      	b.n	80134ec <ip4_input+0x120>
            continue;
 80134ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	61bb      	str	r3, [r7, #24]
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d1ed      	bne.n	80134d4 <ip4_input+0x108>
 80134f8:	e000      	b.n	80134fc <ip4_input+0x130>
            break;
 80134fa:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80134fc:	69bb      	ldr	r3, [r7, #24]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d111      	bne.n	8013526 <ip4_input+0x15a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013502:	69fb      	ldr	r3, [r7, #28]
 8013504:	7a5b      	ldrb	r3, [r3, #9]
 8013506:	2b11      	cmp	r3, #17
 8013508:	d10d      	bne.n	8013526 <ip4_input+0x15a>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801350a:	8a7b      	ldrh	r3, [r7, #18]
 801350c:	69fa      	ldr	r2, [r7, #28]
 801350e:	4413      	add	r3, r2
 8013510:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	885b      	ldrh	r3, [r3, #2]
 8013516:	b29b      	uxth	r3, r3
 8013518:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801351c:	d103      	bne.n	8013526 <ip4_input+0x15a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013522:	2300      	movs	r3, #0
 8013524:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d017      	beq.n	801355c <ip4_input+0x190>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801352c:	4b60      	ldr	r3, [pc, #384]	@ (80136b0 <ip4_input+0x2e4>)
 801352e:	691b      	ldr	r3, [r3, #16]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d013      	beq.n	801355c <ip4_input+0x190>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013534:	4b5e      	ldr	r3, [pc, #376]	@ (80136b0 <ip4_input+0x2e4>)
 8013536:	691b      	ldr	r3, [r3, #16]
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	4618      	mov	r0, r3
 801353c:	f000 fa0e 	bl	801395c <ip4_addr_isbroadcast_u32>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d105      	bne.n	8013552 <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013546:	4b5a      	ldr	r3, [pc, #360]	@ (80136b0 <ip4_input+0x2e4>)
 8013548:	691b      	ldr	r3, [r3, #16]
 801354a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801354e:	2be0      	cmp	r3, #224	@ 0xe0
 8013550:	d104      	bne.n	801355c <ip4_input+0x190>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f002 fd34 	bl	8015fc0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013558:	2300      	movs	r3, #0
 801355a:	e0a4      	b.n	80136a6 <ip4_input+0x2da>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d104      	bne.n	801356c <ip4_input+0x1a0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f002 fd2c 	bl	8015fc0 <pbuf_free>
    return ERR_OK;
 8013568:	2300      	movs	r3, #0
 801356a:	e09c      	b.n	80136a6 <ip4_input+0x2da>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801356c:	69fb      	ldr	r3, [r7, #28]
 801356e:	88db      	ldrh	r3, [r3, #6]
 8013570:	b29b      	uxth	r3, r3
 8013572:	461a      	mov	r2, r3
 8013574:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013578:	4013      	ands	r3, r2
 801357a:	2b00      	cmp	r3, #0
 801357c:	d00b      	beq.n	8013596 <ip4_input+0x1ca>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f000 fd32 	bl	8013fe8 <ip4_reass>
 8013584:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d101      	bne.n	8013590 <ip4_input+0x1c4>
      return ERR_OK;
 801358c:	2300      	movs	r3, #0
 801358e:	e08a      	b.n	80136a6 <ip4_input+0x2da>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013596:	4a46      	ldr	r2, [pc, #280]	@ (80136b0 <ip4_input+0x2e4>)
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801359c:	4a44      	ldr	r2, [pc, #272]	@ (80136b0 <ip4_input+0x2e4>)
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80135a2:	4a43      	ldr	r2, [pc, #268]	@ (80136b0 <ip4_input+0x2e4>)
 80135a4:	69fb      	ldr	r3, [r7, #28]
 80135a6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80135a8:	69fb      	ldr	r3, [r7, #28]
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	f003 030f 	and.w	r3, r3, #15
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	461a      	mov	r2, r3
 80135b8:	4b3d      	ldr	r3, [pc, #244]	@ (80136b0 <ip4_input+0x2e4>)
 80135ba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80135bc:	8a7b      	ldrh	r3, [r7, #18]
 80135be:	4619      	mov	r1, r3
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f002 fc45 	bl	8015e50 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80135c6:	69fb      	ldr	r3, [r7, #28]
 80135c8:	7a5b      	ldrb	r3, [r3, #9]
 80135ca:	3b01      	subs	r3, #1
 80135cc:	2b10      	cmp	r3, #16
 80135ce:	d83a      	bhi.n	8013646 <ip4_input+0x27a>
 80135d0:	a201      	add	r2, pc, #4	@ (adr r2, 80135d8 <ip4_input+0x20c>)
 80135d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135d6:	bf00      	nop
 80135d8:	08013631 	.word	0x08013631
 80135dc:	0801363b 	.word	0x0801363b
 80135e0:	08013647 	.word	0x08013647
 80135e4:	08013647 	.word	0x08013647
 80135e8:	08013647 	.word	0x08013647
 80135ec:	08013627 	.word	0x08013627
 80135f0:	08013647 	.word	0x08013647
 80135f4:	08013647 	.word	0x08013647
 80135f8:	08013647 	.word	0x08013647
 80135fc:	08013647 	.word	0x08013647
 8013600:	08013647 	.word	0x08013647
 8013604:	08013647 	.word	0x08013647
 8013608:	08013647 	.word	0x08013647
 801360c:	08013647 	.word	0x08013647
 8013610:	08013647 	.word	0x08013647
 8013614:	08013647 	.word	0x08013647
 8013618:	0801361d 	.word	0x0801361d
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801361c:	6839      	ldr	r1, [r7, #0]
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f009 fa28 	bl	801ca74 <udp_input>
        break;
 8013624:	e02c      	b.n	8013680 <ip4_input+0x2b4>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013626:	6839      	ldr	r1, [r7, #0]
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f004 fde5 	bl	80181f8 <tcp_input>
        break;
 801362e:	e027      	b.n	8013680 <ip4_input+0x2b4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013630:	6839      	ldr	r1, [r7, #0]
 8013632:	6878      	ldr	r0, [r7, #4]
 8013634:	f7fe ffee 	bl	8012614 <icmp_input>
        break;
 8013638:	e022      	b.n	8013680 <ip4_input+0x2b4>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801363a:	4a1e      	ldr	r2, [pc, #120]	@ (80136b4 <ip4_input+0x2e8>)
 801363c:	6839      	ldr	r1, [r7, #0]
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f7ff fa9e 	bl	8012b80 <igmp_input>
        break;
 8013644:	e01c      	b.n	8013680 <ip4_input+0x2b4>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013646:	4b1a      	ldr	r3, [pc, #104]	@ (80136b0 <ip4_input+0x2e4>)
 8013648:	695b      	ldr	r3, [r3, #20]
 801364a:	69b9      	ldr	r1, [r7, #24]
 801364c:	4618      	mov	r0, r3
 801364e:	f000 f985 	bl	801395c <ip4_addr_isbroadcast_u32>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d10f      	bne.n	8013678 <ip4_input+0x2ac>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013658:	4b15      	ldr	r3, [pc, #84]	@ (80136b0 <ip4_input+0x2e4>)
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013660:	2be0      	cmp	r3, #224	@ 0xe0
 8013662:	d009      	beq.n	8013678 <ip4_input+0x2ac>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013668:	4619      	mov	r1, r3
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f002 fc63 	bl	8015f36 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013670:	2102      	movs	r1, #2
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f7ff f8e4 	bl	8012840 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f002 fca1 	bl	8015fc0 <pbuf_free>
        break;
 801367e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013680:	4b0b      	ldr	r3, [pc, #44]	@ (80136b0 <ip4_input+0x2e4>)
 8013682:	2200      	movs	r2, #0
 8013684:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013686:	4b0a      	ldr	r3, [pc, #40]	@ (80136b0 <ip4_input+0x2e4>)
 8013688:	2200      	movs	r2, #0
 801368a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801368c:	4b08      	ldr	r3, [pc, #32]	@ (80136b0 <ip4_input+0x2e4>)
 801368e:	2200      	movs	r2, #0
 8013690:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013692:	4b07      	ldr	r3, [pc, #28]	@ (80136b0 <ip4_input+0x2e4>)
 8013694:	2200      	movs	r2, #0
 8013696:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013698:	4b05      	ldr	r3, [pc, #20]	@ (80136b0 <ip4_input+0x2e4>)
 801369a:	2200      	movs	r2, #0
 801369c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801369e:	4b04      	ldr	r3, [pc, #16]	@ (80136b0 <ip4_input+0x2e4>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80136a4:	2300      	movs	r3, #0
}
 80136a6:	4618      	mov	r0, r3
 80136a8:	3720      	adds	r7, #32
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	20008854 	.word	0x20008854
 80136b4:	20008868 	.word	0x20008868
 80136b8:	010000e0 	.word	0x010000e0
 80136bc:	2000f9a4 	.word	0x2000f9a4

080136c0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b08a      	sub	sp, #40	@ 0x28
 80136c4:	af06      	add	r7, sp, #24
 80136c6:	60f8      	str	r0, [r7, #12]
 80136c8:	60b9      	str	r1, [r7, #8]
 80136ca:	607a      	str	r2, [r7, #4]
 80136cc:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80136ce:	78fa      	ldrb	r2, [r7, #3]
 80136d0:	2300      	movs	r3, #0
 80136d2:	9304      	str	r3, [sp, #16]
 80136d4:	2300      	movs	r3, #0
 80136d6:	9303      	str	r3, [sp, #12]
 80136d8:	6a3b      	ldr	r3, [r7, #32]
 80136da:	9302      	str	r3, [sp, #8]
 80136dc:	7f3b      	ldrb	r3, [r7, #28]
 80136de:	9301      	str	r3, [sp, #4]
 80136e0:	7e3b      	ldrb	r3, [r7, #24]
 80136e2:	9300      	str	r3, [sp, #0]
 80136e4:	4613      	mov	r3, r2
 80136e6:	687a      	ldr	r2, [r7, #4]
 80136e8:	68b9      	ldr	r1, [r7, #8]
 80136ea:	68f8      	ldr	r0, [r7, #12]
 80136ec:	f000 f805 	bl	80136fa <ip4_output_if_opt>
 80136f0:	4603      	mov	r3, r0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}

080136fa <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 80136fa:	b580      	push	{r7, lr}
 80136fc:	b08c      	sub	sp, #48	@ 0x30
 80136fe:	af06      	add	r7, sp, #24
 8013700:	60f8      	str	r0, [r7, #12]
 8013702:	60b9      	str	r1, [r7, #8]
 8013704:	607a      	str	r2, [r7, #4]
 8013706:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d009      	beq.n	8013726 <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d003      	beq.n	8013720 <ip4_output_if_opt+0x26>
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d102      	bne.n	8013726 <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8013720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013722:	3304      	adds	r3, #4
 8013724:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8013726:	78fa      	ldrb	r2, [r7, #3]
 8013728:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801372a:	9304      	str	r3, [sp, #16]
 801372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801372e:	9303      	str	r3, [sp, #12]
 8013730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013732:	9302      	str	r3, [sp, #8]
 8013734:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013738:	9301      	str	r3, [sp, #4]
 801373a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	4613      	mov	r3, r2
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	6979      	ldr	r1, [r7, #20]
 8013746:	68f8      	ldr	r0, [r7, #12]
 8013748:	f000 f822 	bl	8013790 <ip4_output_if_opt_src>
 801374c:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 801374e:	4618      	mov	r0, r3
 8013750:	3718      	adds	r7, #24
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013756:	b580      	push	{r7, lr}
 8013758:	b08a      	sub	sp, #40	@ 0x28
 801375a:	af06      	add	r7, sp, #24
 801375c:	60f8      	str	r0, [r7, #12]
 801375e:	60b9      	str	r1, [r7, #8]
 8013760:	607a      	str	r2, [r7, #4]
 8013762:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8013764:	78fa      	ldrb	r2, [r7, #3]
 8013766:	2300      	movs	r3, #0
 8013768:	9304      	str	r3, [sp, #16]
 801376a:	2300      	movs	r3, #0
 801376c:	9303      	str	r3, [sp, #12]
 801376e:	6a3b      	ldr	r3, [r7, #32]
 8013770:	9302      	str	r3, [sp, #8]
 8013772:	7f3b      	ldrb	r3, [r7, #28]
 8013774:	9301      	str	r3, [sp, #4]
 8013776:	7e3b      	ldrb	r3, [r7, #24]
 8013778:	9300      	str	r3, [sp, #0]
 801377a:	4613      	mov	r3, r2
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	68b9      	ldr	r1, [r7, #8]
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f000 f805 	bl	8013790 <ip4_output_if_opt_src>
 8013786:	4603      	mov	r3, r0
}
 8013788:	4618      	mov	r0, r3
 801378a:	3710      	adds	r7, #16
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}

08013790 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b088      	sub	sp, #32
 8013794:	af00      	add	r7, sp, #0
 8013796:	60f8      	str	r0, [r7, #12]
 8013798:	60b9      	str	r1, [r7, #8]
 801379a:	607a      	str	r2, [r7, #4]
 801379c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	7b9b      	ldrb	r3, [r3, #14]
 80137a2:	2b01      	cmp	r3, #1
 80137a4:	d006      	beq.n	80137b4 <ip4_output_if_opt_src+0x24>
 80137a6:	4b67      	ldr	r3, [pc, #412]	@ (8013944 <ip4_output_if_opt_src+0x1b4>)
 80137a8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80137ac:	4966      	ldr	r1, [pc, #408]	@ (8013948 <ip4_output_if_opt_src+0x1b8>)
 80137ae:	4867      	ldr	r0, [pc, #412]	@ (801394c <ip4_output_if_opt_src+0x1bc>)
 80137b0:	f00a fa26 	bl	801dc00 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 8097 	beq.w	80138ea <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 80137bc:	2314      	movs	r3, #20
 80137be:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80137c0:	2300      	movs	r3, #0
 80137c2:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 80137c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d030      	beq.n	801382c <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 80137ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80137cc:	2b28      	cmp	r3, #40	@ 0x28
 80137ce:	d902      	bls.n	80137d6 <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 80137d0:	f06f 0305 	mvn.w	r3, #5
 80137d4:	e0b1      	b.n	801393a <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 80137d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80137d8:	3303      	adds	r3, #3
 80137da:	b29b      	uxth	r3, r3
 80137dc:	f023 0303 	bic.w	r3, r3, #3
 80137e0:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 80137e2:	8bfa      	ldrh	r2, [r7, #30]
 80137e4:	8afb      	ldrh	r3, [r7, #22]
 80137e6:	4413      	add	r3, r2
 80137e8:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 80137ea:	8afb      	ldrh	r3, [r7, #22]
 80137ec:	4619      	mov	r1, r3
 80137ee:	68f8      	ldr	r0, [r7, #12]
 80137f0:	f002 fb1e 	bl	8015e30 <pbuf_add_header>
 80137f4:	4603      	mov	r3, r0
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d002      	beq.n	8013800 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 80137fa:	f06f 0301 	mvn.w	r3, #1
 80137fe:	e09c      	b.n	801393a <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8013806:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013808:	4618      	mov	r0, r3
 801380a:	f00a fb3c 	bl	801de86 <memcpy>
      if (optlen < optlen_aligned) {
 801380e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8013810:	8afb      	ldrh	r3, [r7, #22]
 8013812:	429a      	cmp	r2, r3
 8013814:	d20a      	bcs.n	801382c <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	685a      	ldr	r2, [r3, #4]
 801381a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801381c:	18d0      	adds	r0, r2, r3
 801381e:	8afa      	ldrh	r2, [r7, #22]
 8013820:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8013822:	1ad3      	subs	r3, r2, r3
 8013824:	461a      	mov	r2, r3
 8013826:	2100      	movs	r1, #0
 8013828:	f00a fa89 	bl	801dd3e <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801382c:	2114      	movs	r1, #20
 801382e:	68f8      	ldr	r0, [r7, #12]
 8013830:	f002 fafe 	bl	8015e30 <pbuf_add_header>
 8013834:	4603      	mov	r3, r0
 8013836:	2b00      	cmp	r3, #0
 8013838:	d002      	beq.n	8013840 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801383a:	f06f 0301 	mvn.w	r3, #1
 801383e:	e07c      	b.n	801393a <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	895b      	ldrh	r3, [r3, #10]
 801384a:	2b13      	cmp	r3, #19
 801384c:	d806      	bhi.n	801385c <ip4_output_if_opt_src+0xcc>
 801384e:	4b3d      	ldr	r3, [pc, #244]	@ (8013944 <ip4_output_if_opt_src+0x1b4>)
 8013850:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013854:	493e      	ldr	r1, [pc, #248]	@ (8013950 <ip4_output_if_opt_src+0x1c0>)
 8013856:	483d      	ldr	r0, [pc, #244]	@ (801394c <ip4_output_if_opt_src+0x1bc>)
 8013858:	f00a f9d2 	bl	801dc00 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	78fa      	ldrb	r2, [r7, #3]
 8013860:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013868:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013872:	8bfb      	ldrh	r3, [r7, #30]
 8013874:	089b      	lsrs	r3, r3, #2
 8013876:	b29b      	uxth	r3, r3
 8013878:	b2db      	uxtb	r3, r3
 801387a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801387e:	b2da      	uxtb	r2, r3
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801388a:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	891b      	ldrh	r3, [r3, #8]
 8013890:	4618      	mov	r0, r3
 8013892:	f000 fee3 	bl	801465c <lwip_htons>
 8013896:	4603      	mov	r3, r0
 8013898:	461a      	mov	r2, r3
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	2200      	movs	r2, #0
 80138a2:	719a      	strb	r2, [r3, #6]
 80138a4:	2200      	movs	r2, #0
 80138a6:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80138a8:	4b2a      	ldr	r3, [pc, #168]	@ (8013954 <ip4_output_if_opt_src+0x1c4>)
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	4618      	mov	r0, r3
 80138ae:	f000 fed5 	bl	801465c <lwip_htons>
 80138b2:	4603      	mov	r3, r0
 80138b4:	461a      	mov	r2, r3
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80138ba:	4b26      	ldr	r3, [pc, #152]	@ (8013954 <ip4_output_if_opt_src+0x1c4>)
 80138bc:	881b      	ldrh	r3, [r3, #0]
 80138be:	3301      	adds	r3, #1
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	4b24      	ldr	r3, [pc, #144]	@ (8013954 <ip4_output_if_opt_src+0x1c4>)
 80138c4:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d104      	bne.n	80138d6 <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80138cc:	4b22      	ldr	r3, [pc, #136]	@ (8013958 <ip4_output_if_opt_src+0x1c8>)
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	60da      	str	r2, [r3, #12]
 80138d4:	e003      	b.n	80138de <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	2200      	movs	r2, #0
 80138e2:	729a      	strb	r2, [r3, #10]
 80138e4:	2200      	movs	r2, #0
 80138e6:	72da      	strb	r2, [r3, #11]
 80138e8:	e00f      	b.n	801390a <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	895b      	ldrh	r3, [r3, #10]
 80138ee:	2b13      	cmp	r3, #19
 80138f0:	d802      	bhi.n	80138f8 <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80138f2:	f06f 0301 	mvn.w	r3, #1
 80138f6:	e020      	b.n	801393a <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	691b      	ldr	r3, [r3, #16]
 8013902:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8013904:	f107 0310 	add.w	r3, r7, #16
 8013908:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801390c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00c      	beq.n	801392c <ip4_output_if_opt_src+0x19c>
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	891a      	ldrh	r2, [r3, #8]
 8013916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801391a:	429a      	cmp	r2, r3
 801391c:	d906      	bls.n	801392c <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 801391e:	687a      	ldr	r2, [r7, #4]
 8013920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013922:	68f8      	ldr	r0, [r7, #12]
 8013924:	f000 fd54 	bl	80143d0 <ip4_frag>
 8013928:	4603      	mov	r3, r0
 801392a:	e006      	b.n	801393a <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801392e:	695b      	ldr	r3, [r3, #20]
 8013930:	687a      	ldr	r2, [r7, #4]
 8013932:	68f9      	ldr	r1, [r7, #12]
 8013934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013936:	4798      	blx	r3
 8013938:	4603      	mov	r3, r0
}
 801393a:	4618      	mov	r0, r3
 801393c:	3720      	adds	r7, #32
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	08020b74 	.word	0x08020b74
 8013948:	08020bd8 	.word	0x08020bd8
 801394c:	08020be4 	.word	0x08020be4
 8013950:	08020c0c 	.word	0x08020c0c
 8013954:	20008844 	.word	0x20008844
 8013958:	08023abc 	.word	0x08023abc

0801395c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801395c:	b480      	push	{r7}
 801395e:	b085      	sub	sp, #20
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
 8013964:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013970:	d002      	beq.n	8013978 <ip4_addr_isbroadcast_u32+0x1c>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d101      	bne.n	801397c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013978:	2301      	movs	r3, #1
 801397a:	e02a      	b.n	80139d2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013982:	f003 0302 	and.w	r3, r3, #2
 8013986:	2b00      	cmp	r3, #0
 8013988:	d101      	bne.n	801398e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801398a:	2300      	movs	r3, #0
 801398c:	e021      	b.n	80139d2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	3304      	adds	r3, #4
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	429a      	cmp	r2, r3
 8013998:	d101      	bne.n	801399e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801399a:	2300      	movs	r3, #0
 801399c:	e019      	b.n	80139d2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801399e:	68fa      	ldr	r2, [r7, #12]
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	3304      	adds	r3, #4
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	405a      	eors	r2, r3
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	3308      	adds	r3, #8
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	4013      	ands	r3, r2
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d10d      	bne.n	80139d0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	3308      	adds	r3, #8
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	43da      	mvns	r2, r3
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	3308      	adds	r3, #8
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d101      	bne.n	80139d0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80139cc:	2301      	movs	r3, #1
 80139ce:	e000      	b.n	80139d2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80139d0:	2300      	movs	r3, #0
  }
}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3714      	adds	r7, #20
 80139d6:	46bd      	mov	sp, r7
 80139d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139dc:	4770      	bx	lr
	...

080139e0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b084      	sub	sp, #16
 80139e4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80139e6:	2300      	movs	r3, #0
 80139e8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80139ea:	4b12      	ldr	r3, [pc, #72]	@ (8013a34 <ip_reass_tmr+0x54>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80139f0:	e018      	b.n	8013a24 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	7fdb      	ldrb	r3, [r3, #31]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d00b      	beq.n	8013a12 <ip_reass_tmr+0x32>
      r->timer--;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	7fdb      	ldrb	r3, [r3, #31]
 80139fe:	3b01      	subs	r3, #1
 8013a00:	b2da      	uxtb	r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	60fb      	str	r3, [r7, #12]
 8013a10:	e008      	b.n	8013a24 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013a1c:	68b9      	ldr	r1, [r7, #8]
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f000 f80a 	bl	8013a38 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d1e3      	bne.n	80139f2 <ip_reass_tmr+0x12>
    }
  }
}
 8013a2a:	bf00      	nop
 8013a2c:	bf00      	nop
 8013a2e:	3710      	adds	r7, #16
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}
 8013a34:	2000884c 	.word	0x2000884c

08013a38 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b088      	sub	sp, #32
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
 8013a40:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013a42:	2300      	movs	r3, #0
 8013a44:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013a46:	683a      	ldr	r2, [r7, #0]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d105      	bne.n	8013a5a <ip_reass_free_complete_datagram+0x22>
 8013a4e:	4b45      	ldr	r3, [pc, #276]	@ (8013b64 <ip_reass_free_complete_datagram+0x12c>)
 8013a50:	22ab      	movs	r2, #171	@ 0xab
 8013a52:	4945      	ldr	r1, [pc, #276]	@ (8013b68 <ip_reass_free_complete_datagram+0x130>)
 8013a54:	4845      	ldr	r0, [pc, #276]	@ (8013b6c <ip_reass_free_complete_datagram+0x134>)
 8013a56:	f00a f8d3 	bl	801dc00 <iprintf>
  if (prev != NULL) {
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d00a      	beq.n	8013a76 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	687a      	ldr	r2, [r7, #4]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d005      	beq.n	8013a76 <ip_reass_free_complete_datagram+0x3e>
 8013a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8013b64 <ip_reass_free_complete_datagram+0x12c>)
 8013a6c:	22ad      	movs	r2, #173	@ 0xad
 8013a6e:	4940      	ldr	r1, [pc, #256]	@ (8013b70 <ip_reass_free_complete_datagram+0x138>)
 8013a70:	483e      	ldr	r0, [pc, #248]	@ (8013b6c <ip_reass_free_complete_datagram+0x134>)
 8013a72:	f00a f8c5 	bl	801dc00 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	889b      	ldrh	r3, [r3, #4]
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d12a      	bne.n	8013ade <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013a8e:	697b      	ldr	r3, [r7, #20]
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	6858      	ldr	r0, [r3, #4]
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	3308      	adds	r3, #8
 8013a9e:	2214      	movs	r2, #20
 8013aa0:	4619      	mov	r1, r3
 8013aa2:	f00a f9f0 	bl	801de86 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013aa6:	2101      	movs	r1, #1
 8013aa8:	69b8      	ldr	r0, [r7, #24]
 8013aaa:	f7fe fed9 	bl	8012860 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013aae:	69b8      	ldr	r0, [r7, #24]
 8013ab0:	f002 fb14 	bl	80160dc <pbuf_clen>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013ab8:	8bfa      	ldrh	r2, [r7, #30]
 8013aba:	8a7b      	ldrh	r3, [r7, #18]
 8013abc:	4413      	add	r3, r2
 8013abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013ac2:	db05      	blt.n	8013ad0 <ip_reass_free_complete_datagram+0x98>
 8013ac4:	4b27      	ldr	r3, [pc, #156]	@ (8013b64 <ip_reass_free_complete_datagram+0x12c>)
 8013ac6:	22bc      	movs	r2, #188	@ 0xbc
 8013ac8:	492a      	ldr	r1, [pc, #168]	@ (8013b74 <ip_reass_free_complete_datagram+0x13c>)
 8013aca:	4828      	ldr	r0, [pc, #160]	@ (8013b6c <ip_reass_free_complete_datagram+0x134>)
 8013acc:	f00a f898 	bl	801dc00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013ad0:	8bfa      	ldrh	r2, [r7, #30]
 8013ad2:	8a7b      	ldrh	r3, [r7, #18]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013ad8:	69b8      	ldr	r0, [r7, #24]
 8013ada:	f002 fa71 	bl	8015fc0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013ae4:	e01f      	b.n	8013b26 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013ae6:	69bb      	ldr	r3, [r7, #24]
 8013ae8:	685b      	ldr	r3, [r3, #4]
 8013aea:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013aec:	69bb      	ldr	r3, [r7, #24]
 8013aee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013af6:	68f8      	ldr	r0, [r7, #12]
 8013af8:	f002 faf0 	bl	80160dc <pbuf_clen>
 8013afc:	4603      	mov	r3, r0
 8013afe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013b00:	8bfa      	ldrh	r2, [r7, #30]
 8013b02:	8a7b      	ldrh	r3, [r7, #18]
 8013b04:	4413      	add	r3, r2
 8013b06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013b0a:	db05      	blt.n	8013b18 <ip_reass_free_complete_datagram+0xe0>
 8013b0c:	4b15      	ldr	r3, [pc, #84]	@ (8013b64 <ip_reass_free_complete_datagram+0x12c>)
 8013b0e:	22cc      	movs	r2, #204	@ 0xcc
 8013b10:	4918      	ldr	r1, [pc, #96]	@ (8013b74 <ip_reass_free_complete_datagram+0x13c>)
 8013b12:	4816      	ldr	r0, [pc, #88]	@ (8013b6c <ip_reass_free_complete_datagram+0x134>)
 8013b14:	f00a f874 	bl	801dc00 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b18:	8bfa      	ldrh	r2, [r7, #30]
 8013b1a:	8a7b      	ldrh	r3, [r7, #18]
 8013b1c:	4413      	add	r3, r2
 8013b1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f002 fa4d 	bl	8015fc0 <pbuf_free>
  while (p != NULL) {
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d1dc      	bne.n	8013ae6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013b2c:	6839      	ldr	r1, [r7, #0]
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f000 f8c2 	bl	8013cb8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013b34:	4b10      	ldr	r3, [pc, #64]	@ (8013b78 <ip_reass_free_complete_datagram+0x140>)
 8013b36:	881b      	ldrh	r3, [r3, #0]
 8013b38:	8bfa      	ldrh	r2, [r7, #30]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d905      	bls.n	8013b4a <ip_reass_free_complete_datagram+0x112>
 8013b3e:	4b09      	ldr	r3, [pc, #36]	@ (8013b64 <ip_reass_free_complete_datagram+0x12c>)
 8013b40:	22d2      	movs	r2, #210	@ 0xd2
 8013b42:	490e      	ldr	r1, [pc, #56]	@ (8013b7c <ip_reass_free_complete_datagram+0x144>)
 8013b44:	4809      	ldr	r0, [pc, #36]	@ (8013b6c <ip_reass_free_complete_datagram+0x134>)
 8013b46:	f00a f85b 	bl	801dc00 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8013b78 <ip_reass_free_complete_datagram+0x140>)
 8013b4c:	881a      	ldrh	r2, [r3, #0]
 8013b4e:	8bfb      	ldrh	r3, [r7, #30]
 8013b50:	1ad3      	subs	r3, r2, r3
 8013b52:	b29a      	uxth	r2, r3
 8013b54:	4b08      	ldr	r3, [pc, #32]	@ (8013b78 <ip_reass_free_complete_datagram+0x140>)
 8013b56:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013b58:	8bfb      	ldrh	r3, [r7, #30]
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3720      	adds	r7, #32
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	08020c3c 	.word	0x08020c3c
 8013b68:	08020ca8 	.word	0x08020ca8
 8013b6c:	08020cb4 	.word	0x08020cb4
 8013b70:	08020cdc 	.word	0x08020cdc
 8013b74:	08020cf0 	.word	0x08020cf0
 8013b78:	20008850 	.word	0x20008850
 8013b7c:	08020d10 	.word	0x08020d10

08013b80 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b08a      	sub	sp, #40	@ 0x28
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013b8e:	2300      	movs	r3, #0
 8013b90:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013b92:	2300      	movs	r3, #0
 8013b94:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013b96:	2300      	movs	r3, #0
 8013b98:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013b9e:	4b28      	ldr	r3, [pc, #160]	@ (8013c40 <ip_reass_remove_oldest_datagram+0xc0>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013ba4:	e030      	b.n	8013c08 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ba8:	695a      	ldr	r2, [r3, #20]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	68db      	ldr	r3, [r3, #12]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d10c      	bne.n	8013bcc <ip_reass_remove_oldest_datagram+0x4c>
 8013bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb4:	699a      	ldr	r2, [r3, #24]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	691b      	ldr	r3, [r3, #16]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d106      	bne.n	8013bcc <ip_reass_remove_oldest_datagram+0x4c>
 8013bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bc0:	899a      	ldrh	r2, [r3, #12]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	889b      	ldrh	r3, [r3, #4]
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d014      	beq.n	8013bf6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	3301      	adds	r3, #1
 8013bd0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013bd2:	6a3b      	ldr	r3, [r7, #32]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d104      	bne.n	8013be2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bda:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	61bb      	str	r3, [r7, #24]
 8013be0:	e009      	b.n	8013bf6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be4:	7fda      	ldrb	r2, [r3, #31]
 8013be6:	6a3b      	ldr	r3, [r7, #32]
 8013be8:	7fdb      	ldrb	r3, [r3, #31]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d803      	bhi.n	8013bf6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d001      	beq.n	8013c02 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c00:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1cb      	bne.n	8013ba6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013c0e:	6a3b      	ldr	r3, [r7, #32]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d008      	beq.n	8013c26 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013c14:	69b9      	ldr	r1, [r7, #24]
 8013c16:	6a38      	ldr	r0, [r7, #32]
 8013c18:	f7ff ff0e 	bl	8013a38 <ip_reass_free_complete_datagram>
 8013c1c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013c1e:	697a      	ldr	r2, [r7, #20]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	4413      	add	r3, r2
 8013c24:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013c26:	697a      	ldr	r2, [r7, #20]
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	da02      	bge.n	8013c34 <ip_reass_remove_oldest_datagram+0xb4>
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	dcac      	bgt.n	8013b8e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013c34:	697b      	ldr	r3, [r7, #20]
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3728      	adds	r7, #40	@ 0x28
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}
 8013c3e:	bf00      	nop
 8013c40:	2000884c 	.word	0x2000884c

08013c44 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
 8013c4c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013c4e:	2004      	movs	r0, #4
 8013c50:	f001 fa48 	bl	80150e4 <memp_malloc>
 8013c54:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d110      	bne.n	8013c7e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013c5c:	6839      	ldr	r1, [r7, #0]
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f7ff ff8e 	bl	8013b80 <ip_reass_remove_oldest_datagram>
 8013c64:	4602      	mov	r2, r0
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	4293      	cmp	r3, r2
 8013c6a:	dc03      	bgt.n	8013c74 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013c6c:	2004      	movs	r0, #4
 8013c6e:	f001 fa39 	bl	80150e4 <memp_malloc>
 8013c72:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d101      	bne.n	8013c7e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	e016      	b.n	8013cac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013c7e:	2220      	movs	r2, #32
 8013c80:	2100      	movs	r1, #0
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f00a f85b 	bl	801dd3e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	220f      	movs	r2, #15
 8013c8c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013c8e:	4b09      	ldr	r3, [pc, #36]	@ (8013cb4 <ip_reass_enqueue_new_datagram+0x70>)
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013c96:	4a07      	ldr	r2, [pc, #28]	@ (8013cb4 <ip_reass_enqueue_new_datagram+0x70>)
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	3308      	adds	r3, #8
 8013ca0:	2214      	movs	r2, #20
 8013ca2:	6879      	ldr	r1, [r7, #4]
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f00a f8ee 	bl	801de86 <memcpy>
  return ipr;
 8013caa:	68fb      	ldr	r3, [r7, #12]
}
 8013cac:	4618      	mov	r0, r3
 8013cae:	3710      	adds	r7, #16
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}
 8013cb4:	2000884c 	.word	0x2000884c

08013cb8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013cc2:	4b10      	ldr	r3, [pc, #64]	@ (8013d04 <ip_reass_dequeue_datagram+0x4c>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	687a      	ldr	r2, [r7, #4]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d104      	bne.n	8013cd6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8013d04 <ip_reass_dequeue_datagram+0x4c>)
 8013cd2:	6013      	str	r3, [r2, #0]
 8013cd4:	e00d      	b.n	8013cf2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d106      	bne.n	8013cea <ip_reass_dequeue_datagram+0x32>
 8013cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8013d08 <ip_reass_dequeue_datagram+0x50>)
 8013cde:	f240 1245 	movw	r2, #325	@ 0x145
 8013ce2:	490a      	ldr	r1, [pc, #40]	@ (8013d0c <ip_reass_dequeue_datagram+0x54>)
 8013ce4:	480a      	ldr	r0, [pc, #40]	@ (8013d10 <ip_reass_dequeue_datagram+0x58>)
 8013ce6:	f009 ff8b 	bl	801dc00 <iprintf>
    prev->next = ipr->next;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013cf2:	6879      	ldr	r1, [r7, #4]
 8013cf4:	2004      	movs	r0, #4
 8013cf6:	f001 fa6b 	bl	80151d0 <memp_free>
}
 8013cfa:	bf00      	nop
 8013cfc:	3708      	adds	r7, #8
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	bd80      	pop	{r7, pc}
 8013d02:	bf00      	nop
 8013d04:	2000884c 	.word	0x2000884c
 8013d08:	08020c3c 	.word	0x08020c3c
 8013d0c:	08020d34 	.word	0x08020d34
 8013d10:	08020cb4 	.word	0x08020cb4

08013d14 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b08c      	sub	sp, #48	@ 0x30
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013d20:	2300      	movs	r3, #0
 8013d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013d24:	2301      	movs	r3, #1
 8013d26:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013d2e:	69fb      	ldr	r3, [r7, #28]
 8013d30:	885b      	ldrh	r3, [r3, #2]
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	4618      	mov	r0, r3
 8013d36:	f000 fc91 	bl	801465c <lwip_htons>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	f003 030f 	and.w	r3, r3, #15
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	009b      	lsls	r3, r3, #2
 8013d4a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013d4c:	7e7b      	ldrb	r3, [r7, #25]
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	8b7a      	ldrh	r2, [r7, #26]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d202      	bcs.n	8013d5c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013d56:	f04f 33ff 	mov.w	r3, #4294967295
 8013d5a:	e135      	b.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013d5c:	7e7b      	ldrb	r3, [r7, #25]
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	8b7a      	ldrh	r2, [r7, #26]
 8013d62:	1ad3      	subs	r3, r2, r3
 8013d64:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	88db      	ldrh	r3, [r3, #6]
 8013d6a:	b29b      	uxth	r3, r3
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f000 fc75 	bl	801465c <lwip_htons>
 8013d72:	4603      	mov	r3, r0
 8013d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	00db      	lsls	r3, r3, #3
 8013d7c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d86:	2200      	movs	r2, #0
 8013d88:	701a      	strb	r2, [r3, #0]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	705a      	strb	r2, [r3, #1]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	709a      	strb	r2, [r3, #2]
 8013d92:	2200      	movs	r2, #0
 8013d94:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d98:	8afa      	ldrh	r2, [r7, #22]
 8013d9a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013d9c:	8afa      	ldrh	r2, [r7, #22]
 8013d9e:	8b7b      	ldrh	r3, [r7, #26]
 8013da0:	4413      	add	r3, r2
 8013da2:	b29a      	uxth	r2, r3
 8013da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013da6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013daa:	88db      	ldrh	r3, [r3, #6]
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	8afa      	ldrh	r2, [r7, #22]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d902      	bls.n	8013dba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013db4:	f04f 33ff 	mov.w	r3, #4294967295
 8013db8:	e106      	b.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8013dc0:	e068      	b.n	8013e94 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc4:	685b      	ldr	r3, [r3, #4]
 8013dc6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dca:	889b      	ldrh	r3, [r3, #4]
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	889b      	ldrh	r3, [r3, #4]
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	429a      	cmp	r2, r3
 8013dd6:	d235      	bcs.n	8013e44 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ddc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d020      	beq.n	8013e26 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013de6:	889b      	ldrh	r3, [r3, #4]
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013dec:	88db      	ldrh	r3, [r3, #6]
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d307      	bcc.n	8013e04 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013df6:	88db      	ldrh	r3, [r3, #6]
 8013df8:	b29a      	uxth	r2, r3
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	889b      	ldrh	r3, [r3, #4]
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d902      	bls.n	8013e0a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e04:	f04f 33ff 	mov.w	r3, #4294967295
 8013e08:	e0de      	b.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e0c:	68ba      	ldr	r2, [r7, #8]
 8013e0e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e12:	88db      	ldrh	r3, [r3, #6]
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e18:	889b      	ldrh	r3, [r3, #4]
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d03d      	beq.n	8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013e24:	e03a      	b.n	8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e28:	88db      	ldrh	r3, [r3, #6]
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	889b      	ldrh	r3, [r3, #4]
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d902      	bls.n	8013e3c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e36:	f04f 33ff 	mov.w	r3, #4294967295
 8013e3a:	e0c5      	b.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	68ba      	ldr	r2, [r7, #8]
 8013e40:	605a      	str	r2, [r3, #4]
      break;
 8013e42:	e02b      	b.n	8013e9c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e46:	889b      	ldrh	r3, [r3, #4]
 8013e48:	b29a      	uxth	r2, r3
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	889b      	ldrh	r3, [r3, #4]
 8013e4e:	b29b      	uxth	r3, r3
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d102      	bne.n	8013e5a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e54:	f04f 33ff 	mov.w	r3, #4294967295
 8013e58:	e0b6      	b.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e5c:	889b      	ldrh	r3, [r3, #4]
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	88db      	ldrh	r3, [r3, #6]
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d202      	bcs.n	8013e70 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e6e:	e0ab      	b.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d009      	beq.n	8013e8a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e78:	88db      	ldrh	r3, [r3, #6]
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	889b      	ldrh	r3, [r3, #4]
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	429a      	cmp	r2, r3
 8013e84:	d001      	beq.n	8013e8a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013e86:	2300      	movs	r3, #0
 8013e88:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8013e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d193      	bne.n	8013dc2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013e9a:	e000      	b.n	8013e9e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013e9c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d12d      	bne.n	8013f00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d01c      	beq.n	8013ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eac:	88db      	ldrh	r3, [r3, #6]
 8013eae:	b29a      	uxth	r2, r3
 8013eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013eb2:	889b      	ldrh	r3, [r3, #4]
 8013eb4:	b29b      	uxth	r3, r3
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d906      	bls.n	8013ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013eba:	4b45      	ldr	r3, [pc, #276]	@ (8013fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013ebc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8013ec0:	4944      	ldr	r1, [pc, #272]	@ (8013fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013ec2:	4845      	ldr	r0, [pc, #276]	@ (8013fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ec4:	f009 fe9c 	bl	801dc00 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013eca:	68ba      	ldr	r2, [r7, #8]
 8013ecc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ed0:	88db      	ldrh	r3, [r3, #6]
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ed6:	889b      	ldrh	r3, [r3, #4]
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d010      	beq.n	8013f00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	623b      	str	r3, [r7, #32]
 8013ee2:	e00d      	b.n	8013f00 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d006      	beq.n	8013efa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013eec:	4b38      	ldr	r3, [pc, #224]	@ (8013fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013eee:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013ef2:	493a      	ldr	r1, [pc, #232]	@ (8013fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013ef4:	4838      	ldr	r0, [pc, #224]	@ (8013fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013ef6:	f009 fe83 	bl	801dc00 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	68ba      	ldr	r2, [r7, #8]
 8013efe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d105      	bne.n	8013f12 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	7f9b      	ldrb	r3, [r3, #30]
 8013f0a:	f003 0301 	and.w	r3, r3, #1
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d059      	beq.n	8013fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013f12:	6a3b      	ldr	r3, [r7, #32]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d04f      	beq.n	8013fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d006      	beq.n	8013f2e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	685b      	ldr	r3, [r3, #4]
 8013f26:	889b      	ldrh	r3, [r3, #4]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d002      	beq.n	8013f34 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013f2e:	2300      	movs	r3, #0
 8013f30:	623b      	str	r3, [r7, #32]
 8013f32:	e041      	b.n	8013fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f36:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8013f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013f3e:	e012      	b.n	8013f66 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8013f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f48:	88db      	ldrh	r3, [r3, #6]
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f4e:	889b      	ldrh	r3, [r3, #4]
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d002      	beq.n	8013f5c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013f56:	2300      	movs	r3, #0
 8013f58:	623b      	str	r3, [r7, #32]
            break;
 8013f5a:	e007      	b.n	8013f6c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d1e9      	bne.n	8013f40 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013f6c:	6a3b      	ldr	r3, [r7, #32]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d022      	beq.n	8013fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	685b      	ldr	r3, [r3, #4]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d106      	bne.n	8013f88 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013f7a:	4b15      	ldr	r3, [pc, #84]	@ (8013fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013f7c:	f240 12df 	movw	r2, #479	@ 0x1df
 8013f80:	4917      	ldr	r1, [pc, #92]	@ (8013fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013f82:	4815      	ldr	r0, [pc, #84]	@ (8013fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f84:	f009 fe3c 	bl	801dc00 <iprintf>
          LWIP_ASSERT("sanity check",
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	685b      	ldr	r3, [r3, #4]
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d106      	bne.n	8013fa2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013f94:	4b0e      	ldr	r3, [pc, #56]	@ (8013fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013f96:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013f9a:	4911      	ldr	r1, [pc, #68]	@ (8013fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013f9c:	480e      	ldr	r0, [pc, #56]	@ (8013fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f9e:	f009 fe2f 	bl	801dc00 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d006      	beq.n	8013fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013faa:	4b09      	ldr	r3, [pc, #36]	@ (8013fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013fac:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8013fb0:	490c      	ldr	r1, [pc, #48]	@ (8013fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013fb2:	4809      	ldr	r0, [pc, #36]	@ (8013fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013fb4:	f009 fe24 	bl	801dc00 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013fb8:	6a3b      	ldr	r3, [r7, #32]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	bf14      	ite	ne
 8013fbe:	2301      	movne	r3, #1
 8013fc0:	2300      	moveq	r3, #0
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	e000      	b.n	8013fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013fc6:	2300      	movs	r3, #0
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3730      	adds	r7, #48	@ 0x30
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}
 8013fd0:	08020c3c 	.word	0x08020c3c
 8013fd4:	08020d50 	.word	0x08020d50
 8013fd8:	08020cb4 	.word	0x08020cb4
 8013fdc:	08020d70 	.word	0x08020d70
 8013fe0:	08020da8 	.word	0x08020da8
 8013fe4:	08020db8 	.word	0x08020db8

08013fe8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b08e      	sub	sp, #56	@ 0x38
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	f003 030f 	and.w	r3, r3, #15
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	009b      	lsls	r3, r3, #2
 8014002:	b2db      	uxtb	r3, r3
 8014004:	2b14      	cmp	r3, #20
 8014006:	f040 8171 	bne.w	80142ec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801400a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801400c:	88db      	ldrh	r3, [r3, #6]
 801400e:	b29b      	uxth	r3, r3
 8014010:	4618      	mov	r0, r3
 8014012:	f000 fb23 	bl	801465c <lwip_htons>
 8014016:	4603      	mov	r3, r0
 8014018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801401c:	b29b      	uxth	r3, r3
 801401e:	00db      	lsls	r3, r3, #3
 8014020:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014024:	885b      	ldrh	r3, [r3, #2]
 8014026:	b29b      	uxth	r3, r3
 8014028:	4618      	mov	r0, r3
 801402a:	f000 fb17 	bl	801465c <lwip_htons>
 801402e:	4603      	mov	r3, r0
 8014030:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	f003 030f 	and.w	r3, r3, #15
 801403a:	b2db      	uxtb	r3, r3
 801403c:	009b      	lsls	r3, r3, #2
 801403e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014042:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014046:	b29b      	uxth	r3, r3
 8014048:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801404a:	429a      	cmp	r2, r3
 801404c:	f0c0 8150 	bcc.w	80142f0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014054:	b29b      	uxth	r3, r3
 8014056:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	f002 f83d 	bl	80160dc <pbuf_clen>
 8014062:	4603      	mov	r3, r0
 8014064:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014066:	4b8c      	ldr	r3, [pc, #560]	@ (8014298 <ip4_reass+0x2b0>)
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	461a      	mov	r2, r3
 801406c:	8c3b      	ldrh	r3, [r7, #32]
 801406e:	4413      	add	r3, r2
 8014070:	2b0a      	cmp	r3, #10
 8014072:	dd10      	ble.n	8014096 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014074:	8c3b      	ldrh	r3, [r7, #32]
 8014076:	4619      	mov	r1, r3
 8014078:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801407a:	f7ff fd81 	bl	8013b80 <ip_reass_remove_oldest_datagram>
 801407e:	4603      	mov	r3, r0
 8014080:	2b00      	cmp	r3, #0
 8014082:	f000 8137 	beq.w	80142f4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014086:	4b84      	ldr	r3, [pc, #528]	@ (8014298 <ip4_reass+0x2b0>)
 8014088:	881b      	ldrh	r3, [r3, #0]
 801408a:	461a      	mov	r2, r3
 801408c:	8c3b      	ldrh	r3, [r7, #32]
 801408e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014090:	2b0a      	cmp	r3, #10
 8014092:	f300 812f 	bgt.w	80142f4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014096:	4b81      	ldr	r3, [pc, #516]	@ (801429c <ip4_reass+0x2b4>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	633b      	str	r3, [r7, #48]	@ 0x30
 801409c:	e015      	b.n	80140ca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140a0:	695a      	ldr	r2, [r3, #20]
 80140a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d10c      	bne.n	80140c4 <ip4_reass+0xdc>
 80140aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140ac:	699a      	ldr	r2, [r3, #24]
 80140ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140b0:	691b      	ldr	r3, [r3, #16]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d106      	bne.n	80140c4 <ip4_reass+0xdc>
 80140b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140b8:	899a      	ldrh	r2, [r3, #12]
 80140ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140bc:	889b      	ldrh	r3, [r3, #4]
 80140be:	b29b      	uxth	r3, r3
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d006      	beq.n	80140d2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80140c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80140ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d1e6      	bne.n	801409e <ip4_reass+0xb6>
 80140d0:	e000      	b.n	80140d4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80140d2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80140d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d109      	bne.n	80140ee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80140da:	8c3b      	ldrh	r3, [r7, #32]
 80140dc:	4619      	mov	r1, r3
 80140de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140e0:	f7ff fdb0 	bl	8013c44 <ip_reass_enqueue_new_datagram>
 80140e4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80140e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d11c      	bne.n	8014126 <ip4_reass+0x13e>
      goto nullreturn;
 80140ec:	e105      	b.n	80142fa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80140ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140f0:	88db      	ldrh	r3, [r3, #6]
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	4618      	mov	r0, r3
 80140f6:	f000 fab1 	bl	801465c <lwip_htons>
 80140fa:	4603      	mov	r3, r0
 80140fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014100:	2b00      	cmp	r3, #0
 8014102:	d110      	bne.n	8014126 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014106:	89db      	ldrh	r3, [r3, #14]
 8014108:	4618      	mov	r0, r3
 801410a:	f000 faa7 	bl	801465c <lwip_htons>
 801410e:	4603      	mov	r3, r0
 8014110:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014114:	2b00      	cmp	r3, #0
 8014116:	d006      	beq.n	8014126 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801411a:	3308      	adds	r3, #8
 801411c:	2214      	movs	r2, #20
 801411e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014120:	4618      	mov	r0, r3
 8014122:	f009 feb0 	bl	801de86 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014128:	88db      	ldrh	r3, [r3, #6]
 801412a:	b29b      	uxth	r3, r3
 801412c:	f003 0320 	and.w	r3, r3, #32
 8014130:	2b00      	cmp	r3, #0
 8014132:	bf0c      	ite	eq
 8014134:	2301      	moveq	r3, #1
 8014136:	2300      	movne	r3, #0
 8014138:	b2db      	uxtb	r3, r3
 801413a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d00e      	beq.n	8014160 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014142:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014146:	4413      	add	r3, r2
 8014148:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801414a:	8b7a      	ldrh	r2, [r7, #26]
 801414c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801414e:	429a      	cmp	r2, r3
 8014150:	f0c0 80a0 	bcc.w	8014294 <ip4_reass+0x2ac>
 8014154:	8b7b      	ldrh	r3, [r7, #26]
 8014156:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801415a:	4293      	cmp	r3, r2
 801415c:	f200 809a 	bhi.w	8014294 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014160:	69fa      	ldr	r2, [r7, #28]
 8014162:	6879      	ldr	r1, [r7, #4]
 8014164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014166:	f7ff fdd5 	bl	8013d14 <ip_reass_chain_frag_into_datagram_and_validate>
 801416a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801416c:	697b      	ldr	r3, [r7, #20]
 801416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014172:	f000 809b 	beq.w	80142ac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014176:	4b48      	ldr	r3, [pc, #288]	@ (8014298 <ip4_reass+0x2b0>)
 8014178:	881a      	ldrh	r2, [r3, #0]
 801417a:	8c3b      	ldrh	r3, [r7, #32]
 801417c:	4413      	add	r3, r2
 801417e:	b29a      	uxth	r2, r3
 8014180:	4b45      	ldr	r3, [pc, #276]	@ (8014298 <ip4_reass+0x2b0>)
 8014182:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014184:	69fb      	ldr	r3, [r7, #28]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d00d      	beq.n	80141a6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801418a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801418c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801418e:	4413      	add	r3, r2
 8014190:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014194:	8a7a      	ldrh	r2, [r7, #18]
 8014196:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801419a:	7f9b      	ldrb	r3, [r3, #30]
 801419c:	f043 0301 	orr.w	r3, r3, #1
 80141a0:	b2da      	uxtb	r2, r3
 80141a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141a4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d171      	bne.n	8014290 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80141ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ae:	8b9b      	ldrh	r3, [r3, #28]
 80141b0:	3314      	adds	r3, #20
 80141b2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80141b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80141be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80141c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141c8:	3308      	adds	r3, #8
 80141ca:	2214      	movs	r2, #20
 80141cc:	4619      	mov	r1, r3
 80141ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80141d0:	f009 fe59 	bl	801de86 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80141d4:	8a3b      	ldrh	r3, [r7, #16]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f000 fa40 	bl	801465c <lwip_htons>
 80141dc:	4603      	mov	r3, r0
 80141de:	461a      	mov	r2, r3
 80141e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141e2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80141e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141e6:	2200      	movs	r2, #0
 80141e8:	719a      	strb	r2, [r3, #6]
 80141ea:	2200      	movs	r2, #0
 80141ec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80141ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141f0:	2200      	movs	r2, #0
 80141f2:	729a      	strb	r2, [r3, #10]
 80141f4:	2200      	movs	r2, #0
 80141f6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80141f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80141fe:	e00d      	b.n	801421c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014206:	2114      	movs	r1, #20
 8014208:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801420a:	f001 fe21 	bl	8015e50 <pbuf_remove_header>
      pbuf_cat(p, r);
 801420e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f001 ffa3 	bl	801615c <pbuf_cat>
      r = iprh->next_pbuf;
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801421c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801421e:	2b00      	cmp	r3, #0
 8014220:	d1ee      	bne.n	8014200 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014222:	4b1e      	ldr	r3, [pc, #120]	@ (801429c <ip4_reass+0x2b4>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014228:	429a      	cmp	r2, r3
 801422a:	d102      	bne.n	8014232 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801422c:	2300      	movs	r3, #0
 801422e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014230:	e010      	b.n	8014254 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014232:	4b1a      	ldr	r3, [pc, #104]	@ (801429c <ip4_reass+0x2b4>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014238:	e007      	b.n	801424a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801423a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014240:	429a      	cmp	r2, r3
 8014242:	d006      	beq.n	8014252 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801424a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801424c:	2b00      	cmp	r3, #0
 801424e:	d1f4      	bne.n	801423a <ip4_reass+0x252>
 8014250:	e000      	b.n	8014254 <ip4_reass+0x26c>
          break;
 8014252:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014256:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014258:	f7ff fd2e 	bl	8013cb8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f001 ff3d 	bl	80160dc <pbuf_clen>
 8014262:	4603      	mov	r3, r0
 8014264:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014266:	4b0c      	ldr	r3, [pc, #48]	@ (8014298 <ip4_reass+0x2b0>)
 8014268:	881b      	ldrh	r3, [r3, #0]
 801426a:	8c3a      	ldrh	r2, [r7, #32]
 801426c:	429a      	cmp	r2, r3
 801426e:	d906      	bls.n	801427e <ip4_reass+0x296>
 8014270:	4b0b      	ldr	r3, [pc, #44]	@ (80142a0 <ip4_reass+0x2b8>)
 8014272:	f240 229b 	movw	r2, #667	@ 0x29b
 8014276:	490b      	ldr	r1, [pc, #44]	@ (80142a4 <ip4_reass+0x2bc>)
 8014278:	480b      	ldr	r0, [pc, #44]	@ (80142a8 <ip4_reass+0x2c0>)
 801427a:	f009 fcc1 	bl	801dc00 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801427e:	4b06      	ldr	r3, [pc, #24]	@ (8014298 <ip4_reass+0x2b0>)
 8014280:	881a      	ldrh	r2, [r3, #0]
 8014282:	8c3b      	ldrh	r3, [r7, #32]
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	b29a      	uxth	r2, r3
 8014288:	4b03      	ldr	r3, [pc, #12]	@ (8014298 <ip4_reass+0x2b0>)
 801428a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	e038      	b.n	8014302 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014290:	2300      	movs	r3, #0
 8014292:	e036      	b.n	8014302 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014294:	bf00      	nop
 8014296:	e00a      	b.n	80142ae <ip4_reass+0x2c6>
 8014298:	20008850 	.word	0x20008850
 801429c:	2000884c 	.word	0x2000884c
 80142a0:	08020c3c 	.word	0x08020c3c
 80142a4:	08020ddc 	.word	0x08020ddc
 80142a8:	08020cb4 	.word	0x08020cb4
    goto nullreturn_ipr;
 80142ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80142ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d106      	bne.n	80142c2 <ip4_reass+0x2da>
 80142b4:	4b15      	ldr	r3, [pc, #84]	@ (801430c <ip4_reass+0x324>)
 80142b6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80142ba:	4915      	ldr	r1, [pc, #84]	@ (8014310 <ip4_reass+0x328>)
 80142bc:	4815      	ldr	r0, [pc, #84]	@ (8014314 <ip4_reass+0x32c>)
 80142be:	f009 fc9f 	bl	801dc00 <iprintf>
  if (ipr->p == NULL) {
 80142c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d116      	bne.n	80142f8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80142ca:	4b13      	ldr	r3, [pc, #76]	@ (8014318 <ip4_reass+0x330>)
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80142d0:	429a      	cmp	r2, r3
 80142d2:	d006      	beq.n	80142e2 <ip4_reass+0x2fa>
 80142d4:	4b0d      	ldr	r3, [pc, #52]	@ (801430c <ip4_reass+0x324>)
 80142d6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80142da:	4910      	ldr	r1, [pc, #64]	@ (801431c <ip4_reass+0x334>)
 80142dc:	480d      	ldr	r0, [pc, #52]	@ (8014314 <ip4_reass+0x32c>)
 80142de:	f009 fc8f 	bl	801dc00 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80142e2:	2100      	movs	r1, #0
 80142e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142e6:	f7ff fce7 	bl	8013cb8 <ip_reass_dequeue_datagram>
 80142ea:	e006      	b.n	80142fa <ip4_reass+0x312>
    goto nullreturn;
 80142ec:	bf00      	nop
 80142ee:	e004      	b.n	80142fa <ip4_reass+0x312>
    goto nullreturn;
 80142f0:	bf00      	nop
 80142f2:	e002      	b.n	80142fa <ip4_reass+0x312>
      goto nullreturn;
 80142f4:	bf00      	nop
 80142f6:	e000      	b.n	80142fa <ip4_reass+0x312>
  }

nullreturn:
 80142f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f001 fe60 	bl	8015fc0 <pbuf_free>
  return NULL;
 8014300:	2300      	movs	r3, #0
}
 8014302:	4618      	mov	r0, r3
 8014304:	3738      	adds	r7, #56	@ 0x38
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	08020c3c 	.word	0x08020c3c
 8014310:	08020df8 	.word	0x08020df8
 8014314:	08020cb4 	.word	0x08020cb4
 8014318:	2000884c 	.word	0x2000884c
 801431c:	08020e04 	.word	0x08020e04

08014320 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014324:	2005      	movs	r0, #5
 8014326:	f000 fedd 	bl	80150e4 <memp_malloc>
 801432a:	4603      	mov	r3, r0
}
 801432c:	4618      	mov	r0, r3
 801432e:	bd80      	pop	{r7, pc}

08014330 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b082      	sub	sp, #8
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d106      	bne.n	801434c <ip_frag_free_pbuf_custom_ref+0x1c>
 801433e:	4b07      	ldr	r3, [pc, #28]	@ (801435c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014340:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8014344:	4906      	ldr	r1, [pc, #24]	@ (8014360 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014346:	4807      	ldr	r0, [pc, #28]	@ (8014364 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014348:	f009 fc5a 	bl	801dc00 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801434c:	6879      	ldr	r1, [r7, #4]
 801434e:	2005      	movs	r0, #5
 8014350:	f000 ff3e 	bl	80151d0 <memp_free>
}
 8014354:	bf00      	nop
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	08020c3c 	.word	0x08020c3c
 8014360:	08020e24 	.word	0x08020e24
 8014364:	08020cb4 	.word	0x08020cb4

08014368 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b084      	sub	sp, #16
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d106      	bne.n	8014388 <ipfrag_free_pbuf_custom+0x20>
 801437a:	4b11      	ldr	r3, [pc, #68]	@ (80143c0 <ipfrag_free_pbuf_custom+0x58>)
 801437c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014380:	4910      	ldr	r1, [pc, #64]	@ (80143c4 <ipfrag_free_pbuf_custom+0x5c>)
 8014382:	4811      	ldr	r0, [pc, #68]	@ (80143c8 <ipfrag_free_pbuf_custom+0x60>)
 8014384:	f009 fc3c 	bl	801dc00 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014388:	68fa      	ldr	r2, [r7, #12]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	429a      	cmp	r2, r3
 801438e:	d006      	beq.n	801439e <ipfrag_free_pbuf_custom+0x36>
 8014390:	4b0b      	ldr	r3, [pc, #44]	@ (80143c0 <ipfrag_free_pbuf_custom+0x58>)
 8014392:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8014396:	490d      	ldr	r1, [pc, #52]	@ (80143cc <ipfrag_free_pbuf_custom+0x64>)
 8014398:	480b      	ldr	r0, [pc, #44]	@ (80143c8 <ipfrag_free_pbuf_custom+0x60>)
 801439a:	f009 fc31 	bl	801dc00 <iprintf>
  if (pcr->original != NULL) {
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	69db      	ldr	r3, [r3, #28]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d004      	beq.n	80143b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	69db      	ldr	r3, [r3, #28]
 80143aa:	4618      	mov	r0, r3
 80143ac:	f001 fe08 	bl	8015fc0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80143b0:	68f8      	ldr	r0, [r7, #12]
 80143b2:	f7ff ffbd 	bl	8014330 <ip_frag_free_pbuf_custom_ref>
}
 80143b6:	bf00      	nop
 80143b8:	3710      	adds	r7, #16
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	08020c3c 	.word	0x08020c3c
 80143c4:	08020e30 	.word	0x08020e30
 80143c8:	08020cb4 	.word	0x08020cb4
 80143cc:	08020e3c 	.word	0x08020e3c

080143d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b094      	sub	sp, #80	@ 0x50
 80143d4:	af02      	add	r7, sp, #8
 80143d6:	60f8      	str	r0, [r7, #12]
 80143d8:	60b9      	str	r1, [r7, #8]
 80143da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80143dc:	2300      	movs	r3, #0
 80143de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80143e6:	3b14      	subs	r3, #20
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	da00      	bge.n	80143ee <ip4_frag+0x1e>
 80143ec:	3307      	adds	r3, #7
 80143ee:	10db      	asrs	r3, r3, #3
 80143f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80143f2:	2314      	movs	r3, #20
 80143f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80143fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	f003 030f 	and.w	r3, r3, #15
 8014408:	b2db      	uxtb	r3, r3
 801440a:	009b      	lsls	r3, r3, #2
 801440c:	b2db      	uxtb	r3, r3
 801440e:	2b14      	cmp	r3, #20
 8014410:	d002      	beq.n	8014418 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014412:	f06f 0305 	mvn.w	r3, #5
 8014416:	e110      	b.n	801463a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	895b      	ldrh	r3, [r3, #10]
 801441c:	2b13      	cmp	r3, #19
 801441e:	d809      	bhi.n	8014434 <ip4_frag+0x64>
 8014420:	4b88      	ldr	r3, [pc, #544]	@ (8014644 <ip4_frag+0x274>)
 8014422:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8014426:	4988      	ldr	r1, [pc, #544]	@ (8014648 <ip4_frag+0x278>)
 8014428:	4888      	ldr	r0, [pc, #544]	@ (801464c <ip4_frag+0x27c>)
 801442a:	f009 fbe9 	bl	801dc00 <iprintf>
 801442e:	f06f 0305 	mvn.w	r3, #5
 8014432:	e102      	b.n	801463a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014436:	88db      	ldrh	r3, [r3, #6]
 8014438:	b29b      	uxth	r3, r3
 801443a:	4618      	mov	r0, r3
 801443c:	f000 f90e 	bl	801465c <lwip_htons>
 8014440:	4603      	mov	r3, r0
 8014442:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8014444:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014446:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801444a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801444e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014454:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	891b      	ldrh	r3, [r3, #8]
 801445a:	3b14      	subs	r3, #20
 801445c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014460:	e0e1      	b.n	8014626 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014462:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014464:	00db      	lsls	r3, r3, #3
 8014466:	b29b      	uxth	r3, r3
 8014468:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801446c:	4293      	cmp	r3, r2
 801446e:	bf28      	it	cs
 8014470:	4613      	movcs	r3, r2
 8014472:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014474:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014478:	2114      	movs	r1, #20
 801447a:	200e      	movs	r0, #14
 801447c:	f001 fa8a 	bl	8015994 <pbuf_alloc>
 8014480:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8014482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014484:	2b00      	cmp	r3, #0
 8014486:	f000 80d5 	beq.w	8014634 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801448c:	895b      	ldrh	r3, [r3, #10]
 801448e:	2b13      	cmp	r3, #19
 8014490:	d806      	bhi.n	80144a0 <ip4_frag+0xd0>
 8014492:	4b6c      	ldr	r3, [pc, #432]	@ (8014644 <ip4_frag+0x274>)
 8014494:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8014498:	496d      	ldr	r1, [pc, #436]	@ (8014650 <ip4_frag+0x280>)
 801449a:	486c      	ldr	r0, [pc, #432]	@ (801464c <ip4_frag+0x27c>)
 801449c:	f009 fbb0 	bl	801dc00 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80144a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	2214      	movs	r2, #20
 80144a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80144a8:	4618      	mov	r0, r3
 80144aa:	f009 fcec 	bl	801de86 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80144ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144b0:	685b      	ldr	r3, [r3, #4]
 80144b2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80144b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80144b6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80144ba:	e064      	b.n	8014586 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	895a      	ldrh	r2, [r3, #10]
 80144c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80144c2:	1ad3      	subs	r3, r2, r3
 80144c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	895b      	ldrh	r3, [r3, #10]
 80144ca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d906      	bls.n	80144de <ip4_frag+0x10e>
 80144d0:	4b5c      	ldr	r3, [pc, #368]	@ (8014644 <ip4_frag+0x274>)
 80144d2:	f240 322d 	movw	r2, #813	@ 0x32d
 80144d6:	495f      	ldr	r1, [pc, #380]	@ (8014654 <ip4_frag+0x284>)
 80144d8:	485c      	ldr	r0, [pc, #368]	@ (801464c <ip4_frag+0x27c>)
 80144da:	f009 fb91 	bl	801dc00 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80144de:	8bfa      	ldrh	r2, [r7, #30]
 80144e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80144e4:	4293      	cmp	r3, r2
 80144e6:	bf28      	it	cs
 80144e8:	4613      	movcs	r3, r2
 80144ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80144ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d105      	bne.n	8014502 <ip4_frag+0x132>
        poff = 0;
 80144f6:	2300      	movs	r3, #0
 80144f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	60fb      	str	r3, [r7, #12]
        continue;
 8014500:	e041      	b.n	8014586 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014502:	f7ff ff0d 	bl	8014320 <ip_frag_alloc_pbuf_custom_ref>
 8014506:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014508:	69bb      	ldr	r3, [r7, #24]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d103      	bne.n	8014516 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801450e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014510:	f001 fd56 	bl	8015fc0 <pbuf_free>
        goto memerr;
 8014514:	e08f      	b.n	8014636 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014516:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801451c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801451e:	4413      	add	r3, r2
 8014520:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014524:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014528:	9201      	str	r2, [sp, #4]
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	4603      	mov	r3, r0
 801452e:	2241      	movs	r2, #65	@ 0x41
 8014530:	2000      	movs	r0, #0
 8014532:	f001 fb59 	bl	8015be8 <pbuf_alloced_custom>
 8014536:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d106      	bne.n	801454c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801453e:	69b8      	ldr	r0, [r7, #24]
 8014540:	f7ff fef6 	bl	8014330 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014544:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014546:	f001 fd3b 	bl	8015fc0 <pbuf_free>
        goto memerr;
 801454a:	e074      	b.n	8014636 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801454c:	68f8      	ldr	r0, [r7, #12]
 801454e:	f001 fddd 	bl	801610c <pbuf_ref>
      pcr->original = p;
 8014552:	69bb      	ldr	r3, [r7, #24]
 8014554:	68fa      	ldr	r2, [r7, #12]
 8014556:	61da      	str	r2, [r3, #28]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014558:	69bb      	ldr	r3, [r7, #24]
 801455a:	4a3f      	ldr	r2, [pc, #252]	@ (8014658 <ip4_frag+0x288>)
 801455c:	619a      	str	r2, [r3, #24]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801455e:	6979      	ldr	r1, [r7, #20]
 8014560:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014562:	f001 fdfb 	bl	801615c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014566:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801456a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801456e:	1ad3      	subs	r3, r2, r3
 8014570:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014574:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014578:	2b00      	cmp	r3, #0
 801457a:	d004      	beq.n	8014586 <ip4_frag+0x1b6>
        poff = 0;
 801457c:	2300      	movs	r3, #0
 801457e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014586:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801458a:	2b00      	cmp	r3, #0
 801458c:	d196      	bne.n	80144bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801458e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014590:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014594:	4413      	add	r3, r2
 8014596:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801459c:	f1a3 0213 	sub.w	r2, r3, #19
 80145a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145a4:	429a      	cmp	r2, r3
 80145a6:	bfcc      	ite	gt
 80145a8:	2301      	movgt	r3, #1
 80145aa:	2300      	movle	r3, #0
 80145ac:	b2db      	uxtb	r3, r3
 80145ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80145b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80145b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80145ba:	6a3b      	ldr	r3, [r7, #32]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d002      	beq.n	80145c6 <ip4_frag+0x1f6>
 80145c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d003      	beq.n	80145ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80145c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80145c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80145cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80145ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80145d0:	4618      	mov	r0, r3
 80145d2:	f000 f843 	bl	801465c <lwip_htons>
 80145d6:	4603      	mov	r3, r0
 80145d8:	461a      	mov	r2, r3
 80145da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80145de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80145e0:	3314      	adds	r3, #20
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	4618      	mov	r0, r3
 80145e6:	f000 f839 	bl	801465c <lwip_htons>
 80145ea:	4603      	mov	r3, r0
 80145ec:	461a      	mov	r2, r3
 80145ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80145f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145f4:	2200      	movs	r2, #0
 80145f6:	729a      	strb	r2, [r3, #10]
 80145f8:	2200      	movs	r2, #0
 80145fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	695b      	ldr	r3, [r3, #20]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014604:	68b8      	ldr	r0, [r7, #8]
 8014606:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014608:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801460a:	f001 fcd9 	bl	8015fc0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801460e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014612:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014614:	1ad3      	subs	r3, r2, r3
 8014616:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801461a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801461e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014620:	4413      	add	r3, r2
 8014622:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014626:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801462a:	2b00      	cmp	r3, #0
 801462c:	f47f af19 	bne.w	8014462 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014630:	2300      	movs	r3, #0
 8014632:	e002      	b.n	801463a <ip4_frag+0x26a>
      goto memerr;
 8014634:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014636:	f04f 33ff 	mov.w	r3, #4294967295
}
 801463a:	4618      	mov	r0, r3
 801463c:	3748      	adds	r7, #72	@ 0x48
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	08020c3c 	.word	0x08020c3c
 8014648:	08020e48 	.word	0x08020e48
 801464c:	08020cb4 	.word	0x08020cb4
 8014650:	08020e64 	.word	0x08020e64
 8014654:	08020e84 	.word	0x08020e84
 8014658:	08014369 	.word	0x08014369

0801465c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	4603      	mov	r3, r0
 8014664:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8014666:	88fb      	ldrh	r3, [r7, #6]
 8014668:	021b      	lsls	r3, r3, #8
 801466a:	b21a      	sxth	r2, r3
 801466c:	88fb      	ldrh	r3, [r7, #6]
 801466e:	0a1b      	lsrs	r3, r3, #8
 8014670:	b29b      	uxth	r3, r3
 8014672:	b21b      	sxth	r3, r3
 8014674:	4313      	orrs	r3, r2
 8014676:	b21b      	sxth	r3, r3
 8014678:	b29b      	uxth	r3, r3
}
 801467a:	4618      	mov	r0, r3
 801467c:	370c      	adds	r7, #12
 801467e:	46bd      	mov	sp, r7
 8014680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014684:	4770      	bx	lr

08014686 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8014686:	b480      	push	{r7}
 8014688:	b083      	sub	sp, #12
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	061a      	lsls	r2, r3, #24
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	021b      	lsls	r3, r3, #8
 8014696:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801469a:	431a      	orrs	r2, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	0a1b      	lsrs	r3, r3, #8
 80146a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146a4:	431a      	orrs	r2, r3
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	0e1b      	lsrs	r3, r3, #24
 80146aa:	4313      	orrs	r3, r2
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	370c      	adds	r7, #12
 80146b0:	46bd      	mov	sp, r7
 80146b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b6:	4770      	bx	lr

080146b8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b089      	sub	sp, #36	@ 0x24
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80146c6:	2300      	movs	r3, #0
 80146c8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	f003 0301 	and.w	r3, r3, #1
 80146d4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d00d      	beq.n	80146f8 <lwip_standard_chksum+0x40>
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	dd0a      	ble.n	80146f8 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80146e2:	69fa      	ldr	r2, [r7, #28]
 80146e4:	1c53      	adds	r3, r2, #1
 80146e6:	61fb      	str	r3, [r7, #28]
 80146e8:	f107 030e 	add.w	r3, r7, #14
 80146ec:	3301      	adds	r3, #1
 80146ee:	7812      	ldrb	r2, [r2, #0]
 80146f0:	701a      	strb	r2, [r3, #0]
    len--;
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	3b01      	subs	r3, #1
 80146f6:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80146fc:	e00a      	b.n	8014714 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80146fe:	69bb      	ldr	r3, [r7, #24]
 8014700:	1c9a      	adds	r2, r3, #2
 8014702:	61ba      	str	r2, [r7, #24]
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	461a      	mov	r2, r3
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	4413      	add	r3, r2
 801470c:	617b      	str	r3, [r7, #20]
    len -= 2;
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	3b02      	subs	r3, #2
 8014712:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8014714:	683b      	ldr	r3, [r7, #0]
 8014716:	2b01      	cmp	r3, #1
 8014718:	dcf1      	bgt.n	80146fe <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	dd04      	ble.n	801472a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8014720:	f107 030e 	add.w	r3, r7, #14
 8014724:	69ba      	ldr	r2, [r7, #24]
 8014726:	7812      	ldrb	r2, [r2, #0]
 8014728:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801472a:	89fb      	ldrh	r3, [r7, #14]
 801472c:	461a      	mov	r2, r3
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	4413      	add	r3, r2
 8014732:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	0c1a      	lsrs	r2, r3, #16
 8014738:	697b      	ldr	r3, [r7, #20]
 801473a:	b29b      	uxth	r3, r3
 801473c:	4413      	add	r3, r2
 801473e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	0c1a      	lsrs	r2, r3, #16
 8014744:	697b      	ldr	r3, [r7, #20]
 8014746:	b29b      	uxth	r3, r3
 8014748:	4413      	add	r3, r2
 801474a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d007      	beq.n	8014762 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8014752:	697b      	ldr	r3, [r7, #20]
 8014754:	021b      	lsls	r3, r3, #8
 8014756:	b29a      	uxth	r2, r3
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	0a1b      	lsrs	r3, r3, #8
 801475c:	b2db      	uxtb	r3, r3
 801475e:	4313      	orrs	r3, r2
 8014760:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8014762:	697b      	ldr	r3, [r7, #20]
 8014764:	b29b      	uxth	r3, r3
}
 8014766:	4618      	mov	r0, r3
 8014768:	3724      	adds	r7, #36	@ 0x24
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8014772:	b580      	push	{r7, lr}
 8014774:	b082      	sub	sp, #8
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	460b      	mov	r3, r1
 801477c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 801477e:	887b      	ldrh	r3, [r7, #2]
 8014780:	4619      	mov	r1, r3
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7ff ff98 	bl	80146b8 <lwip_standard_chksum>
 8014788:	4603      	mov	r3, r0
 801478a:	43db      	mvns	r3, r3
 801478c:	b29b      	uxth	r3, r3
}
 801478e:	4618      	mov	r0, r3
 8014790:	3708      	adds	r7, #8
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}

08014796 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8014796:	b580      	push	{r7, lr}
 8014798:	b082      	sub	sp, #8
 801479a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801479c:	2300      	movs	r3, #0
 801479e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80147a0:	f009 f86a 	bl	801d878 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80147a4:	f000 f8d6 	bl	8014954 <mem_init>
  memp_init();
 80147a8:	f000 fc2e 	bl	8015008 <memp_init>
  pbuf_init();
  netif_init();
 80147ac:	f000 fd3a 	bl	8015224 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80147b0:	f008 f8b2 	bl	801c918 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80147b4:	f001 feae 	bl	8016514 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 80147b8:	f7fe f8d6 	bl	8012968 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80147bc:	f007 fff2 	bl	801c7a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80147c0:	bf00      	nop
 80147c2:	3708      	adds	r7, #8
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80147c8:	b480      	push	{r7}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	4603      	mov	r3, r0
 80147d0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80147d2:	4b05      	ldr	r3, [pc, #20]	@ (80147e8 <ptr_to_mem+0x20>)
 80147d4:	681a      	ldr	r2, [r3, #0]
 80147d6:	88fb      	ldrh	r3, [r7, #6]
 80147d8:	4413      	add	r3, r2
}
 80147da:	4618      	mov	r0, r3
 80147dc:	370c      	adds	r7, #12
 80147de:	46bd      	mov	sp, r7
 80147e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	2000886c 	.word	0x2000886c

080147ec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80147ec:	b480      	push	{r7}
 80147ee:	b083      	sub	sp, #12
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80147f4:	4b05      	ldr	r3, [pc, #20]	@ (801480c <mem_to_ptr+0x20>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	1ad3      	subs	r3, r2, r3
 80147fc:	b29b      	uxth	r3, r3
}
 80147fe:	4618      	mov	r0, r3
 8014800:	370c      	adds	r7, #12
 8014802:	46bd      	mov	sp, r7
 8014804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014808:	4770      	bx	lr
 801480a:	bf00      	nop
 801480c:	2000886c 	.word	0x2000886c

08014810 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8014810:	b590      	push	{r4, r7, lr}
 8014812:	b085      	sub	sp, #20
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8014818:	4b45      	ldr	r3, [pc, #276]	@ (8014930 <plug_holes+0x120>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	429a      	cmp	r2, r3
 8014820:	d206      	bcs.n	8014830 <plug_holes+0x20>
 8014822:	4b44      	ldr	r3, [pc, #272]	@ (8014934 <plug_holes+0x124>)
 8014824:	f240 12df 	movw	r2, #479	@ 0x1df
 8014828:	4943      	ldr	r1, [pc, #268]	@ (8014938 <plug_holes+0x128>)
 801482a:	4844      	ldr	r0, [pc, #272]	@ (801493c <plug_holes+0x12c>)
 801482c:	f009 f9e8 	bl	801dc00 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8014830:	4b43      	ldr	r3, [pc, #268]	@ (8014940 <plug_holes+0x130>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	429a      	cmp	r2, r3
 8014838:	d306      	bcc.n	8014848 <plug_holes+0x38>
 801483a:	4b3e      	ldr	r3, [pc, #248]	@ (8014934 <plug_holes+0x124>)
 801483c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014840:	4940      	ldr	r1, [pc, #256]	@ (8014944 <plug_holes+0x134>)
 8014842:	483e      	ldr	r0, [pc, #248]	@ (801493c <plug_holes+0x12c>)
 8014844:	f009 f9dc 	bl	801dc00 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	791b      	ldrb	r3, [r3, #4]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d006      	beq.n	801485e <plug_holes+0x4e>
 8014850:	4b38      	ldr	r3, [pc, #224]	@ (8014934 <plug_holes+0x124>)
 8014852:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8014856:	493c      	ldr	r1, [pc, #240]	@ (8014948 <plug_holes+0x138>)
 8014858:	4838      	ldr	r0, [pc, #224]	@ (801493c <plug_holes+0x12c>)
 801485a:	f009 f9d1 	bl	801dc00 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	881b      	ldrh	r3, [r3, #0]
 8014862:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014866:	d906      	bls.n	8014876 <plug_holes+0x66>
 8014868:	4b32      	ldr	r3, [pc, #200]	@ (8014934 <plug_holes+0x124>)
 801486a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801486e:	4937      	ldr	r1, [pc, #220]	@ (801494c <plug_holes+0x13c>)
 8014870:	4832      	ldr	r0, [pc, #200]	@ (801493c <plug_holes+0x12c>)
 8014872:	f009 f9c5 	bl	801dc00 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	4618      	mov	r0, r3
 801487c:	f7ff ffa4 	bl	80147c8 <ptr_to_mem>
 8014880:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8014882:	687a      	ldr	r2, [r7, #4]
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	429a      	cmp	r2, r3
 8014888:	d024      	beq.n	80148d4 <plug_holes+0xc4>
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	791b      	ldrb	r3, [r3, #4]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d120      	bne.n	80148d4 <plug_holes+0xc4>
 8014892:	4b2b      	ldr	r3, [pc, #172]	@ (8014940 <plug_holes+0x130>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	68fa      	ldr	r2, [r7, #12]
 8014898:	429a      	cmp	r2, r3
 801489a:	d01b      	beq.n	80148d4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801489c:	4b2c      	ldr	r3, [pc, #176]	@ (8014950 <plug_holes+0x140>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d102      	bne.n	80148ac <plug_holes+0x9c>
      lfree = mem;
 80148a6:	4a2a      	ldr	r2, [pc, #168]	@ (8014950 <plug_holes+0x140>)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	881a      	ldrh	r2, [r3, #0]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	881b      	ldrh	r3, [r3, #0]
 80148b8:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 80148bc:	d00a      	beq.n	80148d4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	881b      	ldrh	r3, [r3, #0]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f7ff ff80 	bl	80147c8 <ptr_to_mem>
 80148c8:	4604      	mov	r4, r0
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f7ff ff8e 	bl	80147ec <mem_to_ptr>
 80148d0:	4603      	mov	r3, r0
 80148d2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	885b      	ldrh	r3, [r3, #2]
 80148d8:	4618      	mov	r0, r3
 80148da:	f7ff ff75 	bl	80147c8 <ptr_to_mem>
 80148de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80148e0:	68ba      	ldr	r2, [r7, #8]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d01f      	beq.n	8014928 <plug_holes+0x118>
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	791b      	ldrb	r3, [r3, #4]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d11b      	bne.n	8014928 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80148f0:	4b17      	ldr	r3, [pc, #92]	@ (8014950 <plug_holes+0x140>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d102      	bne.n	8014900 <plug_holes+0xf0>
      lfree = pmem;
 80148fa:	4a15      	ldr	r2, [pc, #84]	@ (8014950 <plug_holes+0x140>)
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	881a      	ldrh	r2, [r3, #0]
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	881b      	ldrh	r3, [r3, #0]
 801490c:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014910:	d00a      	beq.n	8014928 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	4618      	mov	r0, r3
 8014918:	f7ff ff56 	bl	80147c8 <ptr_to_mem>
 801491c:	4604      	mov	r4, r0
 801491e:	68b8      	ldr	r0, [r7, #8]
 8014920:	f7ff ff64 	bl	80147ec <mem_to_ptr>
 8014924:	4603      	mov	r3, r0
 8014926:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8014928:	bf00      	nop
 801492a:	3714      	adds	r7, #20
 801492c:	46bd      	mov	sp, r7
 801492e:	bd90      	pop	{r4, r7, pc}
 8014930:	2000886c 	.word	0x2000886c
 8014934:	08020e94 	.word	0x08020e94
 8014938:	08020ef4 	.word	0x08020ef4
 801493c:	08020f0c 	.word	0x08020f0c
 8014940:	20008870 	.word	0x20008870
 8014944:	08020f34 	.word	0x08020f34
 8014948:	08020f50 	.word	0x08020f50
 801494c:	08020f6c 	.word	0x08020f6c
 8014950:	20008878 	.word	0x20008878

08014954 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801495a:	4b1d      	ldr	r3, [pc, #116]	@ (80149d0 <mem_init+0x7c>)
 801495c:	4a1d      	ldr	r2, [pc, #116]	@ (80149d4 <mem_init+0x80>)
 801495e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8014960:	4b1b      	ldr	r3, [pc, #108]	@ (80149d0 <mem_init+0x7c>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 801496c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2200      	movs	r2, #0
 8014972:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	2200      	movs	r2, #0
 8014978:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801497a:	f44f 5060 	mov.w	r0, #14336	@ 0x3800
 801497e:	f7ff ff23 	bl	80147c8 <ptr_to_mem>
 8014982:	4603      	mov	r3, r0
 8014984:	4a14      	ldr	r2, [pc, #80]	@ (80149d8 <mem_init+0x84>)
 8014986:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8014988:	4b13      	ldr	r3, [pc, #76]	@ (80149d8 <mem_init+0x84>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	2201      	movs	r2, #1
 801498e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8014990:	4b11      	ldr	r3, [pc, #68]	@ (80149d8 <mem_init+0x84>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8014998:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801499a:	4b0f      	ldr	r3, [pc, #60]	@ (80149d8 <mem_init+0x84>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80149a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80149a4:	4b0a      	ldr	r3, [pc, #40]	@ (80149d0 <mem_init+0x7c>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	4a0c      	ldr	r2, [pc, #48]	@ (80149dc <mem_init+0x88>)
 80149aa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80149ac:	480c      	ldr	r0, [pc, #48]	@ (80149e0 <mem_init+0x8c>)
 80149ae:	f008 ff6f 	bl	801d890 <sys_mutex_new>
 80149b2:	4603      	mov	r3, r0
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d006      	beq.n	80149c6 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80149b8:	4b0a      	ldr	r3, [pc, #40]	@ (80149e4 <mem_init+0x90>)
 80149ba:	f240 221f 	movw	r2, #543	@ 0x21f
 80149be:	490a      	ldr	r1, [pc, #40]	@ (80149e8 <mem_init+0x94>)
 80149c0:	480a      	ldr	r0, [pc, #40]	@ (80149ec <mem_init+0x98>)
 80149c2:	f009 f91d 	bl	801dc00 <iprintf>
  }
}
 80149c6:	bf00      	nop
 80149c8:	3708      	adds	r7, #8
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	2000886c 	.word	0x2000886c
 80149d4:	30004000 	.word	0x30004000
 80149d8:	20008870 	.word	0x20008870
 80149dc:	20008878 	.word	0x20008878
 80149e0:	20008874 	.word	0x20008874
 80149e4:	08020e94 	.word	0x08020e94
 80149e8:	08020f98 	.word	0x08020f98
 80149ec:	08020f0c 	.word	0x08020f0c

080149f0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b086      	sub	sp, #24
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f7ff fef7 	bl	80147ec <mem_to_ptr>
 80149fe:	4603      	mov	r3, r0
 8014a00:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	881b      	ldrh	r3, [r3, #0]
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7ff fede 	bl	80147c8 <ptr_to_mem>
 8014a0c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	885b      	ldrh	r3, [r3, #2]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7ff fed8 	bl	80147c8 <ptr_to_mem>
 8014a18:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	881b      	ldrh	r3, [r3, #0]
 8014a1e:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014a22:	d818      	bhi.n	8014a56 <mem_link_valid+0x66>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	885b      	ldrh	r3, [r3, #2]
 8014a28:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014a2c:	d813      	bhi.n	8014a56 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8014a32:	8afa      	ldrh	r2, [r7, #22]
 8014a34:	429a      	cmp	r2, r3
 8014a36:	d004      	beq.n	8014a42 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	881b      	ldrh	r3, [r3, #0]
 8014a3c:	8afa      	ldrh	r2, [r7, #22]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d109      	bne.n	8014a56 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014a42:	4b08      	ldr	r3, [pc, #32]	@ (8014a64 <mem_link_valid+0x74>)
 8014a44:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8014a46:	693a      	ldr	r2, [r7, #16]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	d006      	beq.n	8014a5a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	885b      	ldrh	r3, [r3, #2]
 8014a50:	8afa      	ldrh	r2, [r7, #22]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d001      	beq.n	8014a5a <mem_link_valid+0x6a>
    return 0;
 8014a56:	2300      	movs	r3, #0
 8014a58:	e000      	b.n	8014a5c <mem_link_valid+0x6c>
  }
  return 1;
 8014a5a:	2301      	movs	r3, #1
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3718      	adds	r7, #24
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	20008870 	.word	0x20008870

08014a68 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b088      	sub	sp, #32
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d070      	beq.n	8014b58 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f003 0303 	and.w	r3, r3, #3
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d00d      	beq.n	8014a9c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8014a80:	4b37      	ldr	r3, [pc, #220]	@ (8014b60 <mem_free+0xf8>)
 8014a82:	f240 2273 	movw	r2, #627	@ 0x273
 8014a86:	4937      	ldr	r1, [pc, #220]	@ (8014b64 <mem_free+0xfc>)
 8014a88:	4837      	ldr	r0, [pc, #220]	@ (8014b68 <mem_free+0x100>)
 8014a8a:	f009 f8b9 	bl	801dc00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014a8e:	f008 ff51 	bl	801d934 <sys_arch_protect>
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f008 ff5b 	bl	801d950 <sys_arch_unprotect>
    return;
 8014a9a:	e05e      	b.n	8014b5a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	3b08      	subs	r3, #8
 8014aa0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8014aa2:	4b32      	ldr	r3, [pc, #200]	@ (8014b6c <mem_free+0x104>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	69fa      	ldr	r2, [r7, #28]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d306      	bcc.n	8014aba <mem_free+0x52>
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f103 020c 	add.w	r2, r3, #12
 8014ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8014b70 <mem_free+0x108>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d90d      	bls.n	8014ad6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8014aba:	4b29      	ldr	r3, [pc, #164]	@ (8014b60 <mem_free+0xf8>)
 8014abc:	f240 227f 	movw	r2, #639	@ 0x27f
 8014ac0:	492c      	ldr	r1, [pc, #176]	@ (8014b74 <mem_free+0x10c>)
 8014ac2:	4829      	ldr	r0, [pc, #164]	@ (8014b68 <mem_free+0x100>)
 8014ac4:	f009 f89c 	bl	801dc00 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014ac8:	f008 ff34 	bl	801d934 <sys_arch_protect>
 8014acc:	6138      	str	r0, [r7, #16]
 8014ace:	6938      	ldr	r0, [r7, #16]
 8014ad0:	f008 ff3e 	bl	801d950 <sys_arch_unprotect>
    return;
 8014ad4:	e041      	b.n	8014b5a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014ad6:	4828      	ldr	r0, [pc, #160]	@ (8014b78 <mem_free+0x110>)
 8014ad8:	f008 fef0 	bl	801d8bc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	791b      	ldrb	r3, [r3, #4]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d110      	bne.n	8014b06 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8014ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8014b60 <mem_free+0xf8>)
 8014ae6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8014aea:	4924      	ldr	r1, [pc, #144]	@ (8014b7c <mem_free+0x114>)
 8014aec:	481e      	ldr	r0, [pc, #120]	@ (8014b68 <mem_free+0x100>)
 8014aee:	f009 f887 	bl	801dc00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014af2:	4821      	ldr	r0, [pc, #132]	@ (8014b78 <mem_free+0x110>)
 8014af4:	f008 fef1 	bl	801d8da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014af8:	f008 ff1c 	bl	801d934 <sys_arch_protect>
 8014afc:	6178      	str	r0, [r7, #20]
 8014afe:	6978      	ldr	r0, [r7, #20]
 8014b00:	f008 ff26 	bl	801d950 <sys_arch_unprotect>
    return;
 8014b04:	e029      	b.n	8014b5a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8014b06:	69f8      	ldr	r0, [r7, #28]
 8014b08:	f7ff ff72 	bl	80149f0 <mem_link_valid>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d110      	bne.n	8014b34 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8014b12:	4b13      	ldr	r3, [pc, #76]	@ (8014b60 <mem_free+0xf8>)
 8014b14:	f240 2295 	movw	r2, #661	@ 0x295
 8014b18:	4919      	ldr	r1, [pc, #100]	@ (8014b80 <mem_free+0x118>)
 8014b1a:	4813      	ldr	r0, [pc, #76]	@ (8014b68 <mem_free+0x100>)
 8014b1c:	f009 f870 	bl	801dc00 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8014b20:	4815      	ldr	r0, [pc, #84]	@ (8014b78 <mem_free+0x110>)
 8014b22:	f008 feda 	bl	801d8da <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014b26:	f008 ff05 	bl	801d934 <sys_arch_protect>
 8014b2a:	61b8      	str	r0, [r7, #24]
 8014b2c:	69b8      	ldr	r0, [r7, #24]
 8014b2e:	f008 ff0f 	bl	801d950 <sys_arch_unprotect>
    return;
 8014b32:	e012      	b.n	8014b5a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8014b34:	69fb      	ldr	r3, [r7, #28]
 8014b36:	2200      	movs	r2, #0
 8014b38:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8014b3a:	4b12      	ldr	r3, [pc, #72]	@ (8014b84 <mem_free+0x11c>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	69fa      	ldr	r2, [r7, #28]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d202      	bcs.n	8014b4a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8014b44:	4a0f      	ldr	r2, [pc, #60]	@ (8014b84 <mem_free+0x11c>)
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8014b4a:	69f8      	ldr	r0, [r7, #28]
 8014b4c:	f7ff fe60 	bl	8014810 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014b50:	4809      	ldr	r0, [pc, #36]	@ (8014b78 <mem_free+0x110>)
 8014b52:	f008 fec2 	bl	801d8da <sys_mutex_unlock>
 8014b56:	e000      	b.n	8014b5a <mem_free+0xf2>
    return;
 8014b58:	bf00      	nop
}
 8014b5a:	3720      	adds	r7, #32
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	08020e94 	.word	0x08020e94
 8014b64:	08020fb4 	.word	0x08020fb4
 8014b68:	08020f0c 	.word	0x08020f0c
 8014b6c:	2000886c 	.word	0x2000886c
 8014b70:	20008870 	.word	0x20008870
 8014b74:	08020fd8 	.word	0x08020fd8
 8014b78:	20008874 	.word	0x20008874
 8014b7c:	08020ff4 	.word	0x08020ff4
 8014b80:	0802101c 	.word	0x0802101c
 8014b84:	20008878 	.word	0x20008878

08014b88 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b088      	sub	sp, #32
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	460b      	mov	r3, r1
 8014b92:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8014b94:	887b      	ldrh	r3, [r7, #2]
 8014b96:	3303      	adds	r3, #3
 8014b98:	b29b      	uxth	r3, r3
 8014b9a:	f023 0303 	bic.w	r3, r3, #3
 8014b9e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8014ba0:	8bfb      	ldrh	r3, [r7, #30]
 8014ba2:	2b0b      	cmp	r3, #11
 8014ba4:	d801      	bhi.n	8014baa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8014ba6:	230c      	movs	r3, #12
 8014ba8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8014baa:	8bfb      	ldrh	r3, [r7, #30]
 8014bac:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014bb0:	d803      	bhi.n	8014bba <mem_trim+0x32>
 8014bb2:	8bfa      	ldrh	r2, [r7, #30]
 8014bb4:	887b      	ldrh	r3, [r7, #2]
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d201      	bcs.n	8014bbe <mem_trim+0x36>
    return NULL;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	e0d8      	b.n	8014d70 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8014bbe:	4b6e      	ldr	r3, [pc, #440]	@ (8014d78 <mem_trim+0x1f0>)
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	687a      	ldr	r2, [r7, #4]
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d304      	bcc.n	8014bd2 <mem_trim+0x4a>
 8014bc8:	4b6c      	ldr	r3, [pc, #432]	@ (8014d7c <mem_trim+0x1f4>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d306      	bcc.n	8014be0 <mem_trim+0x58>
 8014bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8014d80 <mem_trim+0x1f8>)
 8014bd4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8014bd8:	496a      	ldr	r1, [pc, #424]	@ (8014d84 <mem_trim+0x1fc>)
 8014bda:	486b      	ldr	r0, [pc, #428]	@ (8014d88 <mem_trim+0x200>)
 8014bdc:	f009 f810 	bl	801dc00 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8014be0:	4b65      	ldr	r3, [pc, #404]	@ (8014d78 <mem_trim+0x1f0>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	687a      	ldr	r2, [r7, #4]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d304      	bcc.n	8014bf4 <mem_trim+0x6c>
 8014bea:	4b64      	ldr	r3, [pc, #400]	@ (8014d7c <mem_trim+0x1f4>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	687a      	ldr	r2, [r7, #4]
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d307      	bcc.n	8014c04 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8014bf4:	f008 fe9e 	bl	801d934 <sys_arch_protect>
 8014bf8:	60b8      	str	r0, [r7, #8]
 8014bfa:	68b8      	ldr	r0, [r7, #8]
 8014bfc:	f008 fea8 	bl	801d950 <sys_arch_unprotect>
    return rmem;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	e0b5      	b.n	8014d70 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	3b08      	subs	r3, #8
 8014c08:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8014c0a:	69b8      	ldr	r0, [r7, #24]
 8014c0c:	f7ff fdee 	bl	80147ec <mem_to_ptr>
 8014c10:	4603      	mov	r3, r0
 8014c12:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	881a      	ldrh	r2, [r3, #0]
 8014c18:	8afb      	ldrh	r3, [r7, #22]
 8014c1a:	1ad3      	subs	r3, r2, r3
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	3b08      	subs	r3, #8
 8014c20:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8014c22:	8bfa      	ldrh	r2, [r7, #30]
 8014c24:	8abb      	ldrh	r3, [r7, #20]
 8014c26:	429a      	cmp	r2, r3
 8014c28:	d906      	bls.n	8014c38 <mem_trim+0xb0>
 8014c2a:	4b55      	ldr	r3, [pc, #340]	@ (8014d80 <mem_trim+0x1f8>)
 8014c2c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8014c30:	4956      	ldr	r1, [pc, #344]	@ (8014d8c <mem_trim+0x204>)
 8014c32:	4855      	ldr	r0, [pc, #340]	@ (8014d88 <mem_trim+0x200>)
 8014c34:	f008 ffe4 	bl	801dc00 <iprintf>
  if (newsize > size) {
 8014c38:	8bfa      	ldrh	r2, [r7, #30]
 8014c3a:	8abb      	ldrh	r3, [r7, #20]
 8014c3c:	429a      	cmp	r2, r3
 8014c3e:	d901      	bls.n	8014c44 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8014c40:	2300      	movs	r3, #0
 8014c42:	e095      	b.n	8014d70 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8014c44:	8bfa      	ldrh	r2, [r7, #30]
 8014c46:	8abb      	ldrh	r3, [r7, #20]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d101      	bne.n	8014c50 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	e08f      	b.n	8014d70 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8014c50:	484f      	ldr	r0, [pc, #316]	@ (8014d90 <mem_trim+0x208>)
 8014c52:	f008 fe33 	bl	801d8bc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	881b      	ldrh	r3, [r3, #0]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7ff fdb4 	bl	80147c8 <ptr_to_mem>
 8014c60:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	791b      	ldrb	r3, [r3, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d13f      	bne.n	8014cea <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014c6a:	69bb      	ldr	r3, [r7, #24]
 8014c6c:	881b      	ldrh	r3, [r3, #0]
 8014c6e:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014c72:	d106      	bne.n	8014c82 <mem_trim+0xfa>
 8014c74:	4b42      	ldr	r3, [pc, #264]	@ (8014d80 <mem_trim+0x1f8>)
 8014c76:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8014c7a:	4946      	ldr	r1, [pc, #280]	@ (8014d94 <mem_trim+0x20c>)
 8014c7c:	4842      	ldr	r0, [pc, #264]	@ (8014d88 <mem_trim+0x200>)
 8014c7e:	f008 ffbf 	bl	801dc00 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	881b      	ldrh	r3, [r3, #0]
 8014c86:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014c88:	8afa      	ldrh	r2, [r7, #22]
 8014c8a:	8bfb      	ldrh	r3, [r7, #30]
 8014c8c:	4413      	add	r3, r2
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	3308      	adds	r3, #8
 8014c92:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8014c94:	4b40      	ldr	r3, [pc, #256]	@ (8014d98 <mem_trim+0x210>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	693a      	ldr	r2, [r7, #16]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d106      	bne.n	8014cac <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8014c9e:	89fb      	ldrh	r3, [r7, #14]
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7ff fd91 	bl	80147c8 <ptr_to_mem>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8014d98 <mem_trim+0x210>)
 8014caa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8014cac:	89fb      	ldrh	r3, [r7, #14]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7ff fd8a 	bl	80147c8 <ptr_to_mem>
 8014cb4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8014cb6:	693b      	ldr	r3, [r7, #16]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	89ba      	ldrh	r2, [r7, #12]
 8014cc0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8014cc2:	693b      	ldr	r3, [r7, #16]
 8014cc4:	8afa      	ldrh	r2, [r7, #22]
 8014cc6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	89fa      	ldrh	r2, [r7, #14]
 8014ccc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	881b      	ldrh	r3, [r3, #0]
 8014cd2:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014cd6:	d047      	beq.n	8014d68 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	881b      	ldrh	r3, [r3, #0]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7ff fd73 	bl	80147c8 <ptr_to_mem>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	89fb      	ldrh	r3, [r7, #14]
 8014ce6:	8053      	strh	r3, [r2, #2]
 8014ce8:	e03e      	b.n	8014d68 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8014cea:	8bfb      	ldrh	r3, [r7, #30]
 8014cec:	f103 0214 	add.w	r2, r3, #20
 8014cf0:	8abb      	ldrh	r3, [r7, #20]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d838      	bhi.n	8014d68 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8014cf6:	8afa      	ldrh	r2, [r7, #22]
 8014cf8:	8bfb      	ldrh	r3, [r7, #30]
 8014cfa:	4413      	add	r3, r2
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	3308      	adds	r3, #8
 8014d00:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8014d02:	69bb      	ldr	r3, [r7, #24]
 8014d04:	881b      	ldrh	r3, [r3, #0]
 8014d06:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014d0a:	d106      	bne.n	8014d1a <mem_trim+0x192>
 8014d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8014d80 <mem_trim+0x1f8>)
 8014d0e:	f240 3216 	movw	r2, #790	@ 0x316
 8014d12:	4920      	ldr	r1, [pc, #128]	@ (8014d94 <mem_trim+0x20c>)
 8014d14:	481c      	ldr	r0, [pc, #112]	@ (8014d88 <mem_trim+0x200>)
 8014d16:	f008 ff73 	bl	801dc00 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8014d1a:	89fb      	ldrh	r3, [r7, #14]
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7ff fd53 	bl	80147c8 <ptr_to_mem>
 8014d22:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8014d24:	4b1c      	ldr	r3, [pc, #112]	@ (8014d98 <mem_trim+0x210>)
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	693a      	ldr	r2, [r7, #16]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d202      	bcs.n	8014d34 <mem_trim+0x1ac>
      lfree = mem2;
 8014d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8014d98 <mem_trim+0x210>)
 8014d30:	693b      	ldr	r3, [r7, #16]
 8014d32:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8014d34:	693b      	ldr	r3, [r7, #16]
 8014d36:	2200      	movs	r2, #0
 8014d38:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8014d3a:	69bb      	ldr	r3, [r7, #24]
 8014d3c:	881a      	ldrh	r2, [r3, #0]
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	8afa      	ldrh	r2, [r7, #22]
 8014d46:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8014d48:	69bb      	ldr	r3, [r7, #24]
 8014d4a:	89fa      	ldrh	r2, [r7, #14]
 8014d4c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	881b      	ldrh	r3, [r3, #0]
 8014d52:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014d56:	d007      	beq.n	8014d68 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	881b      	ldrh	r3, [r3, #0]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7ff fd33 	bl	80147c8 <ptr_to_mem>
 8014d62:	4602      	mov	r2, r0
 8014d64:	89fb      	ldrh	r3, [r7, #14]
 8014d66:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8014d68:	4809      	ldr	r0, [pc, #36]	@ (8014d90 <mem_trim+0x208>)
 8014d6a:	f008 fdb6 	bl	801d8da <sys_mutex_unlock>
  return rmem;
 8014d6e:	687b      	ldr	r3, [r7, #4]
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3720      	adds	r7, #32
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	2000886c 	.word	0x2000886c
 8014d7c:	20008870 	.word	0x20008870
 8014d80:	08020e94 	.word	0x08020e94
 8014d84:	08021050 	.word	0x08021050
 8014d88:	08020f0c 	.word	0x08020f0c
 8014d8c:	08021068 	.word	0x08021068
 8014d90:	20008874 	.word	0x20008874
 8014d94:	08021088 	.word	0x08021088
 8014d98:	20008878 	.word	0x20008878

08014d9c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b088      	sub	sp, #32
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	4603      	mov	r3, r0
 8014da4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8014da6:	88fb      	ldrh	r3, [r7, #6]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d101      	bne.n	8014db0 <mem_malloc+0x14>
    return NULL;
 8014dac:	2300      	movs	r3, #0
 8014dae:	e0e2      	b.n	8014f76 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8014db0:	88fb      	ldrh	r3, [r7, #6]
 8014db2:	3303      	adds	r3, #3
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	f023 0303 	bic.w	r3, r3, #3
 8014dba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8014dbc:	8bbb      	ldrh	r3, [r7, #28]
 8014dbe:	2b0b      	cmp	r3, #11
 8014dc0:	d801      	bhi.n	8014dc6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8014dc2:	230c      	movs	r3, #12
 8014dc4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8014dc6:	8bbb      	ldrh	r3, [r7, #28]
 8014dc8:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014dcc:	d803      	bhi.n	8014dd6 <mem_malloc+0x3a>
 8014dce:	8bba      	ldrh	r2, [r7, #28]
 8014dd0:	88fb      	ldrh	r3, [r7, #6]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d201      	bcs.n	8014dda <mem_malloc+0x3e>
    return NULL;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	e0cd      	b.n	8014f76 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8014dda:	4869      	ldr	r0, [pc, #420]	@ (8014f80 <mem_malloc+0x1e4>)
 8014ddc:	f008 fd6e 	bl	801d8bc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014de0:	4b68      	ldr	r3, [pc, #416]	@ (8014f84 <mem_malloc+0x1e8>)
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7ff fd01 	bl	80147ec <mem_to_ptr>
 8014dea:	4603      	mov	r3, r0
 8014dec:	83fb      	strh	r3, [r7, #30]
 8014dee:	e0b7      	b.n	8014f60 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8014df0:	8bfb      	ldrh	r3, [r7, #30]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7ff fce8 	bl	80147c8 <ptr_to_mem>
 8014df8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	791b      	ldrb	r3, [r3, #4]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	f040 80a7 	bne.w	8014f52 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	881b      	ldrh	r3, [r3, #0]
 8014e08:	461a      	mov	r2, r3
 8014e0a:	8bfb      	ldrh	r3, [r7, #30]
 8014e0c:	1ad3      	subs	r3, r2, r3
 8014e0e:	f1a3 0208 	sub.w	r2, r3, #8
 8014e12:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8014e14:	429a      	cmp	r2, r3
 8014e16:	f0c0 809c 	bcc.w	8014f52 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	881b      	ldrh	r3, [r3, #0]
 8014e1e:	461a      	mov	r2, r3
 8014e20:	8bfb      	ldrh	r3, [r7, #30]
 8014e22:	1ad3      	subs	r3, r2, r3
 8014e24:	f1a3 0208 	sub.w	r2, r3, #8
 8014e28:	8bbb      	ldrh	r3, [r7, #28]
 8014e2a:	3314      	adds	r3, #20
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d333      	bcc.n	8014e98 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8014e30:	8bfa      	ldrh	r2, [r7, #30]
 8014e32:	8bbb      	ldrh	r3, [r7, #28]
 8014e34:	4413      	add	r3, r2
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	3308      	adds	r3, #8
 8014e3a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8014e3c:	8a7b      	ldrh	r3, [r7, #18]
 8014e3e:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014e42:	d106      	bne.n	8014e52 <mem_malloc+0xb6>
 8014e44:	4b50      	ldr	r3, [pc, #320]	@ (8014f88 <mem_malloc+0x1ec>)
 8014e46:	f240 3287 	movw	r2, #903	@ 0x387
 8014e4a:	4950      	ldr	r1, [pc, #320]	@ (8014f8c <mem_malloc+0x1f0>)
 8014e4c:	4850      	ldr	r0, [pc, #320]	@ (8014f90 <mem_malloc+0x1f4>)
 8014e4e:	f008 fed7 	bl	801dc00 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8014e52:	8a7b      	ldrh	r3, [r7, #18]
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7ff fcb7 	bl	80147c8 <ptr_to_mem>
 8014e5a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	881a      	ldrh	r2, [r3, #0]
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	8bfa      	ldrh	r2, [r7, #30]
 8014e6e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	8a7a      	ldrh	r2, [r7, #18]
 8014e74:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8014e76:	697b      	ldr	r3, [r7, #20]
 8014e78:	2201      	movs	r2, #1
 8014e7a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	881b      	ldrh	r3, [r3, #0]
 8014e80:	f5b3 5f60 	cmp.w	r3, #14336	@ 0x3800
 8014e84:	d00b      	beq.n	8014e9e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	881b      	ldrh	r3, [r3, #0]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7ff fc9c 	bl	80147c8 <ptr_to_mem>
 8014e90:	4602      	mov	r2, r0
 8014e92:	8a7b      	ldrh	r3, [r7, #18]
 8014e94:	8053      	strh	r3, [r2, #2]
 8014e96:	e002      	b.n	8014e9e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8014e9e:	4b39      	ldr	r3, [pc, #228]	@ (8014f84 <mem_malloc+0x1e8>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	697a      	ldr	r2, [r7, #20]
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d127      	bne.n	8014ef8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8014ea8:	4b36      	ldr	r3, [pc, #216]	@ (8014f84 <mem_malloc+0x1e8>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8014eae:	e005      	b.n	8014ebc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	881b      	ldrh	r3, [r3, #0]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f7ff fc87 	bl	80147c8 <ptr_to_mem>
 8014eba:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8014ebc:	69bb      	ldr	r3, [r7, #24]
 8014ebe:	791b      	ldrb	r3, [r3, #4]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d004      	beq.n	8014ece <mem_malloc+0x132>
 8014ec4:	4b33      	ldr	r3, [pc, #204]	@ (8014f94 <mem_malloc+0x1f8>)
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	69ba      	ldr	r2, [r7, #24]
 8014eca:	429a      	cmp	r2, r3
 8014ecc:	d1f0      	bne.n	8014eb0 <mem_malloc+0x114>
          }
          lfree = cur;
 8014ece:	4a2d      	ldr	r2, [pc, #180]	@ (8014f84 <mem_malloc+0x1e8>)
 8014ed0:	69bb      	ldr	r3, [r7, #24]
 8014ed2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8014ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8014f84 <mem_malloc+0x1e8>)
 8014ed6:	681a      	ldr	r2, [r3, #0]
 8014ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8014f94 <mem_malloc+0x1f8>)
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	429a      	cmp	r2, r3
 8014ede:	d00b      	beq.n	8014ef8 <mem_malloc+0x15c>
 8014ee0:	4b28      	ldr	r3, [pc, #160]	@ (8014f84 <mem_malloc+0x1e8>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	791b      	ldrb	r3, [r3, #4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d006      	beq.n	8014ef8 <mem_malloc+0x15c>
 8014eea:	4b27      	ldr	r3, [pc, #156]	@ (8014f88 <mem_malloc+0x1ec>)
 8014eec:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8014ef0:	4929      	ldr	r1, [pc, #164]	@ (8014f98 <mem_malloc+0x1fc>)
 8014ef2:	4827      	ldr	r0, [pc, #156]	@ (8014f90 <mem_malloc+0x1f4>)
 8014ef4:	f008 fe84 	bl	801dc00 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014ef8:	4821      	ldr	r0, [pc, #132]	@ (8014f80 <mem_malloc+0x1e4>)
 8014efa:	f008 fcee 	bl	801d8da <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8014efe:	8bba      	ldrh	r2, [r7, #28]
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	4413      	add	r3, r2
 8014f04:	3308      	adds	r3, #8
 8014f06:	4a23      	ldr	r2, [pc, #140]	@ (8014f94 <mem_malloc+0x1f8>)
 8014f08:	6812      	ldr	r2, [r2, #0]
 8014f0a:	4293      	cmp	r3, r2
 8014f0c:	d906      	bls.n	8014f1c <mem_malloc+0x180>
 8014f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8014f88 <mem_malloc+0x1ec>)
 8014f10:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8014f14:	4921      	ldr	r1, [pc, #132]	@ (8014f9c <mem_malloc+0x200>)
 8014f16:	481e      	ldr	r0, [pc, #120]	@ (8014f90 <mem_malloc+0x1f4>)
 8014f18:	f008 fe72 	bl	801dc00 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	f003 0303 	and.w	r3, r3, #3
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d006      	beq.n	8014f34 <mem_malloc+0x198>
 8014f26:	4b18      	ldr	r3, [pc, #96]	@ (8014f88 <mem_malloc+0x1ec>)
 8014f28:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8014f2c:	491c      	ldr	r1, [pc, #112]	@ (8014fa0 <mem_malloc+0x204>)
 8014f2e:	4818      	ldr	r0, [pc, #96]	@ (8014f90 <mem_malloc+0x1f4>)
 8014f30:	f008 fe66 	bl	801dc00 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	f003 0303 	and.w	r3, r3, #3
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d006      	beq.n	8014f4c <mem_malloc+0x1b0>
 8014f3e:	4b12      	ldr	r3, [pc, #72]	@ (8014f88 <mem_malloc+0x1ec>)
 8014f40:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8014f44:	4917      	ldr	r1, [pc, #92]	@ (8014fa4 <mem_malloc+0x208>)
 8014f46:	4812      	ldr	r0, [pc, #72]	@ (8014f90 <mem_malloc+0x1f4>)
 8014f48:	f008 fe5a 	bl	801dc00 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014f4c:	697b      	ldr	r3, [r7, #20]
 8014f4e:	3308      	adds	r3, #8
 8014f50:	e011      	b.n	8014f76 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8014f52:	8bfb      	ldrh	r3, [r7, #30]
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7ff fc37 	bl	80147c8 <ptr_to_mem>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	881b      	ldrh	r3, [r3, #0]
 8014f5e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8014f60:	8bfa      	ldrh	r2, [r7, #30]
 8014f62:	8bbb      	ldrh	r3, [r7, #28]
 8014f64:	f5c3 5360 	rsb	r3, r3, #14336	@ 0x3800
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	f4ff af41 	bcc.w	8014df0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8014f6e:	4804      	ldr	r0, [pc, #16]	@ (8014f80 <mem_malloc+0x1e4>)
 8014f70:	f008 fcb3 	bl	801d8da <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014f74:	2300      	movs	r3, #0
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3720      	adds	r7, #32
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	20008874 	.word	0x20008874
 8014f84:	20008878 	.word	0x20008878
 8014f88:	08020e94 	.word	0x08020e94
 8014f8c:	08021088 	.word	0x08021088
 8014f90:	08020f0c 	.word	0x08020f0c
 8014f94:	20008870 	.word	0x20008870
 8014f98:	0802109c 	.word	0x0802109c
 8014f9c:	080210b8 	.word	0x080210b8
 8014fa0:	080210e8 	.word	0x080210e8
 8014fa4:	08021118 	.word	0x08021118

08014fa8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8014fa8:	b480      	push	{r7}
 8014faa:	b085      	sub	sp, #20
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	689b      	ldr	r3, [r3, #8]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	3303      	adds	r3, #3
 8014fbe:	f023 0303 	bic.w	r3, r3, #3
 8014fc2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	60fb      	str	r3, [r7, #12]
 8014fc8:	e011      	b.n	8014fee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	689b      	ldr	r3, [r3, #8]
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	689b      	ldr	r3, [r3, #8]
 8014fd8:	68ba      	ldr	r2, [r7, #8]
 8014fda:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	881b      	ldrh	r3, [r3, #0]
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	4413      	add	r3, r2
 8014fe6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	3301      	adds	r3, #1
 8014fec:	60fb      	str	r3, [r7, #12]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	885b      	ldrh	r3, [r3, #2]
 8014ff2:	461a      	mov	r2, r3
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	dbe7      	blt.n	8014fca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014ffa:	bf00      	nop
 8014ffc:	bf00      	nop
 8014ffe:	3714      	adds	r7, #20
 8015000:	46bd      	mov	sp, r7
 8015002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015006:	4770      	bx	lr

08015008 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801500e:	2300      	movs	r3, #0
 8015010:	80fb      	strh	r3, [r7, #6]
 8015012:	e009      	b.n	8015028 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015014:	88fb      	ldrh	r3, [r7, #6]
 8015016:	4a08      	ldr	r2, [pc, #32]	@ (8015038 <memp_init+0x30>)
 8015018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801501c:	4618      	mov	r0, r3
 801501e:	f7ff ffc3 	bl	8014fa8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015022:	88fb      	ldrh	r3, [r7, #6]
 8015024:	3301      	adds	r3, #1
 8015026:	80fb      	strh	r3, [r7, #6]
 8015028:	88fb      	ldrh	r3, [r7, #6]
 801502a:	2b0d      	cmp	r3, #13
 801502c:	d9f2      	bls.n	8015014 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801502e:	bf00      	nop
 8015030:	bf00      	nop
 8015032:	3708      	adds	r7, #8
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}
 8015038:	08023b6c 	.word	0x08023b6c

0801503c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8015044:	f008 fc76 	bl	801d934 <sys_arch_protect>
 8015048:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	689b      	ldr	r3, [r3, #8]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d015      	beq.n	8015084 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	689b      	ldr	r3, [r3, #8]
 801505c:	68ba      	ldr	r2, [r7, #8]
 801505e:	6812      	ldr	r2, [r2, #0]
 8015060:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	f003 0303 	and.w	r3, r3, #3
 8015068:	2b00      	cmp	r3, #0
 801506a:	d006      	beq.n	801507a <do_memp_malloc_pool+0x3e>
 801506c:	4b09      	ldr	r3, [pc, #36]	@ (8015094 <do_memp_malloc_pool+0x58>)
 801506e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8015072:	4909      	ldr	r1, [pc, #36]	@ (8015098 <do_memp_malloc_pool+0x5c>)
 8015074:	4809      	ldr	r0, [pc, #36]	@ (801509c <do_memp_malloc_pool+0x60>)
 8015076:	f008 fdc3 	bl	801dc00 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f008 fc68 	bl	801d950 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	e003      	b.n	801508c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015084:	68f8      	ldr	r0, [r7, #12]
 8015086:	f008 fc63 	bl	801d950 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801508a:	2300      	movs	r3, #0
}
 801508c:	4618      	mov	r0, r3
 801508e:	3710      	adds	r7, #16
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}
 8015094:	0802113c 	.word	0x0802113c
 8015098:	0802119c 	.word	0x0802119c
 801509c:	080211c0 	.word	0x080211c0

080150a0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d106      	bne.n	80150bc <memp_malloc_pool+0x1c>
 80150ae:	4b0a      	ldr	r3, [pc, #40]	@ (80150d8 <memp_malloc_pool+0x38>)
 80150b0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80150b4:	4909      	ldr	r1, [pc, #36]	@ (80150dc <memp_malloc_pool+0x3c>)
 80150b6:	480a      	ldr	r0, [pc, #40]	@ (80150e0 <memp_malloc_pool+0x40>)
 80150b8:	f008 fda2 	bl	801dc00 <iprintf>
  if (desc == NULL) {
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d101      	bne.n	80150c6 <memp_malloc_pool+0x26>
    return NULL;
 80150c2:	2300      	movs	r3, #0
 80150c4:	e003      	b.n	80150ce <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f7ff ffb8 	bl	801503c <do_memp_malloc_pool>
 80150cc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3708      	adds	r7, #8
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	0802113c 	.word	0x0802113c
 80150dc:	080211e8 	.word	0x080211e8
 80150e0:	080211c0 	.word	0x080211c0

080150e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	4603      	mov	r3, r0
 80150ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80150ee:	79fb      	ldrb	r3, [r7, #7]
 80150f0:	2b0d      	cmp	r3, #13
 80150f2:	d908      	bls.n	8015106 <memp_malloc+0x22>
 80150f4:	4b0a      	ldr	r3, [pc, #40]	@ (8015120 <memp_malloc+0x3c>)
 80150f6:	f240 1257 	movw	r2, #343	@ 0x157
 80150fa:	490a      	ldr	r1, [pc, #40]	@ (8015124 <memp_malloc+0x40>)
 80150fc:	480a      	ldr	r0, [pc, #40]	@ (8015128 <memp_malloc+0x44>)
 80150fe:	f008 fd7f 	bl	801dc00 <iprintf>
 8015102:	2300      	movs	r3, #0
 8015104:	e008      	b.n	8015118 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015106:	79fb      	ldrb	r3, [r7, #7]
 8015108:	4a08      	ldr	r2, [pc, #32]	@ (801512c <memp_malloc+0x48>)
 801510a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801510e:	4618      	mov	r0, r3
 8015110:	f7ff ff94 	bl	801503c <do_memp_malloc_pool>
 8015114:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015116:	68fb      	ldr	r3, [r7, #12]
}
 8015118:	4618      	mov	r0, r3
 801511a:	3710      	adds	r7, #16
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	0802113c 	.word	0x0802113c
 8015124:	080211fc 	.word	0x080211fc
 8015128:	080211c0 	.word	0x080211c0
 801512c:	08023b6c 	.word	0x08023b6c

08015130 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b084      	sub	sp, #16
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	f003 0303 	and.w	r3, r3, #3
 8015140:	2b00      	cmp	r3, #0
 8015142:	d006      	beq.n	8015152 <do_memp_free_pool+0x22>
 8015144:	4b0d      	ldr	r3, [pc, #52]	@ (801517c <do_memp_free_pool+0x4c>)
 8015146:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801514a:	490d      	ldr	r1, [pc, #52]	@ (8015180 <do_memp_free_pool+0x50>)
 801514c:	480d      	ldr	r0, [pc, #52]	@ (8015184 <do_memp_free_pool+0x54>)
 801514e:	f008 fd57 	bl	801dc00 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8015156:	f008 fbed 	bl	801d934 <sys_arch_protect>
 801515a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	689b      	ldr	r3, [r3, #8]
 8015160:	681a      	ldr	r2, [r3, #0]
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	689b      	ldr	r3, [r3, #8]
 801516a:	68fa      	ldr	r2, [r7, #12]
 801516c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801516e:	68b8      	ldr	r0, [r7, #8]
 8015170:	f008 fbee 	bl	801d950 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8015174:	bf00      	nop
 8015176:	3710      	adds	r7, #16
 8015178:	46bd      	mov	sp, r7
 801517a:	bd80      	pop	{r7, pc}
 801517c:	0802113c 	.word	0x0802113c
 8015180:	0802121c 	.word	0x0802121c
 8015184:	080211c0 	.word	0x080211c0

08015188 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d106      	bne.n	80151a6 <memp_free_pool+0x1e>
 8015198:	4b0a      	ldr	r3, [pc, #40]	@ (80151c4 <memp_free_pool+0x3c>)
 801519a:	f240 1295 	movw	r2, #405	@ 0x195
 801519e:	490a      	ldr	r1, [pc, #40]	@ (80151c8 <memp_free_pool+0x40>)
 80151a0:	480a      	ldr	r0, [pc, #40]	@ (80151cc <memp_free_pool+0x44>)
 80151a2:	f008 fd2d 	bl	801dc00 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d007      	beq.n	80151bc <memp_free_pool+0x34>
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d004      	beq.n	80151bc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80151b2:	6839      	ldr	r1, [r7, #0]
 80151b4:	6878      	ldr	r0, [r7, #4]
 80151b6:	f7ff ffbb 	bl	8015130 <do_memp_free_pool>
 80151ba:	e000      	b.n	80151be <memp_free_pool+0x36>
    return;
 80151bc:	bf00      	nop
}
 80151be:	3708      	adds	r7, #8
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}
 80151c4:	0802113c 	.word	0x0802113c
 80151c8:	080211e8 	.word	0x080211e8
 80151cc:	080211c0 	.word	0x080211c0

080151d0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	4603      	mov	r3, r0
 80151d8:	6039      	str	r1, [r7, #0]
 80151da:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80151dc:	79fb      	ldrb	r3, [r7, #7]
 80151de:	2b0d      	cmp	r3, #13
 80151e0:	d907      	bls.n	80151f2 <memp_free+0x22>
 80151e2:	4b0c      	ldr	r3, [pc, #48]	@ (8015214 <memp_free+0x44>)
 80151e4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80151e8:	490b      	ldr	r1, [pc, #44]	@ (8015218 <memp_free+0x48>)
 80151ea:	480c      	ldr	r0, [pc, #48]	@ (801521c <memp_free+0x4c>)
 80151ec:	f008 fd08 	bl	801dc00 <iprintf>
 80151f0:	e00c      	b.n	801520c <memp_free+0x3c>

  if (mem == NULL) {
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d008      	beq.n	801520a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80151f8:	79fb      	ldrb	r3, [r7, #7]
 80151fa:	4a09      	ldr	r2, [pc, #36]	@ (8015220 <memp_free+0x50>)
 80151fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015200:	6839      	ldr	r1, [r7, #0]
 8015202:	4618      	mov	r0, r3
 8015204:	f7ff ff94 	bl	8015130 <do_memp_free_pool>
 8015208:	e000      	b.n	801520c <memp_free+0x3c>
    return;
 801520a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801520c:	3708      	adds	r7, #8
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}
 8015212:	bf00      	nop
 8015214:	0802113c 	.word	0x0802113c
 8015218:	0802123c 	.word	0x0802123c
 801521c:	080211c0 	.word	0x080211c0
 8015220:	08023b6c 	.word	0x08023b6c

08015224 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015224:	b480      	push	{r7}
 8015226:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015228:	bf00      	nop
 801522a:	46bd      	mov	sp, r7
 801522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015230:	4770      	bx	lr
	...

08015234 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b086      	sub	sp, #24
 8015238:	af00      	add	r7, sp, #0
 801523a:	60f8      	str	r0, [r7, #12]
 801523c:	60b9      	str	r1, [r7, #8]
 801523e:	607a      	str	r2, [r7, #4]
 8015240:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d108      	bne.n	801525a <netif_add+0x26>
 8015248:	4b61      	ldr	r3, [pc, #388]	@ (80153d0 <netif_add+0x19c>)
 801524a:	f240 1227 	movw	r2, #295	@ 0x127
 801524e:	4961      	ldr	r1, [pc, #388]	@ (80153d4 <netif_add+0x1a0>)
 8015250:	4861      	ldr	r0, [pc, #388]	@ (80153d8 <netif_add+0x1a4>)
 8015252:	f008 fcd5 	bl	801dc00 <iprintf>
 8015256:	2300      	movs	r3, #0
 8015258:	e0b6      	b.n	80153c8 <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801525c:	2b00      	cmp	r3, #0
 801525e:	d108      	bne.n	8015272 <netif_add+0x3e>
 8015260:	4b5b      	ldr	r3, [pc, #364]	@ (80153d0 <netif_add+0x19c>)
 8015262:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8015266:	495d      	ldr	r1, [pc, #372]	@ (80153dc <netif_add+0x1a8>)
 8015268:	485b      	ldr	r0, [pc, #364]	@ (80153d8 <netif_add+0x1a4>)
 801526a:	f008 fcc9 	bl	801dc00 <iprintf>
 801526e:	2300      	movs	r3, #0
 8015270:	e0aa      	b.n	80153c8 <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d101      	bne.n	801527c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015278:	4b59      	ldr	r3, [pc, #356]	@ (80153e0 <netif_add+0x1ac>)
 801527a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d101      	bne.n	8015286 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015282:	4b57      	ldr	r3, [pc, #348]	@ (80153e0 <netif_add+0x1ac>)
 8015284:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d101      	bne.n	8015290 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801528c:	4b54      	ldr	r3, [pc, #336]	@ (80153e0 <netif_add+0x1ac>)
 801528e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	2200      	movs	r2, #0
 8015294:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	2200      	movs	r2, #0
 801529a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2200      	movs	r2, #0
 80152a0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	4a4f      	ldr	r2, [pc, #316]	@ (80153e4 <netif_add+0x1b0>)
 80152a6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	2200      	movs	r2, #0
 80152ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  netif->flags = 0;
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	2200      	movs	r2, #0
 80152b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	3324      	adds	r3, #36	@ 0x24
 80152ba:	2208      	movs	r2, #8
 80152bc:	2100      	movs	r1, #0
 80152be:	4618      	mov	r0, r3
 80152c0:	f008 fd3d 	bl	801dd3e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2200      	movs	r2, #0
 80152c8:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	2200      	movs	r2, #0
 80152ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	6a3a      	ldr	r2, [r7, #32]
 80152d4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80152d6:	4b44      	ldr	r3, [pc, #272]	@ (80153e8 <netif_add+0x1b4>)
 80152d8:	781a      	ldrb	r2, [r3, #0]
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->input = input;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152e4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	68b9      	ldr	r1, [r7, #8]
 80152ec:	68f8      	ldr	r0, [r7, #12]
 80152ee:	f000 f91d 	bl	801552c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80152f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f4:	68f8      	ldr	r0, [r7, #12]
 80152f6:	4798      	blx	r3
 80152f8:	4603      	mov	r3, r0
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d001      	beq.n	8015302 <netif_add+0xce>
    return NULL;
 80152fe:	2300      	movs	r3, #0
 8015300:	e062      	b.n	80153c8 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015308:	2bff      	cmp	r3, #255	@ 0xff
 801530a:	d103      	bne.n	8015314 <netif_add+0xe0>
        netif->num = 0;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2200      	movs	r2, #0
 8015310:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      }
      num_netifs = 0;
 8015314:	2300      	movs	r3, #0
 8015316:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015318:	4b34      	ldr	r3, [pc, #208]	@ (80153ec <netif_add+0x1b8>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	617b      	str	r3, [r7, #20]
 801531e:	e02b      	b.n	8015378 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015320:	697a      	ldr	r2, [r7, #20]
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	429a      	cmp	r2, r3
 8015326:	d106      	bne.n	8015336 <netif_add+0x102>
 8015328:	4b29      	ldr	r3, [pc, #164]	@ (80153d0 <netif_add+0x19c>)
 801532a:	f240 128b 	movw	r2, #395	@ 0x18b
 801532e:	4930      	ldr	r1, [pc, #192]	@ (80153f0 <netif_add+0x1bc>)
 8015330:	4829      	ldr	r0, [pc, #164]	@ (80153d8 <netif_add+0x1a4>)
 8015332:	f008 fc65 	bl	801dc00 <iprintf>
        num_netifs++;
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	3301      	adds	r3, #1
 801533a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	2bff      	cmp	r3, #255	@ 0xff
 8015340:	dd06      	ble.n	8015350 <netif_add+0x11c>
 8015342:	4b23      	ldr	r3, [pc, #140]	@ (80153d0 <netif_add+0x19c>)
 8015344:	f240 128d 	movw	r2, #397	@ 0x18d
 8015348:	492a      	ldr	r1, [pc, #168]	@ (80153f4 <netif_add+0x1c0>)
 801534a:	4823      	ldr	r0, [pc, #140]	@ (80153d8 <netif_add+0x1a4>)
 801534c:	f008 fc58 	bl	801dc00 <iprintf>
        if (netif2->num == netif->num) {
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801535c:	429a      	cmp	r2, r3
 801535e:	d108      	bne.n	8015372 <netif_add+0x13e>
          netif->num++;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015366:	3301      	adds	r3, #1
 8015368:	b2da      	uxtb	r2, r3
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          break;
 8015370:	e005      	b.n	801537e <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	617b      	str	r3, [r7, #20]
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d1d0      	bne.n	8015320 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d1be      	bne.n	8015302 <netif_add+0xce>
  }
  if (netif->num == 254) {
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801538a:	2bfe      	cmp	r3, #254	@ 0xfe
 801538c:	d103      	bne.n	8015396 <netif_add+0x162>
    netif_num = 0;
 801538e:	4b16      	ldr	r3, [pc, #88]	@ (80153e8 <netif_add+0x1b4>)
 8015390:	2200      	movs	r2, #0
 8015392:	701a      	strb	r2, [r3, #0]
 8015394:	e006      	b.n	80153a4 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801539c:	3301      	adds	r3, #1
 801539e:	b2da      	uxtb	r2, r3
 80153a0:	4b11      	ldr	r3, [pc, #68]	@ (80153e8 <netif_add+0x1b4>)
 80153a2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80153a4:	4b11      	ldr	r3, [pc, #68]	@ (80153ec <netif_add+0x1b8>)
 80153a6:	681a      	ldr	r2, [r3, #0]
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80153ac:	4a0f      	ldr	r2, [pc, #60]	@ (80153ec <netif_add+0x1b8>)
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80153b8:	f003 0320 	and.w	r3, r3, #32
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d002      	beq.n	80153c6 <netif_add+0x192>
    igmp_start(netif);
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f7fd fae7 	bl	8012994 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80153c6:	68fb      	ldr	r3, [r7, #12]
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	3718      	adds	r7, #24
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}
 80153d0:	08021258 	.word	0x08021258
 80153d4:	0802131c 	.word	0x0802131c
 80153d8:	080212d8 	.word	0x080212d8
 80153dc:	08021338 	.word	0x08021338
 80153e0:	08023abc 	.word	0x08023abc
 80153e4:	08015823 	.word	0x08015823
 80153e8:	2000f9ac 	.word	0x2000f9ac
 80153ec:	2000f9a4 	.word	0x2000f9a4
 80153f0:	0802135c 	.word	0x0802135c
 80153f4:	08021370 	.word	0x08021370

080153f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b082      	sub	sp, #8
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015402:	6839      	ldr	r1, [r7, #0]
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f002 fea5 	bl	8018154 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801540a:	6839      	ldr	r1, [r7, #0]
 801540c:	6878      	ldr	r0, [r7, #4]
 801540e:	f007 fff3 	bl	801d3f8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015412:	bf00      	nop
 8015414:	3708      	adds	r7, #8
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
	...

0801541c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b086      	sub	sp, #24
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d106      	bne.n	801543c <netif_do_set_ipaddr+0x20>
 801542e:	4b1d      	ldr	r3, [pc, #116]	@ (80154a4 <netif_do_set_ipaddr+0x88>)
 8015430:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8015434:	491c      	ldr	r1, [pc, #112]	@ (80154a8 <netif_do_set_ipaddr+0x8c>)
 8015436:	481d      	ldr	r0, [pc, #116]	@ (80154ac <netif_do_set_ipaddr+0x90>)
 8015438:	f008 fbe2 	bl	801dc00 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d106      	bne.n	8015450 <netif_do_set_ipaddr+0x34>
 8015442:	4b18      	ldr	r3, [pc, #96]	@ (80154a4 <netif_do_set_ipaddr+0x88>)
 8015444:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8015448:	4917      	ldr	r1, [pc, #92]	@ (80154a8 <netif_do_set_ipaddr+0x8c>)
 801544a:	4818      	ldr	r0, [pc, #96]	@ (80154ac <netif_do_set_ipaddr+0x90>)
 801544c:	f008 fbd8 	bl	801dc00 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	3304      	adds	r3, #4
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	429a      	cmp	r2, r3
 801545c:	d01c      	beq.n	8015498 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	3304      	adds	r3, #4
 8015468:	681a      	ldr	r2, [r3, #0]
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801546e:	f107 0314 	add.w	r3, r7, #20
 8015472:	4619      	mov	r1, r3
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7ff ffbf 	bl	80153f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d002      	beq.n	8015486 <netif_do_set_ipaddr+0x6a>
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	e000      	b.n	8015488 <netif_do_set_ipaddr+0x6c>
 8015486:	2300      	movs	r3, #0
 8015488:	68fa      	ldr	r2, [r7, #12]
 801548a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801548c:	2101      	movs	r1, #1
 801548e:	68f8      	ldr	r0, [r7, #12]
 8015490:	f000 f8d2 	bl	8015638 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8015494:	2301      	movs	r3, #1
 8015496:	e000      	b.n	801549a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8015498:	2300      	movs	r3, #0
}
 801549a:	4618      	mov	r0, r3
 801549c:	3718      	adds	r7, #24
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	08021258 	.word	0x08021258
 80154a8:	080213a0 	.word	0x080213a0
 80154ac:	080212d8 	.word	0x080212d8

080154b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80154b0:	b480      	push	{r7}
 80154b2:	b085      	sub	sp, #20
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	681a      	ldr	r2, [r3, #0]
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	3308      	adds	r3, #8
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d00a      	beq.n	80154e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80154ca:	68bb      	ldr	r3, [r7, #8]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d002      	beq.n	80154d6 <netif_do_set_netmask+0x26>
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	e000      	b.n	80154d8 <netif_do_set_netmask+0x28>
 80154d6:	2300      	movs	r3, #0
 80154d8:	68fa      	ldr	r2, [r7, #12]
 80154da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80154dc:	2301      	movs	r3, #1
 80154de:	e000      	b.n	80154e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80154e0:	2300      	movs	r3, #0
}
 80154e2:	4618      	mov	r0, r3
 80154e4:	3714      	adds	r7, #20
 80154e6:	46bd      	mov	sp, r7
 80154e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ec:	4770      	bx	lr

080154ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80154ee:	b480      	push	{r7}
 80154f0:	b085      	sub	sp, #20
 80154f2:	af00      	add	r7, sp, #0
 80154f4:	60f8      	str	r0, [r7, #12]
 80154f6:	60b9      	str	r1, [r7, #8]
 80154f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	681a      	ldr	r2, [r3, #0]
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	330c      	adds	r3, #12
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	429a      	cmp	r2, r3
 8015506:	d00a      	beq.n	801551e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d002      	beq.n	8015514 <netif_do_set_gw+0x26>
 801550e:	68bb      	ldr	r3, [r7, #8]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	e000      	b.n	8015516 <netif_do_set_gw+0x28>
 8015514:	2300      	movs	r3, #0
 8015516:	68fa      	ldr	r2, [r7, #12]
 8015518:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801551a:	2301      	movs	r3, #1
 801551c:	e000      	b.n	8015520 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801551e:	2300      	movs	r3, #0
}
 8015520:	4618      	mov	r0, r3
 8015522:	3714      	adds	r7, #20
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr

0801552c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b088      	sub	sp, #32
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	607a      	str	r2, [r7, #4]
 8015538:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801553a:	2300      	movs	r3, #0
 801553c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801553e:	2300      	movs	r3, #0
 8015540:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d101      	bne.n	801554c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015548:	4b1c      	ldr	r3, [pc, #112]	@ (80155bc <netif_set_addr+0x90>)
 801554a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015552:	4b1a      	ldr	r3, [pc, #104]	@ (80155bc <netif_set_addr+0x90>)
 8015554:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d101      	bne.n	8015560 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801555c:	4b17      	ldr	r3, [pc, #92]	@ (80155bc <netif_set_addr+0x90>)
 801555e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d003      	beq.n	801556e <netif_set_addr+0x42>
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d101      	bne.n	8015572 <netif_set_addr+0x46>
 801556e:	2301      	movs	r3, #1
 8015570:	e000      	b.n	8015574 <netif_set_addr+0x48>
 8015572:	2300      	movs	r3, #0
 8015574:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d006      	beq.n	801558a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801557c:	f107 0310 	add.w	r3, r7, #16
 8015580:	461a      	mov	r2, r3
 8015582:	68b9      	ldr	r1, [r7, #8]
 8015584:	68f8      	ldr	r0, [r7, #12]
 8015586:	f7ff ff49 	bl	801541c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801558a:	69fa      	ldr	r2, [r7, #28]
 801558c:	6879      	ldr	r1, [r7, #4]
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f7ff ff8e 	bl	80154b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015594:	69ba      	ldr	r2, [r7, #24]
 8015596:	6839      	ldr	r1, [r7, #0]
 8015598:	68f8      	ldr	r0, [r7, #12]
 801559a:	f7ff ffa8 	bl	80154ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d106      	bne.n	80155b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80155a4:	f107 0310 	add.w	r3, r7, #16
 80155a8:	461a      	mov	r2, r3
 80155aa:	68b9      	ldr	r1, [r7, #8]
 80155ac:	68f8      	ldr	r0, [r7, #12]
 80155ae:	f7ff ff35 	bl	801541c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80155b2:	bf00      	nop
 80155b4:	3720      	adds	r7, #32
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	08023abc 	.word	0x08023abc

080155c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80155c0:	b480      	push	{r7}
 80155c2:	b083      	sub	sp, #12
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80155c8:	4a04      	ldr	r2, [pc, #16]	@ (80155dc <netif_set_default+0x1c>)
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80155ce:	bf00      	nop
 80155d0:	370c      	adds	r7, #12
 80155d2:	46bd      	mov	sp, r7
 80155d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d8:	4770      	bx	lr
 80155da:	bf00      	nop
 80155dc:	2000f9a8 	.word	0x2000f9a8

080155e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d107      	bne.n	80155fe <netif_set_up+0x1e>
 80155ee:	4b0f      	ldr	r3, [pc, #60]	@ (801562c <netif_set_up+0x4c>)
 80155f0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80155f4:	490e      	ldr	r1, [pc, #56]	@ (8015630 <netif_set_up+0x50>)
 80155f6:	480f      	ldr	r0, [pc, #60]	@ (8015634 <netif_set_up+0x54>)
 80155f8:	f008 fb02 	bl	801dc00 <iprintf>
 80155fc:	e013      	b.n	8015626 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015604:	f003 0301 	and.w	r3, r3, #1
 8015608:	2b00      	cmp	r3, #0
 801560a:	d10c      	bne.n	8015626 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015612:	f043 0301 	orr.w	r3, r3, #1
 8015616:	b2da      	uxtb	r2, r3
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801561e:	2103      	movs	r1, #3
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f000 f809 	bl	8015638 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8015626:	3708      	adds	r7, #8
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	08021258 	.word	0x08021258
 8015630:	08021410 	.word	0x08021410
 8015634:	080212d8 	.word	0x080212d8

08015638 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b082      	sub	sp, #8
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
 8015640:	460b      	mov	r3, r1
 8015642:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d106      	bne.n	8015658 <netif_issue_reports+0x20>
 801564a:	4b1d      	ldr	r3, [pc, #116]	@ (80156c0 <netif_issue_reports+0x88>)
 801564c:	f240 326d 	movw	r2, #877	@ 0x36d
 8015650:	491c      	ldr	r1, [pc, #112]	@ (80156c4 <netif_issue_reports+0x8c>)
 8015652:	481d      	ldr	r0, [pc, #116]	@ (80156c8 <netif_issue_reports+0x90>)
 8015654:	f008 fad4 	bl	801dc00 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801565e:	f003 0304 	and.w	r3, r3, #4
 8015662:	2b00      	cmp	r3, #0
 8015664:	d028      	beq.n	80156b8 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801566c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015670:	2b00      	cmp	r3, #0
 8015672:	d021      	beq.n	80156b8 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015674:	78fb      	ldrb	r3, [r7, #3]
 8015676:	f003 0301 	and.w	r3, r3, #1
 801567a:	2b00      	cmp	r3, #0
 801567c:	d01d      	beq.n	80156ba <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	3304      	adds	r3, #4
 8015682:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015684:	2b00      	cmp	r3, #0
 8015686:	d018      	beq.n	80156ba <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801568e:	f003 0308 	and.w	r3, r3, #8
 8015692:	2b00      	cmp	r3, #0
 8015694:	d005      	beq.n	80156a2 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	3304      	adds	r3, #4
 801569a:	4619      	mov	r1, r3
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7fc ffa7 	bl	80125f0 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80156a8:	f003 0320 	and.w	r3, r3, #32
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d004      	beq.n	80156ba <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f7fd f999 	bl	80129e8 <igmp_report_groups>
 80156b6:	e000      	b.n	80156ba <netif_issue_reports+0x82>
    return;
 80156b8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80156ba:	3708      	adds	r7, #8
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	08021258 	.word	0x08021258
 80156c4:	0802142c 	.word	0x0802142c
 80156c8:	080212d8 	.word	0x080212d8

080156cc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d107      	bne.n	80156ea <netif_set_down+0x1e>
 80156da:	4b12      	ldr	r3, [pc, #72]	@ (8015724 <netif_set_down+0x58>)
 80156dc:	f240 329b 	movw	r2, #923	@ 0x39b
 80156e0:	4911      	ldr	r1, [pc, #68]	@ (8015728 <netif_set_down+0x5c>)
 80156e2:	4812      	ldr	r0, [pc, #72]	@ (801572c <netif_set_down+0x60>)
 80156e4:	f008 fa8c 	bl	801dc00 <iprintf>
 80156e8:	e019      	b.n	801571e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80156f0:	f003 0301 	and.w	r3, r3, #1
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d012      	beq.n	801571e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80156fe:	f023 0301 	bic.w	r3, r3, #1
 8015702:	b2da      	uxtb	r2, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015710:	f003 0308 	and.w	r3, r3, #8
 8015714:	2b00      	cmp	r3, #0
 8015716:	d002      	beq.n	801571e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8015718:	6878      	ldr	r0, [r7, #4]
 801571a:	f7fc fb23 	bl	8011d64 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}
 8015724:	08021258 	.word	0x08021258
 8015728:	08021450 	.word	0x08021450
 801572c:	080212d8 	.word	0x080212d8

08015730 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d107      	bne.n	801574e <netif_set_link_up+0x1e>
 801573e:	4b15      	ldr	r3, [pc, #84]	@ (8015794 <netif_set_link_up+0x64>)
 8015740:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8015744:	4914      	ldr	r1, [pc, #80]	@ (8015798 <netif_set_link_up+0x68>)
 8015746:	4815      	ldr	r0, [pc, #84]	@ (801579c <netif_set_link_up+0x6c>)
 8015748:	f008 fa5a 	bl	801dc00 <iprintf>
 801574c:	e01e      	b.n	801578c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015754:	f003 0304 	and.w	r3, r3, #4
 8015758:	2b00      	cmp	r3, #0
 801575a:	d117      	bne.n	801578c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8015762:	f043 0304 	orr.w	r3, r3, #4
 8015766:	b2da      	uxtb	r2, r3
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	f7fa fd6e 	bl	8010250 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015774:	2103      	movs	r1, #3
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f7ff ff5e 	bl	8015638 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	69db      	ldr	r3, [r3, #28]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d003      	beq.n	801578c <netif_set_link_up+0x5c>
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	69db      	ldr	r3, [r3, #28]
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	08021258 	.word	0x08021258
 8015798:	08021470 	.word	0x08021470
 801579c:	080212d8 	.word	0x080212d8

080157a0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d107      	bne.n	80157be <netif_set_link_down+0x1e>
 80157ae:	4b11      	ldr	r3, [pc, #68]	@ (80157f4 <netif_set_link_down+0x54>)
 80157b0:	f240 4206 	movw	r2, #1030	@ 0x406
 80157b4:	4910      	ldr	r1, [pc, #64]	@ (80157f8 <netif_set_link_down+0x58>)
 80157b6:	4811      	ldr	r0, [pc, #68]	@ (80157fc <netif_set_link_down+0x5c>)
 80157b8:	f008 fa22 	bl	801dc00 <iprintf>
 80157bc:	e017      	b.n	80157ee <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80157c4:	f003 0304 	and.w	r3, r3, #4
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d010      	beq.n	80157ee <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80157d2:	f023 0304 	bic.w	r3, r3, #4
 80157d6:	b2da      	uxtb	r2, r3
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    NETIF_LINK_CALLBACK(netif);
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	69db      	ldr	r3, [r3, #28]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d003      	beq.n	80157ee <netif_set_link_down+0x4e>
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	69db      	ldr	r3, [r3, #28]
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80157ee:	3708      	adds	r7, #8
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}
 80157f4:	08021258 	.word	0x08021258
 80157f8:	08021494 	.word	0x08021494
 80157fc:	080212d8 	.word	0x080212d8

08015800 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015800:	b480      	push	{r7}
 8015802:	b083      	sub	sp, #12
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d002      	beq.n	8015816 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	683a      	ldr	r2, [r7, #0]
 8015814:	61da      	str	r2, [r3, #28]
  }
}
 8015816:	bf00      	nop
 8015818:	370c      	adds	r7, #12
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr

08015822 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8015822:	b480      	push	{r7}
 8015824:	b085      	sub	sp, #20
 8015826:	af00      	add	r7, sp, #0
 8015828:	60f8      	str	r0, [r7, #12]
 801582a:	60b9      	str	r1, [r7, #8]
 801582c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801582e:	f06f 030b 	mvn.w	r3, #11
}
 8015832:	4618      	mov	r0, r3
 8015834:	3714      	adds	r7, #20
 8015836:	46bd      	mov	sp, r7
 8015838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583c:	4770      	bx	lr
	...

08015840 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015840:	b480      	push	{r7}
 8015842:	b085      	sub	sp, #20
 8015844:	af00      	add	r7, sp, #0
 8015846:	4603      	mov	r3, r0
 8015848:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801584a:	79fb      	ldrb	r3, [r7, #7]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d013      	beq.n	8015878 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015850:	4b0d      	ldr	r3, [pc, #52]	@ (8015888 <netif_get_by_index+0x48>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	60fb      	str	r3, [r7, #12]
 8015856:	e00c      	b.n	8015872 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801585e:	3301      	adds	r3, #1
 8015860:	b2db      	uxtb	r3, r3
 8015862:	79fa      	ldrb	r2, [r7, #7]
 8015864:	429a      	cmp	r2, r3
 8015866:	d101      	bne.n	801586c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	e006      	b.n	801587a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	60fb      	str	r3, [r7, #12]
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d1ef      	bne.n	8015858 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015878:	2300      	movs	r3, #0
}
 801587a:	4618      	mov	r0, r3
 801587c:	3714      	adds	r7, #20
 801587e:	46bd      	mov	sp, r7
 8015880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015884:	4770      	bx	lr
 8015886:	bf00      	nop
 8015888:	2000f9a4 	.word	0x2000f9a4

0801588c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8015892:	f008 f84f 	bl	801d934 <sys_arch_protect>
 8015896:	6038      	str	r0, [r7, #0]
 8015898:	4b0d      	ldr	r3, [pc, #52]	@ (80158d0 <pbuf_free_ooseq+0x44>)
 801589a:	2200      	movs	r2, #0
 801589c:	701a      	strb	r2, [r3, #0]
 801589e:	6838      	ldr	r0, [r7, #0]
 80158a0:	f008 f856 	bl	801d950 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80158a4:	4b0b      	ldr	r3, [pc, #44]	@ (80158d4 <pbuf_free_ooseq+0x48>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	607b      	str	r3, [r7, #4]
 80158aa:	e00a      	b.n	80158c2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d003      	beq.n	80158bc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f002 fc8b 	bl	80181d0 <tcp_free_ooseq>
      return;
 80158ba:	e005      	b.n	80158c8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	607b      	str	r3, [r7, #4]
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d1f1      	bne.n	80158ac <pbuf_free_ooseq+0x20>
    }
  }
}
 80158c8:	3708      	adds	r7, #8
 80158ca:	46bd      	mov	sp, r7
 80158cc:	bd80      	pop	{r7, pc}
 80158ce:	bf00      	nop
 80158d0:	2000f9ad 	.word	0x2000f9ad
 80158d4:	2000f9bc 	.word	0x2000f9bc

080158d8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80158e0:	f7ff ffd4 	bl	801588c <pbuf_free_ooseq>
}
 80158e4:	bf00      	nop
 80158e6:	3708      	adds	r7, #8
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80158f2:	f008 f81f 	bl	801d934 <sys_arch_protect>
 80158f6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80158f8:	4b0f      	ldr	r3, [pc, #60]	@ (8015938 <pbuf_pool_is_empty+0x4c>)
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80158fe:	4b0e      	ldr	r3, [pc, #56]	@ (8015938 <pbuf_pool_is_empty+0x4c>)
 8015900:	2201      	movs	r2, #1
 8015902:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f008 f823 	bl	801d950 <sys_arch_unprotect>

  if (!queued) {
 801590a:	78fb      	ldrb	r3, [r7, #3]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10f      	bne.n	8015930 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8015910:	2100      	movs	r1, #0
 8015912:	480a      	ldr	r0, [pc, #40]	@ (801593c <pbuf_pool_is_empty+0x50>)
 8015914:	f7f9 ffe8 	bl	800f8e8 <tcpip_try_callback>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d008      	beq.n	8015930 <pbuf_pool_is_empty+0x44>
 801591e:	f008 f809 	bl	801d934 <sys_arch_protect>
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	4b04      	ldr	r3, [pc, #16]	@ (8015938 <pbuf_pool_is_empty+0x4c>)
 8015926:	2200      	movs	r2, #0
 8015928:	701a      	strb	r2, [r3, #0]
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f008 f810 	bl	801d950 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015930:	bf00      	nop
 8015932:	3708      	adds	r7, #8
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	2000f9ad 	.word	0x2000f9ad
 801593c:	080158d9 	.word	0x080158d9

08015940 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8015940:	b480      	push	{r7}
 8015942:	b085      	sub	sp, #20
 8015944:	af00      	add	r7, sp, #0
 8015946:	60f8      	str	r0, [r7, #12]
 8015948:	60b9      	str	r1, [r7, #8]
 801594a:	4611      	mov	r1, r2
 801594c:	461a      	mov	r2, r3
 801594e:	460b      	mov	r3, r1
 8015950:	80fb      	strh	r3, [r7, #6]
 8015952:	4613      	mov	r3, r2
 8015954:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	2200      	movs	r2, #0
 801595a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	68ba      	ldr	r2, [r7, #8]
 8015960:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	88fa      	ldrh	r2, [r7, #6]
 8015966:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	88ba      	ldrh	r2, [r7, #4]
 801596c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801596e:	8b3b      	ldrh	r3, [r7, #24]
 8015970:	b2da      	uxtb	r2, r3
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	7f3a      	ldrb	r2, [r7, #28]
 801597a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2201      	movs	r2, #1
 8015980:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	2200      	movs	r2, #0
 8015986:	73da      	strb	r2, [r3, #15]
}
 8015988:	bf00      	nop
 801598a:	3714      	adds	r7, #20
 801598c:	46bd      	mov	sp, r7
 801598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015992:	4770      	bx	lr

08015994 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b08c      	sub	sp, #48	@ 0x30
 8015998:	af02      	add	r7, sp, #8
 801599a:	4603      	mov	r3, r0
 801599c:	71fb      	strb	r3, [r7, #7]
 801599e:	460b      	mov	r3, r1
 80159a0:	80bb      	strh	r3, [r7, #4]
 80159a2:	4613      	mov	r3, r2
 80159a4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80159a6:	79fb      	ldrb	r3, [r7, #7]
 80159a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80159aa:	887b      	ldrh	r3, [r7, #2]
 80159ac:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80159b0:	d07f      	beq.n	8015ab2 <pbuf_alloc+0x11e>
 80159b2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80159b6:	f300 80c8 	bgt.w	8015b4a <pbuf_alloc+0x1b6>
 80159ba:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80159be:	d010      	beq.n	80159e2 <pbuf_alloc+0x4e>
 80159c0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80159c4:	f300 80c1 	bgt.w	8015b4a <pbuf_alloc+0x1b6>
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d002      	beq.n	80159d2 <pbuf_alloc+0x3e>
 80159cc:	2b41      	cmp	r3, #65	@ 0x41
 80159ce:	f040 80bc 	bne.w	8015b4a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80159d2:	887a      	ldrh	r2, [r7, #2]
 80159d4:	88bb      	ldrh	r3, [r7, #4]
 80159d6:	4619      	mov	r1, r3
 80159d8:	2000      	movs	r0, #0
 80159da:	f000 f8d1 	bl	8015b80 <pbuf_alloc_reference>
 80159de:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80159e0:	e0bd      	b.n	8015b5e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80159e2:	2300      	movs	r3, #0
 80159e4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80159e6:	2300      	movs	r3, #0
 80159e8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80159ea:	88bb      	ldrh	r3, [r7, #4]
 80159ec:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80159ee:	200d      	movs	r0, #13
 80159f0:	f7ff fb78 	bl	80150e4 <memp_malloc>
 80159f4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d109      	bne.n	8015a10 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80159fc:	f7ff ff76 	bl	80158ec <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8015a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d002      	beq.n	8015a0c <pbuf_alloc+0x78>
            pbuf_free(p);
 8015a06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a08:	f000 fada 	bl	8015fc0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	e0a7      	b.n	8015b60 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8015a10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a12:	3303      	adds	r3, #3
 8015a14:	b29b      	uxth	r3, r3
 8015a16:	f023 0303 	bic.w	r3, r3, #3
 8015a1a:	b29b      	uxth	r3, r3
 8015a1c:	f5c3 63c0 	rsb	r3, r3, #1536	@ 0x600
 8015a20:	b29b      	uxth	r3, r3
 8015a22:	8b7a      	ldrh	r2, [r7, #26]
 8015a24:	4293      	cmp	r3, r2
 8015a26:	bf28      	it	cs
 8015a28:	4613      	movcs	r3, r2
 8015a2a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8015a2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a2e:	3318      	adds	r3, #24
 8015a30:	693a      	ldr	r2, [r7, #16]
 8015a32:	4413      	add	r3, r2
 8015a34:	3303      	adds	r3, #3
 8015a36:	f023 0303 	bic.w	r3, r3, #3
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	89f9      	ldrh	r1, [r7, #14]
 8015a3e:	8b7a      	ldrh	r2, [r7, #26]
 8015a40:	2300      	movs	r3, #0
 8015a42:	9301      	str	r3, [sp, #4]
 8015a44:	887b      	ldrh	r3, [r7, #2]
 8015a46:	9300      	str	r3, [sp, #0]
 8015a48:	460b      	mov	r3, r1
 8015a4a:	4601      	mov	r1, r0
 8015a4c:	6938      	ldr	r0, [r7, #16]
 8015a4e:	f7ff ff77 	bl	8015940 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8015a52:	693b      	ldr	r3, [r7, #16]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	f003 0303 	and.w	r3, r3, #3
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d006      	beq.n	8015a6c <pbuf_alloc+0xd8>
 8015a5e:	4b42      	ldr	r3, [pc, #264]	@ (8015b68 <pbuf_alloc+0x1d4>)
 8015a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015a64:	4941      	ldr	r1, [pc, #260]	@ (8015b6c <pbuf_alloc+0x1d8>)
 8015a66:	4842      	ldr	r0, [pc, #264]	@ (8015b70 <pbuf_alloc+0x1dc>)
 8015a68:	f008 f8ca 	bl	801dc00 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8015a6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a6e:	3303      	adds	r3, #3
 8015a70:	f023 0303 	bic.w	r3, r3, #3
 8015a74:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8015a78:	d106      	bne.n	8015a88 <pbuf_alloc+0xf4>
 8015a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8015b68 <pbuf_alloc+0x1d4>)
 8015a7c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8015a80:	493c      	ldr	r1, [pc, #240]	@ (8015b74 <pbuf_alloc+0x1e0>)
 8015a82:	483b      	ldr	r0, [pc, #236]	@ (8015b70 <pbuf_alloc+0x1dc>)
 8015a84:	f008 f8bc 	bl	801dc00 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8015a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d102      	bne.n	8015a94 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8015a8e:	693b      	ldr	r3, [r7, #16]
 8015a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8015a92:	e002      	b.n	8015a9a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8015a94:	69fb      	ldr	r3, [r7, #28]
 8015a96:	693a      	ldr	r2, [r7, #16]
 8015a98:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8015a9e:	8b7a      	ldrh	r2, [r7, #26]
 8015aa0:	89fb      	ldrh	r3, [r7, #14]
 8015aa2:	1ad3      	subs	r3, r2, r3
 8015aa4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8015aaa:	8b7b      	ldrh	r3, [r7, #26]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d19e      	bne.n	80159ee <pbuf_alloc+0x5a>
      break;
 8015ab0:	e055      	b.n	8015b5e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8015ab2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015ab4:	3303      	adds	r3, #3
 8015ab6:	b29b      	uxth	r3, r3
 8015ab8:	f023 0303 	bic.w	r3, r3, #3
 8015abc:	b29a      	uxth	r2, r3
 8015abe:	88bb      	ldrh	r3, [r7, #4]
 8015ac0:	3303      	adds	r3, #3
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	f023 0303 	bic.w	r3, r3, #3
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	4413      	add	r3, r2
 8015acc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8015ace:	8b3b      	ldrh	r3, [r7, #24]
 8015ad0:	3318      	adds	r3, #24
 8015ad2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015ad4:	8b3a      	ldrh	r2, [r7, #24]
 8015ad6:	88bb      	ldrh	r3, [r7, #4]
 8015ad8:	3303      	adds	r3, #3
 8015ada:	f023 0303 	bic.w	r3, r3, #3
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d306      	bcc.n	8015af0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8015ae2:	8afa      	ldrh	r2, [r7, #22]
 8015ae4:	88bb      	ldrh	r3, [r7, #4]
 8015ae6:	3303      	adds	r3, #3
 8015ae8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8015aec:	429a      	cmp	r2, r3
 8015aee:	d201      	bcs.n	8015af4 <pbuf_alloc+0x160>
        return NULL;
 8015af0:	2300      	movs	r3, #0
 8015af2:	e035      	b.n	8015b60 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8015af4:	8afb      	ldrh	r3, [r7, #22]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7ff f950 	bl	8014d9c <mem_malloc>
 8015afc:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8015afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d101      	bne.n	8015b08 <pbuf_alloc+0x174>
        return NULL;
 8015b04:	2300      	movs	r3, #0
 8015b06:	e02b      	b.n	8015b60 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8015b08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015b0a:	3318      	adds	r3, #24
 8015b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b0e:	4413      	add	r3, r2
 8015b10:	3303      	adds	r3, #3
 8015b12:	f023 0303 	bic.w	r3, r3, #3
 8015b16:	4618      	mov	r0, r3
 8015b18:	88b9      	ldrh	r1, [r7, #4]
 8015b1a:	88ba      	ldrh	r2, [r7, #4]
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	9301      	str	r3, [sp, #4]
 8015b20:	887b      	ldrh	r3, [r7, #2]
 8015b22:	9300      	str	r3, [sp, #0]
 8015b24:	460b      	mov	r3, r1
 8015b26:	4601      	mov	r1, r0
 8015b28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015b2a:	f7ff ff09 	bl	8015940 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8015b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	f003 0303 	and.w	r3, r3, #3
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d010      	beq.n	8015b5c <pbuf_alloc+0x1c8>
 8015b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8015b68 <pbuf_alloc+0x1d4>)
 8015b3c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8015b40:	490d      	ldr	r1, [pc, #52]	@ (8015b78 <pbuf_alloc+0x1e4>)
 8015b42:	480b      	ldr	r0, [pc, #44]	@ (8015b70 <pbuf_alloc+0x1dc>)
 8015b44:	f008 f85c 	bl	801dc00 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8015b48:	e008      	b.n	8015b5c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8015b4a:	4b07      	ldr	r3, [pc, #28]	@ (8015b68 <pbuf_alloc+0x1d4>)
 8015b4c:	f240 1227 	movw	r2, #295	@ 0x127
 8015b50:	490a      	ldr	r1, [pc, #40]	@ (8015b7c <pbuf_alloc+0x1e8>)
 8015b52:	4807      	ldr	r0, [pc, #28]	@ (8015b70 <pbuf_alloc+0x1dc>)
 8015b54:	f008 f854 	bl	801dc00 <iprintf>
      return NULL;
 8015b58:	2300      	movs	r3, #0
 8015b5a:	e001      	b.n	8015b60 <pbuf_alloc+0x1cc>
      break;
 8015b5c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8015b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3728      	adds	r7, #40	@ 0x28
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	080214b8 	.word	0x080214b8
 8015b6c:	08021518 	.word	0x08021518
 8015b70:	08021548 	.word	0x08021548
 8015b74:	08021570 	.word	0x08021570
 8015b78:	080215a4 	.word	0x080215a4
 8015b7c:	080215d0 	.word	0x080215d0

08015b80 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b086      	sub	sp, #24
 8015b84:	af02      	add	r7, sp, #8
 8015b86:	6078      	str	r0, [r7, #4]
 8015b88:	460b      	mov	r3, r1
 8015b8a:	807b      	strh	r3, [r7, #2]
 8015b8c:	4613      	mov	r3, r2
 8015b8e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8015b90:	883b      	ldrh	r3, [r7, #0]
 8015b92:	2b41      	cmp	r3, #65	@ 0x41
 8015b94:	d009      	beq.n	8015baa <pbuf_alloc_reference+0x2a>
 8015b96:	883b      	ldrh	r3, [r7, #0]
 8015b98:	2b01      	cmp	r3, #1
 8015b9a:	d006      	beq.n	8015baa <pbuf_alloc_reference+0x2a>
 8015b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8015bdc <pbuf_alloc_reference+0x5c>)
 8015b9e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8015ba2:	490f      	ldr	r1, [pc, #60]	@ (8015be0 <pbuf_alloc_reference+0x60>)
 8015ba4:	480f      	ldr	r0, [pc, #60]	@ (8015be4 <pbuf_alloc_reference+0x64>)
 8015ba6:	f008 f82b 	bl	801dc00 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8015baa:	200c      	movs	r0, #12
 8015bac:	f7ff fa9a 	bl	80150e4 <memp_malloc>
 8015bb0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d101      	bne.n	8015bbc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	e00b      	b.n	8015bd4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8015bbc:	8879      	ldrh	r1, [r7, #2]
 8015bbe:	887a      	ldrh	r2, [r7, #2]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	9301      	str	r3, [sp, #4]
 8015bc4:	883b      	ldrh	r3, [r7, #0]
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	460b      	mov	r3, r1
 8015bca:	6879      	ldr	r1, [r7, #4]
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f7ff feb7 	bl	8015940 <pbuf_init_alloced_pbuf>
  return p;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3710      	adds	r7, #16
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	080214b8 	.word	0x080214b8
 8015be0:	080215ec 	.word	0x080215ec
 8015be4:	08021548 	.word	0x08021548

08015be8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b088      	sub	sp, #32
 8015bec:	af02      	add	r7, sp, #8
 8015bee:	607b      	str	r3, [r7, #4]
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	73fb      	strb	r3, [r7, #15]
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	81bb      	strh	r3, [r7, #12]
 8015bf8:	4613      	mov	r3, r2
 8015bfa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8015bfc:	7bfb      	ldrb	r3, [r7, #15]
 8015bfe:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8015c00:	8a7b      	ldrh	r3, [r7, #18]
 8015c02:	3303      	adds	r3, #3
 8015c04:	f023 0203 	bic.w	r2, r3, #3
 8015c08:	89bb      	ldrh	r3, [r7, #12]
 8015c0a:	441a      	add	r2, r3
 8015c0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d901      	bls.n	8015c16 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8015c12:	2300      	movs	r3, #0
 8015c14:	e018      	b.n	8015c48 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8015c16:	6a3b      	ldr	r3, [r7, #32]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d007      	beq.n	8015c2c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8015c1c:	8a7b      	ldrh	r3, [r7, #18]
 8015c1e:	3303      	adds	r3, #3
 8015c20:	f023 0303 	bic.w	r3, r3, #3
 8015c24:	6a3a      	ldr	r2, [r7, #32]
 8015c26:	4413      	add	r3, r2
 8015c28:	617b      	str	r3, [r7, #20]
 8015c2a:	e001      	b.n	8015c30 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	89b9      	ldrh	r1, [r7, #12]
 8015c34:	89ba      	ldrh	r2, [r7, #12]
 8015c36:	2302      	movs	r3, #2
 8015c38:	9301      	str	r3, [sp, #4]
 8015c3a:	897b      	ldrh	r3, [r7, #10]
 8015c3c:	9300      	str	r3, [sp, #0]
 8015c3e:	460b      	mov	r3, r1
 8015c40:	6979      	ldr	r1, [r7, #20]
 8015c42:	f7ff fe7d 	bl	8015940 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8015c46:	687b      	ldr	r3, [r7, #4]
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d106      	bne.n	8015c70 <pbuf_realloc+0x20>
 8015c62:	4b3a      	ldr	r3, [pc, #232]	@ (8015d4c <pbuf_realloc+0xfc>)
 8015c64:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8015c68:	4939      	ldr	r1, [pc, #228]	@ (8015d50 <pbuf_realloc+0x100>)
 8015c6a:	483a      	ldr	r0, [pc, #232]	@ (8015d54 <pbuf_realloc+0x104>)
 8015c6c:	f007 ffc8 	bl	801dc00 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	891b      	ldrh	r3, [r3, #8]
 8015c74:	887a      	ldrh	r2, [r7, #2]
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d263      	bcs.n	8015d42 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	891a      	ldrh	r2, [r3, #8]
 8015c7e:	887b      	ldrh	r3, [r7, #2]
 8015c80:	1ad3      	subs	r3, r2, r3
 8015c82:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8015c84:	887b      	ldrh	r3, [r7, #2]
 8015c86:	817b      	strh	r3, [r7, #10]
  q = p;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8015c8c:	e018      	b.n	8015cc0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	895b      	ldrh	r3, [r3, #10]
 8015c92:	897a      	ldrh	r2, [r7, #10]
 8015c94:	1ad3      	subs	r3, r2, r3
 8015c96:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	891a      	ldrh	r2, [r3, #8]
 8015c9c:	893b      	ldrh	r3, [r7, #8]
 8015c9e:	1ad3      	subs	r3, r2, r3
 8015ca0:	b29a      	uxth	r2, r3
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d106      	bne.n	8015cc0 <pbuf_realloc+0x70>
 8015cb2:	4b26      	ldr	r3, [pc, #152]	@ (8015d4c <pbuf_realloc+0xfc>)
 8015cb4:	f240 12af 	movw	r2, #431	@ 0x1af
 8015cb8:	4927      	ldr	r1, [pc, #156]	@ (8015d58 <pbuf_realloc+0x108>)
 8015cba:	4826      	ldr	r0, [pc, #152]	@ (8015d54 <pbuf_realloc+0x104>)
 8015cbc:	f007 ffa0 	bl	801dc00 <iprintf>
  while (rem_len > q->len) {
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	895b      	ldrh	r3, [r3, #10]
 8015cc4:	897a      	ldrh	r2, [r7, #10]
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d8e1      	bhi.n	8015c8e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	7b1b      	ldrb	r3, [r3, #12]
 8015cce:	f003 030f 	and.w	r3, r3, #15
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d121      	bne.n	8015d1a <pbuf_realloc+0xca>
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	895b      	ldrh	r3, [r3, #10]
 8015cda:	897a      	ldrh	r2, [r7, #10]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d01c      	beq.n	8015d1a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	7b5b      	ldrb	r3, [r3, #13]
 8015ce4:	f003 0302 	and.w	r3, r3, #2
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d116      	bne.n	8015d1a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	685a      	ldr	r2, [r3, #4]
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	1ad3      	subs	r3, r2, r3
 8015cf4:	b29a      	uxth	r2, r3
 8015cf6:	897b      	ldrh	r3, [r7, #10]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	b29b      	uxth	r3, r3
 8015cfc:	4619      	mov	r1, r3
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	f7fe ff42 	bl	8014b88 <mem_trim>
 8015d04:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d106      	bne.n	8015d1a <pbuf_realloc+0xca>
 8015d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8015d4c <pbuf_realloc+0xfc>)
 8015d0e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8015d12:	4912      	ldr	r1, [pc, #72]	@ (8015d5c <pbuf_realloc+0x10c>)
 8015d14:	480f      	ldr	r0, [pc, #60]	@ (8015d54 <pbuf_realloc+0x104>)
 8015d16:	f007 ff73 	bl	801dc00 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	897a      	ldrh	r2, [r7, #10]
 8015d1e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	895a      	ldrh	r2, [r3, #10]
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d004      	beq.n	8015d3a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	4618      	mov	r0, r3
 8015d36:	f000 f943 	bl	8015fc0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	601a      	str	r2, [r3, #0]
 8015d40:	e000      	b.n	8015d44 <pbuf_realloc+0xf4>
    return;
 8015d42:	bf00      	nop

}
 8015d44:	3710      	adds	r7, #16
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	080214b8 	.word	0x080214b8
 8015d50:	08021600 	.word	0x08021600
 8015d54:	08021548 	.word	0x08021548
 8015d58:	08021618 	.word	0x08021618
 8015d5c:	08021630 	.word	0x08021630

08015d60 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b086      	sub	sp, #24
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	60f8      	str	r0, [r7, #12]
 8015d68:	60b9      	str	r1, [r7, #8]
 8015d6a:	4613      	mov	r3, r2
 8015d6c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d106      	bne.n	8015d82 <pbuf_add_header_impl+0x22>
 8015d74:	4b2b      	ldr	r3, [pc, #172]	@ (8015e24 <pbuf_add_header_impl+0xc4>)
 8015d76:	f240 12df 	movw	r2, #479	@ 0x1df
 8015d7a:	492b      	ldr	r1, [pc, #172]	@ (8015e28 <pbuf_add_header_impl+0xc8>)
 8015d7c:	482b      	ldr	r0, [pc, #172]	@ (8015e2c <pbuf_add_header_impl+0xcc>)
 8015d7e:	f007 ff3f 	bl	801dc00 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d003      	beq.n	8015d90 <pbuf_add_header_impl+0x30>
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015d8e:	d301      	bcc.n	8015d94 <pbuf_add_header_impl+0x34>
    return 1;
 8015d90:	2301      	movs	r3, #1
 8015d92:	e043      	b.n	8015e1c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d101      	bne.n	8015d9e <pbuf_add_header_impl+0x3e>
    return 0;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	e03e      	b.n	8015e1c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	891a      	ldrh	r2, [r3, #8]
 8015da6:	8a7b      	ldrh	r3, [r7, #18]
 8015da8:	4413      	add	r3, r2
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	8a7a      	ldrh	r2, [r7, #18]
 8015dae:	429a      	cmp	r2, r3
 8015db0:	d901      	bls.n	8015db6 <pbuf_add_header_impl+0x56>
    return 1;
 8015db2:	2301      	movs	r3, #1
 8015db4:	e032      	b.n	8015e1c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	7b1b      	ldrb	r3, [r3, #12]
 8015dba:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8015dbc:	8a3b      	ldrh	r3, [r7, #16]
 8015dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00c      	beq.n	8015de0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	685a      	ldr	r2, [r3, #4]
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	425b      	negs	r3, r3
 8015dce:	4413      	add	r3, r2
 8015dd0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	3318      	adds	r3, #24
 8015dd6:	697a      	ldr	r2, [r7, #20]
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	d20d      	bcs.n	8015df8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8015ddc:	2301      	movs	r3, #1
 8015dde:	e01d      	b.n	8015e1c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8015de0:	79fb      	ldrb	r3, [r7, #7]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d006      	beq.n	8015df4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	685a      	ldr	r2, [r3, #4]
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	425b      	negs	r3, r3
 8015dee:	4413      	add	r3, r2
 8015df0:	617b      	str	r3, [r7, #20]
 8015df2:	e001      	b.n	8015df8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8015df4:	2301      	movs	r3, #1
 8015df6:	e011      	b.n	8015e1c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	697a      	ldr	r2, [r7, #20]
 8015dfc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	895a      	ldrh	r2, [r3, #10]
 8015e02:	8a7b      	ldrh	r3, [r7, #18]
 8015e04:	4413      	add	r3, r2
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	891a      	ldrh	r2, [r3, #8]
 8015e10:	8a7b      	ldrh	r3, [r7, #18]
 8015e12:	4413      	add	r3, r2
 8015e14:	b29a      	uxth	r2, r3
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	811a      	strh	r2, [r3, #8]


  return 0;
 8015e1a:	2300      	movs	r3, #0
}
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	3718      	adds	r7, #24
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}
 8015e24:	080214b8 	.word	0x080214b8
 8015e28:	0802164c 	.word	0x0802164c
 8015e2c:	08021548 	.word	0x08021548

08015e30 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b082      	sub	sp, #8
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	6839      	ldr	r1, [r7, #0]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f7ff ff8e 	bl	8015d60 <pbuf_add_header_impl>
 8015e44:	4603      	mov	r3, r0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
	...

08015e50 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b084      	sub	sp, #16
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
 8015e58:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d106      	bne.n	8015e6e <pbuf_remove_header+0x1e>
 8015e60:	4b20      	ldr	r3, [pc, #128]	@ (8015ee4 <pbuf_remove_header+0x94>)
 8015e62:	f240 224b 	movw	r2, #587	@ 0x24b
 8015e66:	4920      	ldr	r1, [pc, #128]	@ (8015ee8 <pbuf_remove_header+0x98>)
 8015e68:	4820      	ldr	r0, [pc, #128]	@ (8015eec <pbuf_remove_header+0x9c>)
 8015e6a:	f007 fec9 	bl	801dc00 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d003      	beq.n	8015e7c <pbuf_remove_header+0x2c>
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015e7a:	d301      	bcc.n	8015e80 <pbuf_remove_header+0x30>
    return 1;
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	e02c      	b.n	8015eda <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d101      	bne.n	8015e8a <pbuf_remove_header+0x3a>
    return 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	e027      	b.n	8015eda <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	895b      	ldrh	r3, [r3, #10]
 8015e92:	89fa      	ldrh	r2, [r7, #14]
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d908      	bls.n	8015eaa <pbuf_remove_header+0x5a>
 8015e98:	4b12      	ldr	r3, [pc, #72]	@ (8015ee4 <pbuf_remove_header+0x94>)
 8015e9a:	f240 2255 	movw	r2, #597	@ 0x255
 8015e9e:	4914      	ldr	r1, [pc, #80]	@ (8015ef0 <pbuf_remove_header+0xa0>)
 8015ea0:	4812      	ldr	r0, [pc, #72]	@ (8015eec <pbuf_remove_header+0x9c>)
 8015ea2:	f007 fead 	bl	801dc00 <iprintf>
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	e017      	b.n	8015eda <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	685a      	ldr	r2, [r3, #4]
 8015eb4:	683b      	ldr	r3, [r7, #0]
 8015eb6:	441a      	add	r2, r3
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	895a      	ldrh	r2, [r3, #10]
 8015ec0:	89fb      	ldrh	r3, [r7, #14]
 8015ec2:	1ad3      	subs	r3, r2, r3
 8015ec4:	b29a      	uxth	r2, r3
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	891a      	ldrh	r2, [r3, #8]
 8015ece:	89fb      	ldrh	r3, [r7, #14]
 8015ed0:	1ad3      	subs	r3, r2, r3
 8015ed2:	b29a      	uxth	r2, r3
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	080214b8 	.word	0x080214b8
 8015ee8:	0802164c 	.word	0x0802164c
 8015eec:	08021548 	.word	0x08021548
 8015ef0:	08021658 	.word	0x08021658

08015ef4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b082      	sub	sp, #8
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
 8015efc:	460b      	mov	r3, r1
 8015efe:	807b      	strh	r3, [r7, #2]
 8015f00:	4613      	mov	r3, r2
 8015f02:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8015f04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	da08      	bge.n	8015f1e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8015f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f10:	425b      	negs	r3, r3
 8015f12:	4619      	mov	r1, r3
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7ff ff9b 	bl	8015e50 <pbuf_remove_header>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	e007      	b.n	8015f2e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8015f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f22:	787a      	ldrb	r2, [r7, #1]
 8015f24:	4619      	mov	r1, r3
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	f7ff ff1a 	bl	8015d60 <pbuf_add_header_impl>
 8015f2c:	4603      	mov	r3, r0
  }
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3708      	adds	r7, #8
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b082      	sub	sp, #8
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	6078      	str	r0, [r7, #4]
 8015f3e:	460b      	mov	r3, r1
 8015f40:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015f42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015f46:	2201      	movs	r2, #1
 8015f48:	4619      	mov	r1, r3
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f7ff ffd2 	bl	8015ef4 <pbuf_header_impl>
 8015f50:	4603      	mov	r3, r0
}
 8015f52:	4618      	mov	r0, r3
 8015f54:	3708      	adds	r7, #8
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}

08015f5a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8015f5a:	b580      	push	{r7, lr}
 8015f5c:	b086      	sub	sp, #24
 8015f5e:	af00      	add	r7, sp, #0
 8015f60:	6078      	str	r0, [r7, #4]
 8015f62:	460b      	mov	r3, r1
 8015f64:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8015f6a:	887b      	ldrh	r3, [r7, #2]
 8015f6c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8015f6e:	e01c      	b.n	8015faa <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	895b      	ldrh	r3, [r3, #10]
 8015f74:	8a7a      	ldrh	r2, [r7, #18]
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d310      	bcc.n	8015f9c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	895b      	ldrh	r3, [r3, #10]
 8015f82:	8a7a      	ldrh	r2, [r7, #18]
 8015f84:	1ad3      	subs	r3, r2, r3
 8015f86:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	2200      	movs	r2, #0
 8015f92:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8015f94:	68f8      	ldr	r0, [r7, #12]
 8015f96:	f000 f813 	bl	8015fc0 <pbuf_free>
 8015f9a:	e006      	b.n	8015faa <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8015f9c:	8a7b      	ldrh	r3, [r7, #18]
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	6978      	ldr	r0, [r7, #20]
 8015fa2:	f7ff ff55 	bl	8015e50 <pbuf_remove_header>
      free_left = 0;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8015faa:	8a7b      	ldrh	r3, [r7, #18]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d002      	beq.n	8015fb6 <pbuf_free_header+0x5c>
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d1dc      	bne.n	8015f70 <pbuf_free_header+0x16>
    }
  }
  return p;
 8015fb6:	697b      	ldr	r3, [r7, #20]
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3718      	adds	r7, #24
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b088      	sub	sp, #32
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d10b      	bne.n	8015fe6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d106      	bne.n	8015fe2 <pbuf_free+0x22>
 8015fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80160c4 <pbuf_free+0x104>)
 8015fd6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8015fda:	493b      	ldr	r1, [pc, #236]	@ (80160c8 <pbuf_free+0x108>)
 8015fdc:	483b      	ldr	r0, [pc, #236]	@ (80160cc <pbuf_free+0x10c>)
 8015fde:	f007 fe0f 	bl	801dc00 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e069      	b.n	80160ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015fea:	e062      	b.n	80160b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015fec:	f007 fca2 	bl	801d934 <sys_arch_protect>
 8015ff0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	7b9b      	ldrb	r3, [r3, #14]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d106      	bne.n	8016008 <pbuf_free+0x48>
 8015ffa:	4b32      	ldr	r3, [pc, #200]	@ (80160c4 <pbuf_free+0x104>)
 8015ffc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8016000:	4933      	ldr	r1, [pc, #204]	@ (80160d0 <pbuf_free+0x110>)
 8016002:	4832      	ldr	r0, [pc, #200]	@ (80160cc <pbuf_free+0x10c>)
 8016004:	f007 fdfc 	bl	801dc00 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	7b9b      	ldrb	r3, [r3, #14]
 801600c:	3b01      	subs	r3, #1
 801600e:	b2da      	uxtb	r2, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	739a      	strb	r2, [r3, #14]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	7b9b      	ldrb	r3, [r3, #14]
 8016018:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801601a:	69b8      	ldr	r0, [r7, #24]
 801601c:	f007 fc98 	bl	801d950 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016020:	7dfb      	ldrb	r3, [r7, #23]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d143      	bne.n	80160ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	7b1b      	ldrb	r3, [r3, #12]
 8016030:	f003 030f 	and.w	r3, r3, #15
 8016034:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	7b5b      	ldrb	r3, [r3, #13]
 801603a:	f003 0302 	and.w	r3, r3, #2
 801603e:	2b00      	cmp	r3, #0
 8016040:	d011      	beq.n	8016066 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	699b      	ldr	r3, [r3, #24]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d106      	bne.n	801605c <pbuf_free+0x9c>
 801604e:	4b1d      	ldr	r3, [pc, #116]	@ (80160c4 <pbuf_free+0x104>)
 8016050:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8016054:	491f      	ldr	r1, [pc, #124]	@ (80160d4 <pbuf_free+0x114>)
 8016056:	481d      	ldr	r0, [pc, #116]	@ (80160cc <pbuf_free+0x10c>)
 8016058:	f007 fdd2 	bl	801dc00 <iprintf>
        pc->custom_free_function(p);
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	699b      	ldr	r3, [r3, #24]
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	4798      	blx	r3
 8016064:	e01d      	b.n	80160a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016066:	7bfb      	ldrb	r3, [r7, #15]
 8016068:	2b02      	cmp	r3, #2
 801606a:	d104      	bne.n	8016076 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801606c:	6879      	ldr	r1, [r7, #4]
 801606e:	200d      	movs	r0, #13
 8016070:	f7ff f8ae 	bl	80151d0 <memp_free>
 8016074:	e015      	b.n	80160a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016076:	7bfb      	ldrb	r3, [r7, #15]
 8016078:	2b01      	cmp	r3, #1
 801607a:	d104      	bne.n	8016086 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801607c:	6879      	ldr	r1, [r7, #4]
 801607e:	200c      	movs	r0, #12
 8016080:	f7ff f8a6 	bl	80151d0 <memp_free>
 8016084:	e00d      	b.n	80160a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016086:	7bfb      	ldrb	r3, [r7, #15]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d103      	bne.n	8016094 <pbuf_free+0xd4>
          mem_free(p);
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f7fe fceb 	bl	8014a68 <mem_free>
 8016092:	e006      	b.n	80160a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016094:	4b0b      	ldr	r3, [pc, #44]	@ (80160c4 <pbuf_free+0x104>)
 8016096:	f240 320f 	movw	r2, #783	@ 0x30f
 801609a:	490f      	ldr	r1, [pc, #60]	@ (80160d8 <pbuf_free+0x118>)
 801609c:	480b      	ldr	r0, [pc, #44]	@ (80160cc <pbuf_free+0x10c>)
 801609e:	f007 fdaf 	bl	801dc00 <iprintf>
        }
      }
      count++;
 80160a2:	7ffb      	ldrb	r3, [r7, #31]
 80160a4:	3301      	adds	r3, #1
 80160a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	607b      	str	r3, [r7, #4]
 80160ac:	e001      	b.n	80160b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80160ae:	2300      	movs	r3, #0
 80160b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d199      	bne.n	8015fec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80160b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3720      	adds	r7, #32
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	080214b8 	.word	0x080214b8
 80160c8:	0802164c 	.word	0x0802164c
 80160cc:	08021548 	.word	0x08021548
 80160d0:	08021678 	.word	0x08021678
 80160d4:	08021690 	.word	0x08021690
 80160d8:	080216b4 	.word	0x080216b4

080160dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80160dc:	b480      	push	{r7}
 80160de:	b085      	sub	sp, #20
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80160e4:	2300      	movs	r3, #0
 80160e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80160e8:	e005      	b.n	80160f6 <pbuf_clen+0x1a>
    ++len;
 80160ea:	89fb      	ldrh	r3, [r7, #14]
 80160ec:	3301      	adds	r3, #1
 80160ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d1f6      	bne.n	80160ea <pbuf_clen+0xe>
  }
  return len;
 80160fc:	89fb      	ldrh	r3, [r7, #14]
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3714      	adds	r7, #20
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
	...

0801610c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d016      	beq.n	8016148 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801611a:	f007 fc0b 	bl	801d934 <sys_arch_protect>
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	7b9b      	ldrb	r3, [r3, #14]
 8016124:	3301      	adds	r3, #1
 8016126:	b2da      	uxtb	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	739a      	strb	r2, [r3, #14]
 801612c:	68f8      	ldr	r0, [r7, #12]
 801612e:	f007 fc0f 	bl	801d950 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	7b9b      	ldrb	r3, [r3, #14]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d106      	bne.n	8016148 <pbuf_ref+0x3c>
 801613a:	4b05      	ldr	r3, [pc, #20]	@ (8016150 <pbuf_ref+0x44>)
 801613c:	f240 3242 	movw	r2, #834	@ 0x342
 8016140:	4904      	ldr	r1, [pc, #16]	@ (8016154 <pbuf_ref+0x48>)
 8016142:	4805      	ldr	r0, [pc, #20]	@ (8016158 <pbuf_ref+0x4c>)
 8016144:	f007 fd5c 	bl	801dc00 <iprintf>
  }
}
 8016148:	bf00      	nop
 801614a:	3710      	adds	r7, #16
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}
 8016150:	080214b8 	.word	0x080214b8
 8016154:	080216c8 	.word	0x080216c8
 8016158:	08021548 	.word	0x08021548

0801615c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b084      	sub	sp, #16
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d002      	beq.n	8016172 <pbuf_cat+0x16>
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d107      	bne.n	8016182 <pbuf_cat+0x26>
 8016172:	4b20      	ldr	r3, [pc, #128]	@ (80161f4 <pbuf_cat+0x98>)
 8016174:	f240 3259 	movw	r2, #857	@ 0x359
 8016178:	491f      	ldr	r1, [pc, #124]	@ (80161f8 <pbuf_cat+0x9c>)
 801617a:	4820      	ldr	r0, [pc, #128]	@ (80161fc <pbuf_cat+0xa0>)
 801617c:	f007 fd40 	bl	801dc00 <iprintf>
 8016180:	e034      	b.n	80161ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	60fb      	str	r3, [r7, #12]
 8016186:	e00a      	b.n	801619e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	891a      	ldrh	r2, [r3, #8]
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	891b      	ldrh	r3, [r3, #8]
 8016190:	4413      	add	r3, r2
 8016192:	b29a      	uxth	r2, r3
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	60fb      	str	r3, [r7, #12]
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d1f0      	bne.n	8016188 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	891a      	ldrh	r2, [r3, #8]
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	895b      	ldrh	r3, [r3, #10]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	d006      	beq.n	80161c0 <pbuf_cat+0x64>
 80161b2:	4b10      	ldr	r3, [pc, #64]	@ (80161f4 <pbuf_cat+0x98>)
 80161b4:	f240 3262 	movw	r2, #866	@ 0x362
 80161b8:	4911      	ldr	r1, [pc, #68]	@ (8016200 <pbuf_cat+0xa4>)
 80161ba:	4810      	ldr	r0, [pc, #64]	@ (80161fc <pbuf_cat+0xa0>)
 80161bc:	f007 fd20 	bl	801dc00 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d006      	beq.n	80161d6 <pbuf_cat+0x7a>
 80161c8:	4b0a      	ldr	r3, [pc, #40]	@ (80161f4 <pbuf_cat+0x98>)
 80161ca:	f240 3263 	movw	r2, #867	@ 0x363
 80161ce:	490d      	ldr	r1, [pc, #52]	@ (8016204 <pbuf_cat+0xa8>)
 80161d0:	480a      	ldr	r0, [pc, #40]	@ (80161fc <pbuf_cat+0xa0>)
 80161d2:	f007 fd15 	bl	801dc00 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	891a      	ldrh	r2, [r3, #8]
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	891b      	ldrh	r3, [r3, #8]
 80161de:	4413      	add	r3, r2
 80161e0:	b29a      	uxth	r2, r3
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	683a      	ldr	r2, [r7, #0]
 80161ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80161ec:	3710      	adds	r7, #16
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bd80      	pop	{r7, pc}
 80161f2:	bf00      	nop
 80161f4:	080214b8 	.word	0x080214b8
 80161f8:	080216dc 	.word	0x080216dc
 80161fc:	08021548 	.word	0x08021548
 8016200:	08021714 	.word	0x08021714
 8016204:	08021744 	.word	0x08021744

08016208 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8016212:	6839      	ldr	r1, [r7, #0]
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f7ff ffa1 	bl	801615c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801621a:	6838      	ldr	r0, [r7, #0]
 801621c:	f7ff ff76 	bl	801610c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8016220:	bf00      	nop
 8016222:	3708      	adds	r7, #8
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}

08016228 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b086      	sub	sp, #24
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
 8016230:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8016232:	2300      	movs	r3, #0
 8016234:	617b      	str	r3, [r7, #20]
 8016236:	2300      	movs	r3, #0
 8016238:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d008      	beq.n	8016252 <pbuf_copy+0x2a>
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d005      	beq.n	8016252 <pbuf_copy+0x2a>
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	891a      	ldrh	r2, [r3, #8]
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	891b      	ldrh	r3, [r3, #8]
 801624e:	429a      	cmp	r2, r3
 8016250:	d209      	bcs.n	8016266 <pbuf_copy+0x3e>
 8016252:	4b57      	ldr	r3, [pc, #348]	@ (80163b0 <pbuf_copy+0x188>)
 8016254:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8016258:	4956      	ldr	r1, [pc, #344]	@ (80163b4 <pbuf_copy+0x18c>)
 801625a:	4857      	ldr	r0, [pc, #348]	@ (80163b8 <pbuf_copy+0x190>)
 801625c:	f007 fcd0 	bl	801dc00 <iprintf>
 8016260:	f06f 030f 	mvn.w	r3, #15
 8016264:	e09f      	b.n	80163a6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	895b      	ldrh	r3, [r3, #10]
 801626a:	461a      	mov	r2, r3
 801626c:	697b      	ldr	r3, [r7, #20]
 801626e:	1ad2      	subs	r2, r2, r3
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	895b      	ldrh	r3, [r3, #10]
 8016274:	4619      	mov	r1, r3
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	1acb      	subs	r3, r1, r3
 801627a:	429a      	cmp	r2, r3
 801627c:	d306      	bcc.n	801628c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	895b      	ldrh	r3, [r3, #10]
 8016282:	461a      	mov	r2, r3
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	1ad3      	subs	r3, r2, r3
 8016288:	60fb      	str	r3, [r7, #12]
 801628a:	e005      	b.n	8016298 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	895b      	ldrh	r3, [r3, #10]
 8016290:	461a      	mov	r2, r3
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	1ad3      	subs	r3, r2, r3
 8016296:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	685a      	ldr	r2, [r3, #4]
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	18d0      	adds	r0, r2, r3
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	685a      	ldr	r2, [r3, #4]
 80162a4:	693b      	ldr	r3, [r7, #16]
 80162a6:	4413      	add	r3, r2
 80162a8:	68fa      	ldr	r2, [r7, #12]
 80162aa:	4619      	mov	r1, r3
 80162ac:	f007 fdeb 	bl	801de86 <memcpy>
    offset_to += len;
 80162b0:	697a      	ldr	r2, [r7, #20]
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	4413      	add	r3, r2
 80162b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80162b8:	693a      	ldr	r2, [r7, #16]
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	4413      	add	r3, r2
 80162be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	895b      	ldrh	r3, [r3, #10]
 80162c4:	461a      	mov	r2, r3
 80162c6:	697b      	ldr	r3, [r7, #20]
 80162c8:	4293      	cmp	r3, r2
 80162ca:	d906      	bls.n	80162da <pbuf_copy+0xb2>
 80162cc:	4b38      	ldr	r3, [pc, #224]	@ (80163b0 <pbuf_copy+0x188>)
 80162ce:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80162d2:	493a      	ldr	r1, [pc, #232]	@ (80163bc <pbuf_copy+0x194>)
 80162d4:	4838      	ldr	r0, [pc, #224]	@ (80163b8 <pbuf_copy+0x190>)
 80162d6:	f007 fc93 	bl	801dc00 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	895b      	ldrh	r3, [r3, #10]
 80162de:	461a      	mov	r2, r3
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	4293      	cmp	r3, r2
 80162e4:	d906      	bls.n	80162f4 <pbuf_copy+0xcc>
 80162e6:	4b32      	ldr	r3, [pc, #200]	@ (80163b0 <pbuf_copy+0x188>)
 80162e8:	f240 32da 	movw	r2, #986	@ 0x3da
 80162ec:	4934      	ldr	r1, [pc, #208]	@ (80163c0 <pbuf_copy+0x198>)
 80162ee:	4832      	ldr	r0, [pc, #200]	@ (80163b8 <pbuf_copy+0x190>)
 80162f0:	f007 fc86 	bl	801dc00 <iprintf>
    if (offset_from >= p_from->len) {
 80162f4:	683b      	ldr	r3, [r7, #0]
 80162f6:	895b      	ldrh	r3, [r3, #10]
 80162f8:	461a      	mov	r2, r3
 80162fa:	693b      	ldr	r3, [r7, #16]
 80162fc:	4293      	cmp	r3, r2
 80162fe:	d304      	bcc.n	801630a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016300:	2300      	movs	r3, #0
 8016302:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	895b      	ldrh	r3, [r3, #10]
 801630e:	461a      	mov	r2, r3
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	4293      	cmp	r3, r2
 8016314:	d114      	bne.n	8016340 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016316:	2300      	movs	r3, #0
 8016318:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d10c      	bne.n	8016340 <pbuf_copy+0x118>
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d009      	beq.n	8016340 <pbuf_copy+0x118>
 801632c:	4b20      	ldr	r3, [pc, #128]	@ (80163b0 <pbuf_copy+0x188>)
 801632e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8016332:	4924      	ldr	r1, [pc, #144]	@ (80163c4 <pbuf_copy+0x19c>)
 8016334:	4820      	ldr	r0, [pc, #128]	@ (80163b8 <pbuf_copy+0x190>)
 8016336:	f007 fc63 	bl	801dc00 <iprintf>
 801633a:	f06f 030f 	mvn.w	r3, #15
 801633e:	e032      	b.n	80163a6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d013      	beq.n	801636e <pbuf_copy+0x146>
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	895a      	ldrh	r2, [r3, #10]
 801634a:	683b      	ldr	r3, [r7, #0]
 801634c:	891b      	ldrh	r3, [r3, #8]
 801634e:	429a      	cmp	r2, r3
 8016350:	d10d      	bne.n	801636e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016352:	683b      	ldr	r3, [r7, #0]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d009      	beq.n	801636e <pbuf_copy+0x146>
 801635a:	4b15      	ldr	r3, [pc, #84]	@ (80163b0 <pbuf_copy+0x188>)
 801635c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8016360:	4919      	ldr	r1, [pc, #100]	@ (80163c8 <pbuf_copy+0x1a0>)
 8016362:	4815      	ldr	r0, [pc, #84]	@ (80163b8 <pbuf_copy+0x190>)
 8016364:	f007 fc4c 	bl	801dc00 <iprintf>
 8016368:	f06f 0305 	mvn.w	r3, #5
 801636c:	e01b      	b.n	80163a6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d013      	beq.n	801639c <pbuf_copy+0x174>
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	895a      	ldrh	r2, [r3, #10]
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	891b      	ldrh	r3, [r3, #8]
 801637c:	429a      	cmp	r2, r3
 801637e:	d10d      	bne.n	801639c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d009      	beq.n	801639c <pbuf_copy+0x174>
 8016388:	4b09      	ldr	r3, [pc, #36]	@ (80163b0 <pbuf_copy+0x188>)
 801638a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801638e:	490e      	ldr	r1, [pc, #56]	@ (80163c8 <pbuf_copy+0x1a0>)
 8016390:	4809      	ldr	r0, [pc, #36]	@ (80163b8 <pbuf_copy+0x190>)
 8016392:	f007 fc35 	bl	801dc00 <iprintf>
 8016396:	f06f 0305 	mvn.w	r3, #5
 801639a:	e004      	b.n	80163a6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	f47f af61 	bne.w	8016266 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80163a4:	2300      	movs	r3, #0
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3718      	adds	r7, #24
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	080214b8 	.word	0x080214b8
 80163b4:	08021790 	.word	0x08021790
 80163b8:	08021548 	.word	0x08021548
 80163bc:	080217c0 	.word	0x080217c0
 80163c0:	080217d8 	.word	0x080217d8
 80163c4:	080217f4 	.word	0x080217f4
 80163c8:	08021804 	.word	0x08021804

080163cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b088      	sub	sp, #32
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	4611      	mov	r1, r2
 80163d8:	461a      	mov	r2, r3
 80163da:	460b      	mov	r3, r1
 80163dc:	80fb      	strh	r3, [r7, #6]
 80163de:	4613      	mov	r3, r2
 80163e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80163e2:	2300      	movs	r3, #0
 80163e4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80163e6:	2300      	movs	r3, #0
 80163e8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d108      	bne.n	8016402 <pbuf_copy_partial+0x36>
 80163f0:	4b2b      	ldr	r3, [pc, #172]	@ (80164a0 <pbuf_copy_partial+0xd4>)
 80163f2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80163f6:	492b      	ldr	r1, [pc, #172]	@ (80164a4 <pbuf_copy_partial+0xd8>)
 80163f8:	482b      	ldr	r0, [pc, #172]	@ (80164a8 <pbuf_copy_partial+0xdc>)
 80163fa:	f007 fc01 	bl	801dc00 <iprintf>
 80163fe:	2300      	movs	r3, #0
 8016400:	e04a      	b.n	8016498 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d108      	bne.n	801641a <pbuf_copy_partial+0x4e>
 8016408:	4b25      	ldr	r3, [pc, #148]	@ (80164a0 <pbuf_copy_partial+0xd4>)
 801640a:	f240 420b 	movw	r2, #1035	@ 0x40b
 801640e:	4927      	ldr	r1, [pc, #156]	@ (80164ac <pbuf_copy_partial+0xe0>)
 8016410:	4825      	ldr	r0, [pc, #148]	@ (80164a8 <pbuf_copy_partial+0xdc>)
 8016412:	f007 fbf5 	bl	801dc00 <iprintf>
 8016416:	2300      	movs	r3, #0
 8016418:	e03e      	b.n	8016498 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	61fb      	str	r3, [r7, #28]
 801641e:	e034      	b.n	801648a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8016420:	88bb      	ldrh	r3, [r7, #4]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d00a      	beq.n	801643c <pbuf_copy_partial+0x70>
 8016426:	69fb      	ldr	r3, [r7, #28]
 8016428:	895b      	ldrh	r3, [r3, #10]
 801642a:	88ba      	ldrh	r2, [r7, #4]
 801642c:	429a      	cmp	r2, r3
 801642e:	d305      	bcc.n	801643c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	895b      	ldrh	r3, [r3, #10]
 8016434:	88ba      	ldrh	r2, [r7, #4]
 8016436:	1ad3      	subs	r3, r2, r3
 8016438:	80bb      	strh	r3, [r7, #4]
 801643a:	e023      	b.n	8016484 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	895a      	ldrh	r2, [r3, #10]
 8016440:	88bb      	ldrh	r3, [r7, #4]
 8016442:	1ad3      	subs	r3, r2, r3
 8016444:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016446:	8b3a      	ldrh	r2, [r7, #24]
 8016448:	88fb      	ldrh	r3, [r7, #6]
 801644a:	429a      	cmp	r2, r3
 801644c:	d901      	bls.n	8016452 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801644e:	88fb      	ldrh	r3, [r7, #6]
 8016450:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016452:	8b7b      	ldrh	r3, [r7, #26]
 8016454:	68ba      	ldr	r2, [r7, #8]
 8016456:	18d0      	adds	r0, r2, r3
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	685a      	ldr	r2, [r3, #4]
 801645c:	88bb      	ldrh	r3, [r7, #4]
 801645e:	4413      	add	r3, r2
 8016460:	8b3a      	ldrh	r2, [r7, #24]
 8016462:	4619      	mov	r1, r3
 8016464:	f007 fd0f 	bl	801de86 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016468:	8afa      	ldrh	r2, [r7, #22]
 801646a:	8b3b      	ldrh	r3, [r7, #24]
 801646c:	4413      	add	r3, r2
 801646e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016470:	8b7a      	ldrh	r2, [r7, #26]
 8016472:	8b3b      	ldrh	r3, [r7, #24]
 8016474:	4413      	add	r3, r2
 8016476:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016478:	88fa      	ldrh	r2, [r7, #6]
 801647a:	8b3b      	ldrh	r3, [r7, #24]
 801647c:	1ad3      	subs	r3, r2, r3
 801647e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016480:	2300      	movs	r3, #0
 8016482:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016484:	69fb      	ldr	r3, [r7, #28]
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	61fb      	str	r3, [r7, #28]
 801648a:	88fb      	ldrh	r3, [r7, #6]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d002      	beq.n	8016496 <pbuf_copy_partial+0xca>
 8016490:	69fb      	ldr	r3, [r7, #28]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d1c4      	bne.n	8016420 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016496:	8afb      	ldrh	r3, [r7, #22]
}
 8016498:	4618      	mov	r0, r3
 801649a:	3720      	adds	r7, #32
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}
 80164a0:	080214b8 	.word	0x080214b8
 80164a4:	08021830 	.word	0x08021830
 80164a8:	08021548 	.word	0x08021548
 80164ac:	08021850 	.word	0x08021850

080164b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b084      	sub	sp, #16
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	4603      	mov	r3, r0
 80164b8:	603a      	str	r2, [r7, #0]
 80164ba:	71fb      	strb	r3, [r7, #7]
 80164bc:	460b      	mov	r3, r1
 80164be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80164c0:	683b      	ldr	r3, [r7, #0]
 80164c2:	8919      	ldrh	r1, [r3, #8]
 80164c4:	88ba      	ldrh	r2, [r7, #4]
 80164c6:	79fb      	ldrb	r3, [r7, #7]
 80164c8:	4618      	mov	r0, r3
 80164ca:	f7ff fa63 	bl	8015994 <pbuf_alloc>
 80164ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d101      	bne.n	80164da <pbuf_clone+0x2a>
    return NULL;
 80164d6:	2300      	movs	r3, #0
 80164d8:	e011      	b.n	80164fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80164da:	6839      	ldr	r1, [r7, #0]
 80164dc:	68f8      	ldr	r0, [r7, #12]
 80164de:	f7ff fea3 	bl	8016228 <pbuf_copy>
 80164e2:	4603      	mov	r3, r0
 80164e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80164e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d006      	beq.n	80164fc <pbuf_clone+0x4c>
 80164ee:	4b06      	ldr	r3, [pc, #24]	@ (8016508 <pbuf_clone+0x58>)
 80164f0:	f240 5224 	movw	r2, #1316	@ 0x524
 80164f4:	4905      	ldr	r1, [pc, #20]	@ (801650c <pbuf_clone+0x5c>)
 80164f6:	4806      	ldr	r0, [pc, #24]	@ (8016510 <pbuf_clone+0x60>)
 80164f8:	f007 fb82 	bl	801dc00 <iprintf>
  return q;
 80164fc:	68fb      	ldr	r3, [r7, #12]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3710      	adds	r7, #16
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	080214b8 	.word	0x080214b8
 801650c:	0802195c 	.word	0x0802195c
 8016510:	08021548 	.word	0x08021548

08016514 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016518:	f007 fa72 	bl	801da00 <rand>
 801651c:	4603      	mov	r3, r0
 801651e:	b29b      	uxth	r3, r3
 8016520:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016524:	b29b      	uxth	r3, r3
 8016526:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801652a:	b29a      	uxth	r2, r3
 801652c:	4b01      	ldr	r3, [pc, #4]	@ (8016534 <tcp_init+0x20>)
 801652e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016530:	bf00      	nop
 8016532:	bd80      	pop	{r7, pc}
 8016534:	20000038 	.word	0x20000038

08016538 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b082      	sub	sp, #8
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	7d1b      	ldrb	r3, [r3, #20]
 8016544:	2b01      	cmp	r3, #1
 8016546:	d105      	bne.n	8016554 <tcp_free+0x1c>
 8016548:	4b06      	ldr	r3, [pc, #24]	@ (8016564 <tcp_free+0x2c>)
 801654a:	22d4      	movs	r2, #212	@ 0xd4
 801654c:	4906      	ldr	r1, [pc, #24]	@ (8016568 <tcp_free+0x30>)
 801654e:	4807      	ldr	r0, [pc, #28]	@ (801656c <tcp_free+0x34>)
 8016550:	f007 fb56 	bl	801dc00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016554:	6879      	ldr	r1, [r7, #4]
 8016556:	2001      	movs	r0, #1
 8016558:	f7fe fe3a 	bl	80151d0 <memp_free>
}
 801655c:	bf00      	nop
 801655e:	3708      	adds	r7, #8
 8016560:	46bd      	mov	sp, r7
 8016562:	bd80      	pop	{r7, pc}
 8016564:	080219e8 	.word	0x080219e8
 8016568:	08021a48 	.word	0x08021a48
 801656c:	08021a5c 	.word	0x08021a5c

08016570 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b082      	sub	sp, #8
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	7d1b      	ldrb	r3, [r3, #20]
 801657c:	2b01      	cmp	r3, #1
 801657e:	d105      	bne.n	801658c <tcp_free_listen+0x1c>
 8016580:	4b06      	ldr	r3, [pc, #24]	@ (801659c <tcp_free_listen+0x2c>)
 8016582:	22df      	movs	r2, #223	@ 0xdf
 8016584:	4906      	ldr	r1, [pc, #24]	@ (80165a0 <tcp_free_listen+0x30>)
 8016586:	4807      	ldr	r0, [pc, #28]	@ (80165a4 <tcp_free_listen+0x34>)
 8016588:	f007 fb3a 	bl	801dc00 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801658c:	6879      	ldr	r1, [r7, #4]
 801658e:	2002      	movs	r0, #2
 8016590:	f7fe fe1e 	bl	80151d0 <memp_free>
}
 8016594:	bf00      	nop
 8016596:	3708      	adds	r7, #8
 8016598:	46bd      	mov	sp, r7
 801659a:	bd80      	pop	{r7, pc}
 801659c:	080219e8 	.word	0x080219e8
 80165a0:	08021a84 	.word	0x08021a84
 80165a4:	08021a5c 	.word	0x08021a5c

080165a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80165ac:	f001 f8aa 	bl	8017704 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80165b0:	4b07      	ldr	r3, [pc, #28]	@ (80165d0 <tcp_tmr+0x28>)
 80165b2:	781b      	ldrb	r3, [r3, #0]
 80165b4:	3301      	adds	r3, #1
 80165b6:	b2da      	uxtb	r2, r3
 80165b8:	4b05      	ldr	r3, [pc, #20]	@ (80165d0 <tcp_tmr+0x28>)
 80165ba:	701a      	strb	r2, [r3, #0]
 80165bc:	4b04      	ldr	r3, [pc, #16]	@ (80165d0 <tcp_tmr+0x28>)
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	f003 0301 	and.w	r3, r3, #1
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d001      	beq.n	80165cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80165c8:	f000 fd5a 	bl	8017080 <tcp_slowtmr>
  }
}
 80165cc:	bf00      	nop
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	2000f9c5 	.word	0x2000f9c5

080165d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d105      	bne.n	80165f0 <tcp_remove_listener+0x1c>
 80165e4:	4b0d      	ldr	r3, [pc, #52]	@ (801661c <tcp_remove_listener+0x48>)
 80165e6:	22ff      	movs	r2, #255	@ 0xff
 80165e8:	490d      	ldr	r1, [pc, #52]	@ (8016620 <tcp_remove_listener+0x4c>)
 80165ea:	480e      	ldr	r0, [pc, #56]	@ (8016624 <tcp_remove_listener+0x50>)
 80165ec:	f007 fb08 	bl	801dc00 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	60fb      	str	r3, [r7, #12]
 80165f4:	e00a      	b.n	801660c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80165fa:	683a      	ldr	r2, [r7, #0]
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d102      	bne.n	8016606 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	2200      	movs	r2, #0
 8016604:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	68db      	ldr	r3, [r3, #12]
 801660a:	60fb      	str	r3, [r7, #12]
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d1f1      	bne.n	80165f6 <tcp_remove_listener+0x22>
    }
  }
}
 8016612:	bf00      	nop
 8016614:	bf00      	nop
 8016616:	3710      	adds	r7, #16
 8016618:	46bd      	mov	sp, r7
 801661a:	bd80      	pop	{r7, pc}
 801661c:	080219e8 	.word	0x080219e8
 8016620:	08021aa0 	.word	0x08021aa0
 8016624:	08021a5c 	.word	0x08021a5c

08016628 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b084      	sub	sp, #16
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d106      	bne.n	8016644 <tcp_listen_closed+0x1c>
 8016636:	4b14      	ldr	r3, [pc, #80]	@ (8016688 <tcp_listen_closed+0x60>)
 8016638:	f240 1211 	movw	r2, #273	@ 0x111
 801663c:	4913      	ldr	r1, [pc, #76]	@ (801668c <tcp_listen_closed+0x64>)
 801663e:	4814      	ldr	r0, [pc, #80]	@ (8016690 <tcp_listen_closed+0x68>)
 8016640:	f007 fade 	bl	801dc00 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	7d1b      	ldrb	r3, [r3, #20]
 8016648:	2b01      	cmp	r3, #1
 801664a:	d006      	beq.n	801665a <tcp_listen_closed+0x32>
 801664c:	4b0e      	ldr	r3, [pc, #56]	@ (8016688 <tcp_listen_closed+0x60>)
 801664e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8016652:	4910      	ldr	r1, [pc, #64]	@ (8016694 <tcp_listen_closed+0x6c>)
 8016654:	480e      	ldr	r0, [pc, #56]	@ (8016690 <tcp_listen_closed+0x68>)
 8016656:	f007 fad3 	bl	801dc00 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801665a:	2301      	movs	r3, #1
 801665c:	60fb      	str	r3, [r7, #12]
 801665e:	e00b      	b.n	8016678 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016660:	4a0d      	ldr	r2, [pc, #52]	@ (8016698 <tcp_listen_closed+0x70>)
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	6879      	ldr	r1, [r7, #4]
 801666c:	4618      	mov	r0, r3
 801666e:	f7ff ffb1 	bl	80165d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	3301      	adds	r3, #1
 8016676:	60fb      	str	r3, [r7, #12]
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	2b03      	cmp	r3, #3
 801667c:	d9f0      	bls.n	8016660 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801667e:	bf00      	nop
 8016680:	bf00      	nop
 8016682:	3710      	adds	r7, #16
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	080219e8 	.word	0x080219e8
 801668c:	08021ac8 	.word	0x08021ac8
 8016690:	08021a5c 	.word	0x08021a5c
 8016694:	08021ad4 	.word	0x08021ad4
 8016698:	08023bbc 	.word	0x08023bbc

0801669c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801669c:	b5b0      	push	{r4, r5, r7, lr}
 801669e:	b088      	sub	sp, #32
 80166a0:	af04      	add	r7, sp, #16
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	460b      	mov	r3, r1
 80166a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d106      	bne.n	80166bc <tcp_close_shutdown+0x20>
 80166ae:	4b63      	ldr	r3, [pc, #396]	@ (801683c <tcp_close_shutdown+0x1a0>)
 80166b0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80166b4:	4962      	ldr	r1, [pc, #392]	@ (8016840 <tcp_close_shutdown+0x1a4>)
 80166b6:	4863      	ldr	r0, [pc, #396]	@ (8016844 <tcp_close_shutdown+0x1a8>)
 80166b8:	f007 faa2 	bl	801dc00 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80166bc:	78fb      	ldrb	r3, [r7, #3]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d067      	beq.n	8016792 <tcp_close_shutdown+0xf6>
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	7d1b      	ldrb	r3, [r3, #20]
 80166c6:	2b04      	cmp	r3, #4
 80166c8:	d003      	beq.n	80166d2 <tcp_close_shutdown+0x36>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	7d1b      	ldrb	r3, [r3, #20]
 80166ce:	2b07      	cmp	r3, #7
 80166d0:	d15f      	bne.n	8016792 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d105      	bne.n	80166e6 <tcp_close_shutdown+0x4a>
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166de:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d055      	beq.n	8016792 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	8b5b      	ldrh	r3, [r3, #26]
 80166ea:	f003 0310 	and.w	r3, r3, #16
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d106      	bne.n	8016700 <tcp_close_shutdown+0x64>
 80166f2:	4b52      	ldr	r3, [pc, #328]	@ (801683c <tcp_close_shutdown+0x1a0>)
 80166f4:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80166f8:	4953      	ldr	r1, [pc, #332]	@ (8016848 <tcp_close_shutdown+0x1ac>)
 80166fa:	4852      	ldr	r0, [pc, #328]	@ (8016844 <tcp_close_shutdown+0x1a8>)
 80166fc:	f007 fa80 	bl	801dc00 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016708:	687d      	ldr	r5, [r7, #4]
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	3304      	adds	r3, #4
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	8ad2      	ldrh	r2, [r2, #22]
 8016712:	6879      	ldr	r1, [r7, #4]
 8016714:	8b09      	ldrh	r1, [r1, #24]
 8016716:	9102      	str	r1, [sp, #8]
 8016718:	9201      	str	r2, [sp, #4]
 801671a:	9300      	str	r3, [sp, #0]
 801671c:	462b      	mov	r3, r5
 801671e:	4622      	mov	r2, r4
 8016720:	4601      	mov	r1, r0
 8016722:	6878      	ldr	r0, [r7, #4]
 8016724:	f005 fdbc 	bl	801c2a0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016728:	6878      	ldr	r0, [r7, #4]
 801672a:	f001 fb9d 	bl	8017e68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801672e:	4b47      	ldr	r3, [pc, #284]	@ (801684c <tcp_close_shutdown+0x1b0>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	687a      	ldr	r2, [r7, #4]
 8016734:	429a      	cmp	r2, r3
 8016736:	d105      	bne.n	8016744 <tcp_close_shutdown+0xa8>
 8016738:	4b44      	ldr	r3, [pc, #272]	@ (801684c <tcp_close_shutdown+0x1b0>)
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	68db      	ldr	r3, [r3, #12]
 801673e:	4a43      	ldr	r2, [pc, #268]	@ (801684c <tcp_close_shutdown+0x1b0>)
 8016740:	6013      	str	r3, [r2, #0]
 8016742:	e013      	b.n	801676c <tcp_close_shutdown+0xd0>
 8016744:	4b41      	ldr	r3, [pc, #260]	@ (801684c <tcp_close_shutdown+0x1b0>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	60fb      	str	r3, [r7, #12]
 801674a:	e00c      	b.n	8016766 <tcp_close_shutdown+0xca>
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	68db      	ldr	r3, [r3, #12]
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	429a      	cmp	r2, r3
 8016754:	d104      	bne.n	8016760 <tcp_close_shutdown+0xc4>
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	68da      	ldr	r2, [r3, #12]
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	60da      	str	r2, [r3, #12]
 801675e:	e005      	b.n	801676c <tcp_close_shutdown+0xd0>
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	68db      	ldr	r3, [r3, #12]
 8016764:	60fb      	str	r3, [r7, #12]
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d1ef      	bne.n	801674c <tcp_close_shutdown+0xb0>
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2200      	movs	r2, #0
 8016770:	60da      	str	r2, [r3, #12]
 8016772:	4b37      	ldr	r3, [pc, #220]	@ (8016850 <tcp_close_shutdown+0x1b4>)
 8016774:	2201      	movs	r2, #1
 8016776:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016778:	4b36      	ldr	r3, [pc, #216]	@ (8016854 <tcp_close_shutdown+0x1b8>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	687a      	ldr	r2, [r7, #4]
 801677e:	429a      	cmp	r2, r3
 8016780:	d102      	bne.n	8016788 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016782:	f004 f833 	bl	801a7ec <tcp_trigger_input_pcb_close>
 8016786:	e002      	b.n	801678e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f7ff fed5 	bl	8016538 <tcp_free>
      }
      return ERR_OK;
 801678e:	2300      	movs	r3, #0
 8016790:	e050      	b.n	8016834 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	7d1b      	ldrb	r3, [r3, #20]
 8016796:	2b02      	cmp	r3, #2
 8016798:	d03b      	beq.n	8016812 <tcp_close_shutdown+0x176>
 801679a:	2b02      	cmp	r3, #2
 801679c:	dc44      	bgt.n	8016828 <tcp_close_shutdown+0x18c>
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d002      	beq.n	80167a8 <tcp_close_shutdown+0x10c>
 80167a2:	2b01      	cmp	r3, #1
 80167a4:	d02a      	beq.n	80167fc <tcp_close_shutdown+0x160>
 80167a6:	e03f      	b.n	8016828 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	8adb      	ldrh	r3, [r3, #22]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d021      	beq.n	80167f4 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80167b0:	4b29      	ldr	r3, [pc, #164]	@ (8016858 <tcp_close_shutdown+0x1bc>)
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d105      	bne.n	80167c6 <tcp_close_shutdown+0x12a>
 80167ba:	4b27      	ldr	r3, [pc, #156]	@ (8016858 <tcp_close_shutdown+0x1bc>)
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	68db      	ldr	r3, [r3, #12]
 80167c0:	4a25      	ldr	r2, [pc, #148]	@ (8016858 <tcp_close_shutdown+0x1bc>)
 80167c2:	6013      	str	r3, [r2, #0]
 80167c4:	e013      	b.n	80167ee <tcp_close_shutdown+0x152>
 80167c6:	4b24      	ldr	r3, [pc, #144]	@ (8016858 <tcp_close_shutdown+0x1bc>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	60bb      	str	r3, [r7, #8]
 80167cc:	e00c      	b.n	80167e8 <tcp_close_shutdown+0x14c>
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	687a      	ldr	r2, [r7, #4]
 80167d4:	429a      	cmp	r2, r3
 80167d6:	d104      	bne.n	80167e2 <tcp_close_shutdown+0x146>
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	68da      	ldr	r2, [r3, #12]
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	60da      	str	r2, [r3, #12]
 80167e0:	e005      	b.n	80167ee <tcp_close_shutdown+0x152>
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	60bb      	str	r3, [r7, #8]
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d1ef      	bne.n	80167ce <tcp_close_shutdown+0x132>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2200      	movs	r2, #0
 80167f2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f7ff fe9f 	bl	8016538 <tcp_free>
      break;
 80167fa:	e01a      	b.n	8016832 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	f7ff ff13 	bl	8016628 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016802:	6879      	ldr	r1, [r7, #4]
 8016804:	4815      	ldr	r0, [pc, #84]	@ (801685c <tcp_close_shutdown+0x1c0>)
 8016806:	f001 fb7f 	bl	8017f08 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f7ff feb0 	bl	8016570 <tcp_free_listen>
      break;
 8016810:	e00f      	b.n	8016832 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016812:	6879      	ldr	r1, [r7, #4]
 8016814:	480d      	ldr	r0, [pc, #52]	@ (801684c <tcp_close_shutdown+0x1b0>)
 8016816:	f001 fb77 	bl	8017f08 <tcp_pcb_remove>
 801681a:	4b0d      	ldr	r3, [pc, #52]	@ (8016850 <tcp_close_shutdown+0x1b4>)
 801681c:	2201      	movs	r2, #1
 801681e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016820:	6878      	ldr	r0, [r7, #4]
 8016822:	f7ff fe89 	bl	8016538 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016826:	e004      	b.n	8016832 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f000 f819 	bl	8016860 <tcp_close_shutdown_fin>
 801682e:	4603      	mov	r3, r0
 8016830:	e000      	b.n	8016834 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8016832:	2300      	movs	r3, #0
}
 8016834:	4618      	mov	r0, r3
 8016836:	3710      	adds	r7, #16
 8016838:	46bd      	mov	sp, r7
 801683a:	bdb0      	pop	{r4, r5, r7, pc}
 801683c:	080219e8 	.word	0x080219e8
 8016840:	08021aec 	.word	0x08021aec
 8016844:	08021a5c 	.word	0x08021a5c
 8016848:	08021b0c 	.word	0x08021b0c
 801684c:	2000f9bc 	.word	0x2000f9bc
 8016850:	2000f9c4 	.word	0x2000f9c4
 8016854:	2000f9fc 	.word	0x2000f9fc
 8016858:	2000f9b4 	.word	0x2000f9b4
 801685c:	2000f9b8 	.word	0x2000f9b8

08016860 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d106      	bne.n	801687c <tcp_close_shutdown_fin+0x1c>
 801686e:	4b2e      	ldr	r3, [pc, #184]	@ (8016928 <tcp_close_shutdown_fin+0xc8>)
 8016870:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8016874:	492d      	ldr	r1, [pc, #180]	@ (801692c <tcp_close_shutdown_fin+0xcc>)
 8016876:	482e      	ldr	r0, [pc, #184]	@ (8016930 <tcp_close_shutdown_fin+0xd0>)
 8016878:	f007 f9c2 	bl	801dc00 <iprintf>

  switch (pcb->state) {
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	7d1b      	ldrb	r3, [r3, #20]
 8016880:	2b07      	cmp	r3, #7
 8016882:	d020      	beq.n	80168c6 <tcp_close_shutdown_fin+0x66>
 8016884:	2b07      	cmp	r3, #7
 8016886:	dc2b      	bgt.n	80168e0 <tcp_close_shutdown_fin+0x80>
 8016888:	2b03      	cmp	r3, #3
 801688a:	d002      	beq.n	8016892 <tcp_close_shutdown_fin+0x32>
 801688c:	2b04      	cmp	r3, #4
 801688e:	d00d      	beq.n	80168ac <tcp_close_shutdown_fin+0x4c>
 8016890:	e026      	b.n	80168e0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f004 fe12 	bl	801b4bc <tcp_send_fin>
 8016898:	4603      	mov	r3, r0
 801689a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801689c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d11f      	bne.n	80168e4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2205      	movs	r2, #5
 80168a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80168aa:	e01b      	b.n	80168e4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f004 fe05 	bl	801b4bc <tcp_send_fin>
 80168b2:	4603      	mov	r3, r0
 80168b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80168b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d114      	bne.n	80168e8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	2205      	movs	r2, #5
 80168c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80168c4:	e010      	b.n	80168e8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80168c6:	6878      	ldr	r0, [r7, #4]
 80168c8:	f004 fdf8 	bl	801b4bc <tcp_send_fin>
 80168cc:	4603      	mov	r3, r0
 80168ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80168d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d109      	bne.n	80168ec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2209      	movs	r2, #9
 80168dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80168de:	e005      	b.n	80168ec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80168e0:	2300      	movs	r3, #0
 80168e2:	e01c      	b.n	801691e <tcp_close_shutdown_fin+0xbe>
      break;
 80168e4:	bf00      	nop
 80168e6:	e002      	b.n	80168ee <tcp_close_shutdown_fin+0x8e>
      break;
 80168e8:	bf00      	nop
 80168ea:	e000      	b.n	80168ee <tcp_close_shutdown_fin+0x8e>
      break;
 80168ec:	bf00      	nop
  }

  if (err == ERR_OK) {
 80168ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d103      	bne.n	80168fe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80168f6:	6878      	ldr	r0, [r7, #4]
 80168f8:	f004 ff1e 	bl	801b738 <tcp_output>
 80168fc:	e00d      	b.n	801691a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80168fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016906:	d108      	bne.n	801691a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	8b5b      	ldrh	r3, [r3, #26]
 801690c:	f043 0308 	orr.w	r3, r3, #8
 8016910:	b29a      	uxth	r2, r3
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016916:	2300      	movs	r3, #0
 8016918:	e001      	b.n	801691e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801691a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801691e:	4618      	mov	r0, r3
 8016920:	3710      	adds	r7, #16
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	080219e8 	.word	0x080219e8
 801692c:	08021ac8 	.word	0x08021ac8
 8016930:	08021a5c 	.word	0x08021a5c

08016934 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b082      	sub	sp, #8
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d109      	bne.n	8016956 <tcp_close+0x22>
 8016942:	4b0f      	ldr	r3, [pc, #60]	@ (8016980 <tcp_close+0x4c>)
 8016944:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8016948:	490e      	ldr	r1, [pc, #56]	@ (8016984 <tcp_close+0x50>)
 801694a:	480f      	ldr	r0, [pc, #60]	@ (8016988 <tcp_close+0x54>)
 801694c:	f007 f958 	bl	801dc00 <iprintf>
 8016950:	f06f 030f 	mvn.w	r3, #15
 8016954:	e00f      	b.n	8016976 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	7d1b      	ldrb	r3, [r3, #20]
 801695a:	2b01      	cmp	r3, #1
 801695c:	d006      	beq.n	801696c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	8b5b      	ldrh	r3, [r3, #26]
 8016962:	f043 0310 	orr.w	r3, r3, #16
 8016966:	b29a      	uxth	r2, r3
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801696c:	2101      	movs	r1, #1
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f7ff fe94 	bl	801669c <tcp_close_shutdown>
 8016974:	4603      	mov	r3, r0
}
 8016976:	4618      	mov	r0, r3
 8016978:	3708      	adds	r7, #8
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}
 801697e:	bf00      	nop
 8016980:	080219e8 	.word	0x080219e8
 8016984:	08021b28 	.word	0x08021b28
 8016988:	08021a5c 	.word	0x08021a5c

0801698c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b084      	sub	sp, #16
 8016990:	af00      	add	r7, sp, #0
 8016992:	60f8      	str	r0, [r7, #12]
 8016994:	60b9      	str	r1, [r7, #8]
 8016996:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d109      	bne.n	80169b2 <tcp_shutdown+0x26>
 801699e:	4b26      	ldr	r3, [pc, #152]	@ (8016a38 <tcp_shutdown+0xac>)
 80169a0:	f240 2207 	movw	r2, #519	@ 0x207
 80169a4:	4925      	ldr	r1, [pc, #148]	@ (8016a3c <tcp_shutdown+0xb0>)
 80169a6:	4826      	ldr	r0, [pc, #152]	@ (8016a40 <tcp_shutdown+0xb4>)
 80169a8:	f007 f92a 	bl	801dc00 <iprintf>
 80169ac:	f06f 030f 	mvn.w	r3, #15
 80169b0:	e03d      	b.n	8016a2e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	7d1b      	ldrb	r3, [r3, #20]
 80169b6:	2b01      	cmp	r3, #1
 80169b8:	d102      	bne.n	80169c0 <tcp_shutdown+0x34>
    return ERR_CONN;
 80169ba:	f06f 030a 	mvn.w	r3, #10
 80169be:	e036      	b.n	8016a2e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d01b      	beq.n	80169fe <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	8b5b      	ldrh	r3, [r3, #26]
 80169ca:	f043 0310 	orr.w	r3, r3, #16
 80169ce:	b29a      	uxth	r2, r3
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d005      	beq.n	80169e6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80169da:	2101      	movs	r1, #1
 80169dc:	68f8      	ldr	r0, [r7, #12]
 80169de:	f7ff fe5d 	bl	801669c <tcp_close_shutdown>
 80169e2:	4603      	mov	r3, r0
 80169e4:	e023      	b.n	8016a2e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d007      	beq.n	80169fe <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80169f2:	4618      	mov	r0, r3
 80169f4:	f7ff fae4 	bl	8015fc0 <pbuf_free>
      pcb->refused_data = NULL;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	2200      	movs	r2, #0
 80169fc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d013      	beq.n	8016a2c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	7d1b      	ldrb	r3, [r3, #20]
 8016a08:	2b04      	cmp	r3, #4
 8016a0a:	dc02      	bgt.n	8016a12 <tcp_shutdown+0x86>
 8016a0c:	2b03      	cmp	r3, #3
 8016a0e:	da02      	bge.n	8016a16 <tcp_shutdown+0x8a>
 8016a10:	e009      	b.n	8016a26 <tcp_shutdown+0x9a>
 8016a12:	2b07      	cmp	r3, #7
 8016a14:	d107      	bne.n	8016a26 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	b2db      	uxtb	r3, r3
 8016a1a:	4619      	mov	r1, r3
 8016a1c:	68f8      	ldr	r0, [r7, #12]
 8016a1e:	f7ff fe3d 	bl	801669c <tcp_close_shutdown>
 8016a22:	4603      	mov	r3, r0
 8016a24:	e003      	b.n	8016a2e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8016a26:	f06f 030a 	mvn.w	r3, #10
 8016a2a:	e000      	b.n	8016a2e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8016a2c:	2300      	movs	r3, #0
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3710      	adds	r7, #16
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	080219e8 	.word	0x080219e8
 8016a3c:	08021b40 	.word	0x08021b40
 8016a40:	08021a5c 	.word	0x08021a5c

08016a44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b08e      	sub	sp, #56	@ 0x38
 8016a48:	af04      	add	r7, sp, #16
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d107      	bne.n	8016a64 <tcp_abandon+0x20>
 8016a54:	4b52      	ldr	r3, [pc, #328]	@ (8016ba0 <tcp_abandon+0x15c>)
 8016a56:	f240 223d 	movw	r2, #573	@ 0x23d
 8016a5a:	4952      	ldr	r1, [pc, #328]	@ (8016ba4 <tcp_abandon+0x160>)
 8016a5c:	4852      	ldr	r0, [pc, #328]	@ (8016ba8 <tcp_abandon+0x164>)
 8016a5e:	f007 f8cf 	bl	801dc00 <iprintf>
 8016a62:	e099      	b.n	8016b98 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	7d1b      	ldrb	r3, [r3, #20]
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	d106      	bne.n	8016a7a <tcp_abandon+0x36>
 8016a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8016ba0 <tcp_abandon+0x15c>)
 8016a6e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8016a72:	494e      	ldr	r1, [pc, #312]	@ (8016bac <tcp_abandon+0x168>)
 8016a74:	484c      	ldr	r0, [pc, #304]	@ (8016ba8 <tcp_abandon+0x164>)
 8016a76:	f007 f8c3 	bl	801dc00 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	7d1b      	ldrb	r3, [r3, #20]
 8016a7e:	2b0a      	cmp	r3, #10
 8016a80:	d107      	bne.n	8016a92 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016a82:	6879      	ldr	r1, [r7, #4]
 8016a84:	484a      	ldr	r0, [pc, #296]	@ (8016bb0 <tcp_abandon+0x16c>)
 8016a86:	f001 fa3f 	bl	8017f08 <tcp_pcb_remove>
    tcp_free(pcb);
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f7ff fd54 	bl	8016538 <tcp_free>
 8016a90:	e082      	b.n	8016b98 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016a92:	2300      	movs	r3, #0
 8016a94:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8016a96:	2300      	movs	r3, #0
 8016a98:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016a9e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016aa4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016aac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	691b      	ldr	r3, [r3, #16]
 8016ab2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	7d1b      	ldrb	r3, [r3, #20]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d126      	bne.n	8016b0a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	8adb      	ldrh	r3, [r3, #22]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d02e      	beq.n	8016b22 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8016bb4 <tcp_abandon+0x170>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	687a      	ldr	r2, [r7, #4]
 8016aca:	429a      	cmp	r2, r3
 8016acc:	d105      	bne.n	8016ada <tcp_abandon+0x96>
 8016ace:	4b39      	ldr	r3, [pc, #228]	@ (8016bb4 <tcp_abandon+0x170>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	68db      	ldr	r3, [r3, #12]
 8016ad4:	4a37      	ldr	r2, [pc, #220]	@ (8016bb4 <tcp_abandon+0x170>)
 8016ad6:	6013      	str	r3, [r2, #0]
 8016ad8:	e013      	b.n	8016b02 <tcp_abandon+0xbe>
 8016ada:	4b36      	ldr	r3, [pc, #216]	@ (8016bb4 <tcp_abandon+0x170>)
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	61fb      	str	r3, [r7, #28]
 8016ae0:	e00c      	b.n	8016afc <tcp_abandon+0xb8>
 8016ae2:	69fb      	ldr	r3, [r7, #28]
 8016ae4:	68db      	ldr	r3, [r3, #12]
 8016ae6:	687a      	ldr	r2, [r7, #4]
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	d104      	bne.n	8016af6 <tcp_abandon+0xb2>
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	68da      	ldr	r2, [r3, #12]
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	60da      	str	r2, [r3, #12]
 8016af4:	e005      	b.n	8016b02 <tcp_abandon+0xbe>
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	68db      	ldr	r3, [r3, #12]
 8016afa:	61fb      	str	r3, [r7, #28]
 8016afc:	69fb      	ldr	r3, [r7, #28]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d1ef      	bne.n	8016ae2 <tcp_abandon+0x9e>
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2200      	movs	r2, #0
 8016b06:	60da      	str	r2, [r3, #12]
 8016b08:	e00b      	b.n	8016b22 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8016b0a:	683b      	ldr	r3, [r7, #0]
 8016b0c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	8adb      	ldrh	r3, [r3, #22]
 8016b12:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016b14:	6879      	ldr	r1, [r7, #4]
 8016b16:	4828      	ldr	r0, [pc, #160]	@ (8016bb8 <tcp_abandon+0x174>)
 8016b18:	f001 f9f6 	bl	8017f08 <tcp_pcb_remove>
 8016b1c:	4b27      	ldr	r3, [pc, #156]	@ (8016bbc <tcp_abandon+0x178>)
 8016b1e:	2201      	movs	r2, #1
 8016b20:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d004      	beq.n	8016b34 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f000 feca 	bl	80178c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d004      	beq.n	8016b46 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b40:	4618      	mov	r0, r3
 8016b42:	f000 fec1 	bl	80178c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d004      	beq.n	8016b58 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b52:	4618      	mov	r0, r3
 8016b54:	f000 feb8 	bl	80178c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8016b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d00e      	beq.n	8016b7c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8016b5e:	6879      	ldr	r1, [r7, #4]
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	3304      	adds	r3, #4
 8016b64:	687a      	ldr	r2, [r7, #4]
 8016b66:	8b12      	ldrh	r2, [r2, #24]
 8016b68:	9202      	str	r2, [sp, #8]
 8016b6a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016b6c:	9201      	str	r2, [sp, #4]
 8016b6e:	9300      	str	r3, [sp, #0]
 8016b70:	460b      	mov	r3, r1
 8016b72:	697a      	ldr	r2, [r7, #20]
 8016b74:	69b9      	ldr	r1, [r7, #24]
 8016b76:	6878      	ldr	r0, [r7, #4]
 8016b78:	f005 fb92 	bl	801c2a0 <tcp_rst>
    }
    last_state = pcb->state;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	7d1b      	ldrb	r3, [r3, #20]
 8016b80:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f7ff fcd8 	bl	8016538 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d004      	beq.n	8016b98 <tcp_abandon+0x154>
 8016b8e:	693b      	ldr	r3, [r7, #16]
 8016b90:	f06f 010c 	mvn.w	r1, #12
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	4798      	blx	r3
  }
}
 8016b98:	3728      	adds	r7, #40	@ 0x28
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	bd80      	pop	{r7, pc}
 8016b9e:	bf00      	nop
 8016ba0:	080219e8 	.word	0x080219e8
 8016ba4:	08021b5c 	.word	0x08021b5c
 8016ba8:	08021a5c 	.word	0x08021a5c
 8016bac:	08021b78 	.word	0x08021b78
 8016bb0:	2000f9c0 	.word	0x2000f9c0
 8016bb4:	2000f9b4 	.word	0x2000f9b4
 8016bb8:	2000f9bc 	.word	0x2000f9bc
 8016bbc:	2000f9c4 	.word	0x2000f9c4

08016bc0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b082      	sub	sp, #8
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8016bc8:	2101      	movs	r1, #1
 8016bca:	6878      	ldr	r0, [r7, #4]
 8016bcc:	f7ff ff3a 	bl	8016a44 <tcp_abandon>
}
 8016bd0:	bf00      	nop
 8016bd2:	3708      	adds	r7, #8
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b088      	sub	sp, #32
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	60f8      	str	r0, [r7, #12]
 8016be0:	60b9      	str	r1, [r7, #8]
 8016be2:	4613      	mov	r3, r2
 8016be4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8016be6:	2304      	movs	r3, #4
 8016be8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016bea:	68bb      	ldr	r3, [r7, #8]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d101      	bne.n	8016bf4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8016cec <tcp_bind+0x114>)
 8016bf2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d109      	bne.n	8016c0e <tcp_bind+0x36>
 8016bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8016cf0 <tcp_bind+0x118>)
 8016bfc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8016c00:	493c      	ldr	r1, [pc, #240]	@ (8016cf4 <tcp_bind+0x11c>)
 8016c02:	483d      	ldr	r0, [pc, #244]	@ (8016cf8 <tcp_bind+0x120>)
 8016c04:	f006 fffc 	bl	801dc00 <iprintf>
 8016c08:	f06f 030f 	mvn.w	r3, #15
 8016c0c:	e06a      	b.n	8016ce4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	7d1b      	ldrb	r3, [r3, #20]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d009      	beq.n	8016c2a <tcp_bind+0x52>
 8016c16:	4b36      	ldr	r3, [pc, #216]	@ (8016cf0 <tcp_bind+0x118>)
 8016c18:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016c1c:	4937      	ldr	r1, [pc, #220]	@ (8016cfc <tcp_bind+0x124>)
 8016c1e:	4836      	ldr	r0, [pc, #216]	@ (8016cf8 <tcp_bind+0x120>)
 8016c20:	f006 ffee 	bl	801dc00 <iprintf>
 8016c24:	f06f 0305 	mvn.w	r3, #5
 8016c28:	e05c      	b.n	8016ce4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8016c2a:	88fb      	ldrh	r3, [r7, #6]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d109      	bne.n	8016c44 <tcp_bind+0x6c>
    port = tcp_new_port();
 8016c30:	f000 f9e0 	bl	8016ff4 <tcp_new_port>
 8016c34:	4603      	mov	r3, r0
 8016c36:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016c38:	88fb      	ldrh	r3, [r7, #6]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d135      	bne.n	8016caa <tcp_bind+0xd2>
      return ERR_BUF;
 8016c3e:	f06f 0301 	mvn.w	r3, #1
 8016c42:	e04f      	b.n	8016ce4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8016c44:	2300      	movs	r3, #0
 8016c46:	61fb      	str	r3, [r7, #28]
 8016c48:	e02b      	b.n	8016ca2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016c4a:	4a2d      	ldr	r2, [pc, #180]	@ (8016d00 <tcp_bind+0x128>)
 8016c4c:	69fb      	ldr	r3, [r7, #28]
 8016c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	61bb      	str	r3, [r7, #24]
 8016c56:	e01e      	b.n	8016c96 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8016c58:	69bb      	ldr	r3, [r7, #24]
 8016c5a:	8adb      	ldrh	r3, [r3, #22]
 8016c5c:	88fa      	ldrh	r2, [r7, #6]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d116      	bne.n	8016c90 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8016c62:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d010      	beq.n	8016c8a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8016c68:	69bb      	ldr	r3, [r7, #24]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d00c      	beq.n	8016c8a <tcp_bind+0xb2>
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d009      	beq.n	8016c8a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8016c76:	68bb      	ldr	r3, [r7, #8]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d005      	beq.n	8016c8a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8016c7e:	69bb      	ldr	r3, [r7, #24]
 8016c80:	681a      	ldr	r2, [r3, #0]
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d102      	bne.n	8016c90 <tcp_bind+0xb8>
              return ERR_USE;
 8016c8a:	f06f 0307 	mvn.w	r3, #7
 8016c8e:	e029      	b.n	8016ce4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8016c90:	69bb      	ldr	r3, [r7, #24]
 8016c92:	68db      	ldr	r3, [r3, #12]
 8016c94:	61bb      	str	r3, [r7, #24]
 8016c96:	69bb      	ldr	r3, [r7, #24]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d1dd      	bne.n	8016c58 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8016c9c:	69fb      	ldr	r3, [r7, #28]
 8016c9e:	3301      	adds	r3, #1
 8016ca0:	61fb      	str	r3, [r7, #28]
 8016ca2:	69fa      	ldr	r2, [r7, #28]
 8016ca4:	697b      	ldr	r3, [r7, #20]
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	dbcf      	blt.n	8016c4a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d00c      	beq.n	8016cca <tcp_bind+0xf2>
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d008      	beq.n	8016cca <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8016cb8:	68bb      	ldr	r3, [r7, #8]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d002      	beq.n	8016cc4 <tcp_bind+0xec>
 8016cbe:	68bb      	ldr	r3, [r7, #8]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	e000      	b.n	8016cc6 <tcp_bind+0xee>
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	68fa      	ldr	r2, [r7, #12]
 8016cc8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	88fa      	ldrh	r2, [r7, #6]
 8016cce:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8016cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8016d04 <tcp_bind+0x12c>)
 8016cd2:	681a      	ldr	r2, [r3, #0]
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	60da      	str	r2, [r3, #12]
 8016cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8016d04 <tcp_bind+0x12c>)
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	6013      	str	r3, [r2, #0]
 8016cde:	f005 fca1 	bl	801c624 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8016ce2:	2300      	movs	r3, #0
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3720      	adds	r7, #32
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}
 8016cec:	08023abc 	.word	0x08023abc
 8016cf0:	080219e8 	.word	0x080219e8
 8016cf4:	08021bac 	.word	0x08021bac
 8016cf8:	08021a5c 	.word	0x08021a5c
 8016cfc:	08021bc4 	.word	0x08021bc4
 8016d00:	08023bbc 	.word	0x08023bbc
 8016d04:	2000f9b4 	.word	0x2000f9b4

08016d08 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b084      	sub	sp, #16
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	4613      	mov	r3, r2
 8016d14:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8016d16:	68bb      	ldr	r3, [r7, #8]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d106      	bne.n	8016d2a <tcp_accept_null+0x22>
 8016d1c:	4b07      	ldr	r3, [pc, #28]	@ (8016d3c <tcp_accept_null+0x34>)
 8016d1e:	f240 320f 	movw	r2, #783	@ 0x30f
 8016d22:	4907      	ldr	r1, [pc, #28]	@ (8016d40 <tcp_accept_null+0x38>)
 8016d24:	4807      	ldr	r0, [pc, #28]	@ (8016d44 <tcp_accept_null+0x3c>)
 8016d26:	f006 ff6b 	bl	801dc00 <iprintf>

  tcp_abort(pcb);
 8016d2a:	68b8      	ldr	r0, [r7, #8]
 8016d2c:	f7ff ff48 	bl	8016bc0 <tcp_abort>

  return ERR_ABRT;
 8016d30:	f06f 030c 	mvn.w	r3, #12
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3710      	adds	r7, #16
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	bd80      	pop	{r7, pc}
 8016d3c:	080219e8 	.word	0x080219e8
 8016d40:	08021bec 	.word	0x08021bec
 8016d44:	08021a5c 	.word	0x08021a5c

08016d48 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b088      	sub	sp, #32
 8016d4c:	af00      	add	r7, sp, #0
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	460b      	mov	r3, r1
 8016d52:	607a      	str	r2, [r7, #4]
 8016d54:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8016d56:	2300      	movs	r3, #0
 8016d58:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d109      	bne.n	8016d74 <tcp_listen_with_backlog_and_err+0x2c>
 8016d60:	4b47      	ldr	r3, [pc, #284]	@ (8016e80 <tcp_listen_with_backlog_and_err+0x138>)
 8016d62:	f240 3259 	movw	r2, #857	@ 0x359
 8016d66:	4947      	ldr	r1, [pc, #284]	@ (8016e84 <tcp_listen_with_backlog_and_err+0x13c>)
 8016d68:	4847      	ldr	r0, [pc, #284]	@ (8016e88 <tcp_listen_with_backlog_and_err+0x140>)
 8016d6a:	f006 ff49 	bl	801dc00 <iprintf>
 8016d6e:	23f0      	movs	r3, #240	@ 0xf0
 8016d70:	76fb      	strb	r3, [r7, #27]
 8016d72:	e079      	b.n	8016e68 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	7d1b      	ldrb	r3, [r3, #20]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d009      	beq.n	8016d90 <tcp_listen_with_backlog_and_err+0x48>
 8016d7c:	4b40      	ldr	r3, [pc, #256]	@ (8016e80 <tcp_listen_with_backlog_and_err+0x138>)
 8016d7e:	f240 325a 	movw	r2, #858	@ 0x35a
 8016d82:	4942      	ldr	r1, [pc, #264]	@ (8016e8c <tcp_listen_with_backlog_and_err+0x144>)
 8016d84:	4840      	ldr	r0, [pc, #256]	@ (8016e88 <tcp_listen_with_backlog_and_err+0x140>)
 8016d86:	f006 ff3b 	bl	801dc00 <iprintf>
 8016d8a:	23f1      	movs	r3, #241	@ 0xf1
 8016d8c:	76fb      	strb	r3, [r7, #27]
 8016d8e:	e06b      	b.n	8016e68 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	7d1b      	ldrb	r3, [r3, #20]
 8016d94:	2b01      	cmp	r3, #1
 8016d96:	d104      	bne.n	8016da2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8016d9c:	23f7      	movs	r3, #247	@ 0xf7
 8016d9e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016da0:	e062      	b.n	8016e68 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8016da2:	2002      	movs	r0, #2
 8016da4:	f7fe f99e 	bl	80150e4 <memp_malloc>
 8016da8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d102      	bne.n	8016db6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8016db0:	23ff      	movs	r3, #255	@ 0xff
 8016db2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8016db4:	e058      	b.n	8016e68 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	691a      	ldr	r2, [r3, #16]
 8016dba:	69fb      	ldr	r3, [r7, #28]
 8016dbc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	8ada      	ldrh	r2, [r3, #22]
 8016dc2:	69fb      	ldr	r3, [r7, #28]
 8016dc4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8016dc6:	69fb      	ldr	r3, [r7, #28]
 8016dc8:	2201      	movs	r2, #1
 8016dca:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	7d5a      	ldrb	r2, [r3, #21]
 8016dd0:	69fb      	ldr	r3, [r7, #28]
 8016dd2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	7a5a      	ldrb	r2, [r3, #9]
 8016dd8:	69fb      	ldr	r3, [r7, #28]
 8016dda:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8016ddc:	69fb      	ldr	r3, [r7, #28]
 8016dde:	2200      	movs	r2, #0
 8016de0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	7ada      	ldrb	r2, [r3, #11]
 8016de6:	69fb      	ldr	r3, [r7, #28]
 8016de8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	7a9a      	ldrb	r2, [r3, #10]
 8016dee:	69fb      	ldr	r3, [r7, #28]
 8016df0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	69fb      	ldr	r3, [r7, #28]
 8016df8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	8adb      	ldrh	r3, [r3, #22]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d021      	beq.n	8016e46 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8016e02:	4b23      	ldr	r3, [pc, #140]	@ (8016e90 <tcp_listen_with_backlog_and_err+0x148>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	68fa      	ldr	r2, [r7, #12]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d105      	bne.n	8016e18 <tcp_listen_with_backlog_and_err+0xd0>
 8016e0c:	4b20      	ldr	r3, [pc, #128]	@ (8016e90 <tcp_listen_with_backlog_and_err+0x148>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	68db      	ldr	r3, [r3, #12]
 8016e12:	4a1f      	ldr	r2, [pc, #124]	@ (8016e90 <tcp_listen_with_backlog_and_err+0x148>)
 8016e14:	6013      	str	r3, [r2, #0]
 8016e16:	e013      	b.n	8016e40 <tcp_listen_with_backlog_and_err+0xf8>
 8016e18:	4b1d      	ldr	r3, [pc, #116]	@ (8016e90 <tcp_listen_with_backlog_and_err+0x148>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	617b      	str	r3, [r7, #20]
 8016e1e:	e00c      	b.n	8016e3a <tcp_listen_with_backlog_and_err+0xf2>
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	68db      	ldr	r3, [r3, #12]
 8016e24:	68fa      	ldr	r2, [r7, #12]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d104      	bne.n	8016e34 <tcp_listen_with_backlog_and_err+0xec>
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	68da      	ldr	r2, [r3, #12]
 8016e2e:	697b      	ldr	r3, [r7, #20]
 8016e30:	60da      	str	r2, [r3, #12]
 8016e32:	e005      	b.n	8016e40 <tcp_listen_with_backlog_and_err+0xf8>
 8016e34:	697b      	ldr	r3, [r7, #20]
 8016e36:	68db      	ldr	r3, [r3, #12]
 8016e38:	617b      	str	r3, [r7, #20]
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d1ef      	bne.n	8016e20 <tcp_listen_with_backlog_and_err+0xd8>
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	2200      	movs	r2, #0
 8016e44:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8016e46:	68f8      	ldr	r0, [r7, #12]
 8016e48:	f7ff fb76 	bl	8016538 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8016e4c:	69fb      	ldr	r3, [r7, #28]
 8016e4e:	4a11      	ldr	r2, [pc, #68]	@ (8016e94 <tcp_listen_with_backlog_and_err+0x14c>)
 8016e50:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8016e52:	4b11      	ldr	r3, [pc, #68]	@ (8016e98 <tcp_listen_with_backlog_and_err+0x150>)
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	69fb      	ldr	r3, [r7, #28]
 8016e58:	60da      	str	r2, [r3, #12]
 8016e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8016e98 <tcp_listen_with_backlog_and_err+0x150>)
 8016e5c:	69fb      	ldr	r3, [r7, #28]
 8016e5e:	6013      	str	r3, [r2, #0]
 8016e60:	f005 fbe0 	bl	801c624 <tcp_timer_needed>
  res = ERR_OK;
 8016e64:	2300      	movs	r3, #0
 8016e66:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d002      	beq.n	8016e74 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	7efa      	ldrb	r2, [r7, #27]
 8016e72:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8016e74:	69fb      	ldr	r3, [r7, #28]
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	3720      	adds	r7, #32
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}
 8016e7e:	bf00      	nop
 8016e80:	080219e8 	.word	0x080219e8
 8016e84:	08021c0c 	.word	0x08021c0c
 8016e88:	08021a5c 	.word	0x08021a5c
 8016e8c:	08021c3c 	.word	0x08021c3c
 8016e90:	2000f9b4 	.word	0x2000f9b4
 8016e94:	08016d09 	.word	0x08016d09
 8016e98:	2000f9b8 	.word	0x2000f9b8

08016e9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b084      	sub	sp, #16
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d106      	bne.n	8016eb8 <tcp_update_rcv_ann_wnd+0x1c>
 8016eaa:	4b25      	ldr	r3, [pc, #148]	@ (8016f40 <tcp_update_rcv_ann_wnd+0xa4>)
 8016eac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8016eb0:	4924      	ldr	r1, [pc, #144]	@ (8016f44 <tcp_update_rcv_ann_wnd+0xa8>)
 8016eb2:	4825      	ldr	r0, [pc, #148]	@ (8016f48 <tcp_update_rcv_ann_wnd+0xac>)
 8016eb4:	f006 fea4 	bl	801dc00 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ebc:	687a      	ldr	r2, [r7, #4]
 8016ebe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8016ec0:	4413      	add	r3, r2
 8016ec2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8016ecc:	f640 3168 	movw	r1, #2920	@ 0xb68
 8016ed0:	428a      	cmp	r2, r1
 8016ed2:	bf28      	it	cs
 8016ed4:	460a      	movcs	r2, r1
 8016ed6:	b292      	uxth	r2, r2
 8016ed8:	4413      	add	r3, r2
 8016eda:	68fa      	ldr	r2, [r7, #12]
 8016edc:	1ad3      	subs	r3, r2, r3
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	db08      	blt.n	8016ef4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016eee:	68fa      	ldr	r2, [r7, #12]
 8016ef0:	1ad3      	subs	r3, r2, r3
 8016ef2:	e020      	b.n	8016f36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016efc:	1ad3      	subs	r3, r2, r3
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	dd03      	ble.n	8016f0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2200      	movs	r2, #0
 8016f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f08:	e014      	b.n	8016f34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f12:	1ad3      	subs	r3, r2, r3
 8016f14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8016f16:	68bb      	ldr	r3, [r7, #8]
 8016f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016f1c:	d306      	bcc.n	8016f2c <tcp_update_rcv_ann_wnd+0x90>
 8016f1e:	4b08      	ldr	r3, [pc, #32]	@ (8016f40 <tcp_update_rcv_ann_wnd+0xa4>)
 8016f20:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8016f24:	4909      	ldr	r1, [pc, #36]	@ (8016f4c <tcp_update_rcv_ann_wnd+0xb0>)
 8016f26:	4808      	ldr	r0, [pc, #32]	@ (8016f48 <tcp_update_rcv_ann_wnd+0xac>)
 8016f28:	f006 fe6a 	bl	801dc00 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	b29a      	uxth	r2, r3
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8016f34:	2300      	movs	r3, #0
  }
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3710      	adds	r7, #16
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
 8016f3e:	bf00      	nop
 8016f40:	080219e8 	.word	0x080219e8
 8016f44:	08021c74 	.word	0x08021c74
 8016f48:	08021a5c 	.word	0x08021a5c
 8016f4c:	08021c98 	.word	0x08021c98

08016f50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b084      	sub	sp, #16
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	460b      	mov	r3, r1
 8016f5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d107      	bne.n	8016f72 <tcp_recved+0x22>
 8016f62:	4b20      	ldr	r3, [pc, #128]	@ (8016fe4 <tcp_recved+0x94>)
 8016f64:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8016f68:	491f      	ldr	r1, [pc, #124]	@ (8016fe8 <tcp_recved+0x98>)
 8016f6a:	4820      	ldr	r0, [pc, #128]	@ (8016fec <tcp_recved+0x9c>)
 8016f6c:	f006 fe48 	bl	801dc00 <iprintf>
 8016f70:	e034      	b.n	8016fdc <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	7d1b      	ldrb	r3, [r3, #20]
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	d106      	bne.n	8016f88 <tcp_recved+0x38>
 8016f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8016fe4 <tcp_recved+0x94>)
 8016f7c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8016f80:	491b      	ldr	r1, [pc, #108]	@ (8016ff0 <tcp_recved+0xa0>)
 8016f82:	481a      	ldr	r0, [pc, #104]	@ (8016fec <tcp_recved+0x9c>)
 8016f84:	f006 fe3c 	bl	801dc00 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8016f8c:	887b      	ldrh	r3, [r7, #2]
 8016f8e:	4413      	add	r3, r2
 8016f90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8016f92:	89fb      	ldrh	r3, [r7, #14]
 8016f94:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8016f98:	4293      	cmp	r3, r2
 8016f9a:	d804      	bhi.n	8016fa6 <tcp_recved+0x56>
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016fa0:	89fa      	ldrh	r2, [r7, #14]
 8016fa2:	429a      	cmp	r2, r3
 8016fa4:	d204      	bcs.n	8016fb0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8016fac:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016fae:	e002      	b.n	8016fb6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	89fa      	ldrh	r2, [r7, #14]
 8016fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f7ff ff70 	bl	8016e9c <tcp_update_rcv_ann_wnd>
 8016fbc:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016fbe:	68bb      	ldr	r3, [r7, #8]
 8016fc0:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8016fc4:	4293      	cmp	r3, r2
 8016fc6:	d909      	bls.n	8016fdc <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	8b5b      	ldrh	r3, [r3, #26]
 8016fcc:	f043 0302 	orr.w	r3, r3, #2
 8016fd0:	b29a      	uxth	r2, r3
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016fd6:	6878      	ldr	r0, [r7, #4]
 8016fd8:	f004 fbae 	bl	801b738 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8016fdc:	3710      	adds	r7, #16
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	080219e8 	.word	0x080219e8
 8016fe8:	08021cb4 	.word	0x08021cb4
 8016fec:	08021a5c 	.word	0x08021a5c
 8016ff0:	08021ccc 	.word	0x08021ccc

08016ff4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016ff4:	b480      	push	{r7}
 8016ff6:	b083      	sub	sp, #12
 8016ff8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8016ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8017078 <tcp_new_port+0x84>)
 8017000:	881b      	ldrh	r3, [r3, #0]
 8017002:	3301      	adds	r3, #1
 8017004:	b29a      	uxth	r2, r3
 8017006:	4b1c      	ldr	r3, [pc, #112]	@ (8017078 <tcp_new_port+0x84>)
 8017008:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801700a:	4b1b      	ldr	r3, [pc, #108]	@ (8017078 <tcp_new_port+0x84>)
 801700c:	881b      	ldrh	r3, [r3, #0]
 801700e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017012:	4293      	cmp	r3, r2
 8017014:	d103      	bne.n	801701e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017016:	4b18      	ldr	r3, [pc, #96]	@ (8017078 <tcp_new_port+0x84>)
 8017018:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801701c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801701e:	2300      	movs	r3, #0
 8017020:	71fb      	strb	r3, [r7, #7]
 8017022:	e01e      	b.n	8017062 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017024:	79fb      	ldrb	r3, [r7, #7]
 8017026:	4a15      	ldr	r2, [pc, #84]	@ (801707c <tcp_new_port+0x88>)
 8017028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	603b      	str	r3, [r7, #0]
 8017030:	e011      	b.n	8017056 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	8ada      	ldrh	r2, [r3, #22]
 8017036:	4b10      	ldr	r3, [pc, #64]	@ (8017078 <tcp_new_port+0x84>)
 8017038:	881b      	ldrh	r3, [r3, #0]
 801703a:	429a      	cmp	r2, r3
 801703c:	d108      	bne.n	8017050 <tcp_new_port+0x5c>
        n++;
 801703e:	88bb      	ldrh	r3, [r7, #4]
 8017040:	3301      	adds	r3, #1
 8017042:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017044:	88bb      	ldrh	r3, [r7, #4]
 8017046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801704a:	d3d8      	bcc.n	8016ffe <tcp_new_port+0xa>
          return 0;
 801704c:	2300      	movs	r3, #0
 801704e:	e00d      	b.n	801706c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	68db      	ldr	r3, [r3, #12]
 8017054:	603b      	str	r3, [r7, #0]
 8017056:	683b      	ldr	r3, [r7, #0]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d1ea      	bne.n	8017032 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801705c:	79fb      	ldrb	r3, [r7, #7]
 801705e:	3301      	adds	r3, #1
 8017060:	71fb      	strb	r3, [r7, #7]
 8017062:	79fb      	ldrb	r3, [r7, #7]
 8017064:	2b03      	cmp	r3, #3
 8017066:	d9dd      	bls.n	8017024 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8017068:	4b03      	ldr	r3, [pc, #12]	@ (8017078 <tcp_new_port+0x84>)
 801706a:	881b      	ldrh	r3, [r3, #0]
}
 801706c:	4618      	mov	r0, r3
 801706e:	370c      	adds	r7, #12
 8017070:	46bd      	mov	sp, r7
 8017072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017076:	4770      	bx	lr
 8017078:	20000038 	.word	0x20000038
 801707c:	08023bbc 	.word	0x08023bbc

08017080 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017080:	b5b0      	push	{r4, r5, r7, lr}
 8017082:	b090      	sub	sp, #64	@ 0x40
 8017084:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8017086:	2300      	movs	r3, #0
 8017088:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801708c:	4b95      	ldr	r3, [pc, #596]	@ (80172e4 <tcp_slowtmr+0x264>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	3301      	adds	r3, #1
 8017092:	4a94      	ldr	r2, [pc, #592]	@ (80172e4 <tcp_slowtmr+0x264>)
 8017094:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8017096:	4b94      	ldr	r3, [pc, #592]	@ (80172e8 <tcp_slowtmr+0x268>)
 8017098:	781b      	ldrb	r3, [r3, #0]
 801709a:	3301      	adds	r3, #1
 801709c:	b2da      	uxtb	r2, r3
 801709e:	4b92      	ldr	r3, [pc, #584]	@ (80172e8 <tcp_slowtmr+0x268>)
 80170a0:	701a      	strb	r2, [r3, #0]
 80170a2:	e000      	b.n	80170a6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80170a4:	bf00      	nop
  prev = NULL;
 80170a6:	2300      	movs	r3, #0
 80170a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80170aa:	4b90      	ldr	r3, [pc, #576]	@ (80172ec <tcp_slowtmr+0x26c>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80170b0:	e29d      	b.n	80175ee <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80170b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170b4:	7d1b      	ldrb	r3, [r3, #20]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d106      	bne.n	80170c8 <tcp_slowtmr+0x48>
 80170ba:	4b8d      	ldr	r3, [pc, #564]	@ (80172f0 <tcp_slowtmr+0x270>)
 80170bc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80170c0:	498c      	ldr	r1, [pc, #560]	@ (80172f4 <tcp_slowtmr+0x274>)
 80170c2:	488d      	ldr	r0, [pc, #564]	@ (80172f8 <tcp_slowtmr+0x278>)
 80170c4:	f006 fd9c 	bl	801dc00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80170c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170ca:	7d1b      	ldrb	r3, [r3, #20]
 80170cc:	2b01      	cmp	r3, #1
 80170ce:	d106      	bne.n	80170de <tcp_slowtmr+0x5e>
 80170d0:	4b87      	ldr	r3, [pc, #540]	@ (80172f0 <tcp_slowtmr+0x270>)
 80170d2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80170d6:	4989      	ldr	r1, [pc, #548]	@ (80172fc <tcp_slowtmr+0x27c>)
 80170d8:	4887      	ldr	r0, [pc, #540]	@ (80172f8 <tcp_slowtmr+0x278>)
 80170da:	f006 fd91 	bl	801dc00 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80170de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170e0:	7d1b      	ldrb	r3, [r3, #20]
 80170e2:	2b0a      	cmp	r3, #10
 80170e4:	d106      	bne.n	80170f4 <tcp_slowtmr+0x74>
 80170e6:	4b82      	ldr	r3, [pc, #520]	@ (80172f0 <tcp_slowtmr+0x270>)
 80170e8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80170ec:	4984      	ldr	r1, [pc, #528]	@ (8017300 <tcp_slowtmr+0x280>)
 80170ee:	4882      	ldr	r0, [pc, #520]	@ (80172f8 <tcp_slowtmr+0x278>)
 80170f0:	f006 fd86 	bl	801dc00 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80170f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80170f6:	7f9a      	ldrb	r2, [r3, #30]
 80170f8:	4b7b      	ldr	r3, [pc, #492]	@ (80172e8 <tcp_slowtmr+0x268>)
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d105      	bne.n	801710c <tcp_slowtmr+0x8c>
      prev = pcb;
 8017100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017102:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8017104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017106:	68db      	ldr	r3, [r3, #12]
 8017108:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801710a:	e270      	b.n	80175ee <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801710c:	4b76      	ldr	r3, [pc, #472]	@ (80172e8 <tcp_slowtmr+0x268>)
 801710e:	781a      	ldrb	r2, [r3, #0]
 8017110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017112:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8017114:	2300      	movs	r3, #0
 8017116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801711a:	2300      	movs	r3, #0
 801711c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8017120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017122:	7d1b      	ldrb	r3, [r3, #20]
 8017124:	2b02      	cmp	r3, #2
 8017126:	d10a      	bne.n	801713e <tcp_slowtmr+0xbe>
 8017128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801712a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801712e:	2b05      	cmp	r3, #5
 8017130:	d905      	bls.n	801713e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8017132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017136:	3301      	adds	r3, #1
 8017138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801713c:	e11e      	b.n	801737c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017140:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017144:	2b0b      	cmp	r3, #11
 8017146:	d905      	bls.n	8017154 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8017148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801714c:	3301      	adds	r3, #1
 801714e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017152:	e113      	b.n	801737c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8017154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017156:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801715a:	2b00      	cmp	r3, #0
 801715c:	d075      	beq.n	801724a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801715e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017162:	2b00      	cmp	r3, #0
 8017164:	d006      	beq.n	8017174 <tcp_slowtmr+0xf4>
 8017166:	4b62      	ldr	r3, [pc, #392]	@ (80172f0 <tcp_slowtmr+0x270>)
 8017168:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801716c:	4965      	ldr	r1, [pc, #404]	@ (8017304 <tcp_slowtmr+0x284>)
 801716e:	4862      	ldr	r0, [pc, #392]	@ (80172f8 <tcp_slowtmr+0x278>)
 8017170:	f006 fd46 	bl	801dc00 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017178:	2b00      	cmp	r3, #0
 801717a:	d106      	bne.n	801718a <tcp_slowtmr+0x10a>
 801717c:	4b5c      	ldr	r3, [pc, #368]	@ (80172f0 <tcp_slowtmr+0x270>)
 801717e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8017182:	4961      	ldr	r1, [pc, #388]	@ (8017308 <tcp_slowtmr+0x288>)
 8017184:	485c      	ldr	r0, [pc, #368]	@ (80172f8 <tcp_slowtmr+0x278>)
 8017186:	f006 fd3b 	bl	801dc00 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801718a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801718c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017190:	2b0b      	cmp	r3, #11
 8017192:	d905      	bls.n	80171a0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8017194:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017198:	3301      	adds	r3, #1
 801719a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801719e:	e0ed      	b.n	801737c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80171a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171a2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80171a6:	3b01      	subs	r3, #1
 80171a8:	4a58      	ldr	r2, [pc, #352]	@ (801730c <tcp_slowtmr+0x28c>)
 80171aa:	5cd3      	ldrb	r3, [r2, r3]
 80171ac:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80171ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80171b4:	7c7a      	ldrb	r2, [r7, #17]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d907      	bls.n	80171ca <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80171ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80171c0:	3301      	adds	r3, #1
 80171c2:	b2da      	uxtb	r2, r3
 80171c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171c6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80171ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80171d0:	7c7a      	ldrb	r2, [r7, #17]
 80171d2:	429a      	cmp	r2, r3
 80171d4:	f200 80d2 	bhi.w	801737c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80171d8:	2301      	movs	r3, #1
 80171da:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80171dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d108      	bne.n	80171f8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80171e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80171e8:	f005 f94e 	bl	801c488 <tcp_zero_window_probe>
 80171ec:	4603      	mov	r3, r0
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d014      	beq.n	801721c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80171f2:	2300      	movs	r3, #0
 80171f4:	623b      	str	r3, [r7, #32]
 80171f6:	e011      	b.n	801721c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80171f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80171fe:	4619      	mov	r1, r3
 8017200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017202:	f004 f813 	bl	801b22c <tcp_split_unsent_seg>
 8017206:	4603      	mov	r3, r0
 8017208:	2b00      	cmp	r3, #0
 801720a:	d107      	bne.n	801721c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801720c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801720e:	f004 fa93 	bl	801b738 <tcp_output>
 8017212:	4603      	mov	r3, r0
 8017214:	2b00      	cmp	r3, #0
 8017216:	d101      	bne.n	801721c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8017218:	2300      	movs	r3, #0
 801721a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801721c:	6a3b      	ldr	r3, [r7, #32]
 801721e:	2b00      	cmp	r3, #0
 8017220:	f000 80ac 	beq.w	801737c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8017224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017226:	2200      	movs	r2, #0
 8017228:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801722c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801722e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8017232:	2b06      	cmp	r3, #6
 8017234:	f200 80a2 	bhi.w	801737c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8017238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801723a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801723e:	3301      	adds	r3, #1
 8017240:	b2da      	uxtb	r2, r3
 8017242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017244:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8017248:	e098      	b.n	801737c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801724c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017250:	2b00      	cmp	r3, #0
 8017252:	db0f      	blt.n	8017274 <tcp_slowtmr+0x1f4>
 8017254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017256:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801725a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801725e:	4293      	cmp	r3, r2
 8017260:	d008      	beq.n	8017274 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8017262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017264:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017268:	b29b      	uxth	r3, r3
 801726a:	3301      	adds	r3, #1
 801726c:	b29b      	uxth	r3, r3
 801726e:	b21a      	sxth	r2, r3
 8017270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017272:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8017274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017276:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801727a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801727c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8017280:	429a      	cmp	r2, r3
 8017282:	db7b      	blt.n	801737c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017284:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017286:	f004 fd4b 	bl	801bd20 <tcp_rexmit_rto_prepare>
 801728a:	4603      	mov	r3, r0
 801728c:	2b00      	cmp	r3, #0
 801728e:	d007      	beq.n	80172a0 <tcp_slowtmr+0x220>
 8017290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017294:	2b00      	cmp	r3, #0
 8017296:	d171      	bne.n	801737c <tcp_slowtmr+0x2fc>
 8017298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801729a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801729c:	2b00      	cmp	r3, #0
 801729e:	d06d      	beq.n	801737c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80172a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172a2:	7d1b      	ldrb	r3, [r3, #20]
 80172a4:	2b02      	cmp	r3, #2
 80172a6:	d03a      	beq.n	801731e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80172a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80172ae:	2b0c      	cmp	r3, #12
 80172b0:	bf28      	it	cs
 80172b2:	230c      	movcs	r3, #12
 80172b4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80172b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80172bc:	10db      	asrs	r3, r3, #3
 80172be:	b21b      	sxth	r3, r3
 80172c0:	461a      	mov	r2, r3
 80172c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80172c8:	4413      	add	r3, r2
 80172ca:	7efa      	ldrb	r2, [r7, #27]
 80172cc:	4910      	ldr	r1, [pc, #64]	@ (8017310 <tcp_slowtmr+0x290>)
 80172ce:	5c8a      	ldrb	r2, [r1, r2]
 80172d0:	4093      	lsls	r3, r2
 80172d2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80172d4:	697b      	ldr	r3, [r7, #20]
 80172d6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80172da:	4293      	cmp	r3, r2
 80172dc:	dc1a      	bgt.n	8017314 <tcp_slowtmr+0x294>
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	b21a      	sxth	r2, r3
 80172e2:	e019      	b.n	8017318 <tcp_slowtmr+0x298>
 80172e4:	2000f9b0 	.word	0x2000f9b0
 80172e8:	2000f9c6 	.word	0x2000f9c6
 80172ec:	2000f9bc 	.word	0x2000f9bc
 80172f0:	080219e8 	.word	0x080219e8
 80172f4:	08021d5c 	.word	0x08021d5c
 80172f8:	08021a5c 	.word	0x08021a5c
 80172fc:	08021d88 	.word	0x08021d88
 8017300:	08021db4 	.word	0x08021db4
 8017304:	08021de4 	.word	0x08021de4
 8017308:	08021e18 	.word	0x08021e18
 801730c:	08023bb4 	.word	0x08023bb4
 8017310:	08023ba4 	.word	0x08023ba4
 8017314:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801731a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801731e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017320:	2200      	movs	r2, #0
 8017322:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8017324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017326:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801732a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801732c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017330:	4293      	cmp	r3, r2
 8017332:	bf28      	it	cs
 8017334:	4613      	movcs	r3, r2
 8017336:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8017338:	8a7b      	ldrh	r3, [r7, #18]
 801733a:	085b      	lsrs	r3, r3, #1
 801733c:	b29a      	uxth	r2, r3
 801733e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017340:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017346:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801734c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801734e:	005b      	lsls	r3, r3, #1
 8017350:	b29b      	uxth	r3, r3
 8017352:	429a      	cmp	r2, r3
 8017354:	d206      	bcs.n	8017364 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017358:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801735a:	005b      	lsls	r3, r3, #1
 801735c:	b29a      	uxth	r2, r3
 801735e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017360:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8017364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017366:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8017368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801736a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801736e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017370:	2200      	movs	r2, #0
 8017372:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8017376:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017378:	f004 fd42 	bl	801be00 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801737e:	7d1b      	ldrb	r3, [r3, #20]
 8017380:	2b06      	cmp	r3, #6
 8017382:	d111      	bne.n	80173a8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8017384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017386:	8b5b      	ldrh	r3, [r3, #26]
 8017388:	f003 0310 	and.w	r3, r3, #16
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00b      	beq.n	80173a8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017390:	4b9c      	ldr	r3, [pc, #624]	@ (8017604 <tcp_slowtmr+0x584>)
 8017392:	681a      	ldr	r2, [r3, #0]
 8017394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017396:	6a1b      	ldr	r3, [r3, #32]
 8017398:	1ad3      	subs	r3, r2, r3
 801739a:	2b28      	cmp	r3, #40	@ 0x28
 801739c:	d904      	bls.n	80173a8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801739e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80173a2:	3301      	adds	r3, #1
 80173a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80173a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173aa:	7a5b      	ldrb	r3, [r3, #9]
 80173ac:	f003 0308 	and.w	r3, r3, #8
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d04a      	beq.n	801744a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80173b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173b6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80173b8:	2b04      	cmp	r3, #4
 80173ba:	d003      	beq.n	80173c4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80173bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173be:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80173c0:	2b07      	cmp	r3, #7
 80173c2:	d142      	bne.n	801744a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173c4:	4b8f      	ldr	r3, [pc, #572]	@ (8017604 <tcp_slowtmr+0x584>)
 80173c6:	681a      	ldr	r2, [r3, #0]
 80173c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ca:	6a1b      	ldr	r3, [r3, #32]
 80173cc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80173ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173d0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80173d4:	4b8c      	ldr	r3, [pc, #560]	@ (8017608 <tcp_slowtmr+0x588>)
 80173d6:	440b      	add	r3, r1
 80173d8:	498c      	ldr	r1, [pc, #560]	@ (801760c <tcp_slowtmr+0x58c>)
 80173da:	fba1 1303 	umull	r1, r3, r1, r3
 80173de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d90a      	bls.n	80173fa <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80173e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80173e8:	3301      	adds	r3, #1
 80173ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80173ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80173f2:	3301      	adds	r3, #1
 80173f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80173f8:	e027      	b.n	801744a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80173fa:	4b82      	ldr	r3, [pc, #520]	@ (8017604 <tcp_slowtmr+0x584>)
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017400:	6a1b      	ldr	r3, [r3, #32]
 8017402:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017406:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801740a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801740c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8017410:	4618      	mov	r0, r3
 8017412:	4b7f      	ldr	r3, [pc, #508]	@ (8017610 <tcp_slowtmr+0x590>)
 8017414:	fb00 f303 	mul.w	r3, r0, r3
 8017418:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801741a:	497c      	ldr	r1, [pc, #496]	@ (801760c <tcp_slowtmr+0x58c>)
 801741c:	fba1 1303 	umull	r1, r3, r1, r3
 8017420:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017422:	429a      	cmp	r2, r3
 8017424:	d911      	bls.n	801744a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8017426:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017428:	f004 ffee 	bl	801c408 <tcp_keepalive>
 801742c:	4603      	mov	r3, r0
 801742e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8017432:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8017436:	2b00      	cmp	r3, #0
 8017438:	d107      	bne.n	801744a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801743a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801743c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8017440:	3301      	adds	r3, #1
 8017442:	b2da      	uxtb	r2, r3
 8017444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017446:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801744c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801744e:	2b00      	cmp	r3, #0
 8017450:	d011      	beq.n	8017476 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017452:	4b6c      	ldr	r3, [pc, #432]	@ (8017604 <tcp_slowtmr+0x584>)
 8017454:	681a      	ldr	r2, [r3, #0]
 8017456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017458:	6a1b      	ldr	r3, [r3, #32]
 801745a:	1ad2      	subs	r2, r2, r3
 801745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801745e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8017462:	4619      	mov	r1, r3
 8017464:	460b      	mov	r3, r1
 8017466:	005b      	lsls	r3, r3, #1
 8017468:	440b      	add	r3, r1
 801746a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801746c:	429a      	cmp	r2, r3
 801746e:	d302      	bcc.n	8017476 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8017470:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017472:	f000 fead 	bl	80181d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8017476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017478:	7d1b      	ldrb	r3, [r3, #20]
 801747a:	2b03      	cmp	r3, #3
 801747c:	d10b      	bne.n	8017496 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801747e:	4b61      	ldr	r3, [pc, #388]	@ (8017604 <tcp_slowtmr+0x584>)
 8017480:	681a      	ldr	r2, [r3, #0]
 8017482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017484:	6a1b      	ldr	r3, [r3, #32]
 8017486:	1ad3      	subs	r3, r2, r3
 8017488:	2b28      	cmp	r3, #40	@ 0x28
 801748a:	d904      	bls.n	8017496 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801748c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017490:	3301      	adds	r3, #1
 8017492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8017496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017498:	7d1b      	ldrb	r3, [r3, #20]
 801749a:	2b09      	cmp	r3, #9
 801749c:	d10b      	bne.n	80174b6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801749e:	4b59      	ldr	r3, [pc, #356]	@ (8017604 <tcp_slowtmr+0x584>)
 80174a0:	681a      	ldr	r2, [r3, #0]
 80174a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174a4:	6a1b      	ldr	r3, [r3, #32]
 80174a6:	1ad3      	subs	r3, r2, r3
 80174a8:	2bf0      	cmp	r3, #240	@ 0xf0
 80174aa:	d904      	bls.n	80174b6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80174ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80174b0:	3301      	adds	r3, #1
 80174b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80174b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d060      	beq.n	8017580 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80174be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80174c4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80174c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80174c8:	f000 fcce 	bl	8017e68 <tcp_pcb_purge>
      if (prev != NULL) {
 80174cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d010      	beq.n	80174f4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80174d2:	4b50      	ldr	r3, [pc, #320]	@ (8017614 <tcp_slowtmr+0x594>)
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80174d8:	429a      	cmp	r2, r3
 80174da:	d106      	bne.n	80174ea <tcp_slowtmr+0x46a>
 80174dc:	4b4e      	ldr	r3, [pc, #312]	@ (8017618 <tcp_slowtmr+0x598>)
 80174de:	f240 526d 	movw	r2, #1389	@ 0x56d
 80174e2:	494e      	ldr	r1, [pc, #312]	@ (801761c <tcp_slowtmr+0x59c>)
 80174e4:	484e      	ldr	r0, [pc, #312]	@ (8017620 <tcp_slowtmr+0x5a0>)
 80174e6:	f006 fb8b 	bl	801dc00 <iprintf>
        prev->next = pcb->next;
 80174ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174ec:	68da      	ldr	r2, [r3, #12]
 80174ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174f0:	60da      	str	r2, [r3, #12]
 80174f2:	e00f      	b.n	8017514 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80174f4:	4b47      	ldr	r3, [pc, #284]	@ (8017614 <tcp_slowtmr+0x594>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80174fa:	429a      	cmp	r2, r3
 80174fc:	d006      	beq.n	801750c <tcp_slowtmr+0x48c>
 80174fe:	4b46      	ldr	r3, [pc, #280]	@ (8017618 <tcp_slowtmr+0x598>)
 8017500:	f240 5271 	movw	r2, #1393	@ 0x571
 8017504:	4947      	ldr	r1, [pc, #284]	@ (8017624 <tcp_slowtmr+0x5a4>)
 8017506:	4846      	ldr	r0, [pc, #280]	@ (8017620 <tcp_slowtmr+0x5a0>)
 8017508:	f006 fb7a 	bl	801dc00 <iprintf>
        tcp_active_pcbs = pcb->next;
 801750c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	4a40      	ldr	r2, [pc, #256]	@ (8017614 <tcp_slowtmr+0x594>)
 8017512:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8017514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017518:	2b00      	cmp	r3, #0
 801751a:	d013      	beq.n	8017544 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801751c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801751e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8017520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017522:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8017524:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8017526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017528:	3304      	adds	r3, #4
 801752a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801752c:	8ad2      	ldrh	r2, [r2, #22]
 801752e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017530:	8b09      	ldrh	r1, [r1, #24]
 8017532:	9102      	str	r1, [sp, #8]
 8017534:	9201      	str	r2, [sp, #4]
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	462b      	mov	r3, r5
 801753a:	4622      	mov	r2, r4
 801753c:	4601      	mov	r1, r0
 801753e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017540:	f004 feae 	bl	801c2a0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8017544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017546:	691b      	ldr	r3, [r3, #16]
 8017548:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801754a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801754c:	7d1b      	ldrb	r3, [r3, #20]
 801754e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017552:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017556:	68db      	ldr	r3, [r3, #12]
 8017558:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801755a:	6838      	ldr	r0, [r7, #0]
 801755c:	f7fe ffec 	bl	8016538 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8017560:	4b31      	ldr	r3, [pc, #196]	@ (8017628 <tcp_slowtmr+0x5a8>)
 8017562:	2200      	movs	r2, #0
 8017564:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d004      	beq.n	8017576 <tcp_slowtmr+0x4f6>
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	f06f 010c 	mvn.w	r1, #12
 8017572:	68b8      	ldr	r0, [r7, #8]
 8017574:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017576:	4b2c      	ldr	r3, [pc, #176]	@ (8017628 <tcp_slowtmr+0x5a8>)
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d037      	beq.n	80175ee <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801757e:	e592      	b.n	80170a6 <tcp_slowtmr+0x26>
      prev = pcb;
 8017580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017582:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8017584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017586:	68db      	ldr	r3, [r3, #12]
 8017588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801758c:	7f1b      	ldrb	r3, [r3, #28]
 801758e:	3301      	adds	r3, #1
 8017590:	b2da      	uxtb	r2, r3
 8017592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017594:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017598:	7f1a      	ldrb	r2, [r3, #28]
 801759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801759c:	7f5b      	ldrb	r3, [r3, #29]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d325      	bcc.n	80175ee <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80175a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175a4:	2200      	movs	r2, #0
 80175a6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80175a8:	4b1f      	ldr	r3, [pc, #124]	@ (8017628 <tcp_slowtmr+0x5a8>)
 80175aa:	2200      	movs	r2, #0
 80175ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80175ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d00b      	beq.n	80175d0 <tcp_slowtmr+0x550>
 80175b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80175be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80175c0:	6912      	ldr	r2, [r2, #16]
 80175c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80175c4:	4610      	mov	r0, r2
 80175c6:	4798      	blx	r3
 80175c8:	4603      	mov	r3, r0
 80175ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80175ce:	e002      	b.n	80175d6 <tcp_slowtmr+0x556>
 80175d0:	2300      	movs	r3, #0
 80175d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80175d6:	4b14      	ldr	r3, [pc, #80]	@ (8017628 <tcp_slowtmr+0x5a8>)
 80175d8:	781b      	ldrb	r3, [r3, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f47f ad62 	bne.w	80170a4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80175e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d102      	bne.n	80175ee <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80175e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175ea:	f004 f8a5 	bl	801b738 <tcp_output>
  while (pcb != NULL) {
 80175ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	f47f ad5e 	bne.w	80170b2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80175f6:	2300      	movs	r3, #0
 80175f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80175fa:	4b0c      	ldr	r3, [pc, #48]	@ (801762c <tcp_slowtmr+0x5ac>)
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8017600:	e069      	b.n	80176d6 <tcp_slowtmr+0x656>
 8017602:	bf00      	nop
 8017604:	2000f9b0 	.word	0x2000f9b0
 8017608:	000a4cb8 	.word	0x000a4cb8
 801760c:	10624dd3 	.word	0x10624dd3
 8017610:	000124f8 	.word	0x000124f8
 8017614:	2000f9bc 	.word	0x2000f9bc
 8017618:	080219e8 	.word	0x080219e8
 801761c:	08021e50 	.word	0x08021e50
 8017620:	08021a5c 	.word	0x08021a5c
 8017624:	08021e7c 	.word	0x08021e7c
 8017628:	2000f9c4 	.word	0x2000f9c4
 801762c:	2000f9c0 	.word	0x2000f9c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017632:	7d1b      	ldrb	r3, [r3, #20]
 8017634:	2b0a      	cmp	r3, #10
 8017636:	d006      	beq.n	8017646 <tcp_slowtmr+0x5c6>
 8017638:	4b2b      	ldr	r3, [pc, #172]	@ (80176e8 <tcp_slowtmr+0x668>)
 801763a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801763e:	492b      	ldr	r1, [pc, #172]	@ (80176ec <tcp_slowtmr+0x66c>)
 8017640:	482b      	ldr	r0, [pc, #172]	@ (80176f0 <tcp_slowtmr+0x670>)
 8017642:	f006 fadd 	bl	801dc00 <iprintf>
    pcb_remove = 0;
 8017646:	2300      	movs	r3, #0
 8017648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801764c:	4b29      	ldr	r3, [pc, #164]	@ (80176f4 <tcp_slowtmr+0x674>)
 801764e:	681a      	ldr	r2, [r3, #0]
 8017650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017652:	6a1b      	ldr	r3, [r3, #32]
 8017654:	1ad3      	subs	r3, r2, r3
 8017656:	2bf0      	cmp	r3, #240	@ 0xf0
 8017658:	d904      	bls.n	8017664 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801765a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801765e:	3301      	adds	r3, #1
 8017660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017668:	2b00      	cmp	r3, #0
 801766a:	d02f      	beq.n	80176cc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801766c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801766e:	f000 fbfb 	bl	8017e68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017674:	2b00      	cmp	r3, #0
 8017676:	d010      	beq.n	801769a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017678:	4b1f      	ldr	r3, [pc, #124]	@ (80176f8 <tcp_slowtmr+0x678>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801767e:	429a      	cmp	r2, r3
 8017680:	d106      	bne.n	8017690 <tcp_slowtmr+0x610>
 8017682:	4b19      	ldr	r3, [pc, #100]	@ (80176e8 <tcp_slowtmr+0x668>)
 8017684:	f240 52af 	movw	r2, #1455	@ 0x5af
 8017688:	491c      	ldr	r1, [pc, #112]	@ (80176fc <tcp_slowtmr+0x67c>)
 801768a:	4819      	ldr	r0, [pc, #100]	@ (80176f0 <tcp_slowtmr+0x670>)
 801768c:	f006 fab8 	bl	801dc00 <iprintf>
        prev->next = pcb->next;
 8017690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017692:	68da      	ldr	r2, [r3, #12]
 8017694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017696:	60da      	str	r2, [r3, #12]
 8017698:	e00f      	b.n	80176ba <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801769a:	4b17      	ldr	r3, [pc, #92]	@ (80176f8 <tcp_slowtmr+0x678>)
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80176a0:	429a      	cmp	r2, r3
 80176a2:	d006      	beq.n	80176b2 <tcp_slowtmr+0x632>
 80176a4:	4b10      	ldr	r3, [pc, #64]	@ (80176e8 <tcp_slowtmr+0x668>)
 80176a6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80176aa:	4915      	ldr	r1, [pc, #84]	@ (8017700 <tcp_slowtmr+0x680>)
 80176ac:	4810      	ldr	r0, [pc, #64]	@ (80176f0 <tcp_slowtmr+0x670>)
 80176ae:	f006 faa7 	bl	801dc00 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80176b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176b4:	68db      	ldr	r3, [r3, #12]
 80176b6:	4a10      	ldr	r2, [pc, #64]	@ (80176f8 <tcp_slowtmr+0x678>)
 80176b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80176ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80176be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176c0:	68db      	ldr	r3, [r3, #12]
 80176c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80176c4:	69f8      	ldr	r0, [r7, #28]
 80176c6:	f7fe ff37 	bl	8016538 <tcp_free>
 80176ca:	e004      	b.n	80176d6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80176cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80176d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176d2:	68db      	ldr	r3, [r3, #12]
 80176d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80176d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d1a9      	bne.n	8017630 <tcp_slowtmr+0x5b0>
    }
  }
}
 80176dc:	bf00      	nop
 80176de:	bf00      	nop
 80176e0:	3730      	adds	r7, #48	@ 0x30
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bdb0      	pop	{r4, r5, r7, pc}
 80176e6:	bf00      	nop
 80176e8:	080219e8 	.word	0x080219e8
 80176ec:	08021ea8 	.word	0x08021ea8
 80176f0:	08021a5c 	.word	0x08021a5c
 80176f4:	2000f9b0 	.word	0x2000f9b0
 80176f8:	2000f9c0 	.word	0x2000f9c0
 80176fc:	08021ed8 	.word	0x08021ed8
 8017700:	08021f00 	.word	0x08021f00

08017704 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801770a:	4b2d      	ldr	r3, [pc, #180]	@ (80177c0 <tcp_fasttmr+0xbc>)
 801770c:	781b      	ldrb	r3, [r3, #0]
 801770e:	3301      	adds	r3, #1
 8017710:	b2da      	uxtb	r2, r3
 8017712:	4b2b      	ldr	r3, [pc, #172]	@ (80177c0 <tcp_fasttmr+0xbc>)
 8017714:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8017716:	4b2b      	ldr	r3, [pc, #172]	@ (80177c4 <tcp_fasttmr+0xc0>)
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801771c:	e048      	b.n	80177b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	7f9a      	ldrb	r2, [r3, #30]
 8017722:	4b27      	ldr	r3, [pc, #156]	@ (80177c0 <tcp_fasttmr+0xbc>)
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	429a      	cmp	r2, r3
 8017728:	d03f      	beq.n	80177aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801772a:	4b25      	ldr	r3, [pc, #148]	@ (80177c0 <tcp_fasttmr+0xbc>)
 801772c:	781a      	ldrb	r2, [r3, #0]
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	8b5b      	ldrh	r3, [r3, #26]
 8017736:	f003 0301 	and.w	r3, r3, #1
 801773a:	2b00      	cmp	r3, #0
 801773c:	d010      	beq.n	8017760 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	8b5b      	ldrh	r3, [r3, #26]
 8017742:	f043 0302 	orr.w	r3, r3, #2
 8017746:	b29a      	uxth	r2, r3
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f003 fff3 	bl	801b738 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	8b5b      	ldrh	r3, [r3, #26]
 8017756:	f023 0303 	bic.w	r3, r3, #3
 801775a:	b29a      	uxth	r2, r3
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	8b5b      	ldrh	r3, [r3, #26]
 8017764:	f003 0308 	and.w	r3, r3, #8
 8017768:	2b00      	cmp	r3, #0
 801776a:	d009      	beq.n	8017780 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	8b5b      	ldrh	r3, [r3, #26]
 8017770:	f023 0308 	bic.w	r3, r3, #8
 8017774:	b29a      	uxth	r2, r3
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801777a:	6878      	ldr	r0, [r7, #4]
 801777c:	f7ff f870 	bl	8016860 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	68db      	ldr	r3, [r3, #12]
 8017784:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801778a:	2b00      	cmp	r3, #0
 801778c:	d00a      	beq.n	80177a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801778e:	4b0e      	ldr	r3, [pc, #56]	@ (80177c8 <tcp_fasttmr+0xc4>)
 8017790:	2200      	movs	r2, #0
 8017792:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017794:	6878      	ldr	r0, [r7, #4]
 8017796:	f000 f819 	bl	80177cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801779a:	4b0b      	ldr	r3, [pc, #44]	@ (80177c8 <tcp_fasttmr+0xc4>)
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d000      	beq.n	80177a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80177a2:	e7b8      	b.n	8017716 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	607b      	str	r3, [r7, #4]
 80177a8:	e002      	b.n	80177b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	68db      	ldr	r3, [r3, #12]
 80177ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d1b3      	bne.n	801771e <tcp_fasttmr+0x1a>
    }
  }
}
 80177b6:	bf00      	nop
 80177b8:	bf00      	nop
 80177ba:	3708      	adds	r7, #8
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	2000f9c6 	.word	0x2000f9c6
 80177c4:	2000f9bc 	.word	0x2000f9bc
 80177c8:	2000f9c4 	.word	0x2000f9c4

080177cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80177cc:	b590      	push	{r4, r7, lr}
 80177ce:	b085      	sub	sp, #20
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d109      	bne.n	80177ee <tcp_process_refused_data+0x22>
 80177da:	4b38      	ldr	r3, [pc, #224]	@ (80178bc <tcp_process_refused_data+0xf0>)
 80177dc:	f240 6209 	movw	r2, #1545	@ 0x609
 80177e0:	4937      	ldr	r1, [pc, #220]	@ (80178c0 <tcp_process_refused_data+0xf4>)
 80177e2:	4838      	ldr	r0, [pc, #224]	@ (80178c4 <tcp_process_refused_data+0xf8>)
 80177e4:	f006 fa0c 	bl	801dc00 <iprintf>
 80177e8:	f06f 030f 	mvn.w	r3, #15
 80177ec:	e061      	b.n	80178b2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80177f2:	7b5b      	ldrb	r3, [r3, #13]
 80177f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80177fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	2200      	movs	r2, #0
 8017800:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017808:	2b00      	cmp	r3, #0
 801780a:	d00b      	beq.n	8017824 <tcp_process_refused_data+0x58>
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	6918      	ldr	r0, [r3, #16]
 8017816:	2300      	movs	r3, #0
 8017818:	68ba      	ldr	r2, [r7, #8]
 801781a:	6879      	ldr	r1, [r7, #4]
 801781c:	47a0      	blx	r4
 801781e:	4603      	mov	r3, r0
 8017820:	73fb      	strb	r3, [r7, #15]
 8017822:	e007      	b.n	8017834 <tcp_process_refused_data+0x68>
 8017824:	2300      	movs	r3, #0
 8017826:	68ba      	ldr	r2, [r7, #8]
 8017828:	6879      	ldr	r1, [r7, #4]
 801782a:	2000      	movs	r0, #0
 801782c:	f000 f8a6 	bl	801797c <tcp_recv_null>
 8017830:	4603      	mov	r3, r0
 8017832:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d12b      	bne.n	8017894 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801783c:	7bbb      	ldrb	r3, [r7, #14]
 801783e:	f003 0320 	and.w	r3, r3, #32
 8017842:	2b00      	cmp	r3, #0
 8017844:	d034      	beq.n	80178b0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801784a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801784e:	4293      	cmp	r3, r2
 8017850:	d005      	beq.n	801785e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017856:	3301      	adds	r3, #1
 8017858:	b29a      	uxth	r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017864:	2b00      	cmp	r3, #0
 8017866:	d00b      	beq.n	8017880 <tcp_process_refused_data+0xb4>
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	6918      	ldr	r0, [r3, #16]
 8017872:	2300      	movs	r3, #0
 8017874:	2200      	movs	r2, #0
 8017876:	6879      	ldr	r1, [r7, #4]
 8017878:	47a0      	blx	r4
 801787a:	4603      	mov	r3, r0
 801787c:	73fb      	strb	r3, [r7, #15]
 801787e:	e001      	b.n	8017884 <tcp_process_refused_data+0xb8>
 8017880:	2300      	movs	r3, #0
 8017882:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017888:	f113 0f0d 	cmn.w	r3, #13
 801788c:	d110      	bne.n	80178b0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801788e:	f06f 030c 	mvn.w	r3, #12
 8017892:	e00e      	b.n	80178b2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8017894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017898:	f113 0f0d 	cmn.w	r3, #13
 801789c:	d102      	bne.n	80178a4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801789e:	f06f 030c 	mvn.w	r3, #12
 80178a2:	e006      	b.n	80178b2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	68ba      	ldr	r2, [r7, #8]
 80178a8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80178aa:	f06f 0304 	mvn.w	r3, #4
 80178ae:	e000      	b.n	80178b2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80178b0:	2300      	movs	r3, #0
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3714      	adds	r7, #20
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd90      	pop	{r4, r7, pc}
 80178ba:	bf00      	nop
 80178bc:	080219e8 	.word	0x080219e8
 80178c0:	08021f28 	.word	0x08021f28
 80178c4:	08021a5c 	.word	0x08021a5c

080178c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80178d0:	e007      	b.n	80178e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f000 f80a 	bl	80178f2 <tcp_seg_free>
    seg = next;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d1f4      	bne.n	80178d2 <tcp_segs_free+0xa>
  }
}
 80178e8:	bf00      	nop
 80178ea:	bf00      	nop
 80178ec:	3710      	adds	r7, #16
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bd80      	pop	{r7, pc}

080178f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80178f2:	b580      	push	{r7, lr}
 80178f4:	b082      	sub	sp, #8
 80178f6:	af00      	add	r7, sp, #0
 80178f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d00c      	beq.n	801791a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	685b      	ldr	r3, [r3, #4]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d004      	beq.n	8017912 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	685b      	ldr	r3, [r3, #4]
 801790c:	4618      	mov	r0, r3
 801790e:	f7fe fb57 	bl	8015fc0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017912:	6879      	ldr	r1, [r7, #4]
 8017914:	2003      	movs	r0, #3
 8017916:	f7fd fc5b 	bl	80151d0 <memp_free>
  }
}
 801791a:	bf00      	nop
 801791c:	3708      	adds	r7, #8
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
	...

08017924 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b084      	sub	sp, #16
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2b00      	cmp	r3, #0
 8017930:	d106      	bne.n	8017940 <tcp_seg_copy+0x1c>
 8017932:	4b0f      	ldr	r3, [pc, #60]	@ (8017970 <tcp_seg_copy+0x4c>)
 8017934:	f240 6282 	movw	r2, #1666	@ 0x682
 8017938:	490e      	ldr	r1, [pc, #56]	@ (8017974 <tcp_seg_copy+0x50>)
 801793a:	480f      	ldr	r0, [pc, #60]	@ (8017978 <tcp_seg_copy+0x54>)
 801793c:	f006 f960 	bl	801dc00 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017940:	2003      	movs	r0, #3
 8017942:	f7fd fbcf 	bl	80150e4 <memp_malloc>
 8017946:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d101      	bne.n	8017952 <tcp_seg_copy+0x2e>
    return NULL;
 801794e:	2300      	movs	r3, #0
 8017950:	e00a      	b.n	8017968 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017952:	2210      	movs	r2, #16
 8017954:	6879      	ldr	r1, [r7, #4]
 8017956:	68f8      	ldr	r0, [r7, #12]
 8017958:	f006 fa95 	bl	801de86 <memcpy>
  pbuf_ref(cseg->p);
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	685b      	ldr	r3, [r3, #4]
 8017960:	4618      	mov	r0, r3
 8017962:	f7fe fbd3 	bl	801610c <pbuf_ref>
  return cseg;
 8017966:	68fb      	ldr	r3, [r7, #12]
}
 8017968:	4618      	mov	r0, r3
 801796a:	3710      	adds	r7, #16
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}
 8017970:	080219e8 	.word	0x080219e8
 8017974:	08021f6c 	.word	0x08021f6c
 8017978:	08021a5c 	.word	0x08021a5c

0801797c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801797c:	b580      	push	{r7, lr}
 801797e:	b084      	sub	sp, #16
 8017980:	af00      	add	r7, sp, #0
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	607a      	str	r2, [r7, #4]
 8017988:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801798a:	68bb      	ldr	r3, [r7, #8]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d109      	bne.n	80179a4 <tcp_recv_null+0x28>
 8017990:	4b12      	ldr	r3, [pc, #72]	@ (80179dc <tcp_recv_null+0x60>)
 8017992:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017996:	4912      	ldr	r1, [pc, #72]	@ (80179e0 <tcp_recv_null+0x64>)
 8017998:	4812      	ldr	r0, [pc, #72]	@ (80179e4 <tcp_recv_null+0x68>)
 801799a:	f006 f931 	bl	801dc00 <iprintf>
 801799e:	f06f 030f 	mvn.w	r3, #15
 80179a2:	e016      	b.n	80179d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d009      	beq.n	80179be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	891b      	ldrh	r3, [r3, #8]
 80179ae:	4619      	mov	r1, r3
 80179b0:	68b8      	ldr	r0, [r7, #8]
 80179b2:	f7ff facd 	bl	8016f50 <tcp_recved>
    pbuf_free(p);
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7fe fb02 	bl	8015fc0 <pbuf_free>
 80179bc:	e008      	b.n	80179d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80179be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d104      	bne.n	80179d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80179c6:	68b8      	ldr	r0, [r7, #8]
 80179c8:	f7fe ffb4 	bl	8016934 <tcp_close>
 80179cc:	4603      	mov	r3, r0
 80179ce:	e000      	b.n	80179d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80179d0:	2300      	movs	r3, #0
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	080219e8 	.word	0x080219e8
 80179e0:	08021f88 	.word	0x08021f88
 80179e4:	08021a5c 	.word	0x08021a5c

080179e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b086      	sub	sp, #24
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	4603      	mov	r3, r0
 80179f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80179f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	db01      	blt.n	80179fe <tcp_kill_prio+0x16>
 80179fa:	79fb      	ldrb	r3, [r7, #7]
 80179fc:	e000      	b.n	8017a00 <tcp_kill_prio+0x18>
 80179fe:	237f      	movs	r3, #127	@ 0x7f
 8017a00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017a02:	7afb      	ldrb	r3, [r7, #11]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d034      	beq.n	8017a72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017a08:	7afb      	ldrb	r3, [r7, #11]
 8017a0a:	3b01      	subs	r3, #1
 8017a0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a16:	4b19      	ldr	r3, [pc, #100]	@ (8017a7c <tcp_kill_prio+0x94>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	617b      	str	r3, [r7, #20]
 8017a1c:	e01f      	b.n	8017a5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	7d5b      	ldrb	r3, [r3, #21]
 8017a22:	7afa      	ldrb	r2, [r7, #11]
 8017a24:	429a      	cmp	r2, r3
 8017a26:	d80c      	bhi.n	8017a42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a28:	697b      	ldr	r3, [r7, #20]
 8017a2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017a2c:	7afa      	ldrb	r2, [r7, #11]
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d112      	bne.n	8017a58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017a32:	4b13      	ldr	r3, [pc, #76]	@ (8017a80 <tcp_kill_prio+0x98>)
 8017a34:	681a      	ldr	r2, [r3, #0]
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	6a1b      	ldr	r3, [r3, #32]
 8017a3a:	1ad3      	subs	r3, r2, r3
 8017a3c:	68fa      	ldr	r2, [r7, #12]
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d80a      	bhi.n	8017a58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017a42:	4b0f      	ldr	r3, [pc, #60]	@ (8017a80 <tcp_kill_prio+0x98>)
 8017a44:	681a      	ldr	r2, [r3, #0]
 8017a46:	697b      	ldr	r3, [r7, #20]
 8017a48:	6a1b      	ldr	r3, [r3, #32]
 8017a4a:	1ad3      	subs	r3, r2, r3
 8017a4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017a4e:	697b      	ldr	r3, [r7, #20]
 8017a50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017a52:	697b      	ldr	r3, [r7, #20]
 8017a54:	7d5b      	ldrb	r3, [r3, #21]
 8017a56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017a58:	697b      	ldr	r3, [r7, #20]
 8017a5a:	68db      	ldr	r3, [r3, #12]
 8017a5c:	617b      	str	r3, [r7, #20]
 8017a5e:	697b      	ldr	r3, [r7, #20]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d1dc      	bne.n	8017a1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017a64:	693b      	ldr	r3, [r7, #16]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d004      	beq.n	8017a74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017a6a:	6938      	ldr	r0, [r7, #16]
 8017a6c:	f7ff f8a8 	bl	8016bc0 <tcp_abort>
 8017a70:	e000      	b.n	8017a74 <tcp_kill_prio+0x8c>
    return;
 8017a72:	bf00      	nop
  }
}
 8017a74:	3718      	adds	r7, #24
 8017a76:	46bd      	mov	sp, r7
 8017a78:	bd80      	pop	{r7, pc}
 8017a7a:	bf00      	nop
 8017a7c:	2000f9bc 	.word	0x2000f9bc
 8017a80:	2000f9b0 	.word	0x2000f9b0

08017a84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b086      	sub	sp, #24
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017a8e:	79fb      	ldrb	r3, [r7, #7]
 8017a90:	2b08      	cmp	r3, #8
 8017a92:	d009      	beq.n	8017aa8 <tcp_kill_state+0x24>
 8017a94:	79fb      	ldrb	r3, [r7, #7]
 8017a96:	2b09      	cmp	r3, #9
 8017a98:	d006      	beq.n	8017aa8 <tcp_kill_state+0x24>
 8017a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8017b04 <tcp_kill_state+0x80>)
 8017a9c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8017aa0:	4919      	ldr	r1, [pc, #100]	@ (8017b08 <tcp_kill_state+0x84>)
 8017aa2:	481a      	ldr	r0, [pc, #104]	@ (8017b0c <tcp_kill_state+0x88>)
 8017aa4:	f006 f8ac 	bl	801dc00 <iprintf>

  inactivity = 0;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017aac:	2300      	movs	r3, #0
 8017aae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ab0:	4b17      	ldr	r3, [pc, #92]	@ (8017b10 <tcp_kill_state+0x8c>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	617b      	str	r3, [r7, #20]
 8017ab6:	e017      	b.n	8017ae8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017ab8:	697b      	ldr	r3, [r7, #20]
 8017aba:	7d1b      	ldrb	r3, [r3, #20]
 8017abc:	79fa      	ldrb	r2, [r7, #7]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d10f      	bne.n	8017ae2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017ac2:	4b14      	ldr	r3, [pc, #80]	@ (8017b14 <tcp_kill_state+0x90>)
 8017ac4:	681a      	ldr	r2, [r3, #0]
 8017ac6:	697b      	ldr	r3, [r7, #20]
 8017ac8:	6a1b      	ldr	r3, [r3, #32]
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	68fa      	ldr	r2, [r7, #12]
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	d807      	bhi.n	8017ae2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017ad2:	4b10      	ldr	r3, [pc, #64]	@ (8017b14 <tcp_kill_state+0x90>)
 8017ad4:	681a      	ldr	r2, [r3, #0]
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	6a1b      	ldr	r3, [r3, #32]
 8017ada:	1ad3      	subs	r3, r2, r3
 8017adc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017ade:	697b      	ldr	r3, [r7, #20]
 8017ae0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ae2:	697b      	ldr	r3, [r7, #20]
 8017ae4:	68db      	ldr	r3, [r3, #12]
 8017ae6:	617b      	str	r3, [r7, #20]
 8017ae8:	697b      	ldr	r3, [r7, #20]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d1e4      	bne.n	8017ab8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d003      	beq.n	8017afc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017af4:	2100      	movs	r1, #0
 8017af6:	6938      	ldr	r0, [r7, #16]
 8017af8:	f7fe ffa4 	bl	8016a44 <tcp_abandon>
  }
}
 8017afc:	bf00      	nop
 8017afe:	3718      	adds	r7, #24
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}
 8017b04:	080219e8 	.word	0x080219e8
 8017b08:	08021fa4 	.word	0x08021fa4
 8017b0c:	08021a5c 	.word	0x08021a5c
 8017b10:	2000f9bc 	.word	0x2000f9bc
 8017b14:	2000f9b0 	.word	0x2000f9b0

08017b18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b084      	sub	sp, #16
 8017b1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017b1e:	2300      	movs	r3, #0
 8017b20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017b22:	2300      	movs	r3, #0
 8017b24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b26:	4b12      	ldr	r3, [pc, #72]	@ (8017b70 <tcp_kill_timewait+0x58>)
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	60fb      	str	r3, [r7, #12]
 8017b2c:	e012      	b.n	8017b54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017b2e:	4b11      	ldr	r3, [pc, #68]	@ (8017b74 <tcp_kill_timewait+0x5c>)
 8017b30:	681a      	ldr	r2, [r3, #0]
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	6a1b      	ldr	r3, [r3, #32]
 8017b36:	1ad3      	subs	r3, r2, r3
 8017b38:	687a      	ldr	r2, [r7, #4]
 8017b3a:	429a      	cmp	r2, r3
 8017b3c:	d807      	bhi.n	8017b4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8017b74 <tcp_kill_timewait+0x5c>)
 8017b40:	681a      	ldr	r2, [r3, #0]
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	6a1b      	ldr	r3, [r3, #32]
 8017b46:	1ad3      	subs	r3, r2, r3
 8017b48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	68db      	ldr	r3, [r3, #12]
 8017b52:	60fb      	str	r3, [r7, #12]
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d1e9      	bne.n	8017b2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d002      	beq.n	8017b66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017b60:	68b8      	ldr	r0, [r7, #8]
 8017b62:	f7ff f82d 	bl	8016bc0 <tcp_abort>
  }
}
 8017b66:	bf00      	nop
 8017b68:	3710      	adds	r7, #16
 8017b6a:	46bd      	mov	sp, r7
 8017b6c:	bd80      	pop	{r7, pc}
 8017b6e:	bf00      	nop
 8017b70:	2000f9c0 	.word	0x2000f9c0
 8017b74:	2000f9b0 	.word	0x2000f9b0

08017b78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b082      	sub	sp, #8
 8017b7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017b7e:	4b10      	ldr	r3, [pc, #64]	@ (8017bc0 <tcp_handle_closepend+0x48>)
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017b84:	e014      	b.n	8017bb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	68db      	ldr	r3, [r3, #12]
 8017b8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	8b5b      	ldrh	r3, [r3, #26]
 8017b90:	f003 0308 	and.w	r3, r3, #8
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d009      	beq.n	8017bac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	8b5b      	ldrh	r3, [r3, #26]
 8017b9c:	f023 0308 	bic.w	r3, r3, #8
 8017ba0:	b29a      	uxth	r2, r3
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017ba6:	6878      	ldr	r0, [r7, #4]
 8017ba8:	f7fe fe5a 	bl	8016860 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d1e7      	bne.n	8017b86 <tcp_handle_closepend+0xe>
  }
}
 8017bb6:	bf00      	nop
 8017bb8:	bf00      	nop
 8017bba:	3708      	adds	r7, #8
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}
 8017bc0:	2000f9bc 	.word	0x2000f9bc

08017bc4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b084      	sub	sp, #16
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	4603      	mov	r3, r0
 8017bcc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bce:	2001      	movs	r0, #1
 8017bd0:	f7fd fa88 	bl	80150e4 <memp_malloc>
 8017bd4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d126      	bne.n	8017c2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017bdc:	f7ff ffcc 	bl	8017b78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017be0:	f7ff ff9a 	bl	8017b18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017be4:	2001      	movs	r0, #1
 8017be6:	f7fd fa7d 	bl	80150e4 <memp_malloc>
 8017bea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d11b      	bne.n	8017c2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017bf2:	2009      	movs	r0, #9
 8017bf4:	f7ff ff46 	bl	8017a84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017bf8:	2001      	movs	r0, #1
 8017bfa:	f7fd fa73 	bl	80150e4 <memp_malloc>
 8017bfe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d111      	bne.n	8017c2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017c06:	2008      	movs	r0, #8
 8017c08:	f7ff ff3c 	bl	8017a84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017c0c:	2001      	movs	r0, #1
 8017c0e:	f7fd fa69 	bl	80150e4 <memp_malloc>
 8017c12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d107      	bne.n	8017c2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017c1a:	79fb      	ldrb	r3, [r7, #7]
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	f7ff fee3 	bl	80179e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017c22:	2001      	movs	r0, #1
 8017c24:	f7fd fa5e 	bl	80150e4 <memp_malloc>
 8017c28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d03f      	beq.n	8017cb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017c30:	229c      	movs	r2, #156	@ 0x9c
 8017c32:	2100      	movs	r1, #0
 8017c34:	68f8      	ldr	r0, [r7, #12]
 8017c36:	f006 f882 	bl	801dd3e <memset>
    pcb->prio = prio;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	79fa      	ldrb	r2, [r7, #7]
 8017c3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8017c46:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8017c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8017c56:	68fb      	ldr	r3, [r7, #12]
 8017c58:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	22ff      	movs	r2, #255	@ 0xff
 8017c5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017c60:	68fb      	ldr	r3, [r7, #12]
 8017c62:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017c66:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	2206      	movs	r2, #6
 8017c6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2206      	movs	r2, #6
 8017c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017c7c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	2201      	movs	r2, #1
 8017c82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8017c86:	4b0d      	ldr	r3, [pc, #52]	@ (8017cbc <tcp_alloc+0xf8>)
 8017c88:	681a      	ldr	r2, [r3, #0]
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8017cc0 <tcp_alloc+0xfc>)
 8017c90:	781a      	ldrb	r2, [r3, #0]
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8017c9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	4a08      	ldr	r2, [pc, #32]	@ (8017cc4 <tcp_alloc+0x100>)
 8017ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	4a07      	ldr	r2, [pc, #28]	@ (8017cc8 <tcp_alloc+0x104>)
 8017cac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017cb0:	68fb      	ldr	r3, [r7, #12]
}
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	3710      	adds	r7, #16
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	bd80      	pop	{r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	2000f9b0 	.word	0x2000f9b0
 8017cc0:	2000f9c6 	.word	0x2000f9c6
 8017cc4:	0801797d 	.word	0x0801797d
 8017cc8:	006ddd00 	.word	0x006ddd00

08017ccc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b084      	sub	sp, #16
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	4603      	mov	r3, r0
 8017cd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8017cd6:	2040      	movs	r0, #64	@ 0x40
 8017cd8:	f7ff ff74 	bl	8017bc4 <tcp_alloc>
 8017cdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017cde:	68fb      	ldr	r3, [r7, #12]
}
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	3710      	adds	r7, #16
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8017ce8:	b480      	push	{r7}
 8017cea:	b083      	sub	sp, #12
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d002      	beq.n	8017cfe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	683a      	ldr	r2, [r7, #0]
 8017cfc:	611a      	str	r2, [r3, #16]
  }
}
 8017cfe:	bf00      	nop
 8017d00:	370c      	adds	r7, #12
 8017d02:	46bd      	mov	sp, r7
 8017d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d08:	4770      	bx	lr
	...

08017d0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b082      	sub	sp, #8
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d00e      	beq.n	8017d3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	7d1b      	ldrb	r3, [r3, #20]
 8017d20:	2b01      	cmp	r3, #1
 8017d22:	d106      	bne.n	8017d32 <tcp_recv+0x26>
 8017d24:	4b07      	ldr	r3, [pc, #28]	@ (8017d44 <tcp_recv+0x38>)
 8017d26:	f240 72df 	movw	r2, #2015	@ 0x7df
 8017d2a:	4907      	ldr	r1, [pc, #28]	@ (8017d48 <tcp_recv+0x3c>)
 8017d2c:	4807      	ldr	r0, [pc, #28]	@ (8017d4c <tcp_recv+0x40>)
 8017d2e:	f005 ff67 	bl	801dc00 <iprintf>
    pcb->recv = recv;
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	683a      	ldr	r2, [r7, #0]
 8017d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8017d3a:	bf00      	nop
 8017d3c:	3708      	adds	r7, #8
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	080219e8 	.word	0x080219e8
 8017d48:	08021fb4 	.word	0x08021fb4
 8017d4c:	08021a5c 	.word	0x08021a5c

08017d50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b082      	sub	sp, #8
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d00e      	beq.n	8017d7e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	7d1b      	ldrb	r3, [r3, #20]
 8017d64:	2b01      	cmp	r3, #1
 8017d66:	d106      	bne.n	8017d76 <tcp_sent+0x26>
 8017d68:	4b07      	ldr	r3, [pc, #28]	@ (8017d88 <tcp_sent+0x38>)
 8017d6a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8017d6e:	4907      	ldr	r1, [pc, #28]	@ (8017d8c <tcp_sent+0x3c>)
 8017d70:	4807      	ldr	r0, [pc, #28]	@ (8017d90 <tcp_sent+0x40>)
 8017d72:	f005 ff45 	bl	801dc00 <iprintf>
    pcb->sent = sent;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	683a      	ldr	r2, [r7, #0]
 8017d7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8017d7e:	bf00      	nop
 8017d80:	3708      	adds	r7, #8
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	080219e8 	.word	0x080219e8
 8017d8c:	08021fdc 	.word	0x08021fdc
 8017d90:	08021a5c 	.word	0x08021a5c

08017d94 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
 8017d9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d00e      	beq.n	8017dc2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	7d1b      	ldrb	r3, [r3, #20]
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d106      	bne.n	8017dba <tcp_err+0x26>
 8017dac:	4b07      	ldr	r3, [pc, #28]	@ (8017dcc <tcp_err+0x38>)
 8017dae:	f640 020d 	movw	r2, #2061	@ 0x80d
 8017db2:	4907      	ldr	r1, [pc, #28]	@ (8017dd0 <tcp_err+0x3c>)
 8017db4:	4807      	ldr	r0, [pc, #28]	@ (8017dd4 <tcp_err+0x40>)
 8017db6:	f005 ff23 	bl	801dc00 <iprintf>
    pcb->errf = err;
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	683a      	ldr	r2, [r7, #0]
 8017dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8017dc2:	bf00      	nop
 8017dc4:	3708      	adds	r7, #8
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}
 8017dca:	bf00      	nop
 8017dcc:	080219e8 	.word	0x080219e8
 8017dd0:	08022004 	.word	0x08022004
 8017dd4:	08021a5c 	.word	0x08021a5c

08017dd8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8017dd8:	b480      	push	{r7}
 8017dda:	b085      	sub	sp, #20
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d008      	beq.n	8017dfa <tcp_accept+0x22>
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	7d1b      	ldrb	r3, [r3, #20]
 8017dec:	2b01      	cmp	r3, #1
 8017dee:	d104      	bne.n	8017dfa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	683a      	ldr	r2, [r7, #0]
 8017df8:	619a      	str	r2, [r3, #24]
  }
}
 8017dfa:	bf00      	nop
 8017dfc:	3714      	adds	r7, #20
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e04:	4770      	bx	lr
	...

08017e08 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b084      	sub	sp, #16
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	60f8      	str	r0, [r7, #12]
 8017e10:	60b9      	str	r1, [r7, #8]
 8017e12:	4613      	mov	r3, r2
 8017e14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d107      	bne.n	8017e2c <tcp_poll+0x24>
 8017e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8017e58 <tcp_poll+0x50>)
 8017e1e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8017e22:	490e      	ldr	r1, [pc, #56]	@ (8017e5c <tcp_poll+0x54>)
 8017e24:	480e      	ldr	r0, [pc, #56]	@ (8017e60 <tcp_poll+0x58>)
 8017e26:	f005 feeb 	bl	801dc00 <iprintf>
 8017e2a:	e011      	b.n	8017e50 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	7d1b      	ldrb	r3, [r3, #20]
 8017e30:	2b01      	cmp	r3, #1
 8017e32:	d106      	bne.n	8017e42 <tcp_poll+0x3a>
 8017e34:	4b08      	ldr	r3, [pc, #32]	@ (8017e58 <tcp_poll+0x50>)
 8017e36:	f640 023e 	movw	r2, #2110	@ 0x83e
 8017e3a:	490a      	ldr	r1, [pc, #40]	@ (8017e64 <tcp_poll+0x5c>)
 8017e3c:	4808      	ldr	r0, [pc, #32]	@ (8017e60 <tcp_poll+0x58>)
 8017e3e:	f005 fedf 	bl	801dc00 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	68ba      	ldr	r2, [r7, #8]
 8017e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	79fa      	ldrb	r2, [r7, #7]
 8017e4e:	775a      	strb	r2, [r3, #29]
}
 8017e50:	3710      	adds	r7, #16
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	080219e8 	.word	0x080219e8
 8017e5c:	0802202c 	.word	0x0802202c
 8017e60:	08021a5c 	.word	0x08021a5c
 8017e64:	08022044 	.word	0x08022044

08017e68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d107      	bne.n	8017e86 <tcp_pcb_purge+0x1e>
 8017e76:	4b21      	ldr	r3, [pc, #132]	@ (8017efc <tcp_pcb_purge+0x94>)
 8017e78:	f640 0251 	movw	r2, #2129	@ 0x851
 8017e7c:	4920      	ldr	r1, [pc, #128]	@ (8017f00 <tcp_pcb_purge+0x98>)
 8017e7e:	4821      	ldr	r0, [pc, #132]	@ (8017f04 <tcp_pcb_purge+0x9c>)
 8017e80:	f005 febe 	bl	801dc00 <iprintf>
 8017e84:	e037      	b.n	8017ef6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	7d1b      	ldrb	r3, [r3, #20]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d033      	beq.n	8017ef6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017e92:	2b0a      	cmp	r3, #10
 8017e94:	d02f      	beq.n	8017ef6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	d02b      	beq.n	8017ef6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d007      	beq.n	8017eb6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017eaa:	4618      	mov	r0, r3
 8017eac:	f7fe f888 	bl	8015fc0 <pbuf_free>
      pcb->refused_data = NULL;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d002      	beq.n	8017ec4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f000 f986 	bl	80181d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017eca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7ff fcf9 	bl	80178c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7ff fcf4 	bl	80178c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017ef6:	3708      	adds	r7, #8
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}
 8017efc:	080219e8 	.word	0x080219e8
 8017f00:	08022064 	.word	0x08022064
 8017f04:	08021a5c 	.word	0x08021a5c

08017f08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b084      	sub	sp, #16
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d106      	bne.n	8017f26 <tcp_pcb_remove+0x1e>
 8017f18:	4b3e      	ldr	r3, [pc, #248]	@ (8018014 <tcp_pcb_remove+0x10c>)
 8017f1a:	f640 0283 	movw	r2, #2179	@ 0x883
 8017f1e:	493e      	ldr	r1, [pc, #248]	@ (8018018 <tcp_pcb_remove+0x110>)
 8017f20:	483e      	ldr	r0, [pc, #248]	@ (801801c <tcp_pcb_remove+0x114>)
 8017f22:	f005 fe6d 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d106      	bne.n	8017f3a <tcp_pcb_remove+0x32>
 8017f2c:	4b39      	ldr	r3, [pc, #228]	@ (8018014 <tcp_pcb_remove+0x10c>)
 8017f2e:	f640 0284 	movw	r2, #2180	@ 0x884
 8017f32:	493b      	ldr	r1, [pc, #236]	@ (8018020 <tcp_pcb_remove+0x118>)
 8017f34:	4839      	ldr	r0, [pc, #228]	@ (801801c <tcp_pcb_remove+0x114>)
 8017f36:	f005 fe63 	bl	801dc00 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	683a      	ldr	r2, [r7, #0]
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d105      	bne.n	8017f50 <tcp_pcb_remove+0x48>
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	68da      	ldr	r2, [r3, #12]
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	601a      	str	r2, [r3, #0]
 8017f4e:	e013      	b.n	8017f78 <tcp_pcb_remove+0x70>
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	60fb      	str	r3, [r7, #12]
 8017f56:	e00c      	b.n	8017f72 <tcp_pcb_remove+0x6a>
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	68db      	ldr	r3, [r3, #12]
 8017f5c:	683a      	ldr	r2, [r7, #0]
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d104      	bne.n	8017f6c <tcp_pcb_remove+0x64>
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	68da      	ldr	r2, [r3, #12]
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	60da      	str	r2, [r3, #12]
 8017f6a:	e005      	b.n	8017f78 <tcp_pcb_remove+0x70>
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	68db      	ldr	r3, [r3, #12]
 8017f70:	60fb      	str	r3, [r7, #12]
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d1ef      	bne.n	8017f58 <tcp_pcb_remove+0x50>
 8017f78:	683b      	ldr	r3, [r7, #0]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017f7e:	6838      	ldr	r0, [r7, #0]
 8017f80:	f7ff ff72 	bl	8017e68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017f84:	683b      	ldr	r3, [r7, #0]
 8017f86:	7d1b      	ldrb	r3, [r3, #20]
 8017f88:	2b0a      	cmp	r3, #10
 8017f8a:	d013      	beq.n	8017fb4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017f8c:	683b      	ldr	r3, [r7, #0]
 8017f8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017f90:	2b01      	cmp	r3, #1
 8017f92:	d00f      	beq.n	8017fb4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017f94:	683b      	ldr	r3, [r7, #0]
 8017f96:	8b5b      	ldrh	r3, [r3, #26]
 8017f98:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d009      	beq.n	8017fb4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	8b5b      	ldrh	r3, [r3, #26]
 8017fa4:	f043 0302 	orr.w	r3, r3, #2
 8017fa8:	b29a      	uxth	r2, r3
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017fae:	6838      	ldr	r0, [r7, #0]
 8017fb0:	f003 fbc2 	bl	801b738 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	7d1b      	ldrb	r3, [r3, #20]
 8017fb8:	2b01      	cmp	r3, #1
 8017fba:	d020      	beq.n	8017ffe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d006      	beq.n	8017fd2 <tcp_pcb_remove+0xca>
 8017fc4:	4b13      	ldr	r3, [pc, #76]	@ (8018014 <tcp_pcb_remove+0x10c>)
 8017fc6:	f640 0293 	movw	r2, #2195	@ 0x893
 8017fca:	4916      	ldr	r1, [pc, #88]	@ (8018024 <tcp_pcb_remove+0x11c>)
 8017fcc:	4813      	ldr	r0, [pc, #76]	@ (801801c <tcp_pcb_remove+0x114>)
 8017fce:	f005 fe17 	bl	801dc00 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017fd2:	683b      	ldr	r3, [r7, #0]
 8017fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d006      	beq.n	8017fe8 <tcp_pcb_remove+0xe0>
 8017fda:	4b0e      	ldr	r3, [pc, #56]	@ (8018014 <tcp_pcb_remove+0x10c>)
 8017fdc:	f640 0294 	movw	r2, #2196	@ 0x894
 8017fe0:	4911      	ldr	r1, [pc, #68]	@ (8018028 <tcp_pcb_remove+0x120>)
 8017fe2:	480e      	ldr	r0, [pc, #56]	@ (801801c <tcp_pcb_remove+0x114>)
 8017fe4:	f005 fe0c 	bl	801dc00 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d006      	beq.n	8017ffe <tcp_pcb_remove+0xf6>
 8017ff0:	4b08      	ldr	r3, [pc, #32]	@ (8018014 <tcp_pcb_remove+0x10c>)
 8017ff2:	f640 0296 	movw	r2, #2198	@ 0x896
 8017ff6:	490d      	ldr	r1, [pc, #52]	@ (801802c <tcp_pcb_remove+0x124>)
 8017ff8:	4808      	ldr	r0, [pc, #32]	@ (801801c <tcp_pcb_remove+0x114>)
 8017ffa:	f005 fe01 	bl	801dc00 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	2200      	movs	r2, #0
 8018002:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018004:	683b      	ldr	r3, [r7, #0]
 8018006:	2200      	movs	r2, #0
 8018008:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801800a:	bf00      	nop
 801800c:	3710      	adds	r7, #16
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	080219e8 	.word	0x080219e8
 8018018:	08022080 	.word	0x08022080
 801801c:	08021a5c 	.word	0x08021a5c
 8018020:	0802209c 	.word	0x0802209c
 8018024:	080220bc 	.word	0x080220bc
 8018028:	080220d4 	.word	0x080220d4
 801802c:	080220f0 	.word	0x080220f0

08018030 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d106      	bne.n	801804c <tcp_next_iss+0x1c>
 801803e:	4b0a      	ldr	r3, [pc, #40]	@ (8018068 <tcp_next_iss+0x38>)
 8018040:	f640 02af 	movw	r2, #2223	@ 0x8af
 8018044:	4909      	ldr	r1, [pc, #36]	@ (801806c <tcp_next_iss+0x3c>)
 8018046:	480a      	ldr	r0, [pc, #40]	@ (8018070 <tcp_next_iss+0x40>)
 8018048:	f005 fdda 	bl	801dc00 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801804c:	4b09      	ldr	r3, [pc, #36]	@ (8018074 <tcp_next_iss+0x44>)
 801804e:	681a      	ldr	r2, [r3, #0]
 8018050:	4b09      	ldr	r3, [pc, #36]	@ (8018078 <tcp_next_iss+0x48>)
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	4413      	add	r3, r2
 8018056:	4a07      	ldr	r2, [pc, #28]	@ (8018074 <tcp_next_iss+0x44>)
 8018058:	6013      	str	r3, [r2, #0]
  return iss;
 801805a:	4b06      	ldr	r3, [pc, #24]	@ (8018074 <tcp_next_iss+0x44>)
 801805c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801805e:	4618      	mov	r0, r3
 8018060:	3708      	adds	r7, #8
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}
 8018066:	bf00      	nop
 8018068:	080219e8 	.word	0x080219e8
 801806c:	08022108 	.word	0x08022108
 8018070:	08021a5c 	.word	0x08021a5c
 8018074:	2000003c 	.word	0x2000003c
 8018078:	2000f9b0 	.word	0x2000f9b0

0801807c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b086      	sub	sp, #24
 8018080:	af00      	add	r7, sp, #0
 8018082:	4603      	mov	r3, r0
 8018084:	60b9      	str	r1, [r7, #8]
 8018086:	607a      	str	r2, [r7, #4]
 8018088:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d106      	bne.n	801809e <tcp_eff_send_mss_netif+0x22>
 8018090:	4b14      	ldr	r3, [pc, #80]	@ (80180e4 <tcp_eff_send_mss_netif+0x68>)
 8018092:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8018096:	4914      	ldr	r1, [pc, #80]	@ (80180e8 <tcp_eff_send_mss_netif+0x6c>)
 8018098:	4814      	ldr	r0, [pc, #80]	@ (80180ec <tcp_eff_send_mss_netif+0x70>)
 801809a:	f005 fdb1 	bl	801dc00 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d101      	bne.n	80180a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80180a4:	89fb      	ldrh	r3, [r7, #14]
 80180a6:	e019      	b.n	80180dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80180a8:	68bb      	ldr	r3, [r7, #8]
 80180aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80180ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80180ae:	8afb      	ldrh	r3, [r7, #22]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d012      	beq.n	80180da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80180b4:	2328      	movs	r3, #40	@ 0x28
 80180b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80180b8:	8afa      	ldrh	r2, [r7, #22]
 80180ba:	8abb      	ldrh	r3, [r7, #20]
 80180bc:	429a      	cmp	r2, r3
 80180be:	d904      	bls.n	80180ca <tcp_eff_send_mss_netif+0x4e>
 80180c0:	8afa      	ldrh	r2, [r7, #22]
 80180c2:	8abb      	ldrh	r3, [r7, #20]
 80180c4:	1ad3      	subs	r3, r2, r3
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	e000      	b.n	80180cc <tcp_eff_send_mss_netif+0x50>
 80180ca:	2300      	movs	r3, #0
 80180cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80180ce:	8a7a      	ldrh	r2, [r7, #18]
 80180d0:	89fb      	ldrh	r3, [r7, #14]
 80180d2:	4293      	cmp	r3, r2
 80180d4:	bf28      	it	cs
 80180d6:	4613      	movcs	r3, r2
 80180d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80180da:	89fb      	ldrh	r3, [r7, #14]
}
 80180dc:	4618      	mov	r0, r3
 80180de:	3718      	adds	r7, #24
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}
 80180e4:	080219e8 	.word	0x080219e8
 80180e8:	08022124 	.word	0x08022124
 80180ec:	08021a5c 	.word	0x08021a5c

080180f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b084      	sub	sp, #16
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d119      	bne.n	8018138 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018104:	4b10      	ldr	r3, [pc, #64]	@ (8018148 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018106:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801810a:	4910      	ldr	r1, [pc, #64]	@ (801814c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801810c:	4810      	ldr	r0, [pc, #64]	@ (8018150 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801810e:	f005 fd77 	bl	801dc00 <iprintf>

  while (pcb != NULL) {
 8018112:	e011      	b.n	8018138 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	681a      	ldr	r2, [r3, #0]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	429a      	cmp	r2, r3
 801811e:	d108      	bne.n	8018132 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	68db      	ldr	r3, [r3, #12]
 8018124:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018126:	68f8      	ldr	r0, [r7, #12]
 8018128:	f7fe fd4a 	bl	8016bc0 <tcp_abort>
      pcb = next;
 801812c:	68bb      	ldr	r3, [r7, #8]
 801812e:	60fb      	str	r3, [r7, #12]
 8018130:	e002      	b.n	8018138 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018132:	68fb      	ldr	r3, [r7, #12]
 8018134:	68db      	ldr	r3, [r3, #12]
 8018136:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d1ea      	bne.n	8018114 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801813e:	bf00      	nop
 8018140:	bf00      	nop
 8018142:	3710      	adds	r7, #16
 8018144:	46bd      	mov	sp, r7
 8018146:	bd80      	pop	{r7, pc}
 8018148:	080219e8 	.word	0x080219e8
 801814c:	0802214c 	.word	0x0802214c
 8018150:	08021a5c 	.word	0x08021a5c

08018154 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
 801815c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d02a      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d026      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801816c:	4b15      	ldr	r3, [pc, #84]	@ (80181c4 <tcp_netif_ip_addr_changed+0x70>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	4619      	mov	r1, r3
 8018172:	6878      	ldr	r0, [r7, #4]
 8018174:	f7ff ffbc 	bl	80180f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8018178:	4b13      	ldr	r3, [pc, #76]	@ (80181c8 <tcp_netif_ip_addr_changed+0x74>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	4619      	mov	r1, r3
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	f7ff ffb6 	bl	80180f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d017      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d013      	beq.n	80181ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018192:	4b0e      	ldr	r3, [pc, #56]	@ (80181cc <tcp_netif_ip_addr_changed+0x78>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	60fb      	str	r3, [r7, #12]
 8018198:	e00c      	b.n	80181b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	429a      	cmp	r2, r3
 80181a4:	d103      	bne.n	80181ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	681a      	ldr	r2, [r3, #0]
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	60fb      	str	r3, [r7, #12]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d1ef      	bne.n	801819a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80181ba:	bf00      	nop
 80181bc:	3710      	adds	r7, #16
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}
 80181c2:	bf00      	nop
 80181c4:	2000f9bc 	.word	0x2000f9bc
 80181c8:	2000f9b4 	.word	0x2000f9b4
 80181cc:	2000f9b8 	.word	0x2000f9b8

080181d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d007      	beq.n	80181f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80181e4:	4618      	mov	r0, r3
 80181e6:	f7ff fb6f 	bl	80178c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2200      	movs	r2, #0
 80181ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80181f0:	bf00      	nop
 80181f2:	3708      	adds	r7, #8
 80181f4:	46bd      	mov	sp, r7
 80181f6:	bd80      	pop	{r7, pc}

080181f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80181f8:	b590      	push	{r4, r7, lr}
 80181fa:	b08d      	sub	sp, #52	@ 0x34
 80181fc:	af04      	add	r7, sp, #16
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d105      	bne.n	8018214 <tcp_input+0x1c>
 8018208:	4b9b      	ldr	r3, [pc, #620]	@ (8018478 <tcp_input+0x280>)
 801820a:	2283      	movs	r2, #131	@ 0x83
 801820c:	499b      	ldr	r1, [pc, #620]	@ (801847c <tcp_input+0x284>)
 801820e:	489c      	ldr	r0, [pc, #624]	@ (8018480 <tcp_input+0x288>)
 8018210:	f005 fcf6 	bl	801dc00 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	4a9a      	ldr	r2, [pc, #616]	@ (8018484 <tcp_input+0x28c>)
 801821a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	895b      	ldrh	r3, [r3, #10]
 8018220:	2b13      	cmp	r3, #19
 8018222:	f240 83d1 	bls.w	80189c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018226:	4b98      	ldr	r3, [pc, #608]	@ (8018488 <tcp_input+0x290>)
 8018228:	695b      	ldr	r3, [r3, #20]
 801822a:	4a97      	ldr	r2, [pc, #604]	@ (8018488 <tcp_input+0x290>)
 801822c:	6812      	ldr	r2, [r2, #0]
 801822e:	4611      	mov	r1, r2
 8018230:	4618      	mov	r0, r3
 8018232:	f7fb fb93 	bl	801395c <ip4_addr_isbroadcast_u32>
 8018236:	4603      	mov	r3, r0
 8018238:	2b00      	cmp	r3, #0
 801823a:	f040 83c7 	bne.w	80189cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801823e:	4b92      	ldr	r3, [pc, #584]	@ (8018488 <tcp_input+0x290>)
 8018240:	695b      	ldr	r3, [r3, #20]
 8018242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018246:	2be0      	cmp	r3, #224	@ 0xe0
 8018248:	f000 83c0 	beq.w	80189cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801824c:	4b8d      	ldr	r3, [pc, #564]	@ (8018484 <tcp_input+0x28c>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	899b      	ldrh	r3, [r3, #12]
 8018252:	b29b      	uxth	r3, r3
 8018254:	4618      	mov	r0, r3
 8018256:	f7fc fa01 	bl	801465c <lwip_htons>
 801825a:	4603      	mov	r3, r0
 801825c:	0b1b      	lsrs	r3, r3, #12
 801825e:	b29b      	uxth	r3, r3
 8018260:	b2db      	uxtb	r3, r3
 8018262:	009b      	lsls	r3, r3, #2
 8018264:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018266:	7cbb      	ldrb	r3, [r7, #18]
 8018268:	2b13      	cmp	r3, #19
 801826a:	f240 83b1 	bls.w	80189d0 <tcp_input+0x7d8>
 801826e:	7cbb      	ldrb	r3, [r7, #18]
 8018270:	b29a      	uxth	r2, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	891b      	ldrh	r3, [r3, #8]
 8018276:	429a      	cmp	r2, r3
 8018278:	f200 83aa 	bhi.w	80189d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801827c:	7cbb      	ldrb	r3, [r7, #18]
 801827e:	b29b      	uxth	r3, r3
 8018280:	3b14      	subs	r3, #20
 8018282:	b29a      	uxth	r2, r3
 8018284:	4b81      	ldr	r3, [pc, #516]	@ (801848c <tcp_input+0x294>)
 8018286:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8018288:	4b81      	ldr	r3, [pc, #516]	@ (8018490 <tcp_input+0x298>)
 801828a:	2200      	movs	r2, #0
 801828c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	895a      	ldrh	r2, [r3, #10]
 8018292:	7cbb      	ldrb	r3, [r7, #18]
 8018294:	b29b      	uxth	r3, r3
 8018296:	429a      	cmp	r2, r3
 8018298:	d309      	bcc.n	80182ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801829a:	4b7c      	ldr	r3, [pc, #496]	@ (801848c <tcp_input+0x294>)
 801829c:	881a      	ldrh	r2, [r3, #0]
 801829e:	4b7d      	ldr	r3, [pc, #500]	@ (8018494 <tcp_input+0x29c>)
 80182a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80182a2:	7cbb      	ldrb	r3, [r7, #18]
 80182a4:	4619      	mov	r1, r3
 80182a6:	6878      	ldr	r0, [r7, #4]
 80182a8:	f7fd fdd2 	bl	8015e50 <pbuf_remove_header>
 80182ac:	e04e      	b.n	801834c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d105      	bne.n	80182c2 <tcp_input+0xca>
 80182b6:	4b70      	ldr	r3, [pc, #448]	@ (8018478 <tcp_input+0x280>)
 80182b8:	22c2      	movs	r2, #194	@ 0xc2
 80182ba:	4977      	ldr	r1, [pc, #476]	@ (8018498 <tcp_input+0x2a0>)
 80182bc:	4870      	ldr	r0, [pc, #448]	@ (8018480 <tcp_input+0x288>)
 80182be:	f005 fc9f 	bl	801dc00 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80182c2:	2114      	movs	r1, #20
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f7fd fdc3 	bl	8015e50 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	895a      	ldrh	r2, [r3, #10]
 80182ce:	4b71      	ldr	r3, [pc, #452]	@ (8018494 <tcp_input+0x29c>)
 80182d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80182d2:	4b6e      	ldr	r3, [pc, #440]	@ (801848c <tcp_input+0x294>)
 80182d4:	881a      	ldrh	r2, [r3, #0]
 80182d6:	4b6f      	ldr	r3, [pc, #444]	@ (8018494 <tcp_input+0x29c>)
 80182d8:	881b      	ldrh	r3, [r3, #0]
 80182da:	1ad3      	subs	r3, r2, r3
 80182dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80182de:	4b6d      	ldr	r3, [pc, #436]	@ (8018494 <tcp_input+0x29c>)
 80182e0:	881b      	ldrh	r3, [r3, #0]
 80182e2:	4619      	mov	r1, r3
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	f7fd fdb3 	bl	8015e50 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	895b      	ldrh	r3, [r3, #10]
 80182f0:	8a3a      	ldrh	r2, [r7, #16]
 80182f2:	429a      	cmp	r2, r3
 80182f4:	f200 836e 	bhi.w	80189d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	685b      	ldr	r3, [r3, #4]
 80182fe:	4a64      	ldr	r2, [pc, #400]	@ (8018490 <tcp_input+0x298>)
 8018300:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	8a3a      	ldrh	r2, [r7, #16]
 8018308:	4611      	mov	r1, r2
 801830a:	4618      	mov	r0, r3
 801830c:	f7fd fda0 	bl	8015e50 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	891a      	ldrh	r2, [r3, #8]
 8018314:	8a3b      	ldrh	r3, [r7, #16]
 8018316:	1ad3      	subs	r3, r2, r3
 8018318:	b29a      	uxth	r2, r3
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	895b      	ldrh	r3, [r3, #10]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d005      	beq.n	8018332 <tcp_input+0x13a>
 8018326:	4b54      	ldr	r3, [pc, #336]	@ (8018478 <tcp_input+0x280>)
 8018328:	22df      	movs	r2, #223	@ 0xdf
 801832a:	495c      	ldr	r1, [pc, #368]	@ (801849c <tcp_input+0x2a4>)
 801832c:	4854      	ldr	r0, [pc, #336]	@ (8018480 <tcp_input+0x288>)
 801832e:	f005 fc67 	bl	801dc00 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	891a      	ldrh	r2, [r3, #8]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	891b      	ldrh	r3, [r3, #8]
 801833c:	429a      	cmp	r2, r3
 801833e:	d005      	beq.n	801834c <tcp_input+0x154>
 8018340:	4b4d      	ldr	r3, [pc, #308]	@ (8018478 <tcp_input+0x280>)
 8018342:	22e0      	movs	r2, #224	@ 0xe0
 8018344:	4956      	ldr	r1, [pc, #344]	@ (80184a0 <tcp_input+0x2a8>)
 8018346:	484e      	ldr	r0, [pc, #312]	@ (8018480 <tcp_input+0x288>)
 8018348:	f005 fc5a 	bl	801dc00 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801834c:	4b4d      	ldr	r3, [pc, #308]	@ (8018484 <tcp_input+0x28c>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	881b      	ldrh	r3, [r3, #0]
 8018352:	b29b      	uxth	r3, r3
 8018354:	4a4b      	ldr	r2, [pc, #300]	@ (8018484 <tcp_input+0x28c>)
 8018356:	6814      	ldr	r4, [r2, #0]
 8018358:	4618      	mov	r0, r3
 801835a:	f7fc f97f 	bl	801465c <lwip_htons>
 801835e:	4603      	mov	r3, r0
 8018360:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018362:	4b48      	ldr	r3, [pc, #288]	@ (8018484 <tcp_input+0x28c>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	885b      	ldrh	r3, [r3, #2]
 8018368:	b29b      	uxth	r3, r3
 801836a:	4a46      	ldr	r2, [pc, #280]	@ (8018484 <tcp_input+0x28c>)
 801836c:	6814      	ldr	r4, [r2, #0]
 801836e:	4618      	mov	r0, r3
 8018370:	f7fc f974 	bl	801465c <lwip_htons>
 8018374:	4603      	mov	r3, r0
 8018376:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8018378:	4b42      	ldr	r3, [pc, #264]	@ (8018484 <tcp_input+0x28c>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	685b      	ldr	r3, [r3, #4]
 801837e:	4a41      	ldr	r2, [pc, #260]	@ (8018484 <tcp_input+0x28c>)
 8018380:	6814      	ldr	r4, [r2, #0]
 8018382:	4618      	mov	r0, r3
 8018384:	f7fc f97f 	bl	8014686 <lwip_htonl>
 8018388:	4603      	mov	r3, r0
 801838a:	6063      	str	r3, [r4, #4]
 801838c:	6863      	ldr	r3, [r4, #4]
 801838e:	4a45      	ldr	r2, [pc, #276]	@ (80184a4 <tcp_input+0x2ac>)
 8018390:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8018392:	4b3c      	ldr	r3, [pc, #240]	@ (8018484 <tcp_input+0x28c>)
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	689b      	ldr	r3, [r3, #8]
 8018398:	4a3a      	ldr	r2, [pc, #232]	@ (8018484 <tcp_input+0x28c>)
 801839a:	6814      	ldr	r4, [r2, #0]
 801839c:	4618      	mov	r0, r3
 801839e:	f7fc f972 	bl	8014686 <lwip_htonl>
 80183a2:	4603      	mov	r3, r0
 80183a4:	60a3      	str	r3, [r4, #8]
 80183a6:	68a3      	ldr	r3, [r4, #8]
 80183a8:	4a3f      	ldr	r2, [pc, #252]	@ (80184a8 <tcp_input+0x2b0>)
 80183aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80183ac:	4b35      	ldr	r3, [pc, #212]	@ (8018484 <tcp_input+0x28c>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	89db      	ldrh	r3, [r3, #14]
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	4a33      	ldr	r2, [pc, #204]	@ (8018484 <tcp_input+0x28c>)
 80183b6:	6814      	ldr	r4, [r2, #0]
 80183b8:	4618      	mov	r0, r3
 80183ba:	f7fc f94f 	bl	801465c <lwip_htons>
 80183be:	4603      	mov	r3, r0
 80183c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80183c2:	4b30      	ldr	r3, [pc, #192]	@ (8018484 <tcp_input+0x28c>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	899b      	ldrh	r3, [r3, #12]
 80183c8:	b29b      	uxth	r3, r3
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7fc f946 	bl	801465c <lwip_htons>
 80183d0:	4603      	mov	r3, r0
 80183d2:	b2db      	uxtb	r3, r3
 80183d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80183d8:	b2da      	uxtb	r2, r3
 80183da:	4b34      	ldr	r3, [pc, #208]	@ (80184ac <tcp_input+0x2b4>)
 80183dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	891a      	ldrh	r2, [r3, #8]
 80183e2:	4b33      	ldr	r3, [pc, #204]	@ (80184b0 <tcp_input+0x2b8>)
 80183e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80183e6:	4b31      	ldr	r3, [pc, #196]	@ (80184ac <tcp_input+0x2b4>)
 80183e8:	781b      	ldrb	r3, [r3, #0]
 80183ea:	f003 0303 	and.w	r3, r3, #3
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d00c      	beq.n	801840c <tcp_input+0x214>
    tcplen++;
 80183f2:	4b2f      	ldr	r3, [pc, #188]	@ (80184b0 <tcp_input+0x2b8>)
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	3301      	adds	r3, #1
 80183f8:	b29a      	uxth	r2, r3
 80183fa:	4b2d      	ldr	r3, [pc, #180]	@ (80184b0 <tcp_input+0x2b8>)
 80183fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	891a      	ldrh	r2, [r3, #8]
 8018402:	4b2b      	ldr	r3, [pc, #172]	@ (80184b0 <tcp_input+0x2b8>)
 8018404:	881b      	ldrh	r3, [r3, #0]
 8018406:	429a      	cmp	r2, r3
 8018408:	f200 82e6 	bhi.w	80189d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801840c:	2300      	movs	r3, #0
 801840e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018410:	4b28      	ldr	r3, [pc, #160]	@ (80184b4 <tcp_input+0x2bc>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	61fb      	str	r3, [r7, #28]
 8018416:	e09d      	b.n	8018554 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018418:	69fb      	ldr	r3, [r7, #28]
 801841a:	7d1b      	ldrb	r3, [r3, #20]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d105      	bne.n	801842c <tcp_input+0x234>
 8018420:	4b15      	ldr	r3, [pc, #84]	@ (8018478 <tcp_input+0x280>)
 8018422:	22fb      	movs	r2, #251	@ 0xfb
 8018424:	4924      	ldr	r1, [pc, #144]	@ (80184b8 <tcp_input+0x2c0>)
 8018426:	4816      	ldr	r0, [pc, #88]	@ (8018480 <tcp_input+0x288>)
 8018428:	f005 fbea 	bl	801dc00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	7d1b      	ldrb	r3, [r3, #20]
 8018430:	2b0a      	cmp	r3, #10
 8018432:	d105      	bne.n	8018440 <tcp_input+0x248>
 8018434:	4b10      	ldr	r3, [pc, #64]	@ (8018478 <tcp_input+0x280>)
 8018436:	22fc      	movs	r2, #252	@ 0xfc
 8018438:	4920      	ldr	r1, [pc, #128]	@ (80184bc <tcp_input+0x2c4>)
 801843a:	4811      	ldr	r0, [pc, #68]	@ (8018480 <tcp_input+0x288>)
 801843c:	f005 fbe0 	bl	801dc00 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	7d1b      	ldrb	r3, [r3, #20]
 8018444:	2b01      	cmp	r3, #1
 8018446:	d105      	bne.n	8018454 <tcp_input+0x25c>
 8018448:	4b0b      	ldr	r3, [pc, #44]	@ (8018478 <tcp_input+0x280>)
 801844a:	22fd      	movs	r2, #253	@ 0xfd
 801844c:	491c      	ldr	r1, [pc, #112]	@ (80184c0 <tcp_input+0x2c8>)
 801844e:	480c      	ldr	r0, [pc, #48]	@ (8018480 <tcp_input+0x288>)
 8018450:	f005 fbd6 	bl	801dc00 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018454:	69fb      	ldr	r3, [r7, #28]
 8018456:	7a1b      	ldrb	r3, [r3, #8]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d033      	beq.n	80184c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801845c:	69fb      	ldr	r3, [r7, #28]
 801845e:	7a1a      	ldrb	r2, [r3, #8]
 8018460:	4b09      	ldr	r3, [pc, #36]	@ (8018488 <tcp_input+0x290>)
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018468:	3301      	adds	r3, #1
 801846a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801846c:	429a      	cmp	r2, r3
 801846e:	d029      	beq.n	80184c4 <tcp_input+0x2cc>
      prev = pcb;
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	61bb      	str	r3, [r7, #24]
      continue;
 8018474:	e06b      	b.n	801854e <tcp_input+0x356>
 8018476:	bf00      	nop
 8018478:	08022180 	.word	0x08022180
 801847c:	080221e4 	.word	0x080221e4
 8018480:	080221fc 	.word	0x080221fc
 8018484:	2000f9d8 	.word	0x2000f9d8
 8018488:	20008854 	.word	0x20008854
 801848c:	2000f9dc 	.word	0x2000f9dc
 8018490:	2000f9e0 	.word	0x2000f9e0
 8018494:	2000f9de 	.word	0x2000f9de
 8018498:	08022224 	.word	0x08022224
 801849c:	08022234 	.word	0x08022234
 80184a0:	08022240 	.word	0x08022240
 80184a4:	2000f9e8 	.word	0x2000f9e8
 80184a8:	2000f9ec 	.word	0x2000f9ec
 80184ac:	2000f9f4 	.word	0x2000f9f4
 80184b0:	2000f9f2 	.word	0x2000f9f2
 80184b4:	2000f9bc 	.word	0x2000f9bc
 80184b8:	08022260 	.word	0x08022260
 80184bc:	08022288 	.word	0x08022288
 80184c0:	080222b4 	.word	0x080222b4
    }

    if (pcb->remote_port == tcphdr->src &&
 80184c4:	69fb      	ldr	r3, [r7, #28]
 80184c6:	8b1a      	ldrh	r2, [r3, #24]
 80184c8:	4b72      	ldr	r3, [pc, #456]	@ (8018694 <tcp_input+0x49c>)
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	881b      	ldrh	r3, [r3, #0]
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d13a      	bne.n	801854a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	8ada      	ldrh	r2, [r3, #22]
 80184d8:	4b6e      	ldr	r3, [pc, #440]	@ (8018694 <tcp_input+0x49c>)
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	885b      	ldrh	r3, [r3, #2]
 80184de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d132      	bne.n	801854a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184e4:	69fb      	ldr	r3, [r7, #28]
 80184e6:	685a      	ldr	r2, [r3, #4]
 80184e8:	4b6b      	ldr	r3, [pc, #428]	@ (8018698 <tcp_input+0x4a0>)
 80184ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80184ec:	429a      	cmp	r2, r3
 80184ee:	d12c      	bne.n	801854a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80184f0:	69fb      	ldr	r3, [r7, #28]
 80184f2:	681a      	ldr	r2, [r3, #0]
 80184f4:	4b68      	ldr	r3, [pc, #416]	@ (8018698 <tcp_input+0x4a0>)
 80184f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d126      	bne.n	801854a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80184fc:	69fb      	ldr	r3, [r7, #28]
 80184fe:	68db      	ldr	r3, [r3, #12]
 8018500:	69fa      	ldr	r2, [r7, #28]
 8018502:	429a      	cmp	r2, r3
 8018504:	d106      	bne.n	8018514 <tcp_input+0x31c>
 8018506:	4b65      	ldr	r3, [pc, #404]	@ (801869c <tcp_input+0x4a4>)
 8018508:	f240 120d 	movw	r2, #269	@ 0x10d
 801850c:	4964      	ldr	r1, [pc, #400]	@ (80186a0 <tcp_input+0x4a8>)
 801850e:	4865      	ldr	r0, [pc, #404]	@ (80186a4 <tcp_input+0x4ac>)
 8018510:	f005 fb76 	bl	801dc00 <iprintf>
      if (prev != NULL) {
 8018514:	69bb      	ldr	r3, [r7, #24]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d00a      	beq.n	8018530 <tcp_input+0x338>
        prev->next = pcb->next;
 801851a:	69fb      	ldr	r3, [r7, #28]
 801851c:	68da      	ldr	r2, [r3, #12]
 801851e:	69bb      	ldr	r3, [r7, #24]
 8018520:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018522:	4b61      	ldr	r3, [pc, #388]	@ (80186a8 <tcp_input+0x4b0>)
 8018524:	681a      	ldr	r2, [r3, #0]
 8018526:	69fb      	ldr	r3, [r7, #28]
 8018528:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801852a:	4a5f      	ldr	r2, [pc, #380]	@ (80186a8 <tcp_input+0x4b0>)
 801852c:	69fb      	ldr	r3, [r7, #28]
 801852e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018530:	69fb      	ldr	r3, [r7, #28]
 8018532:	68db      	ldr	r3, [r3, #12]
 8018534:	69fa      	ldr	r2, [r7, #28]
 8018536:	429a      	cmp	r2, r3
 8018538:	d111      	bne.n	801855e <tcp_input+0x366>
 801853a:	4b58      	ldr	r3, [pc, #352]	@ (801869c <tcp_input+0x4a4>)
 801853c:	f240 1215 	movw	r2, #277	@ 0x115
 8018540:	495a      	ldr	r1, [pc, #360]	@ (80186ac <tcp_input+0x4b4>)
 8018542:	4858      	ldr	r0, [pc, #352]	@ (80186a4 <tcp_input+0x4ac>)
 8018544:	f005 fb5c 	bl	801dc00 <iprintf>
      break;
 8018548:	e009      	b.n	801855e <tcp_input+0x366>
    }
    prev = pcb;
 801854a:	69fb      	ldr	r3, [r7, #28]
 801854c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	68db      	ldr	r3, [r3, #12]
 8018552:	61fb      	str	r3, [r7, #28]
 8018554:	69fb      	ldr	r3, [r7, #28]
 8018556:	2b00      	cmp	r3, #0
 8018558:	f47f af5e 	bne.w	8018418 <tcp_input+0x220>
 801855c:	e000      	b.n	8018560 <tcp_input+0x368>
      break;
 801855e:	bf00      	nop
  }

  if (pcb == NULL) {
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	2b00      	cmp	r3, #0
 8018564:	f040 80aa 	bne.w	80186bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018568:	4b51      	ldr	r3, [pc, #324]	@ (80186b0 <tcp_input+0x4b8>)
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	61fb      	str	r3, [r7, #28]
 801856e:	e03f      	b.n	80185f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018570:	69fb      	ldr	r3, [r7, #28]
 8018572:	7d1b      	ldrb	r3, [r3, #20]
 8018574:	2b0a      	cmp	r3, #10
 8018576:	d006      	beq.n	8018586 <tcp_input+0x38e>
 8018578:	4b48      	ldr	r3, [pc, #288]	@ (801869c <tcp_input+0x4a4>)
 801857a:	f240 121f 	movw	r2, #287	@ 0x11f
 801857e:	494d      	ldr	r1, [pc, #308]	@ (80186b4 <tcp_input+0x4bc>)
 8018580:	4848      	ldr	r0, [pc, #288]	@ (80186a4 <tcp_input+0x4ac>)
 8018582:	f005 fb3d 	bl	801dc00 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018586:	69fb      	ldr	r3, [r7, #28]
 8018588:	7a1b      	ldrb	r3, [r3, #8]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d009      	beq.n	80185a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801858e:	69fb      	ldr	r3, [r7, #28]
 8018590:	7a1a      	ldrb	r2, [r3, #8]
 8018592:	4b41      	ldr	r3, [pc, #260]	@ (8018698 <tcp_input+0x4a0>)
 8018594:	685b      	ldr	r3, [r3, #4]
 8018596:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801859a:	3301      	adds	r3, #1
 801859c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801859e:	429a      	cmp	r2, r3
 80185a0:	d122      	bne.n	80185e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80185a2:	69fb      	ldr	r3, [r7, #28]
 80185a4:	8b1a      	ldrh	r2, [r3, #24]
 80185a6:	4b3b      	ldr	r3, [pc, #236]	@ (8018694 <tcp_input+0x49c>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	881b      	ldrh	r3, [r3, #0]
 80185ac:	b29b      	uxth	r3, r3
 80185ae:	429a      	cmp	r2, r3
 80185b0:	d11b      	bne.n	80185ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80185b2:	69fb      	ldr	r3, [r7, #28]
 80185b4:	8ada      	ldrh	r2, [r3, #22]
 80185b6:	4b37      	ldr	r3, [pc, #220]	@ (8018694 <tcp_input+0x49c>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	885b      	ldrh	r3, [r3, #2]
 80185bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80185be:	429a      	cmp	r2, r3
 80185c0:	d113      	bne.n	80185ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185c2:	69fb      	ldr	r3, [r7, #28]
 80185c4:	685a      	ldr	r2, [r3, #4]
 80185c6:	4b34      	ldr	r3, [pc, #208]	@ (8018698 <tcp_input+0x4a0>)
 80185c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d10d      	bne.n	80185ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80185ce:	69fb      	ldr	r3, [r7, #28]
 80185d0:	681a      	ldr	r2, [r3, #0]
 80185d2:	4b31      	ldr	r3, [pc, #196]	@ (8018698 <tcp_input+0x4a0>)
 80185d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185d6:	429a      	cmp	r2, r3
 80185d8:	d107      	bne.n	80185ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80185da:	69f8      	ldr	r0, [r7, #28]
 80185dc:	f000 fb56 	bl	8018c8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f7fd fced 	bl	8015fc0 <pbuf_free>
        return;
 80185e6:	e1fd      	b.n	80189e4 <tcp_input+0x7ec>
        continue;
 80185e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185ea:	69fb      	ldr	r3, [r7, #28]
 80185ec:	68db      	ldr	r3, [r3, #12]
 80185ee:	61fb      	str	r3, [r7, #28]
 80185f0:	69fb      	ldr	r3, [r7, #28]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d1bc      	bne.n	8018570 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80185f6:	2300      	movs	r3, #0
 80185f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80185fa:	4b2f      	ldr	r3, [pc, #188]	@ (80186b8 <tcp_input+0x4c0>)
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	617b      	str	r3, [r7, #20]
 8018600:	e02a      	b.n	8018658 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018602:	697b      	ldr	r3, [r7, #20]
 8018604:	7a1b      	ldrb	r3, [r3, #8]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d00c      	beq.n	8018624 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801860a:	697b      	ldr	r3, [r7, #20]
 801860c:	7a1a      	ldrb	r2, [r3, #8]
 801860e:	4b22      	ldr	r3, [pc, #136]	@ (8018698 <tcp_input+0x4a0>)
 8018610:	685b      	ldr	r3, [r3, #4]
 8018612:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018616:	3301      	adds	r3, #1
 8018618:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801861a:	429a      	cmp	r2, r3
 801861c:	d002      	beq.n	8018624 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	61bb      	str	r3, [r7, #24]
        continue;
 8018622:	e016      	b.n	8018652 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	8ada      	ldrh	r2, [r3, #22]
 8018628:	4b1a      	ldr	r3, [pc, #104]	@ (8018694 <tcp_input+0x49c>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	885b      	ldrh	r3, [r3, #2]
 801862e:	b29b      	uxth	r3, r3
 8018630:	429a      	cmp	r2, r3
 8018632:	d10c      	bne.n	801864e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018634:	697b      	ldr	r3, [r7, #20]
 8018636:	681a      	ldr	r2, [r3, #0]
 8018638:	4b17      	ldr	r3, [pc, #92]	@ (8018698 <tcp_input+0x4a0>)
 801863a:	695b      	ldr	r3, [r3, #20]
 801863c:	429a      	cmp	r2, r3
 801863e:	d00f      	beq.n	8018660 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d00d      	beq.n	8018662 <tcp_input+0x46a>
 8018646:	697b      	ldr	r3, [r7, #20]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d009      	beq.n	8018662 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801864e:	697b      	ldr	r3, [r7, #20]
 8018650:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018652:	697b      	ldr	r3, [r7, #20]
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	617b      	str	r3, [r7, #20]
 8018658:	697b      	ldr	r3, [r7, #20]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d1d1      	bne.n	8018602 <tcp_input+0x40a>
 801865e:	e000      	b.n	8018662 <tcp_input+0x46a>
            break;
 8018660:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d029      	beq.n	80186bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018668:	69bb      	ldr	r3, [r7, #24]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d00a      	beq.n	8018684 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801866e:	697b      	ldr	r3, [r7, #20]
 8018670:	68da      	ldr	r2, [r3, #12]
 8018672:	69bb      	ldr	r3, [r7, #24]
 8018674:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018676:	4b10      	ldr	r3, [pc, #64]	@ (80186b8 <tcp_input+0x4c0>)
 8018678:	681a      	ldr	r2, [r3, #0]
 801867a:	697b      	ldr	r3, [r7, #20]
 801867c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801867e:	4a0e      	ldr	r2, [pc, #56]	@ (80186b8 <tcp_input+0x4c0>)
 8018680:	697b      	ldr	r3, [r7, #20]
 8018682:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018684:	6978      	ldr	r0, [r7, #20]
 8018686:	f000 fa03 	bl	8018a90 <tcp_listen_input>
      }
      pbuf_free(p);
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	f7fd fc98 	bl	8015fc0 <pbuf_free>
      return;
 8018690:	e1a8      	b.n	80189e4 <tcp_input+0x7ec>
 8018692:	bf00      	nop
 8018694:	2000f9d8 	.word	0x2000f9d8
 8018698:	20008854 	.word	0x20008854
 801869c:	08022180 	.word	0x08022180
 80186a0:	080222dc 	.word	0x080222dc
 80186a4:	080221fc 	.word	0x080221fc
 80186a8:	2000f9bc 	.word	0x2000f9bc
 80186ac:	08022308 	.word	0x08022308
 80186b0:	2000f9c0 	.word	0x2000f9c0
 80186b4:	08022334 	.word	0x08022334
 80186b8:	2000f9b8 	.word	0x2000f9b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80186bc:	69fb      	ldr	r3, [r7, #28]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	f000 8158 	beq.w	8018974 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80186c4:	4b95      	ldr	r3, [pc, #596]	@ (801891c <tcp_input+0x724>)
 80186c6:	2200      	movs	r2, #0
 80186c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	891a      	ldrh	r2, [r3, #8]
 80186ce:	4b93      	ldr	r3, [pc, #588]	@ (801891c <tcp_input+0x724>)
 80186d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80186d2:	4a92      	ldr	r2, [pc, #584]	@ (801891c <tcp_input+0x724>)
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80186d8:	4b91      	ldr	r3, [pc, #580]	@ (8018920 <tcp_input+0x728>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	4a8f      	ldr	r2, [pc, #572]	@ (801891c <tcp_input+0x724>)
 80186de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80186e0:	4b90      	ldr	r3, [pc, #576]	@ (8018924 <tcp_input+0x72c>)
 80186e2:	2200      	movs	r2, #0
 80186e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80186e6:	4b90      	ldr	r3, [pc, #576]	@ (8018928 <tcp_input+0x730>)
 80186e8:	2200      	movs	r2, #0
 80186ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80186ec:	4b8f      	ldr	r3, [pc, #572]	@ (801892c <tcp_input+0x734>)
 80186ee:	2200      	movs	r2, #0
 80186f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80186f2:	4b8f      	ldr	r3, [pc, #572]	@ (8018930 <tcp_input+0x738>)
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	f003 0308 	and.w	r3, r3, #8
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d006      	beq.n	801870c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	7b5b      	ldrb	r3, [r3, #13]
 8018702:	f043 0301 	orr.w	r3, r3, #1
 8018706:	b2da      	uxtb	r2, r3
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801870c:	69fb      	ldr	r3, [r7, #28]
 801870e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018710:	2b00      	cmp	r3, #0
 8018712:	d017      	beq.n	8018744 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018714:	69f8      	ldr	r0, [r7, #28]
 8018716:	f7ff f859 	bl	80177cc <tcp_process_refused_data>
 801871a:	4603      	mov	r3, r0
 801871c:	f113 0f0d 	cmn.w	r3, #13
 8018720:	d007      	beq.n	8018732 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018722:	69fb      	ldr	r3, [r7, #28]
 8018724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018726:	2b00      	cmp	r3, #0
 8018728:	d00c      	beq.n	8018744 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801872a:	4b82      	ldr	r3, [pc, #520]	@ (8018934 <tcp_input+0x73c>)
 801872c:	881b      	ldrh	r3, [r3, #0]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d008      	beq.n	8018744 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018732:	69fb      	ldr	r3, [r7, #28]
 8018734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018736:	2b00      	cmp	r3, #0
 8018738:	f040 80e4 	bne.w	8018904 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801873c:	69f8      	ldr	r0, [r7, #28]
 801873e:	f003 fe01 	bl	801c344 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018742:	e0df      	b.n	8018904 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8018744:	4a7c      	ldr	r2, [pc, #496]	@ (8018938 <tcp_input+0x740>)
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801874a:	69f8      	ldr	r0, [r7, #28]
 801874c:	f000 fb18 	bl	8018d80 <tcp_process>
 8018750:	4603      	mov	r3, r0
 8018752:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018754:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018758:	f113 0f0d 	cmn.w	r3, #13
 801875c:	f000 80d4 	beq.w	8018908 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8018760:	4b71      	ldr	r3, [pc, #452]	@ (8018928 <tcp_input+0x730>)
 8018762:	781b      	ldrb	r3, [r3, #0]
 8018764:	f003 0308 	and.w	r3, r3, #8
 8018768:	2b00      	cmp	r3, #0
 801876a:	d015      	beq.n	8018798 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801876c:	69fb      	ldr	r3, [r7, #28]
 801876e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018772:	2b00      	cmp	r3, #0
 8018774:	d008      	beq.n	8018788 <tcp_input+0x590>
 8018776:	69fb      	ldr	r3, [r7, #28]
 8018778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801877c:	69fa      	ldr	r2, [r7, #28]
 801877e:	6912      	ldr	r2, [r2, #16]
 8018780:	f06f 010d 	mvn.w	r1, #13
 8018784:	4610      	mov	r0, r2
 8018786:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018788:	69f9      	ldr	r1, [r7, #28]
 801878a:	486c      	ldr	r0, [pc, #432]	@ (801893c <tcp_input+0x744>)
 801878c:	f7ff fbbc 	bl	8017f08 <tcp_pcb_remove>
        tcp_free(pcb);
 8018790:	69f8      	ldr	r0, [r7, #28]
 8018792:	f7fd fed1 	bl	8016538 <tcp_free>
 8018796:	e0da      	b.n	801894e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8018798:	2300      	movs	r3, #0
 801879a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801879c:	4b63      	ldr	r3, [pc, #396]	@ (801892c <tcp_input+0x734>)
 801879e:	881b      	ldrh	r3, [r3, #0]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d01d      	beq.n	80187e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80187a4:	4b61      	ldr	r3, [pc, #388]	@ (801892c <tcp_input+0x734>)
 80187a6:	881b      	ldrh	r3, [r3, #0]
 80187a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80187aa:	69fb      	ldr	r3, [r7, #28]
 80187ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d00a      	beq.n	80187ca <tcp_input+0x5d2>
 80187b4:	69fb      	ldr	r3, [r7, #28]
 80187b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80187ba:	69fa      	ldr	r2, [r7, #28]
 80187bc:	6910      	ldr	r0, [r2, #16]
 80187be:	89fa      	ldrh	r2, [r7, #14]
 80187c0:	69f9      	ldr	r1, [r7, #28]
 80187c2:	4798      	blx	r3
 80187c4:	4603      	mov	r3, r0
 80187c6:	74fb      	strb	r3, [r7, #19]
 80187c8:	e001      	b.n	80187ce <tcp_input+0x5d6>
 80187ca:	2300      	movs	r3, #0
 80187cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80187ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187d2:	f113 0f0d 	cmn.w	r3, #13
 80187d6:	f000 8099 	beq.w	801890c <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 80187da:	4b54      	ldr	r3, [pc, #336]	@ (801892c <tcp_input+0x734>)
 80187dc:	2200      	movs	r2, #0
 80187de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80187e0:	69f8      	ldr	r0, [r7, #28]
 80187e2:	f000 f915 	bl	8018a10 <tcp_input_delayed_close>
 80187e6:	4603      	mov	r3, r0
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	f040 8091 	bne.w	8018910 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80187ee:	4b4d      	ldr	r3, [pc, #308]	@ (8018924 <tcp_input+0x72c>)
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d041      	beq.n	801887a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80187f6:	69fb      	ldr	r3, [r7, #28]
 80187f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d006      	beq.n	801880c <tcp_input+0x614>
 80187fe:	4b50      	ldr	r3, [pc, #320]	@ (8018940 <tcp_input+0x748>)
 8018800:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8018804:	494f      	ldr	r1, [pc, #316]	@ (8018944 <tcp_input+0x74c>)
 8018806:	4850      	ldr	r0, [pc, #320]	@ (8018948 <tcp_input+0x750>)
 8018808:	f005 f9fa 	bl	801dc00 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	8b5b      	ldrh	r3, [r3, #26]
 8018810:	f003 0310 	and.w	r3, r3, #16
 8018814:	2b00      	cmp	r3, #0
 8018816:	d008      	beq.n	801882a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018818:	4b42      	ldr	r3, [pc, #264]	@ (8018924 <tcp_input+0x72c>)
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	4618      	mov	r0, r3
 801881e:	f7fd fbcf 	bl	8015fc0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018822:	69f8      	ldr	r0, [r7, #28]
 8018824:	f7fe f9cc 	bl	8016bc0 <tcp_abort>
            goto aborted;
 8018828:	e091      	b.n	801894e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801882a:	69fb      	ldr	r3, [r7, #28]
 801882c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8018830:	2b00      	cmp	r3, #0
 8018832:	d00c      	beq.n	801884e <tcp_input+0x656>
 8018834:	69fb      	ldr	r3, [r7, #28]
 8018836:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801883a:	69fb      	ldr	r3, [r7, #28]
 801883c:	6918      	ldr	r0, [r3, #16]
 801883e:	4b39      	ldr	r3, [pc, #228]	@ (8018924 <tcp_input+0x72c>)
 8018840:	681a      	ldr	r2, [r3, #0]
 8018842:	2300      	movs	r3, #0
 8018844:	69f9      	ldr	r1, [r7, #28]
 8018846:	47a0      	blx	r4
 8018848:	4603      	mov	r3, r0
 801884a:	74fb      	strb	r3, [r7, #19]
 801884c:	e008      	b.n	8018860 <tcp_input+0x668>
 801884e:	4b35      	ldr	r3, [pc, #212]	@ (8018924 <tcp_input+0x72c>)
 8018850:	681a      	ldr	r2, [r3, #0]
 8018852:	2300      	movs	r3, #0
 8018854:	69f9      	ldr	r1, [r7, #28]
 8018856:	2000      	movs	r0, #0
 8018858:	f7ff f890 	bl	801797c <tcp_recv_null>
 801885c:	4603      	mov	r3, r0
 801885e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018864:	f113 0f0d 	cmn.w	r3, #13
 8018868:	d054      	beq.n	8018914 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801886a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d003      	beq.n	801887a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8018872:	4b2c      	ldr	r3, [pc, #176]	@ (8018924 <tcp_input+0x72c>)
 8018874:	681a      	ldr	r2, [r3, #0]
 8018876:	69fb      	ldr	r3, [r7, #28]
 8018878:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801887a:	4b2b      	ldr	r3, [pc, #172]	@ (8018928 <tcp_input+0x730>)
 801887c:	781b      	ldrb	r3, [r3, #0]
 801887e:	f003 0320 	and.w	r3, r3, #32
 8018882:	2b00      	cmp	r3, #0
 8018884:	d031      	beq.n	80188ea <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8018886:	69fb      	ldr	r3, [r7, #28]
 8018888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801888a:	2b00      	cmp	r3, #0
 801888c:	d009      	beq.n	80188a2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801888e:	69fb      	ldr	r3, [r7, #28]
 8018890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018892:	7b5a      	ldrb	r2, [r3, #13]
 8018894:	69fb      	ldr	r3, [r7, #28]
 8018896:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018898:	f042 0220 	orr.w	r2, r2, #32
 801889c:	b2d2      	uxtb	r2, r2
 801889e:	735a      	strb	r2, [r3, #13]
 80188a0:	e023      	b.n	80188ea <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80188a2:	69fb      	ldr	r3, [r7, #28]
 80188a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80188a6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80188aa:	4293      	cmp	r3, r2
 80188ac:	d005      	beq.n	80188ba <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 80188ae:	69fb      	ldr	r3, [r7, #28]
 80188b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80188b2:	3301      	adds	r3, #1
 80188b4:	b29a      	uxth	r2, r3
 80188b6:	69fb      	ldr	r3, [r7, #28]
 80188b8:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d00b      	beq.n	80188dc <tcp_input+0x6e4>
 80188c4:	69fb      	ldr	r3, [r7, #28]
 80188c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80188ca:	69fb      	ldr	r3, [r7, #28]
 80188cc:	6918      	ldr	r0, [r3, #16]
 80188ce:	2300      	movs	r3, #0
 80188d0:	2200      	movs	r2, #0
 80188d2:	69f9      	ldr	r1, [r7, #28]
 80188d4:	47a0      	blx	r4
 80188d6:	4603      	mov	r3, r0
 80188d8:	74fb      	strb	r3, [r7, #19]
 80188da:	e001      	b.n	80188e0 <tcp_input+0x6e8>
 80188dc:	2300      	movs	r3, #0
 80188de:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80188e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80188e4:	f113 0f0d 	cmn.w	r3, #13
 80188e8:	d016      	beq.n	8018918 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80188ea:	4b13      	ldr	r3, [pc, #76]	@ (8018938 <tcp_input+0x740>)
 80188ec:	2200      	movs	r2, #0
 80188ee:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80188f0:	69f8      	ldr	r0, [r7, #28]
 80188f2:	f000 f88d 	bl	8018a10 <tcp_input_delayed_close>
 80188f6:	4603      	mov	r3, r0
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d127      	bne.n	801894c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80188fc:	69f8      	ldr	r0, [r7, #28]
 80188fe:	f002 ff1b 	bl	801b738 <tcp_output>
 8018902:	e024      	b.n	801894e <tcp_input+0x756>
        goto aborted;
 8018904:	bf00      	nop
 8018906:	e022      	b.n	801894e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018908:	bf00      	nop
 801890a:	e020      	b.n	801894e <tcp_input+0x756>
              goto aborted;
 801890c:	bf00      	nop
 801890e:	e01e      	b.n	801894e <tcp_input+0x756>
          goto aborted;
 8018910:	bf00      	nop
 8018912:	e01c      	b.n	801894e <tcp_input+0x756>
            goto aborted;
 8018914:	bf00      	nop
 8018916:	e01a      	b.n	801894e <tcp_input+0x756>
              goto aborted;
 8018918:	bf00      	nop
 801891a:	e018      	b.n	801894e <tcp_input+0x756>
 801891c:	2000f9c8 	.word	0x2000f9c8
 8018920:	2000f9d8 	.word	0x2000f9d8
 8018924:	2000f9f8 	.word	0x2000f9f8
 8018928:	2000f9f5 	.word	0x2000f9f5
 801892c:	2000f9f0 	.word	0x2000f9f0
 8018930:	2000f9f4 	.word	0x2000f9f4
 8018934:	2000f9f2 	.word	0x2000f9f2
 8018938:	2000f9fc 	.word	0x2000f9fc
 801893c:	2000f9bc 	.word	0x2000f9bc
 8018940:	08022180 	.word	0x08022180
 8018944:	08022364 	.word	0x08022364
 8018948:	080221fc 	.word	0x080221fc
          goto aborted;
 801894c:	bf00      	nop
    tcp_input_pcb = NULL;
 801894e:	4b27      	ldr	r3, [pc, #156]	@ (80189ec <tcp_input+0x7f4>)
 8018950:	2200      	movs	r2, #0
 8018952:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8018954:	4b26      	ldr	r3, [pc, #152]	@ (80189f0 <tcp_input+0x7f8>)
 8018956:	2200      	movs	r2, #0
 8018958:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801895a:	4b26      	ldr	r3, [pc, #152]	@ (80189f4 <tcp_input+0x7fc>)
 801895c:	685b      	ldr	r3, [r3, #4]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d03f      	beq.n	80189e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8018962:	4b24      	ldr	r3, [pc, #144]	@ (80189f4 <tcp_input+0x7fc>)
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	4618      	mov	r0, r3
 8018968:	f7fd fb2a 	bl	8015fc0 <pbuf_free>
      inseg.p = NULL;
 801896c:	4b21      	ldr	r3, [pc, #132]	@ (80189f4 <tcp_input+0x7fc>)
 801896e:	2200      	movs	r2, #0
 8018970:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018972:	e036      	b.n	80189e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018974:	4b20      	ldr	r3, [pc, #128]	@ (80189f8 <tcp_input+0x800>)
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	899b      	ldrh	r3, [r3, #12]
 801897a:	b29b      	uxth	r3, r3
 801897c:	4618      	mov	r0, r3
 801897e:	f7fb fe6d 	bl	801465c <lwip_htons>
 8018982:	4603      	mov	r3, r0
 8018984:	b2db      	uxtb	r3, r3
 8018986:	f003 0304 	and.w	r3, r3, #4
 801898a:	2b00      	cmp	r3, #0
 801898c:	d118      	bne.n	80189c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801898e:	4b1b      	ldr	r3, [pc, #108]	@ (80189fc <tcp_input+0x804>)
 8018990:	6819      	ldr	r1, [r3, #0]
 8018992:	4b1b      	ldr	r3, [pc, #108]	@ (8018a00 <tcp_input+0x808>)
 8018994:	881b      	ldrh	r3, [r3, #0]
 8018996:	461a      	mov	r2, r3
 8018998:	4b1a      	ldr	r3, [pc, #104]	@ (8018a04 <tcp_input+0x80c>)
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801899e:	4b16      	ldr	r3, [pc, #88]	@ (80189f8 <tcp_input+0x800>)
 80189a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80189a2:	885b      	ldrh	r3, [r3, #2]
 80189a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80189a6:	4a14      	ldr	r2, [pc, #80]	@ (80189f8 <tcp_input+0x800>)
 80189a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80189aa:	8812      	ldrh	r2, [r2, #0]
 80189ac:	b292      	uxth	r2, r2
 80189ae:	9202      	str	r2, [sp, #8]
 80189b0:	9301      	str	r3, [sp, #4]
 80189b2:	4b15      	ldr	r3, [pc, #84]	@ (8018a08 <tcp_input+0x810>)
 80189b4:	9300      	str	r3, [sp, #0]
 80189b6:	4b15      	ldr	r3, [pc, #84]	@ (8018a0c <tcp_input+0x814>)
 80189b8:	4602      	mov	r2, r0
 80189ba:	2000      	movs	r0, #0
 80189bc:	f003 fc70 	bl	801c2a0 <tcp_rst>
    pbuf_free(p);
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f7fd fafd 	bl	8015fc0 <pbuf_free>
  return;
 80189c6:	e00c      	b.n	80189e2 <tcp_input+0x7ea>
    goto dropped;
 80189c8:	bf00      	nop
 80189ca:	e006      	b.n	80189da <tcp_input+0x7e2>
    goto dropped;
 80189cc:	bf00      	nop
 80189ce:	e004      	b.n	80189da <tcp_input+0x7e2>
    goto dropped;
 80189d0:	bf00      	nop
 80189d2:	e002      	b.n	80189da <tcp_input+0x7e2>
      goto dropped;
 80189d4:	bf00      	nop
 80189d6:	e000      	b.n	80189da <tcp_input+0x7e2>
      goto dropped;
 80189d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80189da:	6878      	ldr	r0, [r7, #4]
 80189dc:	f7fd faf0 	bl	8015fc0 <pbuf_free>
 80189e0:	e000      	b.n	80189e4 <tcp_input+0x7ec>
  return;
 80189e2:	bf00      	nop
}
 80189e4:	3724      	adds	r7, #36	@ 0x24
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd90      	pop	{r4, r7, pc}
 80189ea:	bf00      	nop
 80189ec:	2000f9fc 	.word	0x2000f9fc
 80189f0:	2000f9f8 	.word	0x2000f9f8
 80189f4:	2000f9c8 	.word	0x2000f9c8
 80189f8:	2000f9d8 	.word	0x2000f9d8
 80189fc:	2000f9ec 	.word	0x2000f9ec
 8018a00:	2000f9f2 	.word	0x2000f9f2
 8018a04:	2000f9e8 	.word	0x2000f9e8
 8018a08:	20008864 	.word	0x20008864
 8018a0c:	20008868 	.word	0x20008868

08018a10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d106      	bne.n	8018a2c <tcp_input_delayed_close+0x1c>
 8018a1e:	4b17      	ldr	r3, [pc, #92]	@ (8018a7c <tcp_input_delayed_close+0x6c>)
 8018a20:	f240 225a 	movw	r2, #602	@ 0x25a
 8018a24:	4916      	ldr	r1, [pc, #88]	@ (8018a80 <tcp_input_delayed_close+0x70>)
 8018a26:	4817      	ldr	r0, [pc, #92]	@ (8018a84 <tcp_input_delayed_close+0x74>)
 8018a28:	f005 f8ea 	bl	801dc00 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018a2c:	4b16      	ldr	r3, [pc, #88]	@ (8018a88 <tcp_input_delayed_close+0x78>)
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	f003 0310 	and.w	r3, r3, #16
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d01c      	beq.n	8018a72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	8b5b      	ldrh	r3, [r3, #26]
 8018a3c:	f003 0310 	and.w	r3, r3, #16
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d10d      	bne.n	8018a60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d008      	beq.n	8018a60 <tcp_input_delayed_close+0x50>
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018a54:	687a      	ldr	r2, [r7, #4]
 8018a56:	6912      	ldr	r2, [r2, #16]
 8018a58:	f06f 010e 	mvn.w	r1, #14
 8018a5c:	4610      	mov	r0, r2
 8018a5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018a60:	6879      	ldr	r1, [r7, #4]
 8018a62:	480a      	ldr	r0, [pc, #40]	@ (8018a8c <tcp_input_delayed_close+0x7c>)
 8018a64:	f7ff fa50 	bl	8017f08 <tcp_pcb_remove>
    tcp_free(pcb);
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f7fd fd65 	bl	8016538 <tcp_free>
    return 1;
 8018a6e:	2301      	movs	r3, #1
 8018a70:	e000      	b.n	8018a74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018a72:	2300      	movs	r3, #0
}
 8018a74:	4618      	mov	r0, r3
 8018a76:	3708      	adds	r7, #8
 8018a78:	46bd      	mov	sp, r7
 8018a7a:	bd80      	pop	{r7, pc}
 8018a7c:	08022180 	.word	0x08022180
 8018a80:	08022380 	.word	0x08022380
 8018a84:	080221fc 	.word	0x080221fc
 8018a88:	2000f9f5 	.word	0x2000f9f5
 8018a8c:	2000f9bc 	.word	0x2000f9bc

08018a90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018a90:	b590      	push	{r4, r7, lr}
 8018a92:	b08b      	sub	sp, #44	@ 0x2c
 8018a94:	af04      	add	r7, sp, #16
 8018a96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018a98:	4b6f      	ldr	r3, [pc, #444]	@ (8018c58 <tcp_listen_input+0x1c8>)
 8018a9a:	781b      	ldrb	r3, [r3, #0]
 8018a9c:	f003 0304 	and.w	r3, r3, #4
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	f040 80d2 	bne.w	8018c4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d106      	bne.n	8018aba <tcp_listen_input+0x2a>
 8018aac:	4b6b      	ldr	r3, [pc, #428]	@ (8018c5c <tcp_listen_input+0x1cc>)
 8018aae:	f240 2281 	movw	r2, #641	@ 0x281
 8018ab2:	496b      	ldr	r1, [pc, #428]	@ (8018c60 <tcp_listen_input+0x1d0>)
 8018ab4:	486b      	ldr	r0, [pc, #428]	@ (8018c64 <tcp_listen_input+0x1d4>)
 8018ab6:	f005 f8a3 	bl	801dc00 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018aba:	4b67      	ldr	r3, [pc, #412]	@ (8018c58 <tcp_listen_input+0x1c8>)
 8018abc:	781b      	ldrb	r3, [r3, #0]
 8018abe:	f003 0310 	and.w	r3, r3, #16
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d019      	beq.n	8018afa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ac6:	4b68      	ldr	r3, [pc, #416]	@ (8018c68 <tcp_listen_input+0x1d8>)
 8018ac8:	6819      	ldr	r1, [r3, #0]
 8018aca:	4b68      	ldr	r3, [pc, #416]	@ (8018c6c <tcp_listen_input+0x1dc>)
 8018acc:	881b      	ldrh	r3, [r3, #0]
 8018ace:	461a      	mov	r2, r3
 8018ad0:	4b67      	ldr	r3, [pc, #412]	@ (8018c70 <tcp_listen_input+0x1e0>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ad6:	4b67      	ldr	r3, [pc, #412]	@ (8018c74 <tcp_listen_input+0x1e4>)
 8018ad8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ada:	885b      	ldrh	r3, [r3, #2]
 8018adc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ade:	4a65      	ldr	r2, [pc, #404]	@ (8018c74 <tcp_listen_input+0x1e4>)
 8018ae0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ae2:	8812      	ldrh	r2, [r2, #0]
 8018ae4:	b292      	uxth	r2, r2
 8018ae6:	9202      	str	r2, [sp, #8]
 8018ae8:	9301      	str	r3, [sp, #4]
 8018aea:	4b63      	ldr	r3, [pc, #396]	@ (8018c78 <tcp_listen_input+0x1e8>)
 8018aec:	9300      	str	r3, [sp, #0]
 8018aee:	4b63      	ldr	r3, [pc, #396]	@ (8018c7c <tcp_listen_input+0x1ec>)
 8018af0:	4602      	mov	r2, r0
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f003 fbd4 	bl	801c2a0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018af8:	e0a9      	b.n	8018c4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8018afa:	4b57      	ldr	r3, [pc, #348]	@ (8018c58 <tcp_listen_input+0x1c8>)
 8018afc:	781b      	ldrb	r3, [r3, #0]
 8018afe:	f003 0302 	and.w	r3, r3, #2
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	f000 80a3 	beq.w	8018c4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	7d5b      	ldrb	r3, [r3, #21]
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7ff f859 	bl	8017bc4 <tcp_alloc>
 8018b12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018b14:	697b      	ldr	r3, [r7, #20]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d111      	bne.n	8018b3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	699b      	ldr	r3, [r3, #24]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d00a      	beq.n	8018b38 <tcp_listen_input+0xa8>
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	699b      	ldr	r3, [r3, #24]
 8018b26:	687a      	ldr	r2, [r7, #4]
 8018b28:	6910      	ldr	r0, [r2, #16]
 8018b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8018b2e:	2100      	movs	r1, #0
 8018b30:	4798      	blx	r3
 8018b32:	4603      	mov	r3, r0
 8018b34:	73bb      	strb	r3, [r7, #14]
      return;
 8018b36:	e08b      	b.n	8018c50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b38:	23f0      	movs	r3, #240	@ 0xf0
 8018b3a:	73bb      	strb	r3, [r7, #14]
      return;
 8018b3c:	e088      	b.n	8018c50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018b3e:	4b50      	ldr	r3, [pc, #320]	@ (8018c80 <tcp_listen_input+0x1f0>)
 8018b40:	695a      	ldr	r2, [r3, #20]
 8018b42:	697b      	ldr	r3, [r7, #20]
 8018b44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018b46:	4b4e      	ldr	r3, [pc, #312]	@ (8018c80 <tcp_listen_input+0x1f0>)
 8018b48:	691a      	ldr	r2, [r3, #16]
 8018b4a:	697b      	ldr	r3, [r7, #20]
 8018b4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	8ada      	ldrh	r2, [r3, #22]
 8018b52:	697b      	ldr	r3, [r7, #20]
 8018b54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018b56:	4b47      	ldr	r3, [pc, #284]	@ (8018c74 <tcp_listen_input+0x1e4>)
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	881b      	ldrh	r3, [r3, #0]
 8018b5c:	b29a      	uxth	r2, r3
 8018b5e:	697b      	ldr	r3, [r7, #20]
 8018b60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	2203      	movs	r2, #3
 8018b66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018b68:	4b41      	ldr	r3, [pc, #260]	@ (8018c70 <tcp_listen_input+0x1e0>)
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	1c5a      	adds	r2, r3, #1
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018b72:	697b      	ldr	r3, [r7, #20]
 8018b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b76:	697b      	ldr	r3, [r7, #20]
 8018b78:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8018b7a:	6978      	ldr	r0, [r7, #20]
 8018b7c:	f7ff fa58 	bl	8018030 <tcp_next_iss>
 8018b80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	693a      	ldr	r2, [r7, #16]
 8018b86:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	693a      	ldr	r2, [r7, #16]
 8018b8c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8018b8e:	697b      	ldr	r3, [r7, #20]
 8018b90:	693a      	ldr	r2, [r7, #16]
 8018b92:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8018b94:	697b      	ldr	r3, [r7, #20]
 8018b96:	693a      	ldr	r2, [r7, #16]
 8018b98:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018b9a:	4b35      	ldr	r3, [pc, #212]	@ (8018c70 <tcp_listen_input+0x1e0>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	1e5a      	subs	r2, r3, #1
 8018ba0:	697b      	ldr	r3, [r7, #20]
 8018ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	691a      	ldr	r2, [r3, #16]
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018bac:	697b      	ldr	r3, [r7, #20]
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	7a5b      	ldrb	r3, [r3, #9]
 8018bb6:	f003 030c 	and.w	r3, r3, #12
 8018bba:	b2da      	uxtb	r2, r3
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	7a1a      	ldrb	r2, [r3, #8]
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8018c84 <tcp_listen_input+0x1f4>)
 8018bca:	681a      	ldr	r2, [r3, #0]
 8018bcc:	697b      	ldr	r3, [r7, #20]
 8018bce:	60da      	str	r2, [r3, #12]
 8018bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8018c84 <tcp_listen_input+0x1f4>)
 8018bd2:	697b      	ldr	r3, [r7, #20]
 8018bd4:	6013      	str	r3, [r2, #0]
 8018bd6:	f003 fd25 	bl	801c624 <tcp_timer_needed>
 8018bda:	4b2b      	ldr	r3, [pc, #172]	@ (8018c88 <tcp_listen_input+0x1f8>)
 8018bdc:	2201      	movs	r2, #1
 8018bde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018be0:	6978      	ldr	r0, [r7, #20]
 8018be2:	f001 fd8b 	bl	801a6fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018be6:	4b23      	ldr	r3, [pc, #140]	@ (8018c74 <tcp_listen_input+0x1e4>)
 8018be8:	681b      	ldr	r3, [r3, #0]
 8018bea:	89db      	ldrh	r3, [r3, #14]
 8018bec:	b29a      	uxth	r2, r3
 8018bee:	697b      	ldr	r3, [r7, #20]
 8018bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018bf4:	697b      	ldr	r3, [r7, #20]
 8018bf6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018bfa:	697b      	ldr	r3, [r7, #20]
 8018bfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8018c04:	697b      	ldr	r3, [r7, #20]
 8018c06:	3304      	adds	r3, #4
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7fa fb37 	bl	801327c <ip4_route>
 8018c0e:	4601      	mov	r1, r0
 8018c10:	697b      	ldr	r3, [r7, #20]
 8018c12:	3304      	adds	r3, #4
 8018c14:	461a      	mov	r2, r3
 8018c16:	4620      	mov	r0, r4
 8018c18:	f7ff fa30 	bl	801807c <tcp_eff_send_mss_netif>
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	461a      	mov	r2, r3
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018c24:	2112      	movs	r1, #18
 8018c26:	6978      	ldr	r0, [r7, #20]
 8018c28:	f002 fc98 	bl	801b55c <tcp_enqueue_flags>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d004      	beq.n	8018c42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018c38:	2100      	movs	r1, #0
 8018c3a:	6978      	ldr	r0, [r7, #20]
 8018c3c:	f7fd ff02 	bl	8016a44 <tcp_abandon>
      return;
 8018c40:	e006      	b.n	8018c50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8018c42:	6978      	ldr	r0, [r7, #20]
 8018c44:	f002 fd78 	bl	801b738 <tcp_output>
  return;
 8018c48:	e001      	b.n	8018c4e <tcp_listen_input+0x1be>
    return;
 8018c4a:	bf00      	nop
 8018c4c:	e000      	b.n	8018c50 <tcp_listen_input+0x1c0>
  return;
 8018c4e:	bf00      	nop
}
 8018c50:	371c      	adds	r7, #28
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bd90      	pop	{r4, r7, pc}
 8018c56:	bf00      	nop
 8018c58:	2000f9f4 	.word	0x2000f9f4
 8018c5c:	08022180 	.word	0x08022180
 8018c60:	080223a8 	.word	0x080223a8
 8018c64:	080221fc 	.word	0x080221fc
 8018c68:	2000f9ec 	.word	0x2000f9ec
 8018c6c:	2000f9f2 	.word	0x2000f9f2
 8018c70:	2000f9e8 	.word	0x2000f9e8
 8018c74:	2000f9d8 	.word	0x2000f9d8
 8018c78:	20008864 	.word	0x20008864
 8018c7c:	20008868 	.word	0x20008868
 8018c80:	20008854 	.word	0x20008854
 8018c84:	2000f9bc 	.word	0x2000f9bc
 8018c88:	2000f9c4 	.word	0x2000f9c4

08018c8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b086      	sub	sp, #24
 8018c90:	af04      	add	r7, sp, #16
 8018c92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018c94:	4b2f      	ldr	r3, [pc, #188]	@ (8018d54 <tcp_timewait_input+0xc8>)
 8018c96:	781b      	ldrb	r3, [r3, #0]
 8018c98:	f003 0304 	and.w	r3, r3, #4
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d153      	bne.n	8018d48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d106      	bne.n	8018cb4 <tcp_timewait_input+0x28>
 8018ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8018d58 <tcp_timewait_input+0xcc>)
 8018ca8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8018cac:	492b      	ldr	r1, [pc, #172]	@ (8018d5c <tcp_timewait_input+0xd0>)
 8018cae:	482c      	ldr	r0, [pc, #176]	@ (8018d60 <tcp_timewait_input+0xd4>)
 8018cb0:	f004 ffa6 	bl	801dc00 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018cb4:	4b27      	ldr	r3, [pc, #156]	@ (8018d54 <tcp_timewait_input+0xc8>)
 8018cb6:	781b      	ldrb	r3, [r3, #0]
 8018cb8:	f003 0302 	and.w	r3, r3, #2
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d02a      	beq.n	8018d16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018cc0:	4b28      	ldr	r3, [pc, #160]	@ (8018d64 <tcp_timewait_input+0xd8>)
 8018cc2:	681a      	ldr	r2, [r3, #0]
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cc8:	1ad3      	subs	r3, r2, r3
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	db2d      	blt.n	8018d2a <tcp_timewait_input+0x9e>
 8018cce:	4b25      	ldr	r3, [pc, #148]	@ (8018d64 <tcp_timewait_input+0xd8>)
 8018cd0:	681a      	ldr	r2, [r3, #0]
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cd6:	6879      	ldr	r1, [r7, #4]
 8018cd8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018cda:	440b      	add	r3, r1
 8018cdc:	1ad3      	subs	r3, r2, r3
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	dc23      	bgt.n	8018d2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ce2:	4b21      	ldr	r3, [pc, #132]	@ (8018d68 <tcp_timewait_input+0xdc>)
 8018ce4:	6819      	ldr	r1, [r3, #0]
 8018ce6:	4b21      	ldr	r3, [pc, #132]	@ (8018d6c <tcp_timewait_input+0xe0>)
 8018ce8:	881b      	ldrh	r3, [r3, #0]
 8018cea:	461a      	mov	r2, r3
 8018cec:	4b1d      	ldr	r3, [pc, #116]	@ (8018d64 <tcp_timewait_input+0xd8>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8018d70 <tcp_timewait_input+0xe4>)
 8018cf4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cf6:	885b      	ldrh	r3, [r3, #2]
 8018cf8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8018d70 <tcp_timewait_input+0xe4>)
 8018cfc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cfe:	8812      	ldrh	r2, [r2, #0]
 8018d00:	b292      	uxth	r2, r2
 8018d02:	9202      	str	r2, [sp, #8]
 8018d04:	9301      	str	r3, [sp, #4]
 8018d06:	4b1b      	ldr	r3, [pc, #108]	@ (8018d74 <tcp_timewait_input+0xe8>)
 8018d08:	9300      	str	r3, [sp, #0]
 8018d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8018d78 <tcp_timewait_input+0xec>)
 8018d0c:	4602      	mov	r2, r0
 8018d0e:	6878      	ldr	r0, [r7, #4]
 8018d10:	f003 fac6 	bl	801c2a0 <tcp_rst>
      return;
 8018d14:	e01b      	b.n	8018d4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8018d16:	4b0f      	ldr	r3, [pc, #60]	@ (8018d54 <tcp_timewait_input+0xc8>)
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	f003 0301 	and.w	r3, r3, #1
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d003      	beq.n	8018d2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018d22:	4b16      	ldr	r3, [pc, #88]	@ (8018d7c <tcp_timewait_input+0xf0>)
 8018d24:	681a      	ldr	r2, [r3, #0]
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018d2a:	4b10      	ldr	r3, [pc, #64]	@ (8018d6c <tcp_timewait_input+0xe0>)
 8018d2c:	881b      	ldrh	r3, [r3, #0]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d00c      	beq.n	8018d4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	8b5b      	ldrh	r3, [r3, #26]
 8018d36:	f043 0302 	orr.w	r3, r3, #2
 8018d3a:	b29a      	uxth	r2, r3
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f002 fcf9 	bl	801b738 <tcp_output>
  }
  return;
 8018d46:	e001      	b.n	8018d4c <tcp_timewait_input+0xc0>
    return;
 8018d48:	bf00      	nop
 8018d4a:	e000      	b.n	8018d4e <tcp_timewait_input+0xc2>
  return;
 8018d4c:	bf00      	nop
}
 8018d4e:	3708      	adds	r7, #8
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}
 8018d54:	2000f9f4 	.word	0x2000f9f4
 8018d58:	08022180 	.word	0x08022180
 8018d5c:	080223c8 	.word	0x080223c8
 8018d60:	080221fc 	.word	0x080221fc
 8018d64:	2000f9e8 	.word	0x2000f9e8
 8018d68:	2000f9ec 	.word	0x2000f9ec
 8018d6c:	2000f9f2 	.word	0x2000f9f2
 8018d70:	2000f9d8 	.word	0x2000f9d8
 8018d74:	20008864 	.word	0x20008864
 8018d78:	20008868 	.word	0x20008868
 8018d7c:	2000f9b0 	.word	0x2000f9b0

08018d80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018d80:	b590      	push	{r4, r7, lr}
 8018d82:	b08d      	sub	sp, #52	@ 0x34
 8018d84:	af04      	add	r7, sp, #16
 8018d86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d106      	bne.n	8018da4 <tcp_process+0x24>
 8018d96:	4b9d      	ldr	r3, [pc, #628]	@ (801900c <tcp_process+0x28c>)
 8018d98:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8018d9c:	499c      	ldr	r1, [pc, #624]	@ (8019010 <tcp_process+0x290>)
 8018d9e:	489d      	ldr	r0, [pc, #628]	@ (8019014 <tcp_process+0x294>)
 8018da0:	f004 ff2e 	bl	801dc00 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018da4:	4b9c      	ldr	r3, [pc, #624]	@ (8019018 <tcp_process+0x298>)
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	f003 0304 	and.w	r3, r3, #4
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d04e      	beq.n	8018e4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	7d1b      	ldrb	r3, [r3, #20]
 8018db4:	2b02      	cmp	r3, #2
 8018db6:	d108      	bne.n	8018dca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018dbc:	4b97      	ldr	r3, [pc, #604]	@ (801901c <tcp_process+0x29c>)
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	429a      	cmp	r2, r3
 8018dc2:	d123      	bne.n	8018e0c <tcp_process+0x8c>
        acceptable = 1;
 8018dc4:	2301      	movs	r3, #1
 8018dc6:	76fb      	strb	r3, [r7, #27]
 8018dc8:	e020      	b.n	8018e0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018dce:	4b94      	ldr	r3, [pc, #592]	@ (8019020 <tcp_process+0x2a0>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	429a      	cmp	r2, r3
 8018dd4:	d102      	bne.n	8018ddc <tcp_process+0x5c>
        acceptable = 1;
 8018dd6:	2301      	movs	r3, #1
 8018dd8:	76fb      	strb	r3, [r7, #27]
 8018dda:	e017      	b.n	8018e0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018ddc:	4b90      	ldr	r3, [pc, #576]	@ (8019020 <tcp_process+0x2a0>)
 8018dde:	681a      	ldr	r2, [r3, #0]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018de4:	1ad3      	subs	r3, r2, r3
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	db10      	blt.n	8018e0c <tcp_process+0x8c>
 8018dea:	4b8d      	ldr	r3, [pc, #564]	@ (8019020 <tcp_process+0x2a0>)
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018df2:	6879      	ldr	r1, [r7, #4]
 8018df4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018df6:	440b      	add	r3, r1
 8018df8:	1ad3      	subs	r3, r2, r3
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	dc06      	bgt.n	8018e0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	8b5b      	ldrh	r3, [r3, #26]
 8018e02:	f043 0302 	orr.w	r3, r3, #2
 8018e06:	b29a      	uxth	r2, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018e0c:	7efb      	ldrb	r3, [r7, #27]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d01b      	beq.n	8018e4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	7d1b      	ldrb	r3, [r3, #20]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d106      	bne.n	8018e28 <tcp_process+0xa8>
 8018e1a:	4b7c      	ldr	r3, [pc, #496]	@ (801900c <tcp_process+0x28c>)
 8018e1c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8018e20:	4980      	ldr	r1, [pc, #512]	@ (8019024 <tcp_process+0x2a4>)
 8018e22:	487c      	ldr	r0, [pc, #496]	@ (8019014 <tcp_process+0x294>)
 8018e24:	f004 feec 	bl	801dc00 <iprintf>
      recv_flags |= TF_RESET;
 8018e28:	4b7f      	ldr	r3, [pc, #508]	@ (8019028 <tcp_process+0x2a8>)
 8018e2a:	781b      	ldrb	r3, [r3, #0]
 8018e2c:	f043 0308 	orr.w	r3, r3, #8
 8018e30:	b2da      	uxtb	r2, r3
 8018e32:	4b7d      	ldr	r3, [pc, #500]	@ (8019028 <tcp_process+0x2a8>)
 8018e34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	8b5b      	ldrh	r3, [r3, #26]
 8018e3a:	f023 0301 	bic.w	r3, r3, #1
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018e44:	f06f 030d 	mvn.w	r3, #13
 8018e48:	e37a      	b.n	8019540 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018e4a:	2300      	movs	r3, #0
 8018e4c:	e378      	b.n	8019540 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018e4e:	4b72      	ldr	r3, [pc, #456]	@ (8019018 <tcp_process+0x298>)
 8018e50:	781b      	ldrb	r3, [r3, #0]
 8018e52:	f003 0302 	and.w	r3, r3, #2
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d010      	beq.n	8018e7c <tcp_process+0xfc>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	7d1b      	ldrb	r3, [r3, #20]
 8018e5e:	2b02      	cmp	r3, #2
 8018e60:	d00c      	beq.n	8018e7c <tcp_process+0xfc>
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	7d1b      	ldrb	r3, [r3, #20]
 8018e66:	2b03      	cmp	r3, #3
 8018e68:	d008      	beq.n	8018e7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	8b5b      	ldrh	r3, [r3, #26]
 8018e6e:	f043 0302 	orr.w	r3, r3, #2
 8018e72:	b29a      	uxth	r2, r3
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018e78:	2300      	movs	r3, #0
 8018e7a:	e361      	b.n	8019540 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	8b5b      	ldrh	r3, [r3, #26]
 8018e80:	f003 0310 	and.w	r3, r3, #16
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d103      	bne.n	8018e90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018e88:	4b68      	ldr	r3, [pc, #416]	@ (801902c <tcp_process+0x2ac>)
 8018e8a:	681a      	ldr	r2, [r3, #0]
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2200      	movs	r2, #0
 8018e94:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f001 fc2b 	bl	801a6fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	7d1b      	ldrb	r3, [r3, #20]
 8018eaa:	3b02      	subs	r3, #2
 8018eac:	2b07      	cmp	r3, #7
 8018eae:	f200 8337 	bhi.w	8019520 <tcp_process+0x7a0>
 8018eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8018eb8 <tcp_process+0x138>)
 8018eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018eb8:	08018ed9 	.word	0x08018ed9
 8018ebc:	08019109 	.word	0x08019109
 8018ec0:	08019281 	.word	0x08019281
 8018ec4:	080192ab 	.word	0x080192ab
 8018ec8:	080193cf 	.word	0x080193cf
 8018ecc:	08019281 	.word	0x08019281
 8018ed0:	0801945b 	.word	0x0801945b
 8018ed4:	080194eb 	.word	0x080194eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018ed8:	4b4f      	ldr	r3, [pc, #316]	@ (8019018 <tcp_process+0x298>)
 8018eda:	781b      	ldrb	r3, [r3, #0]
 8018edc:	f003 0310 	and.w	r3, r3, #16
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	f000 80e4 	beq.w	80190ae <tcp_process+0x32e>
 8018ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8019018 <tcp_process+0x298>)
 8018ee8:	781b      	ldrb	r3, [r3, #0]
 8018eea:	f003 0302 	and.w	r3, r3, #2
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	f000 80dd 	beq.w	80190ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018ef8:	1c5a      	adds	r2, r3, #1
 8018efa:	4b48      	ldr	r3, [pc, #288]	@ (801901c <tcp_process+0x29c>)
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	429a      	cmp	r2, r3
 8018f00:	f040 80d5 	bne.w	80190ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018f04:	4b46      	ldr	r3, [pc, #280]	@ (8019020 <tcp_process+0x2a0>)
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	1c5a      	adds	r2, r3, #1
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8018f16:	4b41      	ldr	r3, [pc, #260]	@ (801901c <tcp_process+0x29c>)
 8018f18:	681a      	ldr	r2, [r3, #0]
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018f1e:	4b44      	ldr	r3, [pc, #272]	@ (8019030 <tcp_process+0x2b0>)
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	89db      	ldrh	r3, [r3, #14]
 8018f24:	b29a      	uxth	r2, r3
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018f38:	4b39      	ldr	r3, [pc, #228]	@ (8019020 <tcp_process+0x2a0>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	1e5a      	subs	r2, r3, #1
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	2204      	movs	r2, #4
 8018f46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	3304      	adds	r3, #4
 8018f50:	4618      	mov	r0, r3
 8018f52:	f7fa f993 	bl	801327c <ip4_route>
 8018f56:	4601      	mov	r1, r0
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	3304      	adds	r3, #4
 8018f5c:	461a      	mov	r2, r3
 8018f5e:	4620      	mov	r0, r4
 8018f60:	f7ff f88c 	bl	801807c <tcp_eff_send_mss_netif>
 8018f64:	4603      	mov	r3, r0
 8018f66:	461a      	mov	r2, r3
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f70:	009a      	lsls	r2, r3, #2
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f76:	005b      	lsls	r3, r3, #1
 8018f78:	f241 111c 	movw	r1, #4380	@ 0x111c
 8018f7c:	428b      	cmp	r3, r1
 8018f7e:	bf38      	it	cc
 8018f80:	460b      	movcc	r3, r1
 8018f82:	429a      	cmp	r2, r3
 8018f84:	d204      	bcs.n	8018f90 <tcp_process+0x210>
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f8a:	009b      	lsls	r3, r3, #2
 8018f8c:	b29b      	uxth	r3, r3
 8018f8e:	e00d      	b.n	8018fac <tcp_process+0x22c>
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f94:	005b      	lsls	r3, r3, #1
 8018f96:	f241 121c 	movw	r2, #4380	@ 0x111c
 8018f9a:	4293      	cmp	r3, r2
 8018f9c:	d904      	bls.n	8018fa8 <tcp_process+0x228>
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018fa2:	005b      	lsls	r3, r3, #1
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	e001      	b.n	8018fac <tcp_process+0x22c>
 8018fa8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8018fac:	687a      	ldr	r2, [r7, #4]
 8018fae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d106      	bne.n	8018fca <tcp_process+0x24a>
 8018fbc:	4b13      	ldr	r3, [pc, #76]	@ (801900c <tcp_process+0x28c>)
 8018fbe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8018fc2:	491c      	ldr	r1, [pc, #112]	@ (8019034 <tcp_process+0x2b4>)
 8018fc4:	4813      	ldr	r0, [pc, #76]	@ (8019014 <tcp_process+0x294>)
 8018fc6:	f004 fe1b 	bl	801dc00 <iprintf>
        --pcb->snd_queuelen;
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018fd0:	3b01      	subs	r3, #1
 8018fd2:	b29a      	uxth	r2, r3
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018fde:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018fe0:	69fb      	ldr	r3, [r7, #28]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d12a      	bne.n	801903c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018fec:	69fb      	ldr	r3, [r7, #28]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d106      	bne.n	8019000 <tcp_process+0x280>
 8018ff2:	4b06      	ldr	r3, [pc, #24]	@ (801900c <tcp_process+0x28c>)
 8018ff4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8018ff8:	490f      	ldr	r1, [pc, #60]	@ (8019038 <tcp_process+0x2b8>)
 8018ffa:	4806      	ldr	r0, [pc, #24]	@ (8019014 <tcp_process+0x294>)
 8018ffc:	f004 fe00 	bl	801dc00 <iprintf>
          pcb->unsent = rseg->next;
 8019000:	69fb      	ldr	r3, [r7, #28]
 8019002:	681a      	ldr	r2, [r3, #0]
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019008:	e01c      	b.n	8019044 <tcp_process+0x2c4>
 801900a:	bf00      	nop
 801900c:	08022180 	.word	0x08022180
 8019010:	080223e8 	.word	0x080223e8
 8019014:	080221fc 	.word	0x080221fc
 8019018:	2000f9f4 	.word	0x2000f9f4
 801901c:	2000f9ec 	.word	0x2000f9ec
 8019020:	2000f9e8 	.word	0x2000f9e8
 8019024:	08022404 	.word	0x08022404
 8019028:	2000f9f5 	.word	0x2000f9f5
 801902c:	2000f9b0 	.word	0x2000f9b0
 8019030:	2000f9d8 	.word	0x2000f9d8
 8019034:	08022424 	.word	0x08022424
 8019038:	0802243c 	.word	0x0802243c
        } else {
          pcb->unacked = rseg->next;
 801903c:	69fb      	ldr	r3, [r7, #28]
 801903e:	681a      	ldr	r2, [r3, #0]
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8019044:	69f8      	ldr	r0, [r7, #28]
 8019046:	f7fe fc54 	bl	80178f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801904e:	2b00      	cmp	r3, #0
 8019050:	d104      	bne.n	801905c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019058:	861a      	strh	r2, [r3, #48]	@ 0x30
 801905a:	e006      	b.n	801906a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2200      	movs	r2, #0
 8019060:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	2200      	movs	r2, #0
 8019066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019070:	2b00      	cmp	r3, #0
 8019072:	d00a      	beq.n	801908a <tcp_process+0x30a>
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801907a:	687a      	ldr	r2, [r7, #4]
 801907c:	6910      	ldr	r0, [r2, #16]
 801907e:	2200      	movs	r2, #0
 8019080:	6879      	ldr	r1, [r7, #4]
 8019082:	4798      	blx	r3
 8019084:	4603      	mov	r3, r0
 8019086:	76bb      	strb	r3, [r7, #26]
 8019088:	e001      	b.n	801908e <tcp_process+0x30e>
 801908a:	2300      	movs	r3, #0
 801908c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801908e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019092:	f113 0f0d 	cmn.w	r3, #13
 8019096:	d102      	bne.n	801909e <tcp_process+0x31e>
          return ERR_ABRT;
 8019098:	f06f 030c 	mvn.w	r3, #12
 801909c:	e250      	b.n	8019540 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	8b5b      	ldrh	r3, [r3, #26]
 80190a2:	f043 0302 	orr.w	r3, r3, #2
 80190a6:	b29a      	uxth	r2, r3
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80190ac:	e23a      	b.n	8019524 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80190ae:	4b98      	ldr	r3, [pc, #608]	@ (8019310 <tcp_process+0x590>)
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	f003 0310 	and.w	r3, r3, #16
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	f000 8234 	beq.w	8019524 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190bc:	4b95      	ldr	r3, [pc, #596]	@ (8019314 <tcp_process+0x594>)
 80190be:	6819      	ldr	r1, [r3, #0]
 80190c0:	4b95      	ldr	r3, [pc, #596]	@ (8019318 <tcp_process+0x598>)
 80190c2:	881b      	ldrh	r3, [r3, #0]
 80190c4:	461a      	mov	r2, r3
 80190c6:	4b95      	ldr	r3, [pc, #596]	@ (801931c <tcp_process+0x59c>)
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190cc:	4b94      	ldr	r3, [pc, #592]	@ (8019320 <tcp_process+0x5a0>)
 80190ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190d0:	885b      	ldrh	r3, [r3, #2]
 80190d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190d4:	4a92      	ldr	r2, [pc, #584]	@ (8019320 <tcp_process+0x5a0>)
 80190d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190d8:	8812      	ldrh	r2, [r2, #0]
 80190da:	b292      	uxth	r2, r2
 80190dc:	9202      	str	r2, [sp, #8]
 80190de:	9301      	str	r3, [sp, #4]
 80190e0:	4b90      	ldr	r3, [pc, #576]	@ (8019324 <tcp_process+0x5a4>)
 80190e2:	9300      	str	r3, [sp, #0]
 80190e4:	4b90      	ldr	r3, [pc, #576]	@ (8019328 <tcp_process+0x5a8>)
 80190e6:	4602      	mov	r2, r0
 80190e8:	6878      	ldr	r0, [r7, #4]
 80190ea:	f003 f8d9 	bl	801c2a0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80190f4:	2b05      	cmp	r3, #5
 80190f6:	f200 8215 	bhi.w	8019524 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	2200      	movs	r2, #0
 80190fe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8019100:	6878      	ldr	r0, [r7, #4]
 8019102:	f002 fea5 	bl	801be50 <tcp_rexmit_rto>
      break;
 8019106:	e20d      	b.n	8019524 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019108:	4b81      	ldr	r3, [pc, #516]	@ (8019310 <tcp_process+0x590>)
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	f003 0310 	and.w	r3, r3, #16
 8019110:	2b00      	cmp	r3, #0
 8019112:	f000 80a1 	beq.w	8019258 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019116:	4b7f      	ldr	r3, [pc, #508]	@ (8019314 <tcp_process+0x594>)
 8019118:	681a      	ldr	r2, [r3, #0]
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801911e:	1ad3      	subs	r3, r2, r3
 8019120:	3b01      	subs	r3, #1
 8019122:	2b00      	cmp	r3, #0
 8019124:	db7e      	blt.n	8019224 <tcp_process+0x4a4>
 8019126:	4b7b      	ldr	r3, [pc, #492]	@ (8019314 <tcp_process+0x594>)
 8019128:	681a      	ldr	r2, [r3, #0]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801912e:	1ad3      	subs	r3, r2, r3
 8019130:	2b00      	cmp	r3, #0
 8019132:	dc77      	bgt.n	8019224 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	2204      	movs	r2, #4
 8019138:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801913e:	2b00      	cmp	r3, #0
 8019140:	d102      	bne.n	8019148 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8019142:	23fa      	movs	r3, #250	@ 0xfa
 8019144:	76bb      	strb	r3, [r7, #26]
 8019146:	e01d      	b.n	8019184 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801914c:	699b      	ldr	r3, [r3, #24]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d106      	bne.n	8019160 <tcp_process+0x3e0>
 8019152:	4b76      	ldr	r3, [pc, #472]	@ (801932c <tcp_process+0x5ac>)
 8019154:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8019158:	4975      	ldr	r1, [pc, #468]	@ (8019330 <tcp_process+0x5b0>)
 801915a:	4876      	ldr	r0, [pc, #472]	@ (8019334 <tcp_process+0x5b4>)
 801915c:	f004 fd50 	bl	801dc00 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8019164:	699b      	ldr	r3, [r3, #24]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d00a      	beq.n	8019180 <tcp_process+0x400>
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801916e:	699b      	ldr	r3, [r3, #24]
 8019170:	687a      	ldr	r2, [r7, #4]
 8019172:	6910      	ldr	r0, [r2, #16]
 8019174:	2200      	movs	r2, #0
 8019176:	6879      	ldr	r1, [r7, #4]
 8019178:	4798      	blx	r3
 801917a:	4603      	mov	r3, r0
 801917c:	76bb      	strb	r3, [r7, #26]
 801917e:	e001      	b.n	8019184 <tcp_process+0x404>
 8019180:	23f0      	movs	r3, #240	@ 0xf0
 8019182:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019184:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d00a      	beq.n	80191a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801918c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019190:	f113 0f0d 	cmn.w	r3, #13
 8019194:	d002      	beq.n	801919c <tcp_process+0x41c>
              tcp_abort(pcb);
 8019196:	6878      	ldr	r0, [r7, #4]
 8019198:	f7fd fd12 	bl	8016bc0 <tcp_abort>
            }
            return ERR_ABRT;
 801919c:	f06f 030c 	mvn.w	r3, #12
 80191a0:	e1ce      	b.n	8019540 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80191a2:	6878      	ldr	r0, [r7, #4]
 80191a4:	f000 fae0 	bl	8019768 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80191a8:	4b63      	ldr	r3, [pc, #396]	@ (8019338 <tcp_process+0x5b8>)
 80191aa:	881b      	ldrh	r3, [r3, #0]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d005      	beq.n	80191bc <tcp_process+0x43c>
            recv_acked--;
 80191b0:	4b61      	ldr	r3, [pc, #388]	@ (8019338 <tcp_process+0x5b8>)
 80191b2:	881b      	ldrh	r3, [r3, #0]
 80191b4:	3b01      	subs	r3, #1
 80191b6:	b29a      	uxth	r2, r3
 80191b8:	4b5f      	ldr	r3, [pc, #380]	@ (8019338 <tcp_process+0x5b8>)
 80191ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191c0:	009a      	lsls	r2, r3, #2
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191c6:	005b      	lsls	r3, r3, #1
 80191c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80191cc:	428b      	cmp	r3, r1
 80191ce:	bf38      	it	cc
 80191d0:	460b      	movcc	r3, r1
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d204      	bcs.n	80191e0 <tcp_process+0x460>
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191da:	009b      	lsls	r3, r3, #2
 80191dc:	b29b      	uxth	r3, r3
 80191de:	e00d      	b.n	80191fc <tcp_process+0x47c>
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191e4:	005b      	lsls	r3, r3, #1
 80191e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80191ea:	4293      	cmp	r3, r2
 80191ec:	d904      	bls.n	80191f8 <tcp_process+0x478>
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80191f2:	005b      	lsls	r3, r3, #1
 80191f4:	b29b      	uxth	r3, r3
 80191f6:	e001      	b.n	80191fc <tcp_process+0x47c>
 80191f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80191fc:	687a      	ldr	r2, [r7, #4]
 80191fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8019202:	4b4e      	ldr	r3, [pc, #312]	@ (801933c <tcp_process+0x5bc>)
 8019204:	781b      	ldrb	r3, [r3, #0]
 8019206:	f003 0320 	and.w	r3, r3, #32
 801920a:	2b00      	cmp	r3, #0
 801920c:	d037      	beq.n	801927e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	8b5b      	ldrh	r3, [r3, #26]
 8019212:	f043 0302 	orr.w	r3, r3, #2
 8019216:	b29a      	uxth	r2, r3
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	2207      	movs	r2, #7
 8019220:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8019222:	e02c      	b.n	801927e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019224:	4b3b      	ldr	r3, [pc, #236]	@ (8019314 <tcp_process+0x594>)
 8019226:	6819      	ldr	r1, [r3, #0]
 8019228:	4b3b      	ldr	r3, [pc, #236]	@ (8019318 <tcp_process+0x598>)
 801922a:	881b      	ldrh	r3, [r3, #0]
 801922c:	461a      	mov	r2, r3
 801922e:	4b3b      	ldr	r3, [pc, #236]	@ (801931c <tcp_process+0x59c>)
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019234:	4b3a      	ldr	r3, [pc, #232]	@ (8019320 <tcp_process+0x5a0>)
 8019236:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019238:	885b      	ldrh	r3, [r3, #2]
 801923a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801923c:	4a38      	ldr	r2, [pc, #224]	@ (8019320 <tcp_process+0x5a0>)
 801923e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019240:	8812      	ldrh	r2, [r2, #0]
 8019242:	b292      	uxth	r2, r2
 8019244:	9202      	str	r2, [sp, #8]
 8019246:	9301      	str	r3, [sp, #4]
 8019248:	4b36      	ldr	r3, [pc, #216]	@ (8019324 <tcp_process+0x5a4>)
 801924a:	9300      	str	r3, [sp, #0]
 801924c:	4b36      	ldr	r3, [pc, #216]	@ (8019328 <tcp_process+0x5a8>)
 801924e:	4602      	mov	r2, r0
 8019250:	6878      	ldr	r0, [r7, #4]
 8019252:	f003 f825 	bl	801c2a0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019256:	e167      	b.n	8019528 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019258:	4b2d      	ldr	r3, [pc, #180]	@ (8019310 <tcp_process+0x590>)
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	f003 0302 	and.w	r3, r3, #2
 8019260:	2b00      	cmp	r3, #0
 8019262:	f000 8161 	beq.w	8019528 <tcp_process+0x7a8>
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801926a:	1e5a      	subs	r2, r3, #1
 801926c:	4b2b      	ldr	r3, [pc, #172]	@ (801931c <tcp_process+0x59c>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	429a      	cmp	r2, r3
 8019272:	f040 8159 	bne.w	8019528 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019276:	6878      	ldr	r0, [r7, #4]
 8019278:	f002 fe0c 	bl	801be94 <tcp_rexmit>
      break;
 801927c:	e154      	b.n	8019528 <tcp_process+0x7a8>
 801927e:	e153      	b.n	8019528 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	f000 fa71 	bl	8019768 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019286:	4b2d      	ldr	r3, [pc, #180]	@ (801933c <tcp_process+0x5bc>)
 8019288:	781b      	ldrb	r3, [r3, #0]
 801928a:	f003 0320 	and.w	r3, r3, #32
 801928e:	2b00      	cmp	r3, #0
 8019290:	f000 814c 	beq.w	801952c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	8b5b      	ldrh	r3, [r3, #26]
 8019298:	f043 0302 	orr.w	r3, r3, #2
 801929c:	b29a      	uxth	r2, r3
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	2207      	movs	r2, #7
 80192a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80192a8:	e140      	b.n	801952c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80192aa:	6878      	ldr	r0, [r7, #4]
 80192ac:	f000 fa5c 	bl	8019768 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80192b0:	4b22      	ldr	r3, [pc, #136]	@ (801933c <tcp_process+0x5bc>)
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	f003 0320 	and.w	r3, r3, #32
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d071      	beq.n	80193a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192bc:	4b14      	ldr	r3, [pc, #80]	@ (8019310 <tcp_process+0x590>)
 80192be:	781b      	ldrb	r3, [r3, #0]
 80192c0:	f003 0310 	and.w	r3, r3, #16
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d060      	beq.n	801938a <tcp_process+0x60a>
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80192cc:	4b11      	ldr	r3, [pc, #68]	@ (8019314 <tcp_process+0x594>)
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d15a      	bne.n	801938a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d156      	bne.n	801938a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	8b5b      	ldrh	r3, [r3, #26]
 80192e0:	f043 0302 	orr.w	r3, r3, #2
 80192e4:	b29a      	uxth	r2, r3
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80192ea:	6878      	ldr	r0, [r7, #4]
 80192ec:	f7fe fdbc 	bl	8017e68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80192f0:	4b13      	ldr	r3, [pc, #76]	@ (8019340 <tcp_process+0x5c0>)
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	687a      	ldr	r2, [r7, #4]
 80192f6:	429a      	cmp	r2, r3
 80192f8:	d105      	bne.n	8019306 <tcp_process+0x586>
 80192fa:	4b11      	ldr	r3, [pc, #68]	@ (8019340 <tcp_process+0x5c0>)
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	68db      	ldr	r3, [r3, #12]
 8019300:	4a0f      	ldr	r2, [pc, #60]	@ (8019340 <tcp_process+0x5c0>)
 8019302:	6013      	str	r3, [r2, #0]
 8019304:	e02e      	b.n	8019364 <tcp_process+0x5e4>
 8019306:	4b0e      	ldr	r3, [pc, #56]	@ (8019340 <tcp_process+0x5c0>)
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	617b      	str	r3, [r7, #20]
 801930c:	e027      	b.n	801935e <tcp_process+0x5de>
 801930e:	bf00      	nop
 8019310:	2000f9f4 	.word	0x2000f9f4
 8019314:	2000f9ec 	.word	0x2000f9ec
 8019318:	2000f9f2 	.word	0x2000f9f2
 801931c:	2000f9e8 	.word	0x2000f9e8
 8019320:	2000f9d8 	.word	0x2000f9d8
 8019324:	20008864 	.word	0x20008864
 8019328:	20008868 	.word	0x20008868
 801932c:	08022180 	.word	0x08022180
 8019330:	08022450 	.word	0x08022450
 8019334:	080221fc 	.word	0x080221fc
 8019338:	2000f9f0 	.word	0x2000f9f0
 801933c:	2000f9f5 	.word	0x2000f9f5
 8019340:	2000f9bc 	.word	0x2000f9bc
 8019344:	697b      	ldr	r3, [r7, #20]
 8019346:	68db      	ldr	r3, [r3, #12]
 8019348:	687a      	ldr	r2, [r7, #4]
 801934a:	429a      	cmp	r2, r3
 801934c:	d104      	bne.n	8019358 <tcp_process+0x5d8>
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	68da      	ldr	r2, [r3, #12]
 8019352:	697b      	ldr	r3, [r7, #20]
 8019354:	60da      	str	r2, [r3, #12]
 8019356:	e005      	b.n	8019364 <tcp_process+0x5e4>
 8019358:	697b      	ldr	r3, [r7, #20]
 801935a:	68db      	ldr	r3, [r3, #12]
 801935c:	617b      	str	r3, [r7, #20]
 801935e:	697b      	ldr	r3, [r7, #20]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d1ef      	bne.n	8019344 <tcp_process+0x5c4>
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	2200      	movs	r2, #0
 8019368:	60da      	str	r2, [r3, #12]
 801936a:	4b77      	ldr	r3, [pc, #476]	@ (8019548 <tcp_process+0x7c8>)
 801936c:	2201      	movs	r2, #1
 801936e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	220a      	movs	r2, #10
 8019374:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019376:	4b75      	ldr	r3, [pc, #468]	@ (801954c <tcp_process+0x7cc>)
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	60da      	str	r2, [r3, #12]
 801937e:	4a73      	ldr	r2, [pc, #460]	@ (801954c <tcp_process+0x7cc>)
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	6013      	str	r3, [r2, #0]
 8019384:	f003 f94e 	bl	801c624 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019388:	e0d2      	b.n	8019530 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	8b5b      	ldrh	r3, [r3, #26]
 801938e:	f043 0302 	orr.w	r3, r3, #2
 8019392:	b29a      	uxth	r2, r3
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	2208      	movs	r2, #8
 801939c:	751a      	strb	r2, [r3, #20]
      break;
 801939e:	e0c7      	b.n	8019530 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80193a0:	4b6b      	ldr	r3, [pc, #428]	@ (8019550 <tcp_process+0x7d0>)
 80193a2:	781b      	ldrb	r3, [r3, #0]
 80193a4:	f003 0310 	and.w	r3, r3, #16
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	f000 80c1 	beq.w	8019530 <tcp_process+0x7b0>
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80193b2:	4b68      	ldr	r3, [pc, #416]	@ (8019554 <tcp_process+0x7d4>)
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	429a      	cmp	r2, r3
 80193b8:	f040 80ba 	bne.w	8019530 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	f040 80b5 	bne.w	8019530 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	2206      	movs	r2, #6
 80193ca:	751a      	strb	r2, [r3, #20]
      break;
 80193cc:	e0b0      	b.n	8019530 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80193ce:	6878      	ldr	r0, [r7, #4]
 80193d0:	f000 f9ca 	bl	8019768 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80193d4:	4b60      	ldr	r3, [pc, #384]	@ (8019558 <tcp_process+0x7d8>)
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	f003 0320 	and.w	r3, r3, #32
 80193dc:	2b00      	cmp	r3, #0
 80193de:	f000 80a9 	beq.w	8019534 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	8b5b      	ldrh	r3, [r3, #26]
 80193e6:	f043 0302 	orr.w	r3, r3, #2
 80193ea:	b29a      	uxth	r2, r3
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f7fe fd39 	bl	8017e68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80193f6:	4b59      	ldr	r3, [pc, #356]	@ (801955c <tcp_process+0x7dc>)
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	687a      	ldr	r2, [r7, #4]
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d105      	bne.n	801940c <tcp_process+0x68c>
 8019400:	4b56      	ldr	r3, [pc, #344]	@ (801955c <tcp_process+0x7dc>)
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	68db      	ldr	r3, [r3, #12]
 8019406:	4a55      	ldr	r2, [pc, #340]	@ (801955c <tcp_process+0x7dc>)
 8019408:	6013      	str	r3, [r2, #0]
 801940a:	e013      	b.n	8019434 <tcp_process+0x6b4>
 801940c:	4b53      	ldr	r3, [pc, #332]	@ (801955c <tcp_process+0x7dc>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	613b      	str	r3, [r7, #16]
 8019412:	e00c      	b.n	801942e <tcp_process+0x6ae>
 8019414:	693b      	ldr	r3, [r7, #16]
 8019416:	68db      	ldr	r3, [r3, #12]
 8019418:	687a      	ldr	r2, [r7, #4]
 801941a:	429a      	cmp	r2, r3
 801941c:	d104      	bne.n	8019428 <tcp_process+0x6a8>
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	68da      	ldr	r2, [r3, #12]
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	60da      	str	r2, [r3, #12]
 8019426:	e005      	b.n	8019434 <tcp_process+0x6b4>
 8019428:	693b      	ldr	r3, [r7, #16]
 801942a:	68db      	ldr	r3, [r3, #12]
 801942c:	613b      	str	r3, [r7, #16]
 801942e:	693b      	ldr	r3, [r7, #16]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d1ef      	bne.n	8019414 <tcp_process+0x694>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	2200      	movs	r2, #0
 8019438:	60da      	str	r2, [r3, #12]
 801943a:	4b43      	ldr	r3, [pc, #268]	@ (8019548 <tcp_process+0x7c8>)
 801943c:	2201      	movs	r2, #1
 801943e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	220a      	movs	r2, #10
 8019444:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019446:	4b41      	ldr	r3, [pc, #260]	@ (801954c <tcp_process+0x7cc>)
 8019448:	681a      	ldr	r2, [r3, #0]
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	60da      	str	r2, [r3, #12]
 801944e:	4a3f      	ldr	r2, [pc, #252]	@ (801954c <tcp_process+0x7cc>)
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6013      	str	r3, [r2, #0]
 8019454:	f003 f8e6 	bl	801c624 <tcp_timer_needed>
      }
      break;
 8019458:	e06c      	b.n	8019534 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f000 f984 	bl	8019768 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019460:	4b3b      	ldr	r3, [pc, #236]	@ (8019550 <tcp_process+0x7d0>)
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	f003 0310 	and.w	r3, r3, #16
 8019468:	2b00      	cmp	r3, #0
 801946a:	d065      	beq.n	8019538 <tcp_process+0x7b8>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019470:	4b38      	ldr	r3, [pc, #224]	@ (8019554 <tcp_process+0x7d4>)
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	429a      	cmp	r2, r3
 8019476:	d15f      	bne.n	8019538 <tcp_process+0x7b8>
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801947c:	2b00      	cmp	r3, #0
 801947e:	d15b      	bne.n	8019538 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019480:	6878      	ldr	r0, [r7, #4]
 8019482:	f7fe fcf1 	bl	8017e68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019486:	4b35      	ldr	r3, [pc, #212]	@ (801955c <tcp_process+0x7dc>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	687a      	ldr	r2, [r7, #4]
 801948c:	429a      	cmp	r2, r3
 801948e:	d105      	bne.n	801949c <tcp_process+0x71c>
 8019490:	4b32      	ldr	r3, [pc, #200]	@ (801955c <tcp_process+0x7dc>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	68db      	ldr	r3, [r3, #12]
 8019496:	4a31      	ldr	r2, [pc, #196]	@ (801955c <tcp_process+0x7dc>)
 8019498:	6013      	str	r3, [r2, #0]
 801949a:	e013      	b.n	80194c4 <tcp_process+0x744>
 801949c:	4b2f      	ldr	r3, [pc, #188]	@ (801955c <tcp_process+0x7dc>)
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	60fb      	str	r3, [r7, #12]
 80194a2:	e00c      	b.n	80194be <tcp_process+0x73e>
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	687a      	ldr	r2, [r7, #4]
 80194aa:	429a      	cmp	r2, r3
 80194ac:	d104      	bne.n	80194b8 <tcp_process+0x738>
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	68da      	ldr	r2, [r3, #12]
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	60da      	str	r2, [r3, #12]
 80194b6:	e005      	b.n	80194c4 <tcp_process+0x744>
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	68db      	ldr	r3, [r3, #12]
 80194bc:	60fb      	str	r3, [r7, #12]
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d1ef      	bne.n	80194a4 <tcp_process+0x724>
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2200      	movs	r2, #0
 80194c8:	60da      	str	r2, [r3, #12]
 80194ca:	4b1f      	ldr	r3, [pc, #124]	@ (8019548 <tcp_process+0x7c8>)
 80194cc:	2201      	movs	r2, #1
 80194ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	220a      	movs	r2, #10
 80194d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80194d6:	4b1d      	ldr	r3, [pc, #116]	@ (801954c <tcp_process+0x7cc>)
 80194d8:	681a      	ldr	r2, [r3, #0]
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	60da      	str	r2, [r3, #12]
 80194de:	4a1b      	ldr	r2, [pc, #108]	@ (801954c <tcp_process+0x7cc>)
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	6013      	str	r3, [r2, #0]
 80194e4:	f003 f89e 	bl	801c624 <tcp_timer_needed>
      }
      break;
 80194e8:	e026      	b.n	8019538 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80194ea:	6878      	ldr	r0, [r7, #4]
 80194ec:	f000 f93c 	bl	8019768 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80194f0:	4b17      	ldr	r3, [pc, #92]	@ (8019550 <tcp_process+0x7d0>)
 80194f2:	781b      	ldrb	r3, [r3, #0]
 80194f4:	f003 0310 	and.w	r3, r3, #16
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	d01f      	beq.n	801953c <tcp_process+0x7bc>
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019500:	4b14      	ldr	r3, [pc, #80]	@ (8019554 <tcp_process+0x7d4>)
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	429a      	cmp	r2, r3
 8019506:	d119      	bne.n	801953c <tcp_process+0x7bc>
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801950c:	2b00      	cmp	r3, #0
 801950e:	d115      	bne.n	801953c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019510:	4b11      	ldr	r3, [pc, #68]	@ (8019558 <tcp_process+0x7d8>)
 8019512:	781b      	ldrb	r3, [r3, #0]
 8019514:	f043 0310 	orr.w	r3, r3, #16
 8019518:	b2da      	uxtb	r2, r3
 801951a:	4b0f      	ldr	r3, [pc, #60]	@ (8019558 <tcp_process+0x7d8>)
 801951c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801951e:	e00d      	b.n	801953c <tcp_process+0x7bc>
    default:
      break;
 8019520:	bf00      	nop
 8019522:	e00c      	b.n	801953e <tcp_process+0x7be>
      break;
 8019524:	bf00      	nop
 8019526:	e00a      	b.n	801953e <tcp_process+0x7be>
      break;
 8019528:	bf00      	nop
 801952a:	e008      	b.n	801953e <tcp_process+0x7be>
      break;
 801952c:	bf00      	nop
 801952e:	e006      	b.n	801953e <tcp_process+0x7be>
      break;
 8019530:	bf00      	nop
 8019532:	e004      	b.n	801953e <tcp_process+0x7be>
      break;
 8019534:	bf00      	nop
 8019536:	e002      	b.n	801953e <tcp_process+0x7be>
      break;
 8019538:	bf00      	nop
 801953a:	e000      	b.n	801953e <tcp_process+0x7be>
      break;
 801953c:	bf00      	nop
  }
  return ERR_OK;
 801953e:	2300      	movs	r3, #0
}
 8019540:	4618      	mov	r0, r3
 8019542:	3724      	adds	r7, #36	@ 0x24
 8019544:	46bd      	mov	sp, r7
 8019546:	bd90      	pop	{r4, r7, pc}
 8019548:	2000f9c4 	.word	0x2000f9c4
 801954c:	2000f9c0 	.word	0x2000f9c0
 8019550:	2000f9f4 	.word	0x2000f9f4
 8019554:	2000f9ec 	.word	0x2000f9ec
 8019558:	2000f9f5 	.word	0x2000f9f5
 801955c:	2000f9bc 	.word	0x2000f9bc

08019560 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019560:	b590      	push	{r4, r7, lr}
 8019562:	b085      	sub	sp, #20
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	2b00      	cmp	r3, #0
 801956e:	d106      	bne.n	801957e <tcp_oos_insert_segment+0x1e>
 8019570:	4b3b      	ldr	r3, [pc, #236]	@ (8019660 <tcp_oos_insert_segment+0x100>)
 8019572:	f240 421f 	movw	r2, #1055	@ 0x41f
 8019576:	493b      	ldr	r1, [pc, #236]	@ (8019664 <tcp_oos_insert_segment+0x104>)
 8019578:	483b      	ldr	r0, [pc, #236]	@ (8019668 <tcp_oos_insert_segment+0x108>)
 801957a:	f004 fb41 	bl	801dc00 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	68db      	ldr	r3, [r3, #12]
 8019582:	899b      	ldrh	r3, [r3, #12]
 8019584:	b29b      	uxth	r3, r3
 8019586:	4618      	mov	r0, r3
 8019588:	f7fb f868 	bl	801465c <lwip_htons>
 801958c:	4603      	mov	r3, r0
 801958e:	b2db      	uxtb	r3, r3
 8019590:	f003 0301 	and.w	r3, r3, #1
 8019594:	2b00      	cmp	r3, #0
 8019596:	d028      	beq.n	80195ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019598:	6838      	ldr	r0, [r7, #0]
 801959a:	f7fe f995 	bl	80178c8 <tcp_segs_free>
    next = NULL;
 801959e:	2300      	movs	r3, #0
 80195a0:	603b      	str	r3, [r7, #0]
 80195a2:	e056      	b.n	8019652 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	68db      	ldr	r3, [r3, #12]
 80195a8:	899b      	ldrh	r3, [r3, #12]
 80195aa:	b29b      	uxth	r3, r3
 80195ac:	4618      	mov	r0, r3
 80195ae:	f7fb f855 	bl	801465c <lwip_htons>
 80195b2:	4603      	mov	r3, r0
 80195b4:	b2db      	uxtb	r3, r3
 80195b6:	f003 0301 	and.w	r3, r3, #1
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d00d      	beq.n	80195da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	68db      	ldr	r3, [r3, #12]
 80195c2:	899b      	ldrh	r3, [r3, #12]
 80195c4:	b29c      	uxth	r4, r3
 80195c6:	2001      	movs	r0, #1
 80195c8:	f7fb f848 	bl	801465c <lwip_htons>
 80195cc:	4603      	mov	r3, r0
 80195ce:	461a      	mov	r2, r3
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	68db      	ldr	r3, [r3, #12]
 80195d4:	4322      	orrs	r2, r4
 80195d6:	b292      	uxth	r2, r2
 80195d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80195da:	683b      	ldr	r3, [r7, #0]
 80195dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80195de:	683b      	ldr	r3, [r7, #0]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80195e4:	68f8      	ldr	r0, [r7, #12]
 80195e6:	f7fe f984 	bl	80178f2 <tcp_seg_free>
    while (next &&
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d00e      	beq.n	801960e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	891b      	ldrh	r3, [r3, #8]
 80195f4:	461a      	mov	r2, r3
 80195f6:	4b1d      	ldr	r3, [pc, #116]	@ (801966c <tcp_oos_insert_segment+0x10c>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	441a      	add	r2, r3
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	68db      	ldr	r3, [r3, #12]
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	6839      	ldr	r1, [r7, #0]
 8019604:	8909      	ldrh	r1, [r1, #8]
 8019606:	440b      	add	r3, r1
 8019608:	1ad3      	subs	r3, r2, r3
    while (next &&
 801960a:	2b00      	cmp	r3, #0
 801960c:	daca      	bge.n	80195a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801960e:	683b      	ldr	r3, [r7, #0]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d01e      	beq.n	8019652 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	891b      	ldrh	r3, [r3, #8]
 8019618:	461a      	mov	r2, r3
 801961a:	4b14      	ldr	r3, [pc, #80]	@ (801966c <tcp_oos_insert_segment+0x10c>)
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	441a      	add	r2, r3
 8019620:	683b      	ldr	r3, [r7, #0]
 8019622:	68db      	ldr	r3, [r3, #12]
 8019624:	685b      	ldr	r3, [r3, #4]
 8019626:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019628:	2b00      	cmp	r3, #0
 801962a:	dd12      	ble.n	8019652 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	68db      	ldr	r3, [r3, #12]
 8019630:	685b      	ldr	r3, [r3, #4]
 8019632:	b29a      	uxth	r2, r3
 8019634:	4b0d      	ldr	r3, [pc, #52]	@ (801966c <tcp_oos_insert_segment+0x10c>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	b29b      	uxth	r3, r3
 801963a:	1ad3      	subs	r3, r2, r3
 801963c:	b29a      	uxth	r2, r3
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	685a      	ldr	r2, [r3, #4]
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	891b      	ldrh	r3, [r3, #8]
 801964a:	4619      	mov	r1, r3
 801964c:	4610      	mov	r0, r2
 801964e:	f7fc faff 	bl	8015c50 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	683a      	ldr	r2, [r7, #0]
 8019656:	601a      	str	r2, [r3, #0]
}
 8019658:	bf00      	nop
 801965a:	3714      	adds	r7, #20
 801965c:	46bd      	mov	sp, r7
 801965e:	bd90      	pop	{r4, r7, pc}
 8019660:	08022180 	.word	0x08022180
 8019664:	08022470 	.word	0x08022470
 8019668:	080221fc 	.word	0x080221fc
 801966c:	2000f9e8 	.word	0x2000f9e8

08019670 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019670:	b5b0      	push	{r4, r5, r7, lr}
 8019672:	b086      	sub	sp, #24
 8019674:	af00      	add	r7, sp, #0
 8019676:	60f8      	str	r0, [r7, #12]
 8019678:	60b9      	str	r1, [r7, #8]
 801967a:	607a      	str	r2, [r7, #4]
 801967c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801967e:	e03e      	b.n	80196fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019680:	68bb      	ldr	r3, [r7, #8]
 8019682:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019684:	68bb      	ldr	r3, [r7, #8]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801968a:	697b      	ldr	r3, [r7, #20]
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	4618      	mov	r0, r3
 8019690:	f7fc fd24 	bl	80160dc <pbuf_clen>
 8019694:	4603      	mov	r3, r0
 8019696:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801969e:	8a7a      	ldrh	r2, [r7, #18]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d906      	bls.n	80196b2 <tcp_free_acked_segments+0x42>
 80196a4:	4b2a      	ldr	r3, [pc, #168]	@ (8019750 <tcp_free_acked_segments+0xe0>)
 80196a6:	f240 4257 	movw	r2, #1111	@ 0x457
 80196aa:	492a      	ldr	r1, [pc, #168]	@ (8019754 <tcp_free_acked_segments+0xe4>)
 80196ac:	482a      	ldr	r0, [pc, #168]	@ (8019758 <tcp_free_acked_segments+0xe8>)
 80196ae:	f004 faa7 	bl	801dc00 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80196b8:	8a7b      	ldrh	r3, [r7, #18]
 80196ba:	1ad3      	subs	r3, r2, r3
 80196bc:	b29a      	uxth	r2, r3
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80196c4:	697b      	ldr	r3, [r7, #20]
 80196c6:	891a      	ldrh	r2, [r3, #8]
 80196c8:	4b24      	ldr	r3, [pc, #144]	@ (801975c <tcp_free_acked_segments+0xec>)
 80196ca:	881b      	ldrh	r3, [r3, #0]
 80196cc:	4413      	add	r3, r2
 80196ce:	b29a      	uxth	r2, r3
 80196d0:	4b22      	ldr	r3, [pc, #136]	@ (801975c <tcp_free_acked_segments+0xec>)
 80196d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80196d4:	6978      	ldr	r0, [r7, #20]
 80196d6:	f7fe f90c 	bl	80178f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d00c      	beq.n	80196fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80196e4:	68bb      	ldr	r3, [r7, #8]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d109      	bne.n	80196fe <tcp_free_acked_segments+0x8e>
 80196ea:	683b      	ldr	r3, [r7, #0]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d106      	bne.n	80196fe <tcp_free_acked_segments+0x8e>
 80196f0:	4b17      	ldr	r3, [pc, #92]	@ (8019750 <tcp_free_acked_segments+0xe0>)
 80196f2:	f240 4261 	movw	r2, #1121	@ 0x461
 80196f6:	491a      	ldr	r1, [pc, #104]	@ (8019760 <tcp_free_acked_segments+0xf0>)
 80196f8:	4817      	ldr	r0, [pc, #92]	@ (8019758 <tcp_free_acked_segments+0xe8>)
 80196fa:	f004 fa81 	bl	801dc00 <iprintf>
  while (seg_list != NULL &&
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d020      	beq.n	8019746 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	685b      	ldr	r3, [r3, #4]
 801970a:	4618      	mov	r0, r3
 801970c:	f7fa ffbb 	bl	8014686 <lwip_htonl>
 8019710:	4604      	mov	r4, r0
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	891b      	ldrh	r3, [r3, #8]
 8019716:	461d      	mov	r5, r3
 8019718:	68bb      	ldr	r3, [r7, #8]
 801971a:	68db      	ldr	r3, [r3, #12]
 801971c:	899b      	ldrh	r3, [r3, #12]
 801971e:	b29b      	uxth	r3, r3
 8019720:	4618      	mov	r0, r3
 8019722:	f7fa ff9b 	bl	801465c <lwip_htons>
 8019726:	4603      	mov	r3, r0
 8019728:	b2db      	uxtb	r3, r3
 801972a:	f003 0303 	and.w	r3, r3, #3
 801972e:	2b00      	cmp	r3, #0
 8019730:	d001      	beq.n	8019736 <tcp_free_acked_segments+0xc6>
 8019732:	2301      	movs	r3, #1
 8019734:	e000      	b.n	8019738 <tcp_free_acked_segments+0xc8>
 8019736:	2300      	movs	r3, #0
 8019738:	442b      	add	r3, r5
 801973a:	18e2      	adds	r2, r4, r3
 801973c:	4b09      	ldr	r3, [pc, #36]	@ (8019764 <tcp_free_acked_segments+0xf4>)
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019742:	2b00      	cmp	r3, #0
 8019744:	dd9c      	ble.n	8019680 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019746:	68bb      	ldr	r3, [r7, #8]
}
 8019748:	4618      	mov	r0, r3
 801974a:	3718      	adds	r7, #24
 801974c:	46bd      	mov	sp, r7
 801974e:	bdb0      	pop	{r4, r5, r7, pc}
 8019750:	08022180 	.word	0x08022180
 8019754:	08022498 	.word	0x08022498
 8019758:	080221fc 	.word	0x080221fc
 801975c:	2000f9f0 	.word	0x2000f9f0
 8019760:	080224c0 	.word	0x080224c0
 8019764:	2000f9ec 	.word	0x2000f9ec

08019768 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019768:	b5b0      	push	{r4, r5, r7, lr}
 801976a:	b094      	sub	sp, #80	@ 0x50
 801976c:	af00      	add	r7, sp, #0
 801976e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019770:	2300      	movs	r3, #0
 8019772:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d106      	bne.n	8019788 <tcp_receive+0x20>
 801977a:	4b91      	ldr	r3, [pc, #580]	@ (80199c0 <tcp_receive+0x258>)
 801977c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8019780:	4990      	ldr	r1, [pc, #576]	@ (80199c4 <tcp_receive+0x25c>)
 8019782:	4891      	ldr	r0, [pc, #580]	@ (80199c8 <tcp_receive+0x260>)
 8019784:	f004 fa3c 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	7d1b      	ldrb	r3, [r3, #20]
 801978c:	2b03      	cmp	r3, #3
 801978e:	d806      	bhi.n	801979e <tcp_receive+0x36>
 8019790:	4b8b      	ldr	r3, [pc, #556]	@ (80199c0 <tcp_receive+0x258>)
 8019792:	f240 427c 	movw	r2, #1148	@ 0x47c
 8019796:	498d      	ldr	r1, [pc, #564]	@ (80199cc <tcp_receive+0x264>)
 8019798:	488b      	ldr	r0, [pc, #556]	@ (80199c8 <tcp_receive+0x260>)
 801979a:	f004 fa31 	bl	801dc00 <iprintf>

  if (flags & TCP_ACK) {
 801979e:	4b8c      	ldr	r3, [pc, #560]	@ (80199d0 <tcp_receive+0x268>)
 80197a0:	781b      	ldrb	r3, [r3, #0]
 80197a2:	f003 0310 	and.w	r3, r3, #16
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	f000 8264 	beq.w	8019c74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80197b2:	461a      	mov	r2, r3
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80197b8:	4413      	add	r3, r2
 80197ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80197c0:	4b84      	ldr	r3, [pc, #528]	@ (80199d4 <tcp_receive+0x26c>)
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	1ad3      	subs	r3, r2, r3
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	db1b      	blt.n	8019802 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80197ce:	4b81      	ldr	r3, [pc, #516]	@ (80199d4 <tcp_receive+0x26c>)
 80197d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197d2:	429a      	cmp	r2, r3
 80197d4:	d106      	bne.n	80197e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80197da:	4b7f      	ldr	r3, [pc, #508]	@ (80199d8 <tcp_receive+0x270>)
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	1ad3      	subs	r3, r2, r3
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	db0e      	blt.n	8019802 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80197e8:	4b7b      	ldr	r3, [pc, #492]	@ (80199d8 <tcp_receive+0x270>)
 80197ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d125      	bne.n	801983c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197f0:	4b7a      	ldr	r3, [pc, #488]	@ (80199dc <tcp_receive+0x274>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	89db      	ldrh	r3, [r3, #14]
 80197f6:	b29a      	uxth	r2, r3
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80197fe:	429a      	cmp	r2, r3
 8019800:	d91c      	bls.n	801983c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019802:	4b76      	ldr	r3, [pc, #472]	@ (80199dc <tcp_receive+0x274>)
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	89db      	ldrh	r3, [r3, #14]
 8019808:	b29a      	uxth	r2, r3
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801981c:	429a      	cmp	r2, r3
 801981e:	d205      	bcs.n	801982c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801982c:	4b69      	ldr	r3, [pc, #420]	@ (80199d4 <tcp_receive+0x26c>)
 801982e:	681a      	ldr	r2, [r3, #0]
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8019834:	4b68      	ldr	r3, [pc, #416]	@ (80199d8 <tcp_receive+0x270>)
 8019836:	681a      	ldr	r2, [r3, #0]
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801983c:	4b66      	ldr	r3, [pc, #408]	@ (80199d8 <tcp_receive+0x270>)
 801983e:	681a      	ldr	r2, [r3, #0]
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019844:	1ad3      	subs	r3, r2, r3
 8019846:	2b00      	cmp	r3, #0
 8019848:	dc58      	bgt.n	80198fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801984a:	4b65      	ldr	r3, [pc, #404]	@ (80199e0 <tcp_receive+0x278>)
 801984c:	881b      	ldrh	r3, [r3, #0]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d14b      	bne.n	80198ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019856:	687a      	ldr	r2, [r7, #4]
 8019858:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801985c:	4413      	add	r3, r2
 801985e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019860:	429a      	cmp	r2, r3
 8019862:	d142      	bne.n	80198ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801986a:	2b00      	cmp	r3, #0
 801986c:	db3d      	blt.n	80198ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019872:	4b59      	ldr	r3, [pc, #356]	@ (80199d8 <tcp_receive+0x270>)
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	429a      	cmp	r2, r3
 8019878:	d137      	bne.n	80198ea <tcp_receive+0x182>
              found_dupack = 1;
 801987a:	2301      	movs	r3, #1
 801987c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8019884:	2bff      	cmp	r3, #255	@ 0xff
 8019886:	d007      	beq.n	8019898 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801988e:	3301      	adds	r3, #1
 8019890:	b2da      	uxtb	r2, r3
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801989e:	2b03      	cmp	r3, #3
 80198a0:	d91b      	bls.n	80198da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80198ac:	4413      	add	r3, r2
 80198ae:	b29a      	uxth	r2, r3
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80198b6:	429a      	cmp	r2, r3
 80198b8:	d30a      	bcc.n	80198d0 <tcp_receive+0x168>
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80198c4:	4413      	add	r3, r2
 80198c6:	b29a      	uxth	r2, r3
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80198ce:	e004      	b.n	80198da <tcp_receive+0x172>
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80198d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80198e0:	2b02      	cmp	r3, #2
 80198e2:	d902      	bls.n	80198ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80198e4:	6878      	ldr	r0, [r7, #4]
 80198e6:	f002 fb41 	bl	801bf6c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80198ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	f040 8161 	bne.w	8019bb4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	2200      	movs	r2, #0
 80198f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80198fa:	e15b      	b.n	8019bb4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80198fc:	4b36      	ldr	r3, [pc, #216]	@ (80199d8 <tcp_receive+0x270>)
 80198fe:	681a      	ldr	r2, [r3, #0]
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019904:	1ad3      	subs	r3, r2, r3
 8019906:	3b01      	subs	r3, #1
 8019908:	2b00      	cmp	r3, #0
 801990a:	f2c0 814e 	blt.w	8019baa <tcp_receive+0x442>
 801990e:	4b32      	ldr	r3, [pc, #200]	@ (80199d8 <tcp_receive+0x270>)
 8019910:	681a      	ldr	r2, [r3, #0]
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019916:	1ad3      	subs	r3, r2, r3
 8019918:	2b00      	cmp	r3, #0
 801991a:	f300 8146 	bgt.w	8019baa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	8b5b      	ldrh	r3, [r3, #26]
 8019922:	f003 0304 	and.w	r3, r3, #4
 8019926:	2b00      	cmp	r3, #0
 8019928:	d010      	beq.n	801994c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	8b5b      	ldrh	r3, [r3, #26]
 801992e:	f023 0304 	bic.w	r3, r3, #4
 8019932:	b29a      	uxth	r2, r3
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	2200      	movs	r2, #0
 8019948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	2200      	movs	r2, #0
 8019950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801995a:	10db      	asrs	r3, r3, #3
 801995c:	b21b      	sxth	r3, r3
 801995e:	b29a      	uxth	r2, r3
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019966:	b29b      	uxth	r3, r3
 8019968:	4413      	add	r3, r2
 801996a:	b29b      	uxth	r3, r3
 801996c:	b21a      	sxth	r2, r3
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019974:	4b18      	ldr	r3, [pc, #96]	@ (80199d8 <tcp_receive+0x270>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	b29a      	uxth	r2, r3
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801997e:	b29b      	uxth	r3, r3
 8019980:	1ad3      	subs	r3, r2, r3
 8019982:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	2200      	movs	r2, #0
 8019988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801998c:	4b12      	ldr	r3, [pc, #72]	@ (80199d8 <tcp_receive+0x270>)
 801998e:	681a      	ldr	r2, [r3, #0]
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	7d1b      	ldrb	r3, [r3, #20]
 8019998:	2b03      	cmp	r3, #3
 801999a:	f240 8097 	bls.w	8019acc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d245      	bcs.n	8019a3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	8b5b      	ldrh	r3, [r3, #26]
 80199b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d014      	beq.n	80199e4 <tcp_receive+0x27c>
 80199ba:	2301      	movs	r3, #1
 80199bc:	e013      	b.n	80199e6 <tcp_receive+0x27e>
 80199be:	bf00      	nop
 80199c0:	08022180 	.word	0x08022180
 80199c4:	080224e0 	.word	0x080224e0
 80199c8:	080221fc 	.word	0x080221fc
 80199cc:	080224fc 	.word	0x080224fc
 80199d0:	2000f9f4 	.word	0x2000f9f4
 80199d4:	2000f9e8 	.word	0x2000f9e8
 80199d8:	2000f9ec 	.word	0x2000f9ec
 80199dc:	2000f9d8 	.word	0x2000f9d8
 80199e0:	2000f9f2 	.word	0x2000f9f2
 80199e4:	2302      	movs	r3, #2
 80199e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80199ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80199ee:	b29a      	uxth	r2, r3
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80199f4:	fb12 f303 	smulbb	r3, r2, r3
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80199fc:	4293      	cmp	r3, r2
 80199fe:	bf28      	it	cs
 8019a00:	4613      	movcs	r3, r2
 8019a02:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019a0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019a0c:	4413      	add	r3, r2
 8019a0e:	b29a      	uxth	r2, r3
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019a16:	429a      	cmp	r2, r3
 8019a18:	d309      	bcc.n	8019a2e <tcp_receive+0x2c6>
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019a20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019a22:	4413      	add	r3, r2
 8019a24:	b29a      	uxth	r2, r3
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019a2c:	e04e      	b.n	8019acc <tcp_receive+0x364>
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019a34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019a38:	e048      	b.n	8019acc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019a40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019a42:	4413      	add	r3, r2
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8019a4c:	429a      	cmp	r2, r3
 8019a4e:	d309      	bcc.n	8019a64 <tcp_receive+0x2fc>
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019a56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019a58:	4413      	add	r3, r2
 8019a5a:	b29a      	uxth	r2, r3
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8019a62:	e004      	b.n	8019a6e <tcp_receive+0x306>
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019a6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019a7a:	429a      	cmp	r2, r3
 8019a7c:	d326      	bcc.n	8019acc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019a8a:	1ad3      	subs	r3, r2, r3
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019a9e:	4413      	add	r3, r2
 8019aa0:	b29a      	uxth	r2, r3
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019aa8:	429a      	cmp	r2, r3
 8019aaa:	d30a      	bcc.n	8019ac2 <tcp_receive+0x35a>
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019ab6:	4413      	add	r3, r2
 8019ab8:	b29a      	uxth	r2, r3
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8019ac0:	e004      	b.n	8019acc <tcp_receive+0x364>
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019ac8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ad4:	4a98      	ldr	r2, [pc, #608]	@ (8019d38 <tcp_receive+0x5d0>)
 8019ad6:	6878      	ldr	r0, [r7, #4]
 8019ad8:	f7ff fdca 	bl	8019670 <tcp_free_acked_segments>
 8019adc:	4602      	mov	r2, r0
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019aea:	4a94      	ldr	r2, [pc, #592]	@ (8019d3c <tcp_receive+0x5d4>)
 8019aec:	6878      	ldr	r0, [r7, #4]
 8019aee:	f7ff fdbf 	bl	8019670 <tcp_free_acked_segments>
 8019af2:	4602      	mov	r2, r0
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d104      	bne.n	8019b0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019b06:	861a      	strh	r2, [r3, #48]	@ 0x30
 8019b08:	e002      	b.n	8019b10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	2200      	movs	r2, #0
 8019b14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d103      	bne.n	8019b26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2200      	movs	r2, #0
 8019b22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019b2c:	4b84      	ldr	r3, [pc, #528]	@ (8019d40 <tcp_receive+0x5d8>)
 8019b2e:	881b      	ldrh	r3, [r3, #0]
 8019b30:	4413      	add	r3, r2
 8019b32:	b29a      	uxth	r2, r3
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	8b5b      	ldrh	r3, [r3, #26]
 8019b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d035      	beq.n	8019bb2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d118      	bne.n	8019b80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d00c      	beq.n	8019b70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b5e:	68db      	ldr	r3, [r3, #12]
 8019b60:	685b      	ldr	r3, [r3, #4]
 8019b62:	4618      	mov	r0, r3
 8019b64:	f7fa fd8f 	bl	8014686 <lwip_htonl>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	dc20      	bgt.n	8019bb2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	8b5b      	ldrh	r3, [r3, #26]
 8019b74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8019b78:	b29a      	uxth	r2, r3
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b7e:	e018      	b.n	8019bb2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019b88:	68db      	ldr	r3, [r3, #12]
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	f7fa fd7a 	bl	8014686 <lwip_htonl>
 8019b92:	4603      	mov	r3, r0
 8019b94:	1ae3      	subs	r3, r4, r3
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	dc0b      	bgt.n	8019bb2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	8b5b      	ldrh	r3, [r3, #26]
 8019b9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8019ba2:	b29a      	uxth	r2, r3
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019ba8:	e003      	b.n	8019bb2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019baa:	6878      	ldr	r0, [r7, #4]
 8019bac:	f002 fbca 	bl	801c344 <tcp_send_empty_ack>
 8019bb0:	e000      	b.n	8019bb4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019bb2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d05b      	beq.n	8019c74 <tcp_receive+0x50c>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019bc0:	4b60      	ldr	r3, [pc, #384]	@ (8019d44 <tcp_receive+0x5dc>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	1ad3      	subs	r3, r2, r3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	da54      	bge.n	8019c74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019bca:	4b5f      	ldr	r3, [pc, #380]	@ (8019d48 <tcp_receive+0x5e0>)
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	b29a      	uxth	r2, r3
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019bd4:	b29b      	uxth	r3, r3
 8019bd6:	1ad3      	subs	r3, r2, r3
 8019bd8:	b29b      	uxth	r3, r3
 8019bda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019bde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019be8:	10db      	asrs	r3, r3, #3
 8019bea:	b21b      	sxth	r3, r3
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	1ad3      	subs	r3, r2, r3
 8019bf0:	b29b      	uxth	r3, r3
 8019bf2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019bfc:	b29a      	uxth	r2, r3
 8019bfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019c02:	4413      	add	r3, r2
 8019c04:	b29b      	uxth	r3, r3
 8019c06:	b21a      	sxth	r2, r3
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8019c0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	da05      	bge.n	8019c20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8019c14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019c18:	425b      	negs	r3, r3
 8019c1a:	b29b      	uxth	r3, r3
 8019c1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019c20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019c2a:	109b      	asrs	r3, r3, #2
 8019c2c:	b21b      	sxth	r3, r3
 8019c2e:	b29b      	uxth	r3, r3
 8019c30:	1ad3      	subs	r3, r2, r3
 8019c32:	b29b      	uxth	r3, r3
 8019c34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019c3e:	b29a      	uxth	r2, r3
 8019c40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8019c44:	4413      	add	r3, r2
 8019c46:	b29b      	uxth	r3, r3
 8019c48:	b21a      	sxth	r2, r3
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8019c54:	10db      	asrs	r3, r3, #3
 8019c56:	b21b      	sxth	r3, r3
 8019c58:	b29a      	uxth	r2, r3
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019c60:	b29b      	uxth	r3, r3
 8019c62:	4413      	add	r3, r2
 8019c64:	b29b      	uxth	r3, r3
 8019c66:	b21a      	sxth	r2, r3
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	2200      	movs	r2, #0
 8019c72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019c74:	4b35      	ldr	r3, [pc, #212]	@ (8019d4c <tcp_receive+0x5e4>)
 8019c76:	881b      	ldrh	r3, [r3, #0]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	f000 84df 	beq.w	801a63c <tcp_receive+0xed4>
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	7d1b      	ldrb	r3, [r3, #20]
 8019c82:	2b06      	cmp	r3, #6
 8019c84:	f200 84da 	bhi.w	801a63c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c8c:	4b30      	ldr	r3, [pc, #192]	@ (8019d50 <tcp_receive+0x5e8>)
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	1ad3      	subs	r3, r2, r3
 8019c92:	3b01      	subs	r3, #1
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	f2c0 808f 	blt.w	8019db8 <tcp_receive+0x650>
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8019d4c <tcp_receive+0x5e4>)
 8019ca0:	881b      	ldrh	r3, [r3, #0]
 8019ca2:	4619      	mov	r1, r3
 8019ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8019d50 <tcp_receive+0x5e8>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	440b      	add	r3, r1
 8019caa:	1ad3      	subs	r3, r2, r3
 8019cac:	3301      	adds	r3, #1
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	f300 8082 	bgt.w	8019db8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019cb4:	4b27      	ldr	r3, [pc, #156]	@ (8019d54 <tcp_receive+0x5ec>)
 8019cb6:	685b      	ldr	r3, [r3, #4]
 8019cb8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019cbe:	4b24      	ldr	r3, [pc, #144]	@ (8019d50 <tcp_receive+0x5e8>)
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	1ad3      	subs	r3, r2, r3
 8019cc4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019cc6:	4b23      	ldr	r3, [pc, #140]	@ (8019d54 <tcp_receive+0x5ec>)
 8019cc8:	685b      	ldr	r3, [r3, #4]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d106      	bne.n	8019cdc <tcp_receive+0x574>
 8019cce:	4b22      	ldr	r3, [pc, #136]	@ (8019d58 <tcp_receive+0x5f0>)
 8019cd0:	f240 5294 	movw	r2, #1428	@ 0x594
 8019cd4:	4921      	ldr	r1, [pc, #132]	@ (8019d5c <tcp_receive+0x5f4>)
 8019cd6:	4822      	ldr	r0, [pc, #136]	@ (8019d60 <tcp_receive+0x5f8>)
 8019cd8:	f003 ff92 	bl	801dc00 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cde:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8019ce2:	4293      	cmp	r3, r2
 8019ce4:	d906      	bls.n	8019cf4 <tcp_receive+0x58c>
 8019ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8019d58 <tcp_receive+0x5f0>)
 8019ce8:	f240 5295 	movw	r2, #1429	@ 0x595
 8019cec:	491d      	ldr	r1, [pc, #116]	@ (8019d64 <tcp_receive+0x5fc>)
 8019cee:	481c      	ldr	r0, [pc, #112]	@ (8019d60 <tcp_receive+0x5f8>)
 8019cf0:	f003 ff86 	bl	801dc00 <iprintf>
      off = (u16_t)off32;
 8019cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cf6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019cfa:	4b16      	ldr	r3, [pc, #88]	@ (8019d54 <tcp_receive+0x5ec>)
 8019cfc:	685b      	ldr	r3, [r3, #4]
 8019cfe:	891b      	ldrh	r3, [r3, #8]
 8019d00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d906      	bls.n	8019d16 <tcp_receive+0x5ae>
 8019d08:	4b13      	ldr	r3, [pc, #76]	@ (8019d58 <tcp_receive+0x5f0>)
 8019d0a:	f240 5297 	movw	r2, #1431	@ 0x597
 8019d0e:	4916      	ldr	r1, [pc, #88]	@ (8019d68 <tcp_receive+0x600>)
 8019d10:	4813      	ldr	r0, [pc, #76]	@ (8019d60 <tcp_receive+0x5f8>)
 8019d12:	f003 ff75 	bl	801dc00 <iprintf>
      inseg.len -= off;
 8019d16:	4b0f      	ldr	r3, [pc, #60]	@ (8019d54 <tcp_receive+0x5ec>)
 8019d18:	891a      	ldrh	r2, [r3, #8]
 8019d1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019d1e:	1ad3      	subs	r3, r2, r3
 8019d20:	b29a      	uxth	r2, r3
 8019d22:	4b0c      	ldr	r3, [pc, #48]	@ (8019d54 <tcp_receive+0x5ec>)
 8019d24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019d26:	4b0b      	ldr	r3, [pc, #44]	@ (8019d54 <tcp_receive+0x5ec>)
 8019d28:	685b      	ldr	r3, [r3, #4]
 8019d2a:	891a      	ldrh	r2, [r3, #8]
 8019d2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019d30:	1ad3      	subs	r3, r2, r3
 8019d32:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8019d34:	e02a      	b.n	8019d8c <tcp_receive+0x624>
 8019d36:	bf00      	nop
 8019d38:	08022518 	.word	0x08022518
 8019d3c:	08022520 	.word	0x08022520
 8019d40:	2000f9f0 	.word	0x2000f9f0
 8019d44:	2000f9ec 	.word	0x2000f9ec
 8019d48:	2000f9b0 	.word	0x2000f9b0
 8019d4c:	2000f9f2 	.word	0x2000f9f2
 8019d50:	2000f9e8 	.word	0x2000f9e8
 8019d54:	2000f9c8 	.word	0x2000f9c8
 8019d58:	08022180 	.word	0x08022180
 8019d5c:	08022528 	.word	0x08022528
 8019d60:	080221fc 	.word	0x080221fc
 8019d64:	08022538 	.word	0x08022538
 8019d68:	08022548 	.word	0x08022548
        off -= p->len;
 8019d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d6e:	895b      	ldrh	r3, [r3, #10]
 8019d70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d74:	1ad3      	subs	r3, r2, r3
 8019d76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019d7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d82:	2200      	movs	r2, #0
 8019d84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8019d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d8e:	895b      	ldrh	r3, [r3, #10]
 8019d90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d8e9      	bhi.n	8019d6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019d98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019d9c:	4619      	mov	r1, r3
 8019d9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019da0:	f7fc f856 	bl	8015e50 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019da8:	4a90      	ldr	r2, [pc, #576]	@ (8019fec <tcp_receive+0x884>)
 8019daa:	6013      	str	r3, [r2, #0]
 8019dac:	4b90      	ldr	r3, [pc, #576]	@ (8019ff0 <tcp_receive+0x888>)
 8019dae:	68db      	ldr	r3, [r3, #12]
 8019db0:	4a8e      	ldr	r2, [pc, #568]	@ (8019fec <tcp_receive+0x884>)
 8019db2:	6812      	ldr	r2, [r2, #0]
 8019db4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019db6:	e00d      	b.n	8019dd4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019db8:	4b8c      	ldr	r3, [pc, #560]	@ (8019fec <tcp_receive+0x884>)
 8019dba:	681a      	ldr	r2, [r3, #0]
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019dc0:	1ad3      	subs	r3, r2, r3
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	da06      	bge.n	8019dd4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	8b5b      	ldrh	r3, [r3, #26]
 8019dca:	f043 0302 	orr.w	r3, r3, #2
 8019dce:	b29a      	uxth	r2, r3
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019dd4:	4b85      	ldr	r3, [pc, #532]	@ (8019fec <tcp_receive+0x884>)
 8019dd6:	681a      	ldr	r2, [r3, #0]
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ddc:	1ad3      	subs	r3, r2, r3
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	f2c0 8427 	blt.w	801a632 <tcp_receive+0xeca>
 8019de4:	4b81      	ldr	r3, [pc, #516]	@ (8019fec <tcp_receive+0x884>)
 8019de6:	681a      	ldr	r2, [r3, #0]
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019dec:	6879      	ldr	r1, [r7, #4]
 8019dee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019df0:	440b      	add	r3, r1
 8019df2:	1ad3      	subs	r3, r2, r3
 8019df4:	3301      	adds	r3, #1
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	f300 841b 	bgt.w	801a632 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019e00:	4b7a      	ldr	r3, [pc, #488]	@ (8019fec <tcp_receive+0x884>)
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	429a      	cmp	r2, r3
 8019e06:	f040 8298 	bne.w	801a33a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019e0a:	4b79      	ldr	r3, [pc, #484]	@ (8019ff0 <tcp_receive+0x888>)
 8019e0c:	891c      	ldrh	r4, [r3, #8]
 8019e0e:	4b78      	ldr	r3, [pc, #480]	@ (8019ff0 <tcp_receive+0x888>)
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	899b      	ldrh	r3, [r3, #12]
 8019e14:	b29b      	uxth	r3, r3
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7fa fc20 	bl	801465c <lwip_htons>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	b2db      	uxtb	r3, r3
 8019e20:	f003 0303 	and.w	r3, r3, #3
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d001      	beq.n	8019e2c <tcp_receive+0x6c4>
 8019e28:	2301      	movs	r3, #1
 8019e2a:	e000      	b.n	8019e2e <tcp_receive+0x6c6>
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	4423      	add	r3, r4
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	4b70      	ldr	r3, [pc, #448]	@ (8019ff4 <tcp_receive+0x88c>)
 8019e34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8019ff4 <tcp_receive+0x88c>)
 8019e3c:	881b      	ldrh	r3, [r3, #0]
 8019e3e:	429a      	cmp	r2, r3
 8019e40:	d274      	bcs.n	8019f2c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e42:	4b6b      	ldr	r3, [pc, #428]	@ (8019ff0 <tcp_receive+0x888>)
 8019e44:	68db      	ldr	r3, [r3, #12]
 8019e46:	899b      	ldrh	r3, [r3, #12]
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7fa fc06 	bl	801465c <lwip_htons>
 8019e50:	4603      	mov	r3, r0
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	f003 0301 	and.w	r3, r3, #1
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d01e      	beq.n	8019e9a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019e5c:	4b64      	ldr	r3, [pc, #400]	@ (8019ff0 <tcp_receive+0x888>)
 8019e5e:	68db      	ldr	r3, [r3, #12]
 8019e60:	899b      	ldrh	r3, [r3, #12]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	b21b      	sxth	r3, r3
 8019e66:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019e6a:	b21c      	sxth	r4, r3
 8019e6c:	4b60      	ldr	r3, [pc, #384]	@ (8019ff0 <tcp_receive+0x888>)
 8019e6e:	68db      	ldr	r3, [r3, #12]
 8019e70:	899b      	ldrh	r3, [r3, #12]
 8019e72:	b29b      	uxth	r3, r3
 8019e74:	4618      	mov	r0, r3
 8019e76:	f7fa fbf1 	bl	801465c <lwip_htons>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	b2db      	uxtb	r3, r3
 8019e7e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019e82:	b29b      	uxth	r3, r3
 8019e84:	4618      	mov	r0, r3
 8019e86:	f7fa fbe9 	bl	801465c <lwip_htons>
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	b21b      	sxth	r3, r3
 8019e8e:	4323      	orrs	r3, r4
 8019e90:	b21a      	sxth	r2, r3
 8019e92:	4b57      	ldr	r3, [pc, #348]	@ (8019ff0 <tcp_receive+0x888>)
 8019e94:	68db      	ldr	r3, [r3, #12]
 8019e96:	b292      	uxth	r2, r2
 8019e98:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019e9e:	4b54      	ldr	r3, [pc, #336]	@ (8019ff0 <tcp_receive+0x888>)
 8019ea0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019ea2:	4b53      	ldr	r3, [pc, #332]	@ (8019ff0 <tcp_receive+0x888>)
 8019ea4:	68db      	ldr	r3, [r3, #12]
 8019ea6:	899b      	ldrh	r3, [r3, #12]
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7fa fbd6 	bl	801465c <lwip_htons>
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	b2db      	uxtb	r3, r3
 8019eb4:	f003 0302 	and.w	r3, r3, #2
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d005      	beq.n	8019ec8 <tcp_receive+0x760>
            inseg.len -= 1;
 8019ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8019ff0 <tcp_receive+0x888>)
 8019ebe:	891b      	ldrh	r3, [r3, #8]
 8019ec0:	3b01      	subs	r3, #1
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8019ff0 <tcp_receive+0x888>)
 8019ec6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019ec8:	4b49      	ldr	r3, [pc, #292]	@ (8019ff0 <tcp_receive+0x888>)
 8019eca:	685b      	ldr	r3, [r3, #4]
 8019ecc:	4a48      	ldr	r2, [pc, #288]	@ (8019ff0 <tcp_receive+0x888>)
 8019ece:	8912      	ldrh	r2, [r2, #8]
 8019ed0:	4611      	mov	r1, r2
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	f7fb febc 	bl	8015c50 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019ed8:	4b45      	ldr	r3, [pc, #276]	@ (8019ff0 <tcp_receive+0x888>)
 8019eda:	891c      	ldrh	r4, [r3, #8]
 8019edc:	4b44      	ldr	r3, [pc, #272]	@ (8019ff0 <tcp_receive+0x888>)
 8019ede:	68db      	ldr	r3, [r3, #12]
 8019ee0:	899b      	ldrh	r3, [r3, #12]
 8019ee2:	b29b      	uxth	r3, r3
 8019ee4:	4618      	mov	r0, r3
 8019ee6:	f7fa fbb9 	bl	801465c <lwip_htons>
 8019eea:	4603      	mov	r3, r0
 8019eec:	b2db      	uxtb	r3, r3
 8019eee:	f003 0303 	and.w	r3, r3, #3
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d001      	beq.n	8019efa <tcp_receive+0x792>
 8019ef6:	2301      	movs	r3, #1
 8019ef8:	e000      	b.n	8019efc <tcp_receive+0x794>
 8019efa:	2300      	movs	r3, #0
 8019efc:	4423      	add	r3, r4
 8019efe:	b29a      	uxth	r2, r3
 8019f00:	4b3c      	ldr	r3, [pc, #240]	@ (8019ff4 <tcp_receive+0x88c>)
 8019f02:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019f04:	4b3b      	ldr	r3, [pc, #236]	@ (8019ff4 <tcp_receive+0x88c>)
 8019f06:	881b      	ldrh	r3, [r3, #0]
 8019f08:	461a      	mov	r2, r3
 8019f0a:	4b38      	ldr	r3, [pc, #224]	@ (8019fec <tcp_receive+0x884>)
 8019f0c:	681b      	ldr	r3, [r3, #0]
 8019f0e:	441a      	add	r2, r3
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f14:	6879      	ldr	r1, [r7, #4]
 8019f16:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019f18:	440b      	add	r3, r1
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d006      	beq.n	8019f2c <tcp_receive+0x7c4>
 8019f1e:	4b36      	ldr	r3, [pc, #216]	@ (8019ff8 <tcp_receive+0x890>)
 8019f20:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8019f24:	4935      	ldr	r1, [pc, #212]	@ (8019ffc <tcp_receive+0x894>)
 8019f26:	4836      	ldr	r0, [pc, #216]	@ (801a000 <tcp_receive+0x898>)
 8019f28:	f003 fe6a 	bl	801dc00 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	f000 80e6 	beq.w	801a102 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019f36:	4b2e      	ldr	r3, [pc, #184]	@ (8019ff0 <tcp_receive+0x888>)
 8019f38:	68db      	ldr	r3, [r3, #12]
 8019f3a:	899b      	ldrh	r3, [r3, #12]
 8019f3c:	b29b      	uxth	r3, r3
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f7fa fb8c 	bl	801465c <lwip_htons>
 8019f44:	4603      	mov	r3, r0
 8019f46:	b2db      	uxtb	r3, r3
 8019f48:	f003 0301 	and.w	r3, r3, #1
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d010      	beq.n	8019f72 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019f50:	e00a      	b.n	8019f68 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f56:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f5c:	681a      	ldr	r2, [r3, #0]
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8019f62:	68f8      	ldr	r0, [r7, #12]
 8019f64:	f7fd fcc5 	bl	80178f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d1f0      	bne.n	8019f52 <tcp_receive+0x7ea>
 8019f70:	e0c7      	b.n	801a102 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019f78:	e051      	b.n	801a01e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f7c:	68db      	ldr	r3, [r3, #12]
 8019f7e:	899b      	ldrh	r3, [r3, #12]
 8019f80:	b29b      	uxth	r3, r3
 8019f82:	4618      	mov	r0, r3
 8019f84:	f7fa fb6a 	bl	801465c <lwip_htons>
 8019f88:	4603      	mov	r3, r0
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	f003 0301 	and.w	r3, r3, #1
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d03c      	beq.n	801a00e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019f94:	4b16      	ldr	r3, [pc, #88]	@ (8019ff0 <tcp_receive+0x888>)
 8019f96:	68db      	ldr	r3, [r3, #12]
 8019f98:	899b      	ldrh	r3, [r3, #12]
 8019f9a:	b29b      	uxth	r3, r3
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7fa fb5d 	bl	801465c <lwip_htons>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	b2db      	uxtb	r3, r3
 8019fa6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d12f      	bne.n	801a00e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019fae:	4b10      	ldr	r3, [pc, #64]	@ (8019ff0 <tcp_receive+0x888>)
 8019fb0:	68db      	ldr	r3, [r3, #12]
 8019fb2:	899b      	ldrh	r3, [r3, #12]
 8019fb4:	b29c      	uxth	r4, r3
 8019fb6:	2001      	movs	r0, #1
 8019fb8:	f7fa fb50 	bl	801465c <lwip_htons>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	461a      	mov	r2, r3
 8019fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8019ff0 <tcp_receive+0x888>)
 8019fc2:	68db      	ldr	r3, [r3, #12]
 8019fc4:	4322      	orrs	r2, r4
 8019fc6:	b292      	uxth	r2, r2
 8019fc8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019fca:	4b09      	ldr	r3, [pc, #36]	@ (8019ff0 <tcp_receive+0x888>)
 8019fcc:	891c      	ldrh	r4, [r3, #8]
 8019fce:	4b08      	ldr	r3, [pc, #32]	@ (8019ff0 <tcp_receive+0x888>)
 8019fd0:	68db      	ldr	r3, [r3, #12]
 8019fd2:	899b      	ldrh	r3, [r3, #12]
 8019fd4:	b29b      	uxth	r3, r3
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7fa fb40 	bl	801465c <lwip_htons>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	f003 0303 	and.w	r3, r3, #3
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d00d      	beq.n	801a004 <tcp_receive+0x89c>
 8019fe8:	2301      	movs	r3, #1
 8019fea:	e00c      	b.n	801a006 <tcp_receive+0x89e>
 8019fec:	2000f9e8 	.word	0x2000f9e8
 8019ff0:	2000f9c8 	.word	0x2000f9c8
 8019ff4:	2000f9f2 	.word	0x2000f9f2
 8019ff8:	08022180 	.word	0x08022180
 8019ffc:	08022558 	.word	0x08022558
 801a000:	080221fc 	.word	0x080221fc
 801a004:	2300      	movs	r3, #0
 801a006:	4423      	add	r3, r4
 801a008:	b29a      	uxth	r2, r3
 801a00a:	4b98      	ldr	r3, [pc, #608]	@ (801a26c <tcp_receive+0xb04>)
 801a00c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801a00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a010:	613b      	str	r3, [r7, #16]
              next = next->next;
 801a012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801a018:	6938      	ldr	r0, [r7, #16]
 801a01a:	f7fd fc6a 	bl	80178f2 <tcp_seg_free>
            while (next &&
 801a01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a020:	2b00      	cmp	r3, #0
 801a022:	d00e      	beq.n	801a042 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a024:	4b91      	ldr	r3, [pc, #580]	@ (801a26c <tcp_receive+0xb04>)
 801a026:	881b      	ldrh	r3, [r3, #0]
 801a028:	461a      	mov	r2, r3
 801a02a:	4b91      	ldr	r3, [pc, #580]	@ (801a270 <tcp_receive+0xb08>)
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	441a      	add	r2, r3
 801a030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a032:	68db      	ldr	r3, [r3, #12]
 801a034:	685b      	ldr	r3, [r3, #4]
 801a036:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a038:	8909      	ldrh	r1, [r1, #8]
 801a03a:	440b      	add	r3, r1
 801a03c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801a03e:	2b00      	cmp	r3, #0
 801a040:	da9b      	bge.n	8019f7a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801a042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a044:	2b00      	cmp	r3, #0
 801a046:	d059      	beq.n	801a0fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801a048:	4b88      	ldr	r3, [pc, #544]	@ (801a26c <tcp_receive+0xb04>)
 801a04a:	881b      	ldrh	r3, [r3, #0]
 801a04c:	461a      	mov	r2, r3
 801a04e:	4b88      	ldr	r3, [pc, #544]	@ (801a270 <tcp_receive+0xb08>)
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	441a      	add	r2, r3
 801a054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a056:	68db      	ldr	r3, [r3, #12]
 801a058:	685b      	ldr	r3, [r3, #4]
 801a05a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	dd4d      	ble.n	801a0fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a062:	68db      	ldr	r3, [r3, #12]
 801a064:	685b      	ldr	r3, [r3, #4]
 801a066:	b29a      	uxth	r2, r3
 801a068:	4b81      	ldr	r3, [pc, #516]	@ (801a270 <tcp_receive+0xb08>)
 801a06a:	681b      	ldr	r3, [r3, #0]
 801a06c:	b29b      	uxth	r3, r3
 801a06e:	1ad3      	subs	r3, r2, r3
 801a070:	b29a      	uxth	r2, r3
 801a072:	4b80      	ldr	r3, [pc, #512]	@ (801a274 <tcp_receive+0xb0c>)
 801a074:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a076:	4b7f      	ldr	r3, [pc, #508]	@ (801a274 <tcp_receive+0xb0c>)
 801a078:	68db      	ldr	r3, [r3, #12]
 801a07a:	899b      	ldrh	r3, [r3, #12]
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	4618      	mov	r0, r3
 801a080:	f7fa faec 	bl	801465c <lwip_htons>
 801a084:	4603      	mov	r3, r0
 801a086:	b2db      	uxtb	r3, r3
 801a088:	f003 0302 	and.w	r3, r3, #2
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d005      	beq.n	801a09c <tcp_receive+0x934>
                inseg.len -= 1;
 801a090:	4b78      	ldr	r3, [pc, #480]	@ (801a274 <tcp_receive+0xb0c>)
 801a092:	891b      	ldrh	r3, [r3, #8]
 801a094:	3b01      	subs	r3, #1
 801a096:	b29a      	uxth	r2, r3
 801a098:	4b76      	ldr	r3, [pc, #472]	@ (801a274 <tcp_receive+0xb0c>)
 801a09a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a09c:	4b75      	ldr	r3, [pc, #468]	@ (801a274 <tcp_receive+0xb0c>)
 801a09e:	685b      	ldr	r3, [r3, #4]
 801a0a0:	4a74      	ldr	r2, [pc, #464]	@ (801a274 <tcp_receive+0xb0c>)
 801a0a2:	8912      	ldrh	r2, [r2, #8]
 801a0a4:	4611      	mov	r1, r2
 801a0a6:	4618      	mov	r0, r3
 801a0a8:	f7fb fdd2 	bl	8015c50 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a0ac:	4b71      	ldr	r3, [pc, #452]	@ (801a274 <tcp_receive+0xb0c>)
 801a0ae:	891c      	ldrh	r4, [r3, #8]
 801a0b0:	4b70      	ldr	r3, [pc, #448]	@ (801a274 <tcp_receive+0xb0c>)
 801a0b2:	68db      	ldr	r3, [r3, #12]
 801a0b4:	899b      	ldrh	r3, [r3, #12]
 801a0b6:	b29b      	uxth	r3, r3
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f7fa facf 	bl	801465c <lwip_htons>
 801a0be:	4603      	mov	r3, r0
 801a0c0:	b2db      	uxtb	r3, r3
 801a0c2:	f003 0303 	and.w	r3, r3, #3
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d001      	beq.n	801a0ce <tcp_receive+0x966>
 801a0ca:	2301      	movs	r3, #1
 801a0cc:	e000      	b.n	801a0d0 <tcp_receive+0x968>
 801a0ce:	2300      	movs	r3, #0
 801a0d0:	4423      	add	r3, r4
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	4b65      	ldr	r3, [pc, #404]	@ (801a26c <tcp_receive+0xb04>)
 801a0d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a0d8:	4b64      	ldr	r3, [pc, #400]	@ (801a26c <tcp_receive+0xb04>)
 801a0da:	881b      	ldrh	r3, [r3, #0]
 801a0dc:	461a      	mov	r2, r3
 801a0de:	4b64      	ldr	r3, [pc, #400]	@ (801a270 <tcp_receive+0xb08>)
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	441a      	add	r2, r3
 801a0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a0e6:	68db      	ldr	r3, [r3, #12]
 801a0e8:	685b      	ldr	r3, [r3, #4]
 801a0ea:	429a      	cmp	r2, r3
 801a0ec:	d006      	beq.n	801a0fc <tcp_receive+0x994>
 801a0ee:	4b62      	ldr	r3, [pc, #392]	@ (801a278 <tcp_receive+0xb10>)
 801a0f0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801a0f4:	4961      	ldr	r1, [pc, #388]	@ (801a27c <tcp_receive+0xb14>)
 801a0f6:	4862      	ldr	r0, [pc, #392]	@ (801a280 <tcp_receive+0xb18>)
 801a0f8:	f003 fd82 	bl	801dc00 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a100:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a102:	4b5a      	ldr	r3, [pc, #360]	@ (801a26c <tcp_receive+0xb04>)
 801a104:	881b      	ldrh	r3, [r3, #0]
 801a106:	461a      	mov	r2, r3
 801a108:	4b59      	ldr	r3, [pc, #356]	@ (801a270 <tcp_receive+0xb08>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	441a      	add	r2, r3
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a116:	4b55      	ldr	r3, [pc, #340]	@ (801a26c <tcp_receive+0xb04>)
 801a118:	881b      	ldrh	r3, [r3, #0]
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d206      	bcs.n	801a12c <tcp_receive+0x9c4>
 801a11e:	4b56      	ldr	r3, [pc, #344]	@ (801a278 <tcp_receive+0xb10>)
 801a120:	f240 6207 	movw	r2, #1543	@ 0x607
 801a124:	4957      	ldr	r1, [pc, #348]	@ (801a284 <tcp_receive+0xb1c>)
 801a126:	4856      	ldr	r0, [pc, #344]	@ (801a280 <tcp_receive+0xb18>)
 801a128:	f003 fd6a 	bl	801dc00 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a130:	4b4e      	ldr	r3, [pc, #312]	@ (801a26c <tcp_receive+0xb04>)
 801a132:	881b      	ldrh	r3, [r3, #0]
 801a134:	1ad3      	subs	r3, r2, r3
 801a136:	b29a      	uxth	r2, r3
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a13c:	6878      	ldr	r0, [r7, #4]
 801a13e:	f7fc fead 	bl	8016e9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a142:	4b4c      	ldr	r3, [pc, #304]	@ (801a274 <tcp_receive+0xb0c>)
 801a144:	685b      	ldr	r3, [r3, #4]
 801a146:	891b      	ldrh	r3, [r3, #8]
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d006      	beq.n	801a15a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801a14c:	4b49      	ldr	r3, [pc, #292]	@ (801a274 <tcp_receive+0xb0c>)
 801a14e:	685b      	ldr	r3, [r3, #4]
 801a150:	4a4d      	ldr	r2, [pc, #308]	@ (801a288 <tcp_receive+0xb20>)
 801a152:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a154:	4b47      	ldr	r3, [pc, #284]	@ (801a274 <tcp_receive+0xb0c>)
 801a156:	2200      	movs	r2, #0
 801a158:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a15a:	4b46      	ldr	r3, [pc, #280]	@ (801a274 <tcp_receive+0xb0c>)
 801a15c:	68db      	ldr	r3, [r3, #12]
 801a15e:	899b      	ldrh	r3, [r3, #12]
 801a160:	b29b      	uxth	r3, r3
 801a162:	4618      	mov	r0, r3
 801a164:	f7fa fa7a 	bl	801465c <lwip_htons>
 801a168:	4603      	mov	r3, r0
 801a16a:	b2db      	uxtb	r3, r3
 801a16c:	f003 0301 	and.w	r3, r3, #1
 801a170:	2b00      	cmp	r3, #0
 801a172:	f000 80b8 	beq.w	801a2e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a176:	4b45      	ldr	r3, [pc, #276]	@ (801a28c <tcp_receive+0xb24>)
 801a178:	781b      	ldrb	r3, [r3, #0]
 801a17a:	f043 0320 	orr.w	r3, r3, #32
 801a17e:	b2da      	uxtb	r2, r3
 801a180:	4b42      	ldr	r3, [pc, #264]	@ (801a28c <tcp_receive+0xb24>)
 801a182:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a184:	e0af      	b.n	801a2e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a18a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a190:	68db      	ldr	r3, [r3, #12]
 801a192:	685b      	ldr	r3, [r3, #4]
 801a194:	4a36      	ldr	r2, [pc, #216]	@ (801a270 <tcp_receive+0xb08>)
 801a196:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a198:	68bb      	ldr	r3, [r7, #8]
 801a19a:	891b      	ldrh	r3, [r3, #8]
 801a19c:	461c      	mov	r4, r3
 801a19e:	68bb      	ldr	r3, [r7, #8]
 801a1a0:	68db      	ldr	r3, [r3, #12]
 801a1a2:	899b      	ldrh	r3, [r3, #12]
 801a1a4:	b29b      	uxth	r3, r3
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	f7fa fa58 	bl	801465c <lwip_htons>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	b2db      	uxtb	r3, r3
 801a1b0:	f003 0303 	and.w	r3, r3, #3
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d001      	beq.n	801a1bc <tcp_receive+0xa54>
 801a1b8:	2301      	movs	r3, #1
 801a1ba:	e000      	b.n	801a1be <tcp_receive+0xa56>
 801a1bc:	2300      	movs	r3, #0
 801a1be:	191a      	adds	r2, r3, r4
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1c4:	441a      	add	r2, r3
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a1ce:	461c      	mov	r4, r3
 801a1d0:	68bb      	ldr	r3, [r7, #8]
 801a1d2:	891b      	ldrh	r3, [r3, #8]
 801a1d4:	461d      	mov	r5, r3
 801a1d6:	68bb      	ldr	r3, [r7, #8]
 801a1d8:	68db      	ldr	r3, [r3, #12]
 801a1da:	899b      	ldrh	r3, [r3, #12]
 801a1dc:	b29b      	uxth	r3, r3
 801a1de:	4618      	mov	r0, r3
 801a1e0:	f7fa fa3c 	bl	801465c <lwip_htons>
 801a1e4:	4603      	mov	r3, r0
 801a1e6:	b2db      	uxtb	r3, r3
 801a1e8:	f003 0303 	and.w	r3, r3, #3
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d001      	beq.n	801a1f4 <tcp_receive+0xa8c>
 801a1f0:	2301      	movs	r3, #1
 801a1f2:	e000      	b.n	801a1f6 <tcp_receive+0xa8e>
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	442b      	add	r3, r5
 801a1f8:	429c      	cmp	r4, r3
 801a1fa:	d206      	bcs.n	801a20a <tcp_receive+0xaa2>
 801a1fc:	4b1e      	ldr	r3, [pc, #120]	@ (801a278 <tcp_receive+0xb10>)
 801a1fe:	f240 622b 	movw	r2, #1579	@ 0x62b
 801a202:	4923      	ldr	r1, [pc, #140]	@ (801a290 <tcp_receive+0xb28>)
 801a204:	481e      	ldr	r0, [pc, #120]	@ (801a280 <tcp_receive+0xb18>)
 801a206:	f003 fcfb 	bl	801dc00 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	891b      	ldrh	r3, [r3, #8]
 801a20e:	461c      	mov	r4, r3
 801a210:	68bb      	ldr	r3, [r7, #8]
 801a212:	68db      	ldr	r3, [r3, #12]
 801a214:	899b      	ldrh	r3, [r3, #12]
 801a216:	b29b      	uxth	r3, r3
 801a218:	4618      	mov	r0, r3
 801a21a:	f7fa fa1f 	bl	801465c <lwip_htons>
 801a21e:	4603      	mov	r3, r0
 801a220:	b2db      	uxtb	r3, r3
 801a222:	f003 0303 	and.w	r3, r3, #3
 801a226:	2b00      	cmp	r3, #0
 801a228:	d001      	beq.n	801a22e <tcp_receive+0xac6>
 801a22a:	2301      	movs	r3, #1
 801a22c:	e000      	b.n	801a230 <tcp_receive+0xac8>
 801a22e:	2300      	movs	r3, #0
 801a230:	1919      	adds	r1, r3, r4
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801a236:	b28b      	uxth	r3, r1
 801a238:	1ad3      	subs	r3, r2, r3
 801a23a:	b29a      	uxth	r2, r3
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a240:	6878      	ldr	r0, [r7, #4]
 801a242:	f7fc fe2b 	bl	8016e9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a246:	68bb      	ldr	r3, [r7, #8]
 801a248:	685b      	ldr	r3, [r3, #4]
 801a24a:	891b      	ldrh	r3, [r3, #8]
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d028      	beq.n	801a2a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a250:	4b0d      	ldr	r3, [pc, #52]	@ (801a288 <tcp_receive+0xb20>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	2b00      	cmp	r3, #0
 801a256:	d01d      	beq.n	801a294 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a258:	4b0b      	ldr	r3, [pc, #44]	@ (801a288 <tcp_receive+0xb20>)
 801a25a:	681a      	ldr	r2, [r3, #0]
 801a25c:	68bb      	ldr	r3, [r7, #8]
 801a25e:	685b      	ldr	r3, [r3, #4]
 801a260:	4619      	mov	r1, r3
 801a262:	4610      	mov	r0, r2
 801a264:	f7fb ff7a 	bl	801615c <pbuf_cat>
 801a268:	e018      	b.n	801a29c <tcp_receive+0xb34>
 801a26a:	bf00      	nop
 801a26c:	2000f9f2 	.word	0x2000f9f2
 801a270:	2000f9e8 	.word	0x2000f9e8
 801a274:	2000f9c8 	.word	0x2000f9c8
 801a278:	08022180 	.word	0x08022180
 801a27c:	08022590 	.word	0x08022590
 801a280:	080221fc 	.word	0x080221fc
 801a284:	080225cc 	.word	0x080225cc
 801a288:	2000f9f8 	.word	0x2000f9f8
 801a28c:	2000f9f5 	.word	0x2000f9f5
 801a290:	080225ec 	.word	0x080225ec
            } else {
              recv_data = cseg->p;
 801a294:	68bb      	ldr	r3, [r7, #8]
 801a296:	685b      	ldr	r3, [r3, #4]
 801a298:	4a70      	ldr	r2, [pc, #448]	@ (801a45c <tcp_receive+0xcf4>)
 801a29a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a29c:	68bb      	ldr	r3, [r7, #8]
 801a29e:	2200      	movs	r2, #0
 801a2a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a2a2:	68bb      	ldr	r3, [r7, #8]
 801a2a4:	68db      	ldr	r3, [r3, #12]
 801a2a6:	899b      	ldrh	r3, [r3, #12]
 801a2a8:	b29b      	uxth	r3, r3
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7fa f9d6 	bl	801465c <lwip_htons>
 801a2b0:	4603      	mov	r3, r0
 801a2b2:	b2db      	uxtb	r3, r3
 801a2b4:	f003 0301 	and.w	r3, r3, #1
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d00d      	beq.n	801a2d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a2bc:	4b68      	ldr	r3, [pc, #416]	@ (801a460 <tcp_receive+0xcf8>)
 801a2be:	781b      	ldrb	r3, [r3, #0]
 801a2c0:	f043 0320 	orr.w	r3, r3, #32
 801a2c4:	b2da      	uxtb	r2, r3
 801a2c6:	4b66      	ldr	r3, [pc, #408]	@ (801a460 <tcp_receive+0xcf8>)
 801a2c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	7d1b      	ldrb	r3, [r3, #20]
 801a2ce:	2b04      	cmp	r3, #4
 801a2d0:	d102      	bne.n	801a2d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	2207      	movs	r2, #7
 801a2d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	681a      	ldr	r2, [r3, #0]
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801a2e0:	68b8      	ldr	r0, [r7, #8]
 801a2e2:	f7fd fb06 	bl	80178f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d008      	beq.n	801a300 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a2f2:	68db      	ldr	r3, [r3, #12]
 801a2f4:	685a      	ldr	r2, [r3, #4]
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801a2fa:	429a      	cmp	r2, r3
 801a2fc:	f43f af43 	beq.w	801a186 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	8b5b      	ldrh	r3, [r3, #26]
 801a304:	f003 0301 	and.w	r3, r3, #1
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d00e      	beq.n	801a32a <tcp_receive+0xbc2>
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	8b5b      	ldrh	r3, [r3, #26]
 801a310:	f023 0301 	bic.w	r3, r3, #1
 801a314:	b29a      	uxth	r2, r3
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	835a      	strh	r2, [r3, #26]
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	8b5b      	ldrh	r3, [r3, #26]
 801a31e:	f043 0302 	orr.w	r3, r3, #2
 801a322:	b29a      	uxth	r2, r3
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a328:	e187      	b.n	801a63a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	8b5b      	ldrh	r3, [r3, #26]
 801a32e:	f043 0301 	orr.w	r3, r3, #1
 801a332:	b29a      	uxth	r2, r3
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a338:	e17f      	b.n	801a63a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d106      	bne.n	801a350 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a342:	4848      	ldr	r0, [pc, #288]	@ (801a464 <tcp_receive+0xcfc>)
 801a344:	f7fd faee 	bl	8017924 <tcp_seg_copy>
 801a348:	4602      	mov	r2, r0
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	675a      	str	r2, [r3, #116]	@ 0x74
 801a34e:	e16c      	b.n	801a62a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a350:	2300      	movs	r3, #0
 801a352:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a358:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a35a:	e156      	b.n	801a60a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801a35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a35e:	68db      	ldr	r3, [r3, #12]
 801a360:	685a      	ldr	r2, [r3, #4]
 801a362:	4b41      	ldr	r3, [pc, #260]	@ (801a468 <tcp_receive+0xd00>)
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	429a      	cmp	r2, r3
 801a368:	d11d      	bne.n	801a3a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a36a:	4b3e      	ldr	r3, [pc, #248]	@ (801a464 <tcp_receive+0xcfc>)
 801a36c:	891a      	ldrh	r2, [r3, #8]
 801a36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a370:	891b      	ldrh	r3, [r3, #8]
 801a372:	429a      	cmp	r2, r3
 801a374:	f240 814e 	bls.w	801a614 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a378:	483a      	ldr	r0, [pc, #232]	@ (801a464 <tcp_receive+0xcfc>)
 801a37a:	f7fd fad3 	bl	8017924 <tcp_seg_copy>
 801a37e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a380:	697b      	ldr	r3, [r7, #20]
 801a382:	2b00      	cmp	r3, #0
 801a384:	f000 8148 	beq.w	801a618 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801a388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d003      	beq.n	801a396 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a390:	697a      	ldr	r2, [r7, #20]
 801a392:	601a      	str	r2, [r3, #0]
 801a394:	e002      	b.n	801a39c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	697a      	ldr	r2, [r7, #20]
 801a39a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a39c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801a39e:	6978      	ldr	r0, [r7, #20]
 801a3a0:	f7ff f8de 	bl	8019560 <tcp_oos_insert_segment>
                }
                break;
 801a3a4:	e138      	b.n	801a618 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d117      	bne.n	801a3dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a3ac:	4b2e      	ldr	r3, [pc, #184]	@ (801a468 <tcp_receive+0xd00>)
 801a3ae:	681a      	ldr	r2, [r3, #0]
 801a3b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3b2:	68db      	ldr	r3, [r3, #12]
 801a3b4:	685b      	ldr	r3, [r3, #4]
 801a3b6:	1ad3      	subs	r3, r2, r3
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	da57      	bge.n	801a46c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a3bc:	4829      	ldr	r0, [pc, #164]	@ (801a464 <tcp_receive+0xcfc>)
 801a3be:	f7fd fab1 	bl	8017924 <tcp_seg_copy>
 801a3c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a3c4:	69bb      	ldr	r3, [r7, #24]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	f000 8128 	beq.w	801a61c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	69ba      	ldr	r2, [r7, #24]
 801a3d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a3d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801a3d4:	69b8      	ldr	r0, [r7, #24]
 801a3d6:	f7ff f8c3 	bl	8019560 <tcp_oos_insert_segment>
                  }
                  break;
 801a3da:	e11f      	b.n	801a61c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a3dc:	4b22      	ldr	r3, [pc, #136]	@ (801a468 <tcp_receive+0xd00>)
 801a3de:	681a      	ldr	r2, [r3, #0]
 801a3e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3e2:	68db      	ldr	r3, [r3, #12]
 801a3e4:	685b      	ldr	r3, [r3, #4]
 801a3e6:	1ad3      	subs	r3, r2, r3
 801a3e8:	3b01      	subs	r3, #1
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	db3e      	blt.n	801a46c <tcp_receive+0xd04>
 801a3ee:	4b1e      	ldr	r3, [pc, #120]	@ (801a468 <tcp_receive+0xd00>)
 801a3f0:	681a      	ldr	r2, [r3, #0]
 801a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3f4:	68db      	ldr	r3, [r3, #12]
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	1ad3      	subs	r3, r2, r3
 801a3fa:	3301      	adds	r3, #1
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	dc35      	bgt.n	801a46c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a400:	4818      	ldr	r0, [pc, #96]	@ (801a464 <tcp_receive+0xcfc>)
 801a402:	f7fd fa8f 	bl	8017924 <tcp_seg_copy>
 801a406:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a408:	69fb      	ldr	r3, [r7, #28]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	f000 8108 	beq.w	801a620 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a412:	68db      	ldr	r3, [r3, #12]
 801a414:	685b      	ldr	r3, [r3, #4]
 801a416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a418:	8912      	ldrh	r2, [r2, #8]
 801a41a:	441a      	add	r2, r3
 801a41c:	4b12      	ldr	r3, [pc, #72]	@ (801a468 <tcp_receive+0xd00>)
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	2b00      	cmp	r3, #0
 801a424:	dd12      	ble.n	801a44c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a426:	4b10      	ldr	r3, [pc, #64]	@ (801a468 <tcp_receive+0xd00>)
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	b29a      	uxth	r2, r3
 801a42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a42e:	68db      	ldr	r3, [r3, #12]
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	b29b      	uxth	r3, r3
 801a434:	1ad3      	subs	r3, r2, r3
 801a436:	b29a      	uxth	r2, r3
 801a438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a43a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a43c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a43e:	685a      	ldr	r2, [r3, #4]
 801a440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a442:	891b      	ldrh	r3, [r3, #8]
 801a444:	4619      	mov	r1, r3
 801a446:	4610      	mov	r0, r2
 801a448:	f7fb fc02 	bl	8015c50 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a44e:	69fa      	ldr	r2, [r7, #28]
 801a450:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a452:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801a454:	69f8      	ldr	r0, [r7, #28]
 801a456:	f7ff f883 	bl	8019560 <tcp_oos_insert_segment>
                  }
                  break;
 801a45a:	e0e1      	b.n	801a620 <tcp_receive+0xeb8>
 801a45c:	2000f9f8 	.word	0x2000f9f8
 801a460:	2000f9f5 	.word	0x2000f9f5
 801a464:	2000f9c8 	.word	0x2000f9c8
 801a468:	2000f9e8 	.word	0x2000f9e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a46e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	2b00      	cmp	r3, #0
 801a476:	f040 80c5 	bne.w	801a604 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a47a:	4b7f      	ldr	r3, [pc, #508]	@ (801a678 <tcp_receive+0xf10>)
 801a47c:	681a      	ldr	r2, [r3, #0]
 801a47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a480:	68db      	ldr	r3, [r3, #12]
 801a482:	685b      	ldr	r3, [r3, #4]
 801a484:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a486:	2b00      	cmp	r3, #0
 801a488:	f340 80bc 	ble.w	801a604 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a48e:	68db      	ldr	r3, [r3, #12]
 801a490:	899b      	ldrh	r3, [r3, #12]
 801a492:	b29b      	uxth	r3, r3
 801a494:	4618      	mov	r0, r3
 801a496:	f7fa f8e1 	bl	801465c <lwip_htons>
 801a49a:	4603      	mov	r3, r0
 801a49c:	b2db      	uxtb	r3, r3
 801a49e:	f003 0301 	and.w	r3, r3, #1
 801a4a2:	2b00      	cmp	r3, #0
 801a4a4:	f040 80be 	bne.w	801a624 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a4a8:	4874      	ldr	r0, [pc, #464]	@ (801a67c <tcp_receive+0xf14>)
 801a4aa:	f7fd fa3b 	bl	8017924 <tcp_seg_copy>
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	f000 80b5 	beq.w	801a628 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4c0:	68db      	ldr	r3, [r3, #12]
 801a4c2:	685b      	ldr	r3, [r3, #4]
 801a4c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a4c6:	8912      	ldrh	r2, [r2, #8]
 801a4c8:	441a      	add	r2, r3
 801a4ca:	4b6b      	ldr	r3, [pc, #428]	@ (801a678 <tcp_receive+0xf10>)
 801a4cc:	681b      	ldr	r3, [r3, #0]
 801a4ce:	1ad3      	subs	r3, r2, r3
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	dd12      	ble.n	801a4fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a4d4:	4b68      	ldr	r3, [pc, #416]	@ (801a678 <tcp_receive+0xf10>)
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	b29a      	uxth	r2, r3
 801a4da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4dc:	68db      	ldr	r3, [r3, #12]
 801a4de:	685b      	ldr	r3, [r3, #4]
 801a4e0:	b29b      	uxth	r3, r3
 801a4e2:	1ad3      	subs	r3, r2, r3
 801a4e4:	b29a      	uxth	r2, r3
 801a4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4ec:	685a      	ldr	r2, [r3, #4]
 801a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a4f0:	891b      	ldrh	r3, [r3, #8]
 801a4f2:	4619      	mov	r1, r3
 801a4f4:	4610      	mov	r0, r2
 801a4f6:	f7fb fbab 	bl	8015c50 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a4fa:	4b61      	ldr	r3, [pc, #388]	@ (801a680 <tcp_receive+0xf18>)
 801a4fc:	881b      	ldrh	r3, [r3, #0]
 801a4fe:	461a      	mov	r2, r3
 801a500:	4b5d      	ldr	r3, [pc, #372]	@ (801a678 <tcp_receive+0xf10>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	441a      	add	r2, r3
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a50a:	6879      	ldr	r1, [r7, #4]
 801a50c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a50e:	440b      	add	r3, r1
 801a510:	1ad3      	subs	r3, r2, r3
 801a512:	2b00      	cmp	r3, #0
 801a514:	f340 8088 	ble.w	801a628 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	68db      	ldr	r3, [r3, #12]
 801a51e:	899b      	ldrh	r3, [r3, #12]
 801a520:	b29b      	uxth	r3, r3
 801a522:	4618      	mov	r0, r3
 801a524:	f7fa f89a 	bl	801465c <lwip_htons>
 801a528:	4603      	mov	r3, r0
 801a52a:	b2db      	uxtb	r3, r3
 801a52c:	f003 0301 	and.w	r3, r3, #1
 801a530:	2b00      	cmp	r3, #0
 801a532:	d021      	beq.n	801a578 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	68db      	ldr	r3, [r3, #12]
 801a53a:	899b      	ldrh	r3, [r3, #12]
 801a53c:	b29b      	uxth	r3, r3
 801a53e:	b21b      	sxth	r3, r3
 801a540:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801a544:	b21c      	sxth	r4, r3
 801a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	68db      	ldr	r3, [r3, #12]
 801a54c:	899b      	ldrh	r3, [r3, #12]
 801a54e:	b29b      	uxth	r3, r3
 801a550:	4618      	mov	r0, r3
 801a552:	f7fa f883 	bl	801465c <lwip_htons>
 801a556:	4603      	mov	r3, r0
 801a558:	b2db      	uxtb	r3, r3
 801a55a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801a55e:	b29b      	uxth	r3, r3
 801a560:	4618      	mov	r0, r3
 801a562:	f7fa f87b 	bl	801465c <lwip_htons>
 801a566:	4603      	mov	r3, r0
 801a568:	b21b      	sxth	r3, r3
 801a56a:	4323      	orrs	r3, r4
 801a56c:	b21a      	sxth	r2, r3
 801a56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	68db      	ldr	r3, [r3, #12]
 801a574:	b292      	uxth	r2, r2
 801a576:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a57c:	b29a      	uxth	r2, r3
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a582:	4413      	add	r3, r2
 801a584:	b299      	uxth	r1, r3
 801a586:	4b3c      	ldr	r3, [pc, #240]	@ (801a678 <tcp_receive+0xf10>)
 801a588:	681b      	ldr	r3, [r3, #0]
 801a58a:	b29a      	uxth	r2, r3
 801a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a58e:	681b      	ldr	r3, [r3, #0]
 801a590:	1a8a      	subs	r2, r1, r2
 801a592:	b292      	uxth	r2, r2
 801a594:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a598:	681b      	ldr	r3, [r3, #0]
 801a59a:	685a      	ldr	r2, [r3, #4]
 801a59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	891b      	ldrh	r3, [r3, #8]
 801a5a2:	4619      	mov	r1, r3
 801a5a4:	4610      	mov	r0, r2
 801a5a6:	f7fb fb53 	bl	8015c50 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	891c      	ldrh	r4, [r3, #8]
 801a5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	68db      	ldr	r3, [r3, #12]
 801a5b6:	899b      	ldrh	r3, [r3, #12]
 801a5b8:	b29b      	uxth	r3, r3
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f7fa f84e 	bl	801465c <lwip_htons>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	b2db      	uxtb	r3, r3
 801a5c4:	f003 0303 	and.w	r3, r3, #3
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d001      	beq.n	801a5d0 <tcp_receive+0xe68>
 801a5cc:	2301      	movs	r3, #1
 801a5ce:	e000      	b.n	801a5d2 <tcp_receive+0xe6a>
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	4423      	add	r3, r4
 801a5d4:	b29a      	uxth	r2, r3
 801a5d6:	4b2a      	ldr	r3, [pc, #168]	@ (801a680 <tcp_receive+0xf18>)
 801a5d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a5da:	4b29      	ldr	r3, [pc, #164]	@ (801a680 <tcp_receive+0xf18>)
 801a5dc:	881b      	ldrh	r3, [r3, #0]
 801a5de:	461a      	mov	r2, r3
 801a5e0:	4b25      	ldr	r3, [pc, #148]	@ (801a678 <tcp_receive+0xf10>)
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	441a      	add	r2, r3
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5ea:	6879      	ldr	r1, [r7, #4]
 801a5ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a5ee:	440b      	add	r3, r1
 801a5f0:	429a      	cmp	r2, r3
 801a5f2:	d019      	beq.n	801a628 <tcp_receive+0xec0>
 801a5f4:	4b23      	ldr	r3, [pc, #140]	@ (801a684 <tcp_receive+0xf1c>)
 801a5f6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801a5fa:	4923      	ldr	r1, [pc, #140]	@ (801a688 <tcp_receive+0xf20>)
 801a5fc:	4823      	ldr	r0, [pc, #140]	@ (801a68c <tcp_receive+0xf24>)
 801a5fe:	f003 faff 	bl	801dc00 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a602:	e011      	b.n	801a628 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	f47f aea5 	bne.w	801a35c <tcp_receive+0xbf4>
 801a612:	e00a      	b.n	801a62a <tcp_receive+0xec2>
                break;
 801a614:	bf00      	nop
 801a616:	e008      	b.n	801a62a <tcp_receive+0xec2>
                break;
 801a618:	bf00      	nop
 801a61a:	e006      	b.n	801a62a <tcp_receive+0xec2>
                  break;
 801a61c:	bf00      	nop
 801a61e:	e004      	b.n	801a62a <tcp_receive+0xec2>
                  break;
 801a620:	bf00      	nop
 801a622:	e002      	b.n	801a62a <tcp_receive+0xec2>
                  break;
 801a624:	bf00      	nop
 801a626:	e000      	b.n	801a62a <tcp_receive+0xec2>
                break;
 801a628:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a62a:	6878      	ldr	r0, [r7, #4]
 801a62c:	f001 fe8a 	bl	801c344 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a630:	e003      	b.n	801a63a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a632:	6878      	ldr	r0, [r7, #4]
 801a634:	f001 fe86 	bl	801c344 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a638:	e01a      	b.n	801a670 <tcp_receive+0xf08>
 801a63a:	e019      	b.n	801a670 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a63c:	4b0e      	ldr	r3, [pc, #56]	@ (801a678 <tcp_receive+0xf10>)
 801a63e:	681a      	ldr	r2, [r3, #0]
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a644:	1ad3      	subs	r3, r2, r3
 801a646:	2b00      	cmp	r3, #0
 801a648:	db0a      	blt.n	801a660 <tcp_receive+0xef8>
 801a64a:	4b0b      	ldr	r3, [pc, #44]	@ (801a678 <tcp_receive+0xf10>)
 801a64c:	681a      	ldr	r2, [r3, #0]
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a652:	6879      	ldr	r1, [r7, #4]
 801a654:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801a656:	440b      	add	r3, r1
 801a658:	1ad3      	subs	r3, r2, r3
 801a65a:	3301      	adds	r3, #1
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	dd07      	ble.n	801a670 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	8b5b      	ldrh	r3, [r3, #26]
 801a664:	f043 0302 	orr.w	r3, r3, #2
 801a668:	b29a      	uxth	r2, r3
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a66e:	e7ff      	b.n	801a670 <tcp_receive+0xf08>
 801a670:	bf00      	nop
 801a672:	3750      	adds	r7, #80	@ 0x50
 801a674:	46bd      	mov	sp, r7
 801a676:	bdb0      	pop	{r4, r5, r7, pc}
 801a678:	2000f9e8 	.word	0x2000f9e8
 801a67c:	2000f9c8 	.word	0x2000f9c8
 801a680:	2000f9f2 	.word	0x2000f9f2
 801a684:	08022180 	.word	0x08022180
 801a688:	08022558 	.word	0x08022558
 801a68c:	080221fc 	.word	0x080221fc

0801a690 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a690:	b480      	push	{r7}
 801a692:	b083      	sub	sp, #12
 801a694:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a696:	4b15      	ldr	r3, [pc, #84]	@ (801a6ec <tcp_get_next_optbyte+0x5c>)
 801a698:	881b      	ldrh	r3, [r3, #0]
 801a69a:	1c5a      	adds	r2, r3, #1
 801a69c:	b291      	uxth	r1, r2
 801a69e:	4a13      	ldr	r2, [pc, #76]	@ (801a6ec <tcp_get_next_optbyte+0x5c>)
 801a6a0:	8011      	strh	r1, [r2, #0]
 801a6a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a6a4:	4b12      	ldr	r3, [pc, #72]	@ (801a6f0 <tcp_get_next_optbyte+0x60>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	d004      	beq.n	801a6b6 <tcp_get_next_optbyte+0x26>
 801a6ac:	4b11      	ldr	r3, [pc, #68]	@ (801a6f4 <tcp_get_next_optbyte+0x64>)
 801a6ae:	881b      	ldrh	r3, [r3, #0]
 801a6b0:	88fa      	ldrh	r2, [r7, #6]
 801a6b2:	429a      	cmp	r2, r3
 801a6b4:	d208      	bcs.n	801a6c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a6b6:	4b10      	ldr	r3, [pc, #64]	@ (801a6f8 <tcp_get_next_optbyte+0x68>)
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	3314      	adds	r3, #20
 801a6bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a6be:	88fb      	ldrh	r3, [r7, #6]
 801a6c0:	683a      	ldr	r2, [r7, #0]
 801a6c2:	4413      	add	r3, r2
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	e00b      	b.n	801a6e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a6c8:	88fb      	ldrh	r3, [r7, #6]
 801a6ca:	b2da      	uxtb	r2, r3
 801a6cc:	4b09      	ldr	r3, [pc, #36]	@ (801a6f4 <tcp_get_next_optbyte+0x64>)
 801a6ce:	881b      	ldrh	r3, [r3, #0]
 801a6d0:	b2db      	uxtb	r3, r3
 801a6d2:	1ad3      	subs	r3, r2, r3
 801a6d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a6d6:	4b06      	ldr	r3, [pc, #24]	@ (801a6f0 <tcp_get_next_optbyte+0x60>)
 801a6d8:	681a      	ldr	r2, [r3, #0]
 801a6da:	797b      	ldrb	r3, [r7, #5]
 801a6dc:	4413      	add	r3, r2
 801a6de:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	370c      	adds	r7, #12
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ea:	4770      	bx	lr
 801a6ec:	2000f9e4 	.word	0x2000f9e4
 801a6f0:	2000f9e0 	.word	0x2000f9e0
 801a6f4:	2000f9de 	.word	0x2000f9de
 801a6f8:	2000f9d8 	.word	0x2000f9d8

0801a6fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	b084      	sub	sp, #16
 801a700:	af00      	add	r7, sp, #0
 801a702:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d106      	bne.n	801a718 <tcp_parseopt+0x1c>
 801a70a:	4b33      	ldr	r3, [pc, #204]	@ (801a7d8 <tcp_parseopt+0xdc>)
 801a70c:	f240 727d 	movw	r2, #1917	@ 0x77d
 801a710:	4932      	ldr	r1, [pc, #200]	@ (801a7dc <tcp_parseopt+0xe0>)
 801a712:	4833      	ldr	r0, [pc, #204]	@ (801a7e0 <tcp_parseopt+0xe4>)
 801a714:	f003 fa74 	bl	801dc00 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a718:	4b32      	ldr	r3, [pc, #200]	@ (801a7e4 <tcp_parseopt+0xe8>)
 801a71a:	881b      	ldrh	r3, [r3, #0]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d057      	beq.n	801a7d0 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a720:	4b31      	ldr	r3, [pc, #196]	@ (801a7e8 <tcp_parseopt+0xec>)
 801a722:	2200      	movs	r2, #0
 801a724:	801a      	strh	r2, [r3, #0]
 801a726:	e047      	b.n	801a7b8 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 801a728:	f7ff ffb2 	bl	801a690 <tcp_get_next_optbyte>
 801a72c:	4603      	mov	r3, r0
 801a72e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a730:	7bfb      	ldrb	r3, [r7, #15]
 801a732:	2b02      	cmp	r3, #2
 801a734:	d006      	beq.n	801a744 <tcp_parseopt+0x48>
 801a736:	2b02      	cmp	r3, #2
 801a738:	dc2b      	bgt.n	801a792 <tcp_parseopt+0x96>
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d043      	beq.n	801a7c6 <tcp_parseopt+0xca>
 801a73e:	2b01      	cmp	r3, #1
 801a740:	d039      	beq.n	801a7b6 <tcp_parseopt+0xba>
 801a742:	e026      	b.n	801a792 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a744:	f7ff ffa4 	bl	801a690 <tcp_get_next_optbyte>
 801a748:	4603      	mov	r3, r0
 801a74a:	2b04      	cmp	r3, #4
 801a74c:	d13d      	bne.n	801a7ca <tcp_parseopt+0xce>
 801a74e:	4b26      	ldr	r3, [pc, #152]	@ (801a7e8 <tcp_parseopt+0xec>)
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	3301      	adds	r3, #1
 801a754:	4a23      	ldr	r2, [pc, #140]	@ (801a7e4 <tcp_parseopt+0xe8>)
 801a756:	8812      	ldrh	r2, [r2, #0]
 801a758:	4293      	cmp	r3, r2
 801a75a:	da36      	bge.n	801a7ca <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a75c:	f7ff ff98 	bl	801a690 <tcp_get_next_optbyte>
 801a760:	4603      	mov	r3, r0
 801a762:	021b      	lsls	r3, r3, #8
 801a764:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a766:	f7ff ff93 	bl	801a690 <tcp_get_next_optbyte>
 801a76a:	4603      	mov	r3, r0
 801a76c:	461a      	mov	r2, r3
 801a76e:	89bb      	ldrh	r3, [r7, #12]
 801a770:	4313      	orrs	r3, r2
 801a772:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a774:	89bb      	ldrh	r3, [r7, #12]
 801a776:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801a77a:	4293      	cmp	r3, r2
 801a77c:	d804      	bhi.n	801a788 <tcp_parseopt+0x8c>
 801a77e:	89bb      	ldrh	r3, [r7, #12]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d001      	beq.n	801a788 <tcp_parseopt+0x8c>
 801a784:	89ba      	ldrh	r2, [r7, #12]
 801a786:	e001      	b.n	801a78c <tcp_parseopt+0x90>
 801a788:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801a790:	e012      	b.n	801a7b8 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a792:	f7ff ff7d 	bl	801a690 <tcp_get_next_optbyte>
 801a796:	4603      	mov	r3, r0
 801a798:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a79a:	7afb      	ldrb	r3, [r7, #11]
 801a79c:	2b01      	cmp	r3, #1
 801a79e:	d916      	bls.n	801a7ce <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a7a0:	7afb      	ldrb	r3, [r7, #11]
 801a7a2:	b29a      	uxth	r2, r3
 801a7a4:	4b10      	ldr	r3, [pc, #64]	@ (801a7e8 <tcp_parseopt+0xec>)
 801a7a6:	881b      	ldrh	r3, [r3, #0]
 801a7a8:	4413      	add	r3, r2
 801a7aa:	b29b      	uxth	r3, r3
 801a7ac:	3b02      	subs	r3, #2
 801a7ae:	b29a      	uxth	r2, r3
 801a7b0:	4b0d      	ldr	r3, [pc, #52]	@ (801a7e8 <tcp_parseopt+0xec>)
 801a7b2:	801a      	strh	r2, [r3, #0]
 801a7b4:	e000      	b.n	801a7b8 <tcp_parseopt+0xbc>
          break;
 801a7b6:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a7b8:	4b0b      	ldr	r3, [pc, #44]	@ (801a7e8 <tcp_parseopt+0xec>)
 801a7ba:	881a      	ldrh	r2, [r3, #0]
 801a7bc:	4b09      	ldr	r3, [pc, #36]	@ (801a7e4 <tcp_parseopt+0xe8>)
 801a7be:	881b      	ldrh	r3, [r3, #0]
 801a7c0:	429a      	cmp	r2, r3
 801a7c2:	d3b1      	bcc.n	801a728 <tcp_parseopt+0x2c>
 801a7c4:	e004      	b.n	801a7d0 <tcp_parseopt+0xd4>
          return;
 801a7c6:	bf00      	nop
 801a7c8:	e002      	b.n	801a7d0 <tcp_parseopt+0xd4>
            return;
 801a7ca:	bf00      	nop
 801a7cc:	e000      	b.n	801a7d0 <tcp_parseopt+0xd4>
            return;
 801a7ce:	bf00      	nop
      }
    }
  }
}
 801a7d0:	3710      	adds	r7, #16
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	bd80      	pop	{r7, pc}
 801a7d6:	bf00      	nop
 801a7d8:	08022180 	.word	0x08022180
 801a7dc:	08022614 	.word	0x08022614
 801a7e0:	080221fc 	.word	0x080221fc
 801a7e4:	2000f9dc 	.word	0x2000f9dc
 801a7e8:	2000f9e4 	.word	0x2000f9e4

0801a7ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a7ec:	b480      	push	{r7}
 801a7ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a7f0:	4b05      	ldr	r3, [pc, #20]	@ (801a808 <tcp_trigger_input_pcb_close+0x1c>)
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	f043 0310 	orr.w	r3, r3, #16
 801a7f8:	b2da      	uxtb	r2, r3
 801a7fa:	4b03      	ldr	r3, [pc, #12]	@ (801a808 <tcp_trigger_input_pcb_close+0x1c>)
 801a7fc:	701a      	strb	r2, [r3, #0]
}
 801a7fe:	bf00      	nop
 801a800:	46bd      	mov	sp, r7
 801a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a806:	4770      	bx	lr
 801a808:	2000f9f5 	.word	0x2000f9f5

0801a80c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b084      	sub	sp, #16
 801a810:	af00      	add	r7, sp, #0
 801a812:	60f8      	str	r0, [r7, #12]
 801a814:	60b9      	str	r1, [r7, #8]
 801a816:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d00a      	beq.n	801a834 <tcp_route+0x28>
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	7a1b      	ldrb	r3, [r3, #8]
 801a822:	2b00      	cmp	r3, #0
 801a824:	d006      	beq.n	801a834 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	7a1b      	ldrb	r3, [r3, #8]
 801a82a:	4618      	mov	r0, r3
 801a82c:	f7fb f808 	bl	8015840 <netif_get_by_index>
 801a830:	4603      	mov	r3, r0
 801a832:	e003      	b.n	801a83c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a834:	6878      	ldr	r0, [r7, #4]
 801a836:	f7f8 fd21 	bl	801327c <ip4_route>
 801a83a:	4603      	mov	r3, r0
  }
}
 801a83c:	4618      	mov	r0, r3
 801a83e:	3710      	adds	r7, #16
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}

0801a844 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a844:	b590      	push	{r4, r7, lr}
 801a846:	b087      	sub	sp, #28
 801a848:	af00      	add	r7, sp, #0
 801a84a:	60f8      	str	r0, [r7, #12]
 801a84c:	60b9      	str	r1, [r7, #8]
 801a84e:	603b      	str	r3, [r7, #0]
 801a850:	4613      	mov	r3, r2
 801a852:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d105      	bne.n	801a866 <tcp_create_segment+0x22>
 801a85a:	4b43      	ldr	r3, [pc, #268]	@ (801a968 <tcp_create_segment+0x124>)
 801a85c:	22a3      	movs	r2, #163	@ 0xa3
 801a85e:	4943      	ldr	r1, [pc, #268]	@ (801a96c <tcp_create_segment+0x128>)
 801a860:	4843      	ldr	r0, [pc, #268]	@ (801a970 <tcp_create_segment+0x12c>)
 801a862:	f003 f9cd 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a866:	68bb      	ldr	r3, [r7, #8]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	d105      	bne.n	801a878 <tcp_create_segment+0x34>
 801a86c:	4b3e      	ldr	r3, [pc, #248]	@ (801a968 <tcp_create_segment+0x124>)
 801a86e:	22a4      	movs	r2, #164	@ 0xa4
 801a870:	4940      	ldr	r1, [pc, #256]	@ (801a974 <tcp_create_segment+0x130>)
 801a872:	483f      	ldr	r0, [pc, #252]	@ (801a970 <tcp_create_segment+0x12c>)
 801a874:	f003 f9c4 	bl	801dc00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a878:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a87c:	009b      	lsls	r3, r3, #2
 801a87e:	b2db      	uxtb	r3, r3
 801a880:	f003 0304 	and.w	r3, r3, #4
 801a884:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a886:	2003      	movs	r0, #3
 801a888:	f7fa fc2c 	bl	80150e4 <memp_malloc>
 801a88c:	6138      	str	r0, [r7, #16]
 801a88e:	693b      	ldr	r3, [r7, #16]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d104      	bne.n	801a89e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a894:	68b8      	ldr	r0, [r7, #8]
 801a896:	f7fb fb93 	bl	8015fc0 <pbuf_free>
    return NULL;
 801a89a:	2300      	movs	r3, #0
 801a89c:	e060      	b.n	801a960 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801a89e:	693b      	ldr	r3, [r7, #16]
 801a8a0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801a8a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a8a6:	693b      	ldr	r3, [r7, #16]
 801a8a8:	2200      	movs	r2, #0
 801a8aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a8ac:	693b      	ldr	r3, [r7, #16]
 801a8ae:	68ba      	ldr	r2, [r7, #8]
 801a8b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	891a      	ldrh	r2, [r3, #8]
 801a8b6:	7dfb      	ldrb	r3, [r7, #23]
 801a8b8:	b29b      	uxth	r3, r3
 801a8ba:	429a      	cmp	r2, r3
 801a8bc:	d205      	bcs.n	801a8ca <tcp_create_segment+0x86>
 801a8be:	4b2a      	ldr	r3, [pc, #168]	@ (801a968 <tcp_create_segment+0x124>)
 801a8c0:	22b0      	movs	r2, #176	@ 0xb0
 801a8c2:	492d      	ldr	r1, [pc, #180]	@ (801a978 <tcp_create_segment+0x134>)
 801a8c4:	482a      	ldr	r0, [pc, #168]	@ (801a970 <tcp_create_segment+0x12c>)
 801a8c6:	f003 f99b 	bl	801dc00 <iprintf>
  seg->len = p->tot_len - optlen;
 801a8ca:	68bb      	ldr	r3, [r7, #8]
 801a8cc:	891a      	ldrh	r2, [r3, #8]
 801a8ce:	7dfb      	ldrb	r3, [r7, #23]
 801a8d0:	b29b      	uxth	r3, r3
 801a8d2:	1ad3      	subs	r3, r2, r3
 801a8d4:	b29a      	uxth	r2, r3
 801a8d6:	693b      	ldr	r3, [r7, #16]
 801a8d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a8da:	2114      	movs	r1, #20
 801a8dc:	68b8      	ldr	r0, [r7, #8]
 801a8de:	f7fb faa7 	bl	8015e30 <pbuf_add_header>
 801a8e2:	4603      	mov	r3, r0
 801a8e4:	2b00      	cmp	r3, #0
 801a8e6:	d004      	beq.n	801a8f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a8e8:	6938      	ldr	r0, [r7, #16]
 801a8ea:	f7fd f802 	bl	80178f2 <tcp_seg_free>
    return NULL;
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	e036      	b.n	801a960 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a8f2:	693b      	ldr	r3, [r7, #16]
 801a8f4:	685b      	ldr	r3, [r3, #4]
 801a8f6:	685a      	ldr	r2, [r3, #4]
 801a8f8:	693b      	ldr	r3, [r7, #16]
 801a8fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	8ada      	ldrh	r2, [r3, #22]
 801a900:	693b      	ldr	r3, [r7, #16]
 801a902:	68dc      	ldr	r4, [r3, #12]
 801a904:	4610      	mov	r0, r2
 801a906:	f7f9 fea9 	bl	801465c <lwip_htons>
 801a90a:	4603      	mov	r3, r0
 801a90c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	8b1a      	ldrh	r2, [r3, #24]
 801a912:	693b      	ldr	r3, [r7, #16]
 801a914:	68dc      	ldr	r4, [r3, #12]
 801a916:	4610      	mov	r0, r2
 801a918:	f7f9 fea0 	bl	801465c <lwip_htons>
 801a91c:	4603      	mov	r3, r0
 801a91e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	68dc      	ldr	r4, [r3, #12]
 801a924:	6838      	ldr	r0, [r7, #0]
 801a926:	f7f9 feae 	bl	8014686 <lwip_htonl>
 801a92a:	4603      	mov	r3, r0
 801a92c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a92e:	7dfb      	ldrb	r3, [r7, #23]
 801a930:	089b      	lsrs	r3, r3, #2
 801a932:	b2db      	uxtb	r3, r3
 801a934:	3305      	adds	r3, #5
 801a936:	b29b      	uxth	r3, r3
 801a938:	031b      	lsls	r3, r3, #12
 801a93a:	b29a      	uxth	r2, r3
 801a93c:	79fb      	ldrb	r3, [r7, #7]
 801a93e:	b29b      	uxth	r3, r3
 801a940:	4313      	orrs	r3, r2
 801a942:	b29a      	uxth	r2, r3
 801a944:	693b      	ldr	r3, [r7, #16]
 801a946:	68dc      	ldr	r4, [r3, #12]
 801a948:	4610      	mov	r0, r2
 801a94a:	f7f9 fe87 	bl	801465c <lwip_htons>
 801a94e:	4603      	mov	r3, r0
 801a950:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a952:	693b      	ldr	r3, [r7, #16]
 801a954:	68db      	ldr	r3, [r3, #12]
 801a956:	2200      	movs	r2, #0
 801a958:	749a      	strb	r2, [r3, #18]
 801a95a:	2200      	movs	r2, #0
 801a95c:	74da      	strb	r2, [r3, #19]
  return seg;
 801a95e:	693b      	ldr	r3, [r7, #16]
}
 801a960:	4618      	mov	r0, r3
 801a962:	371c      	adds	r7, #28
 801a964:	46bd      	mov	sp, r7
 801a966:	bd90      	pop	{r4, r7, pc}
 801a968:	08022630 	.word	0x08022630
 801a96c:	08022694 	.word	0x08022694
 801a970:	080226b4 	.word	0x080226b4
 801a974:	080226dc 	.word	0x080226dc
 801a978:	08022700 	.word	0x08022700

0801a97c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b086      	sub	sp, #24
 801a980:	af00      	add	r7, sp, #0
 801a982:	607b      	str	r3, [r7, #4]
 801a984:	4603      	mov	r3, r0
 801a986:	73fb      	strb	r3, [r7, #15]
 801a988:	460b      	mov	r3, r1
 801a98a:	81bb      	strh	r3, [r7, #12]
 801a98c:	4613      	mov	r3, r2
 801a98e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801a990:	89bb      	ldrh	r3, [r7, #12]
 801a992:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d105      	bne.n	801a9a6 <tcp_pbuf_prealloc+0x2a>
 801a99a:	4b30      	ldr	r3, [pc, #192]	@ (801aa5c <tcp_pbuf_prealloc+0xe0>)
 801a99c:	22e8      	movs	r2, #232	@ 0xe8
 801a99e:	4930      	ldr	r1, [pc, #192]	@ (801aa60 <tcp_pbuf_prealloc+0xe4>)
 801a9a0:	4830      	ldr	r0, [pc, #192]	@ (801aa64 <tcp_pbuf_prealloc+0xe8>)
 801a9a2:	f003 f92d 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801a9a6:	6a3b      	ldr	r3, [r7, #32]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d105      	bne.n	801a9b8 <tcp_pbuf_prealloc+0x3c>
 801a9ac:	4b2b      	ldr	r3, [pc, #172]	@ (801aa5c <tcp_pbuf_prealloc+0xe0>)
 801a9ae:	22e9      	movs	r2, #233	@ 0xe9
 801a9b0:	492d      	ldr	r1, [pc, #180]	@ (801aa68 <tcp_pbuf_prealloc+0xec>)
 801a9b2:	482c      	ldr	r0, [pc, #176]	@ (801aa64 <tcp_pbuf_prealloc+0xe8>)
 801a9b4:	f003 f924 	bl	801dc00 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801a9b8:	89ba      	ldrh	r2, [r7, #12]
 801a9ba:	897b      	ldrh	r3, [r7, #10]
 801a9bc:	429a      	cmp	r2, r3
 801a9be:	d221      	bcs.n	801aa04 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a9c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801a9c4:	f003 0302 	and.w	r3, r3, #2
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d111      	bne.n	801a9f0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801a9cc:	6a3b      	ldr	r3, [r7, #32]
 801a9ce:	8b5b      	ldrh	r3, [r3, #26]
 801a9d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d115      	bne.n	801aa04 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801a9d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d007      	beq.n	801a9f0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801a9e0:	6a3b      	ldr	r3, [r7, #32]
 801a9e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801a9e4:	2b00      	cmp	r3, #0
 801a9e6:	d103      	bne.n	801a9f0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801a9e8:	6a3b      	ldr	r3, [r7, #32]
 801a9ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d009      	beq.n	801aa04 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801a9f0:	89bb      	ldrh	r3, [r7, #12]
 801a9f2:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 801a9f6:	f023 0203 	bic.w	r2, r3, #3
 801a9fa:	897b      	ldrh	r3, [r7, #10]
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	bf28      	it	cs
 801aa00:	4613      	movcs	r3, r2
 801aa02:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801aa04:	8af9      	ldrh	r1, [r7, #22]
 801aa06:	7bfb      	ldrb	r3, [r7, #15]
 801aa08:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	f7fa ffc1 	bl	8015994 <pbuf_alloc>
 801aa12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa14:	693b      	ldr	r3, [r7, #16]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d101      	bne.n	801aa1e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	e019      	b.n	801aa52 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801aa1e:	693b      	ldr	r3, [r7, #16]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d006      	beq.n	801aa34 <tcp_pbuf_prealloc+0xb8>
 801aa26:	4b0d      	ldr	r3, [pc, #52]	@ (801aa5c <tcp_pbuf_prealloc+0xe0>)
 801aa28:	f240 120b 	movw	r2, #267	@ 0x10b
 801aa2c:	490f      	ldr	r1, [pc, #60]	@ (801aa6c <tcp_pbuf_prealloc+0xf0>)
 801aa2e:	480d      	ldr	r0, [pc, #52]	@ (801aa64 <tcp_pbuf_prealloc+0xe8>)
 801aa30:	f003 f8e6 	bl	801dc00 <iprintf>
  *oversize = p->len - length;
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	895a      	ldrh	r2, [r3, #10]
 801aa38:	89bb      	ldrh	r3, [r7, #12]
 801aa3a:	1ad3      	subs	r3, r2, r3
 801aa3c:	b29a      	uxth	r2, r3
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801aa42:	693b      	ldr	r3, [r7, #16]
 801aa44:	89ba      	ldrh	r2, [r7, #12]
 801aa46:	811a      	strh	r2, [r3, #8]
 801aa48:	693b      	ldr	r3, [r7, #16]
 801aa4a:	891a      	ldrh	r2, [r3, #8]
 801aa4c:	693b      	ldr	r3, [r7, #16]
 801aa4e:	815a      	strh	r2, [r3, #10]
  return p;
 801aa50:	693b      	ldr	r3, [r7, #16]
}
 801aa52:	4618      	mov	r0, r3
 801aa54:	3718      	adds	r7, #24
 801aa56:	46bd      	mov	sp, r7
 801aa58:	bd80      	pop	{r7, pc}
 801aa5a:	bf00      	nop
 801aa5c:	08022630 	.word	0x08022630
 801aa60:	08022718 	.word	0x08022718
 801aa64:	080226b4 	.word	0x080226b4
 801aa68:	0802273c 	.word	0x0802273c
 801aa6c:	0802275c 	.word	0x0802275c

0801aa70 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b082      	sub	sp, #8
 801aa74:	af00      	add	r7, sp, #0
 801aa76:	6078      	str	r0, [r7, #4]
 801aa78:	460b      	mov	r3, r1
 801aa7a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d106      	bne.n	801aa90 <tcp_write_checks+0x20>
 801aa82:	4b33      	ldr	r3, [pc, #204]	@ (801ab50 <tcp_write_checks+0xe0>)
 801aa84:	f240 1233 	movw	r2, #307	@ 0x133
 801aa88:	4932      	ldr	r1, [pc, #200]	@ (801ab54 <tcp_write_checks+0xe4>)
 801aa8a:	4833      	ldr	r0, [pc, #204]	@ (801ab58 <tcp_write_checks+0xe8>)
 801aa8c:	f003 f8b8 	bl	801dc00 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	7d1b      	ldrb	r3, [r3, #20]
 801aa94:	2b04      	cmp	r3, #4
 801aa96:	d00e      	beq.n	801aab6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801aa9c:	2b07      	cmp	r3, #7
 801aa9e:	d00a      	beq.n	801aab6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801aaa4:	2b02      	cmp	r3, #2
 801aaa6:	d006      	beq.n	801aab6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801aaac:	2b03      	cmp	r3, #3
 801aaae:	d002      	beq.n	801aab6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801aab0:	f06f 030a 	mvn.w	r3, #10
 801aab4:	e048      	b.n	801ab48 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801aab6:	887b      	ldrh	r3, [r7, #2]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d101      	bne.n	801aac0 <tcp_write_checks+0x50>
    return ERR_OK;
 801aabc:	2300      	movs	r3, #0
 801aabe:	e043      	b.n	801ab48 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801aac6:	887a      	ldrh	r2, [r7, #2]
 801aac8:	429a      	cmp	r2, r3
 801aaca:	d909      	bls.n	801aae0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	8b5b      	ldrh	r3, [r3, #26]
 801aad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aad4:	b29a      	uxth	r2, r3
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aada:	f04f 33ff 	mov.w	r3, #4294967295
 801aade:	e033      	b.n	801ab48 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801aae6:	2b0f      	cmp	r3, #15
 801aae8:	d909      	bls.n	801aafe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	8b5b      	ldrh	r3, [r3, #26]
 801aaee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aaf2:	b29a      	uxth	r2, r3
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801aaf8:	f04f 33ff 	mov.w	r3, #4294967295
 801aafc:	e024      	b.n	801ab48 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d00f      	beq.n	801ab28 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d11a      	bne.n	801ab46 <tcp_write_checks+0xd6>
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d116      	bne.n	801ab46 <tcp_write_checks+0xd6>
 801ab18:	4b0d      	ldr	r3, [pc, #52]	@ (801ab50 <tcp_write_checks+0xe0>)
 801ab1a:	f240 1255 	movw	r2, #341	@ 0x155
 801ab1e:	490f      	ldr	r1, [pc, #60]	@ (801ab5c <tcp_write_checks+0xec>)
 801ab20:	480d      	ldr	r0, [pc, #52]	@ (801ab58 <tcp_write_checks+0xe8>)
 801ab22:	f003 f86d 	bl	801dc00 <iprintf>
 801ab26:	e00e      	b.n	801ab46 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d103      	bne.n	801ab38 <tcp_write_checks+0xc8>
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d006      	beq.n	801ab46 <tcp_write_checks+0xd6>
 801ab38:	4b05      	ldr	r3, [pc, #20]	@ (801ab50 <tcp_write_checks+0xe0>)
 801ab3a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801ab3e:	4908      	ldr	r1, [pc, #32]	@ (801ab60 <tcp_write_checks+0xf0>)
 801ab40:	4805      	ldr	r0, [pc, #20]	@ (801ab58 <tcp_write_checks+0xe8>)
 801ab42:	f003 f85d 	bl	801dc00 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ab46:	2300      	movs	r3, #0
}
 801ab48:	4618      	mov	r0, r3
 801ab4a:	3708      	adds	r7, #8
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	bd80      	pop	{r7, pc}
 801ab50:	08022630 	.word	0x08022630
 801ab54:	08022770 	.word	0x08022770
 801ab58:	080226b4 	.word	0x080226b4
 801ab5c:	08022790 	.word	0x08022790
 801ab60:	080227cc 	.word	0x080227cc

0801ab64 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801ab64:	b590      	push	{r4, r7, lr}
 801ab66:	b09b      	sub	sp, #108	@ 0x6c
 801ab68:	af04      	add	r7, sp, #16
 801ab6a:	60f8      	str	r0, [r7, #12]
 801ab6c:	60b9      	str	r1, [r7, #8]
 801ab6e:	4611      	mov	r1, r2
 801ab70:	461a      	mov	r2, r3
 801ab72:	460b      	mov	r3, r1
 801ab74:	80fb      	strh	r3, [r7, #6]
 801ab76:	4613      	mov	r3, r2
 801ab78:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801ab7e:	2300      	movs	r3, #0
 801ab80:	653b      	str	r3, [r7, #80]	@ 0x50
 801ab82:	2300      	movs	r3, #0
 801ab84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ab86:	2300      	movs	r3, #0
 801ab88:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801ab8e:	2300      	movs	r3, #0
 801ab90:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801ab94:	2300      	movs	r3, #0
 801ab96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801ab9e:	2300      	movs	r3, #0
 801aba0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801aba2:	2300      	movs	r3, #0
 801aba4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	d109      	bne.n	801abc0 <tcp_write+0x5c>
 801abac:	4ba4      	ldr	r3, [pc, #656]	@ (801ae40 <tcp_write+0x2dc>)
 801abae:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801abb2:	49a4      	ldr	r1, [pc, #656]	@ (801ae44 <tcp_write+0x2e0>)
 801abb4:	48a4      	ldr	r0, [pc, #656]	@ (801ae48 <tcp_write+0x2e4>)
 801abb6:	f003 f823 	bl	801dc00 <iprintf>
 801abba:	f06f 030f 	mvn.w	r3, #15
 801abbe:	e32a      	b.n	801b216 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801abc6:	085b      	lsrs	r3, r3, #1
 801abc8:	b29a      	uxth	r2, r3
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801abce:	4293      	cmp	r3, r2
 801abd0:	bf28      	it	cs
 801abd2:	4613      	movcs	r3, r2
 801abd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801abd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d102      	bne.n	801abe2 <tcp_write+0x7e>
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801abe0:	e000      	b.n	801abe4 <tcp_write+0x80>
 801abe2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801abe4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801abe6:	68bb      	ldr	r3, [r7, #8]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d109      	bne.n	801ac00 <tcp_write+0x9c>
 801abec:	4b94      	ldr	r3, [pc, #592]	@ (801ae40 <tcp_write+0x2dc>)
 801abee:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801abf2:	4996      	ldr	r1, [pc, #600]	@ (801ae4c <tcp_write+0x2e8>)
 801abf4:	4894      	ldr	r0, [pc, #592]	@ (801ae48 <tcp_write+0x2e4>)
 801abf6:	f003 f803 	bl	801dc00 <iprintf>
 801abfa:	f06f 030f 	mvn.w	r3, #15
 801abfe:	e30a      	b.n	801b216 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801ac00:	88fb      	ldrh	r3, [r7, #6]
 801ac02:	4619      	mov	r1, r3
 801ac04:	68f8      	ldr	r0, [r7, #12]
 801ac06:	f7ff ff33 	bl	801aa70 <tcp_write_checks>
 801ac0a:	4603      	mov	r3, r0
 801ac0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801ac10:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d002      	beq.n	801ac1e <tcp_write+0xba>
    return err;
 801ac18:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801ac1c:	e2fb      	b.n	801b216 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801ac24:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ac28:	2300      	movs	r3, #0
 801ac2a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	f000 80f6 	beq.w	801ae24 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac3c:	653b      	str	r3, [r7, #80]	@ 0x50
 801ac3e:	e002      	b.n	801ac46 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801ac40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d1f8      	bne.n	801ac40 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801ac4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac50:	7a9b      	ldrb	r3, [r3, #10]
 801ac52:	009b      	lsls	r3, r3, #2
 801ac54:	b29b      	uxth	r3, r3
 801ac56:	f003 0304 	and.w	r3, r3, #4
 801ac5a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ac5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ac5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac60:	891b      	ldrh	r3, [r3, #8]
 801ac62:	4619      	mov	r1, r3
 801ac64:	8c3b      	ldrh	r3, [r7, #32]
 801ac66:	440b      	add	r3, r1
 801ac68:	429a      	cmp	r2, r3
 801ac6a:	da06      	bge.n	801ac7a <tcp_write+0x116>
 801ac6c:	4b74      	ldr	r3, [pc, #464]	@ (801ae40 <tcp_write+0x2dc>)
 801ac6e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801ac72:	4977      	ldr	r1, [pc, #476]	@ (801ae50 <tcp_write+0x2ec>)
 801ac74:	4874      	ldr	r0, [pc, #464]	@ (801ae48 <tcp_write+0x2e4>)
 801ac76:	f002 ffc3 	bl	801dc00 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ac7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ac7c:	891a      	ldrh	r2, [r3, #8]
 801ac7e:	8c3b      	ldrh	r3, [r7, #32]
 801ac80:	4413      	add	r3, r2
 801ac82:	b29b      	uxth	r3, r3
 801ac84:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ac86:	1ad3      	subs	r3, r2, r3
 801ac88:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ac90:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801ac92:	8a7b      	ldrh	r3, [r7, #18]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	d026      	beq.n	801ace6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ac98:	8a7b      	ldrh	r3, [r7, #18]
 801ac9a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d206      	bcs.n	801acae <tcp_write+0x14a>
 801aca0:	4b67      	ldr	r3, [pc, #412]	@ (801ae40 <tcp_write+0x2dc>)
 801aca2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801aca6:	496b      	ldr	r1, [pc, #428]	@ (801ae54 <tcp_write+0x2f0>)
 801aca8:	4867      	ldr	r0, [pc, #412]	@ (801ae48 <tcp_write+0x2e4>)
 801acaa:	f002 ffa9 	bl	801dc00 <iprintf>
      seg = last_unsent;
 801acae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801acb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801acb2:	8a7b      	ldrh	r3, [r7, #18]
 801acb4:	88fa      	ldrh	r2, [r7, #6]
 801acb6:	4293      	cmp	r3, r2
 801acb8:	bf28      	it	cs
 801acba:	4613      	movcs	r3, r2
 801acbc:	b29b      	uxth	r3, r3
 801acbe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801acc0:	4293      	cmp	r3, r2
 801acc2:	bf28      	it	cs
 801acc4:	4613      	movcs	r3, r2
 801acc6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801acc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801accc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801acce:	4413      	add	r3, r2
 801acd0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801acd4:	8a7a      	ldrh	r2, [r7, #18]
 801acd6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801acd8:	1ad3      	subs	r3, r2, r3
 801acda:	b29b      	uxth	r3, r3
 801acdc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801acde:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ace0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ace2:	1ad3      	subs	r3, r2, r3
 801ace4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ace6:	8a7b      	ldrh	r3, [r7, #18]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d00b      	beq.n	801ad04 <tcp_write+0x1a0>
 801acec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801acf0:	88fb      	ldrh	r3, [r7, #6]
 801acf2:	429a      	cmp	r2, r3
 801acf4:	d006      	beq.n	801ad04 <tcp_write+0x1a0>
 801acf6:	4b52      	ldr	r3, [pc, #328]	@ (801ae40 <tcp_write+0x2dc>)
 801acf8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801acfc:	4956      	ldr	r1, [pc, #344]	@ (801ae58 <tcp_write+0x2f4>)
 801acfe:	4852      	ldr	r0, [pc, #328]	@ (801ae48 <tcp_write+0x2e4>)
 801ad00:	f002 ff7e 	bl	801dc00 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ad04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ad08:	88fb      	ldrh	r3, [r7, #6]
 801ad0a:	429a      	cmp	r2, r3
 801ad0c:	f080 8167 	bcs.w	801afde <tcp_write+0x47a>
 801ad10:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	f000 8163 	beq.w	801afde <tcp_write+0x47a>
 801ad18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad1a:	891b      	ldrh	r3, [r3, #8]
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	f000 815e 	beq.w	801afde <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ad22:	88fa      	ldrh	r2, [r7, #6]
 801ad24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ad28:	1ad2      	subs	r2, r2, r3
 801ad2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ad2c:	4293      	cmp	r3, r2
 801ad2e:	bfa8      	it	ge
 801ad30:	4613      	movge	r3, r2
 801ad32:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ad34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad36:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ad38:	797b      	ldrb	r3, [r7, #5]
 801ad3a:	f003 0301 	and.w	r3, r3, #1
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d027      	beq.n	801ad92 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ad42:	f107 0012 	add.w	r0, r7, #18
 801ad46:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801ad48:	8bf9      	ldrh	r1, [r7, #30]
 801ad4a:	2301      	movs	r3, #1
 801ad4c:	9302      	str	r3, [sp, #8]
 801ad4e:	797b      	ldrb	r3, [r7, #5]
 801ad50:	9301      	str	r3, [sp, #4]
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	9300      	str	r3, [sp, #0]
 801ad56:	4603      	mov	r3, r0
 801ad58:	2000      	movs	r0, #0
 801ad5a:	f7ff fe0f 	bl	801a97c <tcp_pbuf_prealloc>
 801ad5e:	6578      	str	r0, [r7, #84]	@ 0x54
 801ad60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	f000 8225 	beq.w	801b1b2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ad68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ad6a:	6858      	ldr	r0, [r3, #4]
 801ad6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ad70:	68ba      	ldr	r2, [r7, #8]
 801ad72:	4413      	add	r3, r2
 801ad74:	8bfa      	ldrh	r2, [r7, #30]
 801ad76:	4619      	mov	r1, r3
 801ad78:	f003 f885 	bl	801de86 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801ad7c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801ad7e:	f7fb f9ad 	bl	80160dc <pbuf_clen>
 801ad82:	4603      	mov	r3, r0
 801ad84:	461a      	mov	r2, r3
 801ad86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ad8a:	4413      	add	r3, r2
 801ad8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801ad90:	e041      	b.n	801ae16 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ad92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ad94:	685b      	ldr	r3, [r3, #4]
 801ad96:	637b      	str	r3, [r7, #52]	@ 0x34
 801ad98:	e002      	b.n	801ada0 <tcp_write+0x23c>
 801ad9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	637b      	str	r3, [r7, #52]	@ 0x34
 801ada0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d1f8      	bne.n	801ad9a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ada8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adaa:	7b1b      	ldrb	r3, [r3, #12]
 801adac:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d115      	bne.n	801ade0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801adb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adb6:	685b      	ldr	r3, [r3, #4]
 801adb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801adba:	8952      	ldrh	r2, [r2, #10]
 801adbc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801adbe:	68ba      	ldr	r2, [r7, #8]
 801adc0:	429a      	cmp	r2, r3
 801adc2:	d10d      	bne.n	801ade0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801adc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d006      	beq.n	801adda <tcp_write+0x276>
 801adcc:	4b1c      	ldr	r3, [pc, #112]	@ (801ae40 <tcp_write+0x2dc>)
 801adce:	f240 2231 	movw	r2, #561	@ 0x231
 801add2:	4922      	ldr	r1, [pc, #136]	@ (801ae5c <tcp_write+0x2f8>)
 801add4:	481c      	ldr	r0, [pc, #112]	@ (801ae48 <tcp_write+0x2e4>)
 801add6:	f002 ff13 	bl	801dc00 <iprintf>
          extendlen = seglen;
 801adda:	8bfb      	ldrh	r3, [r7, #30]
 801addc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801adde:	e01a      	b.n	801ae16 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ade0:	8bfb      	ldrh	r3, [r7, #30]
 801ade2:	2201      	movs	r2, #1
 801ade4:	4619      	mov	r1, r3
 801ade6:	2000      	movs	r0, #0
 801ade8:	f7fa fdd4 	bl	8015994 <pbuf_alloc>
 801adec:	6578      	str	r0, [r7, #84]	@ 0x54
 801adee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	f000 81e0 	beq.w	801b1b6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801adf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801adfa:	68ba      	ldr	r2, [r7, #8]
 801adfc:	441a      	add	r2, r3
 801adfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ae00:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801ae02:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801ae04:	f7fb f96a 	bl	80160dc <pbuf_clen>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	461a      	mov	r2, r3
 801ae0c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ae10:	4413      	add	r3, r2
 801ae12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801ae16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ae1a:	8bfb      	ldrh	r3, [r7, #30]
 801ae1c:	4413      	add	r3, r2
 801ae1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801ae22:	e0dc      	b.n	801afde <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	f000 80d7 	beq.w	801afde <tcp_write+0x47a>
 801ae30:	4b03      	ldr	r3, [pc, #12]	@ (801ae40 <tcp_write+0x2dc>)
 801ae32:	f240 224a 	movw	r2, #586	@ 0x24a
 801ae36:	490a      	ldr	r1, [pc, #40]	@ (801ae60 <tcp_write+0x2fc>)
 801ae38:	4803      	ldr	r0, [pc, #12]	@ (801ae48 <tcp_write+0x2e4>)
 801ae3a:	f002 fee1 	bl	801dc00 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801ae3e:	e0ce      	b.n	801afde <tcp_write+0x47a>
 801ae40:	08022630 	.word	0x08022630
 801ae44:	08022800 	.word	0x08022800
 801ae48:	080226b4 	.word	0x080226b4
 801ae4c:	08022818 	.word	0x08022818
 801ae50:	0802284c 	.word	0x0802284c
 801ae54:	08022864 	.word	0x08022864
 801ae58:	08022884 	.word	0x08022884
 801ae5c:	080228a4 	.word	0x080228a4
 801ae60:	080228d0 	.word	0x080228d0
    struct pbuf *p;
    u16_t left = len - pos;
 801ae64:	88fa      	ldrh	r2, [r7, #6]
 801ae66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ae6a:	1ad3      	subs	r3, r2, r3
 801ae6c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801ae6e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ae76:	1ad3      	subs	r3, r2, r3
 801ae78:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801ae7a:	8b7a      	ldrh	r2, [r7, #26]
 801ae7c:	8bbb      	ldrh	r3, [r7, #28]
 801ae7e:	4293      	cmp	r3, r2
 801ae80:	bf28      	it	cs
 801ae82:	4613      	movcs	r3, r2
 801ae84:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ae86:	797b      	ldrb	r3, [r7, #5]
 801ae88:	f003 0301 	and.w	r3, r3, #1
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d036      	beq.n	801aefe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801ae90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ae94:	b29a      	uxth	r2, r3
 801ae96:	8b3b      	ldrh	r3, [r7, #24]
 801ae98:	4413      	add	r3, r2
 801ae9a:	b299      	uxth	r1, r3
 801ae9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ae9e:	2b00      	cmp	r3, #0
 801aea0:	bf0c      	ite	eq
 801aea2:	2301      	moveq	r3, #1
 801aea4:	2300      	movne	r3, #0
 801aea6:	b2db      	uxtb	r3, r3
 801aea8:	f107 0012 	add.w	r0, r7, #18
 801aeac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801aeae:	9302      	str	r3, [sp, #8]
 801aeb0:	797b      	ldrb	r3, [r7, #5]
 801aeb2:	9301      	str	r3, [sp, #4]
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	9300      	str	r3, [sp, #0]
 801aeb8:	4603      	mov	r3, r0
 801aeba:	2036      	movs	r0, #54	@ 0x36
 801aebc:	f7ff fd5e 	bl	801a97c <tcp_pbuf_prealloc>
 801aec0:	6338      	str	r0, [r7, #48]	@ 0x30
 801aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	f000 8178 	beq.w	801b1ba <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801aeca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aecc:	895b      	ldrh	r3, [r3, #10]
 801aece:	8b3a      	ldrh	r2, [r7, #24]
 801aed0:	429a      	cmp	r2, r3
 801aed2:	d906      	bls.n	801aee2 <tcp_write+0x37e>
 801aed4:	4b8c      	ldr	r3, [pc, #560]	@ (801b108 <tcp_write+0x5a4>)
 801aed6:	f240 2266 	movw	r2, #614	@ 0x266
 801aeda:	498c      	ldr	r1, [pc, #560]	@ (801b10c <tcp_write+0x5a8>)
 801aedc:	488c      	ldr	r0, [pc, #560]	@ (801b110 <tcp_write+0x5ac>)
 801aede:	f002 fe8f 	bl	801dc00 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aee4:	685a      	ldr	r2, [r3, #4]
 801aee6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801aeea:	18d0      	adds	r0, r2, r3
 801aeec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801aef0:	68ba      	ldr	r2, [r7, #8]
 801aef2:	4413      	add	r3, r2
 801aef4:	8b3a      	ldrh	r2, [r7, #24]
 801aef6:	4619      	mov	r1, r3
 801aef8:	f002 ffc5 	bl	801de86 <memcpy>
 801aefc:	e02f      	b.n	801af5e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801aefe:	8a7b      	ldrh	r3, [r7, #18]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d006      	beq.n	801af12 <tcp_write+0x3ae>
 801af04:	4b80      	ldr	r3, [pc, #512]	@ (801b108 <tcp_write+0x5a4>)
 801af06:	f240 2271 	movw	r2, #625	@ 0x271
 801af0a:	4982      	ldr	r1, [pc, #520]	@ (801b114 <tcp_write+0x5b0>)
 801af0c:	4880      	ldr	r0, [pc, #512]	@ (801b110 <tcp_write+0x5ac>)
 801af0e:	f002 fe77 	bl	801dc00 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801af12:	8b3b      	ldrh	r3, [r7, #24]
 801af14:	2201      	movs	r2, #1
 801af16:	4619      	mov	r1, r3
 801af18:	2036      	movs	r0, #54	@ 0x36
 801af1a:	f7fa fd3b 	bl	8015994 <pbuf_alloc>
 801af1e:	6178      	str	r0, [r7, #20]
 801af20:	697b      	ldr	r3, [r7, #20]
 801af22:	2b00      	cmp	r3, #0
 801af24:	f000 814b 	beq.w	801b1be <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801af28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801af2c:	68ba      	ldr	r2, [r7, #8]
 801af2e:	441a      	add	r2, r3
 801af30:	697b      	ldr	r3, [r7, #20]
 801af32:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801af34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801af38:	b29b      	uxth	r3, r3
 801af3a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801af3e:	4619      	mov	r1, r3
 801af40:	2036      	movs	r0, #54	@ 0x36
 801af42:	f7fa fd27 	bl	8015994 <pbuf_alloc>
 801af46:	6338      	str	r0, [r7, #48]	@ 0x30
 801af48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d103      	bne.n	801af56 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801af4e:	6978      	ldr	r0, [r7, #20]
 801af50:	f7fb f836 	bl	8015fc0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801af54:	e136      	b.n	801b1c4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801af56:	6979      	ldr	r1, [r7, #20]
 801af58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af5a:	f7fb f8ff 	bl	801615c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801af5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af60:	f7fb f8bc 	bl	80160dc <pbuf_clen>
 801af64:	4603      	mov	r3, r0
 801af66:	461a      	mov	r2, r3
 801af68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801af6c:	4413      	add	r3, r2
 801af6e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801af72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801af76:	2b10      	cmp	r3, #16
 801af78:	d903      	bls.n	801af82 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801af7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801af7c:	f7fb f820 	bl	8015fc0 <pbuf_free>
      goto memerr;
 801af80:	e120      	b.n	801b1c4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801af82:	68fb      	ldr	r3, [r7, #12]
 801af84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801af86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801af8a:	441a      	add	r2, r3
 801af8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801af90:	9300      	str	r3, [sp, #0]
 801af92:	4613      	mov	r3, r2
 801af94:	2200      	movs	r2, #0
 801af96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801af98:	68f8      	ldr	r0, [r7, #12]
 801af9a:	f7ff fc53 	bl	801a844 <tcp_create_segment>
 801af9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801afa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	f000 810d 	beq.w	801b1c2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801afa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d102      	bne.n	801afb4 <tcp_write+0x450>
      queue = seg;
 801afae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afb0:	647b      	str	r3, [r7, #68]	@ 0x44
 801afb2:	e00c      	b.n	801afce <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801afb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d106      	bne.n	801afc8 <tcp_write+0x464>
 801afba:	4b53      	ldr	r3, [pc, #332]	@ (801b108 <tcp_write+0x5a4>)
 801afbc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801afc0:	4955      	ldr	r1, [pc, #340]	@ (801b118 <tcp_write+0x5b4>)
 801afc2:	4853      	ldr	r0, [pc, #332]	@ (801b110 <tcp_write+0x5ac>)
 801afc4:	f002 fe1c 	bl	801dc00 <iprintf>
      prev_seg->next = seg;
 801afc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801afca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801afcc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801afce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801afd0:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801afd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801afd6:	8b3b      	ldrh	r3, [r7, #24]
 801afd8:	4413      	add	r3, r2
 801afda:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801afde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801afe2:	88fb      	ldrh	r3, [r7, #6]
 801afe4:	429a      	cmp	r2, r3
 801afe6:	f4ff af3d 	bcc.w	801ae64 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801afea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801afec:	2b00      	cmp	r3, #0
 801afee:	d02c      	beq.n	801b04a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801aff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801aff2:	685b      	ldr	r3, [r3, #4]
 801aff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801aff6:	e01e      	b.n	801b036 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801aff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801affa:	891a      	ldrh	r2, [r3, #8]
 801affc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801affe:	4413      	add	r3, r2
 801b000:	b29a      	uxth	r2, r3
 801b002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b004:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801b006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d110      	bne.n	801b030 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b010:	685b      	ldr	r3, [r3, #4]
 801b012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b014:	8952      	ldrh	r2, [r2, #10]
 801b016:	4413      	add	r3, r2
 801b018:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801b01a:	68b9      	ldr	r1, [r7, #8]
 801b01c:	4618      	mov	r0, r3
 801b01e:	f002 ff32 	bl	801de86 <memcpy>
        p->len += oversize_used;
 801b022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b024:	895a      	ldrh	r2, [r3, #10]
 801b026:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b028:	4413      	add	r3, r2
 801b02a:	b29a      	uxth	r2, r3
 801b02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b02e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d1dd      	bne.n	801aff8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801b03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b03e:	891a      	ldrh	r2, [r3, #8]
 801b040:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801b042:	4413      	add	r3, r2
 801b044:	b29a      	uxth	r2, r3
 801b046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b048:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801b04a:	8a7a      	ldrh	r2, [r7, #18]
 801b04c:	68fb      	ldr	r3, [r7, #12]
 801b04e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801b052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b054:	2b00      	cmp	r3, #0
 801b056:	d018      	beq.n	801b08a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d106      	bne.n	801b06c <tcp_write+0x508>
 801b05e:	4b2a      	ldr	r3, [pc, #168]	@ (801b108 <tcp_write+0x5a4>)
 801b060:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801b064:	492d      	ldr	r1, [pc, #180]	@ (801b11c <tcp_write+0x5b8>)
 801b066:	482a      	ldr	r0, [pc, #168]	@ (801b110 <tcp_write+0x5ac>)
 801b068:	f002 fdca 	bl	801dc00 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801b06c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b06e:	685b      	ldr	r3, [r3, #4]
 801b070:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801b072:	4618      	mov	r0, r3
 801b074:	f7fb f872 	bl	801615c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b07a:	891a      	ldrh	r2, [r3, #8]
 801b07c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b07e:	891b      	ldrh	r3, [r3, #8]
 801b080:	4413      	add	r3, r2
 801b082:	b29a      	uxth	r2, r3
 801b084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b086:	811a      	strh	r2, [r3, #8]
 801b088:	e037      	b.n	801b0fa <tcp_write+0x596>
  } else if (extendlen > 0) {
 801b08a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d034      	beq.n	801b0fa <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b092:	2b00      	cmp	r3, #0
 801b094:	d003      	beq.n	801b09e <tcp_write+0x53a>
 801b096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d106      	bne.n	801b0ac <tcp_write+0x548>
 801b09e:	4b1a      	ldr	r3, [pc, #104]	@ (801b108 <tcp_write+0x5a4>)
 801b0a0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801b0a4:	491e      	ldr	r1, [pc, #120]	@ (801b120 <tcp_write+0x5bc>)
 801b0a6:	481a      	ldr	r0, [pc, #104]	@ (801b110 <tcp_write+0x5ac>)
 801b0a8:	f002 fdaa 	bl	801dc00 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0ae:	685b      	ldr	r3, [r3, #4]
 801b0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b0b2:	e009      	b.n	801b0c8 <tcp_write+0x564>
      p->tot_len += extendlen;
 801b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0b6:	891a      	ldrh	r2, [r3, #8]
 801b0b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0ba:	4413      	add	r3, r2
 801b0bc:	b29a      	uxth	r2, r3
 801b0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0c0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d1f1      	bne.n	801b0b4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801b0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0d2:	891a      	ldrh	r2, [r3, #8]
 801b0d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0d6:	4413      	add	r3, r2
 801b0d8:	b29a      	uxth	r2, r3
 801b0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0dc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801b0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0e0:	895a      	ldrh	r2, [r3, #10]
 801b0e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0e4:	4413      	add	r3, r2
 801b0e6:	b29a      	uxth	r2, r3
 801b0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0ea:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801b0ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0ee:	891a      	ldrh	r2, [r3, #8]
 801b0f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801b0f2:	4413      	add	r3, r2
 801b0f4:	b29a      	uxth	r2, r3
 801b0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0f8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801b0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d111      	bne.n	801b124 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801b100:	68fb      	ldr	r3, [r7, #12]
 801b102:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b104:	66da      	str	r2, [r3, #108]	@ 0x6c
 801b106:	e010      	b.n	801b12a <tcp_write+0x5c6>
 801b108:	08022630 	.word	0x08022630
 801b10c:	08022900 	.word	0x08022900
 801b110:	080226b4 	.word	0x080226b4
 801b114:	08022940 	.word	0x08022940
 801b118:	08022950 	.word	0x08022950
 801b11c:	08022964 	.word	0x08022964
 801b120:	0802299c 	.word	0x0802299c
  } else {
    last_unsent->next = queue;
 801b124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b128:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801b12e:	88fb      	ldrh	r3, [r7, #6]
 801b130:	441a      	add	r2, r3
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801b13c:	88fb      	ldrh	r3, [r7, #6]
 801b13e:	1ad3      	subs	r3, r2, r3
 801b140:	b29a      	uxth	r2, r3
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801b14e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b152:	68fb      	ldr	r3, [r7, #12]
 801b154:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d00e      	beq.n	801b17a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b160:	2b00      	cmp	r3, #0
 801b162:	d10a      	bne.n	801b17a <tcp_write+0x616>
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d106      	bne.n	801b17a <tcp_write+0x616>
 801b16c:	4b2c      	ldr	r3, [pc, #176]	@ (801b220 <tcp_write+0x6bc>)
 801b16e:	f240 3212 	movw	r2, #786	@ 0x312
 801b172:	492c      	ldr	r1, [pc, #176]	@ (801b224 <tcp_write+0x6c0>)
 801b174:	482c      	ldr	r0, [pc, #176]	@ (801b228 <tcp_write+0x6c4>)
 801b176:	f002 fd43 	bl	801dc00 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801b17a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d016      	beq.n	801b1ae <tcp_write+0x64a>
 801b180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b182:	68db      	ldr	r3, [r3, #12]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d012      	beq.n	801b1ae <tcp_write+0x64a>
 801b188:	797b      	ldrb	r3, [r7, #5]
 801b18a:	f003 0302 	and.w	r3, r3, #2
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d10d      	bne.n	801b1ae <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b194:	68db      	ldr	r3, [r3, #12]
 801b196:	899b      	ldrh	r3, [r3, #12]
 801b198:	b29c      	uxth	r4, r3
 801b19a:	2008      	movs	r0, #8
 801b19c:	f7f9 fa5e 	bl	801465c <lwip_htons>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	461a      	mov	r2, r3
 801b1a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	4322      	orrs	r2, r4
 801b1aa:	b292      	uxth	r2, r2
 801b1ac:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	e031      	b.n	801b216 <tcp_write+0x6b2>
          goto memerr;
 801b1b2:	bf00      	nop
 801b1b4:	e006      	b.n	801b1c4 <tcp_write+0x660>
            goto memerr;
 801b1b6:	bf00      	nop
 801b1b8:	e004      	b.n	801b1c4 <tcp_write+0x660>
        goto memerr;
 801b1ba:	bf00      	nop
 801b1bc:	e002      	b.n	801b1c4 <tcp_write+0x660>
        goto memerr;
 801b1be:	bf00      	nop
 801b1c0:	e000      	b.n	801b1c4 <tcp_write+0x660>
      goto memerr;
 801b1c2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b1c4:	68fb      	ldr	r3, [r7, #12]
 801b1c6:	8b5b      	ldrh	r3, [r3, #26]
 801b1c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b1cc:	b29a      	uxth	r2, r3
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801b1d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d002      	beq.n	801b1de <tcp_write+0x67a>
    pbuf_free(concat_p);
 801b1d8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801b1da:	f7fa fef1 	bl	8015fc0 <pbuf_free>
  }
  if (queue != NULL) {
 801b1de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d002      	beq.n	801b1ea <tcp_write+0x686>
    tcp_segs_free(queue);
 801b1e4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b1e6:	f7fc fb6f 	bl	80178c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d00e      	beq.n	801b212 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b1f4:	68fb      	ldr	r3, [r7, #12]
 801b1f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d10a      	bne.n	801b212 <tcp_write+0x6ae>
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b200:	2b00      	cmp	r3, #0
 801b202:	d106      	bne.n	801b212 <tcp_write+0x6ae>
 801b204:	4b06      	ldr	r3, [pc, #24]	@ (801b220 <tcp_write+0x6bc>)
 801b206:	f240 3227 	movw	r2, #807	@ 0x327
 801b20a:	4906      	ldr	r1, [pc, #24]	@ (801b224 <tcp_write+0x6c0>)
 801b20c:	4806      	ldr	r0, [pc, #24]	@ (801b228 <tcp_write+0x6c4>)
 801b20e:	f002 fcf7 	bl	801dc00 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801b212:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b216:	4618      	mov	r0, r3
 801b218:	375c      	adds	r7, #92	@ 0x5c
 801b21a:	46bd      	mov	sp, r7
 801b21c:	bd90      	pop	{r4, r7, pc}
 801b21e:	bf00      	nop
 801b220:	08022630 	.word	0x08022630
 801b224:	080229d4 	.word	0x080229d4
 801b228:	080226b4 	.word	0x080226b4

0801b22c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801b22c:	b590      	push	{r4, r7, lr}
 801b22e:	b08b      	sub	sp, #44	@ 0x2c
 801b230:	af02      	add	r7, sp, #8
 801b232:	6078      	str	r0, [r7, #4]
 801b234:	460b      	mov	r3, r1
 801b236:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801b238:	2300      	movs	r3, #0
 801b23a:	61fb      	str	r3, [r7, #28]
 801b23c:	2300      	movs	r3, #0
 801b23e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801b240:	2300      	movs	r3, #0
 801b242:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d106      	bne.n	801b258 <tcp_split_unsent_seg+0x2c>
 801b24a:	4b95      	ldr	r3, [pc, #596]	@ (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b24c:	f240 324b 	movw	r2, #843	@ 0x34b
 801b250:	4994      	ldr	r1, [pc, #592]	@ (801b4a4 <tcp_split_unsent_seg+0x278>)
 801b252:	4895      	ldr	r0, [pc, #596]	@ (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b254:	f002 fcd4 	bl	801dc00 <iprintf>

  useg = pcb->unsent;
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b25c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	2b00      	cmp	r3, #0
 801b262:	d102      	bne.n	801b26a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801b264:	f04f 33ff 	mov.w	r3, #4294967295
 801b268:	e116      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801b26a:	887b      	ldrh	r3, [r7, #2]
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d109      	bne.n	801b284 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b270:	4b8b      	ldr	r3, [pc, #556]	@ (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b272:	f240 3253 	movw	r2, #851	@ 0x353
 801b276:	498d      	ldr	r1, [pc, #564]	@ (801b4ac <tcp_split_unsent_seg+0x280>)
 801b278:	488b      	ldr	r0, [pc, #556]	@ (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b27a:	f002 fcc1 	bl	801dc00 <iprintf>
    return ERR_VAL;
 801b27e:	f06f 0305 	mvn.w	r3, #5
 801b282:	e109      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801b284:	697b      	ldr	r3, [r7, #20]
 801b286:	891b      	ldrh	r3, [r3, #8]
 801b288:	887a      	ldrh	r2, [r7, #2]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d301      	bcc.n	801b292 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801b28e:	2300      	movs	r3, #0
 801b290:	e102      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b296:	887a      	ldrh	r2, [r7, #2]
 801b298:	429a      	cmp	r2, r3
 801b29a:	d906      	bls.n	801b2aa <tcp_split_unsent_seg+0x7e>
 801b29c:	4b80      	ldr	r3, [pc, #512]	@ (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b29e:	f240 325b 	movw	r2, #859	@ 0x35b
 801b2a2:	4983      	ldr	r1, [pc, #524]	@ (801b4b0 <tcp_split_unsent_seg+0x284>)
 801b2a4:	4880      	ldr	r0, [pc, #512]	@ (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b2a6:	f002 fcab 	bl	801dc00 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b2aa:	697b      	ldr	r3, [r7, #20]
 801b2ac:	891b      	ldrh	r3, [r3, #8]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d106      	bne.n	801b2c0 <tcp_split_unsent_seg+0x94>
 801b2b2:	4b7b      	ldr	r3, [pc, #492]	@ (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b2b4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801b2b8:	497e      	ldr	r1, [pc, #504]	@ (801b4b4 <tcp_split_unsent_seg+0x288>)
 801b2ba:	487b      	ldr	r0, [pc, #492]	@ (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b2bc:	f002 fca0 	bl	801dc00 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801b2c0:	697b      	ldr	r3, [r7, #20]
 801b2c2:	7a9b      	ldrb	r3, [r3, #10]
 801b2c4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b2c6:	7bfb      	ldrb	r3, [r7, #15]
 801b2c8:	009b      	lsls	r3, r3, #2
 801b2ca:	b2db      	uxtb	r3, r3
 801b2cc:	f003 0304 	and.w	r3, r3, #4
 801b2d0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801b2d2:	697b      	ldr	r3, [r7, #20]
 801b2d4:	891a      	ldrh	r2, [r3, #8]
 801b2d6:	887b      	ldrh	r3, [r7, #2]
 801b2d8:	1ad3      	subs	r3, r2, r3
 801b2da:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b2dc:	7bbb      	ldrb	r3, [r7, #14]
 801b2de:	b29a      	uxth	r2, r3
 801b2e0:	89bb      	ldrh	r3, [r7, #12]
 801b2e2:	4413      	add	r3, r2
 801b2e4:	b29b      	uxth	r3, r3
 801b2e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	2036      	movs	r0, #54	@ 0x36
 801b2ee:	f7fa fb51 	bl	8015994 <pbuf_alloc>
 801b2f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b2f4:	693b      	ldr	r3, [r7, #16]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	f000 80b7 	beq.w	801b46a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801b2fc:	697b      	ldr	r3, [r7, #20]
 801b2fe:	685b      	ldr	r3, [r3, #4]
 801b300:	891a      	ldrh	r2, [r3, #8]
 801b302:	697b      	ldr	r3, [r7, #20]
 801b304:	891b      	ldrh	r3, [r3, #8]
 801b306:	1ad3      	subs	r3, r2, r3
 801b308:	b29a      	uxth	r2, r3
 801b30a:	887b      	ldrh	r3, [r7, #2]
 801b30c:	4413      	add	r3, r2
 801b30e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b310:	697b      	ldr	r3, [r7, #20]
 801b312:	6858      	ldr	r0, [r3, #4]
 801b314:	693b      	ldr	r3, [r7, #16]
 801b316:	685a      	ldr	r2, [r3, #4]
 801b318:	7bbb      	ldrb	r3, [r7, #14]
 801b31a:	18d1      	adds	r1, r2, r3
 801b31c:	897b      	ldrh	r3, [r7, #10]
 801b31e:	89ba      	ldrh	r2, [r7, #12]
 801b320:	f7fb f854 	bl	80163cc <pbuf_copy_partial>
 801b324:	4603      	mov	r3, r0
 801b326:	461a      	mov	r2, r3
 801b328:	89bb      	ldrh	r3, [r7, #12]
 801b32a:	4293      	cmp	r3, r2
 801b32c:	f040 809f 	bne.w	801b46e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b330:	697b      	ldr	r3, [r7, #20]
 801b332:	68db      	ldr	r3, [r3, #12]
 801b334:	899b      	ldrh	r3, [r3, #12]
 801b336:	b29b      	uxth	r3, r3
 801b338:	4618      	mov	r0, r3
 801b33a:	f7f9 f98f 	bl	801465c <lwip_htons>
 801b33e:	4603      	mov	r3, r0
 801b340:	b2db      	uxtb	r3, r3
 801b342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b346:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801b348:	2300      	movs	r3, #0
 801b34a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801b34c:	7efb      	ldrb	r3, [r7, #27]
 801b34e:	f003 0308 	and.w	r3, r3, #8
 801b352:	2b00      	cmp	r3, #0
 801b354:	d007      	beq.n	801b366 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801b356:	7efb      	ldrb	r3, [r7, #27]
 801b358:	f023 0308 	bic.w	r3, r3, #8
 801b35c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801b35e:	7ebb      	ldrb	r3, [r7, #26]
 801b360:	f043 0308 	orr.w	r3, r3, #8
 801b364:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801b366:	7efb      	ldrb	r3, [r7, #27]
 801b368:	f003 0301 	and.w	r3, r3, #1
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d007      	beq.n	801b380 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801b370:	7efb      	ldrb	r3, [r7, #27]
 801b372:	f023 0301 	bic.w	r3, r3, #1
 801b376:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b378:	7ebb      	ldrb	r3, [r7, #26]
 801b37a:	f043 0301 	orr.w	r3, r3, #1
 801b37e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b380:	697b      	ldr	r3, [r7, #20]
 801b382:	68db      	ldr	r3, [r3, #12]
 801b384:	685b      	ldr	r3, [r3, #4]
 801b386:	4618      	mov	r0, r3
 801b388:	f7f9 f97d 	bl	8014686 <lwip_htonl>
 801b38c:	4602      	mov	r2, r0
 801b38e:	887b      	ldrh	r3, [r7, #2]
 801b390:	18d1      	adds	r1, r2, r3
 801b392:	7eba      	ldrb	r2, [r7, #26]
 801b394:	7bfb      	ldrb	r3, [r7, #15]
 801b396:	9300      	str	r3, [sp, #0]
 801b398:	460b      	mov	r3, r1
 801b39a:	6939      	ldr	r1, [r7, #16]
 801b39c:	6878      	ldr	r0, [r7, #4]
 801b39e:	f7ff fa51 	bl	801a844 <tcp_create_segment>
 801b3a2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b3a4:	69fb      	ldr	r3, [r7, #28]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d063      	beq.n	801b472 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b3aa:	697b      	ldr	r3, [r7, #20]
 801b3ac:	685b      	ldr	r3, [r3, #4]
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f7fa fe94 	bl	80160dc <pbuf_clen>
 801b3b4:	4603      	mov	r3, r0
 801b3b6:	461a      	mov	r2, r3
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b3be:	1a9b      	subs	r3, r3, r2
 801b3c0:	b29a      	uxth	r2, r3
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b3c8:	697b      	ldr	r3, [r7, #20]
 801b3ca:	6858      	ldr	r0, [r3, #4]
 801b3cc:	697b      	ldr	r3, [r7, #20]
 801b3ce:	685b      	ldr	r3, [r3, #4]
 801b3d0:	891a      	ldrh	r2, [r3, #8]
 801b3d2:	89bb      	ldrh	r3, [r7, #12]
 801b3d4:	1ad3      	subs	r3, r2, r3
 801b3d6:	b29b      	uxth	r3, r3
 801b3d8:	4619      	mov	r1, r3
 801b3da:	f7fa fc39 	bl	8015c50 <pbuf_realloc>
  useg->len -= remainder;
 801b3de:	697b      	ldr	r3, [r7, #20]
 801b3e0:	891a      	ldrh	r2, [r3, #8]
 801b3e2:	89bb      	ldrh	r3, [r7, #12]
 801b3e4:	1ad3      	subs	r3, r2, r3
 801b3e6:	b29a      	uxth	r2, r3
 801b3e8:	697b      	ldr	r3, [r7, #20]
 801b3ea:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b3ec:	697b      	ldr	r3, [r7, #20]
 801b3ee:	68db      	ldr	r3, [r3, #12]
 801b3f0:	899b      	ldrh	r3, [r3, #12]
 801b3f2:	b29c      	uxth	r4, r3
 801b3f4:	7efb      	ldrb	r3, [r7, #27]
 801b3f6:	b29b      	uxth	r3, r3
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f7f9 f92f 	bl	801465c <lwip_htons>
 801b3fe:	4603      	mov	r3, r0
 801b400:	461a      	mov	r2, r3
 801b402:	697b      	ldr	r3, [r7, #20]
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	4322      	orrs	r2, r4
 801b408:	b292      	uxth	r2, r2
 801b40a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b40c:	697b      	ldr	r3, [r7, #20]
 801b40e:	685b      	ldr	r3, [r3, #4]
 801b410:	4618      	mov	r0, r3
 801b412:	f7fa fe63 	bl	80160dc <pbuf_clen>
 801b416:	4603      	mov	r3, r0
 801b418:	461a      	mov	r2, r3
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b420:	4413      	add	r3, r2
 801b422:	b29a      	uxth	r2, r3
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b42a:	69fb      	ldr	r3, [r7, #28]
 801b42c:	685b      	ldr	r3, [r3, #4]
 801b42e:	4618      	mov	r0, r3
 801b430:	f7fa fe54 	bl	80160dc <pbuf_clen>
 801b434:	4603      	mov	r3, r0
 801b436:	461a      	mov	r2, r3
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b43e:	4413      	add	r3, r2
 801b440:	b29a      	uxth	r2, r3
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b448:	697b      	ldr	r3, [r7, #20]
 801b44a:	681a      	ldr	r2, [r3, #0]
 801b44c:	69fb      	ldr	r3, [r7, #28]
 801b44e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b450:	697b      	ldr	r3, [r7, #20]
 801b452:	69fa      	ldr	r2, [r7, #28]
 801b454:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b456:	69fb      	ldr	r3, [r7, #28]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d103      	bne.n	801b466 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	2200      	movs	r2, #0
 801b462:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b466:	2300      	movs	r3, #0
 801b468:	e016      	b.n	801b498 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b46a:	bf00      	nop
 801b46c:	e002      	b.n	801b474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b46e:	bf00      	nop
 801b470:	e000      	b.n	801b474 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b472:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b474:	69fb      	ldr	r3, [r7, #28]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d006      	beq.n	801b488 <tcp_split_unsent_seg+0x25c>
 801b47a:	4b09      	ldr	r3, [pc, #36]	@ (801b4a0 <tcp_split_unsent_seg+0x274>)
 801b47c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801b480:	490d      	ldr	r1, [pc, #52]	@ (801b4b8 <tcp_split_unsent_seg+0x28c>)
 801b482:	4809      	ldr	r0, [pc, #36]	@ (801b4a8 <tcp_split_unsent_seg+0x27c>)
 801b484:	f002 fbbc 	bl	801dc00 <iprintf>
  if (p != NULL) {
 801b488:	693b      	ldr	r3, [r7, #16]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d002      	beq.n	801b494 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b48e:	6938      	ldr	r0, [r7, #16]
 801b490:	f7fa fd96 	bl	8015fc0 <pbuf_free>
  }

  return ERR_MEM;
 801b494:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b498:	4618      	mov	r0, r3
 801b49a:	3724      	adds	r7, #36	@ 0x24
 801b49c:	46bd      	mov	sp, r7
 801b49e:	bd90      	pop	{r4, r7, pc}
 801b4a0:	08022630 	.word	0x08022630
 801b4a4:	080229f4 	.word	0x080229f4
 801b4a8:	080226b4 	.word	0x080226b4
 801b4ac:	08022a18 	.word	0x08022a18
 801b4b0:	08022a3c 	.word	0x08022a3c
 801b4b4:	08022a4c 	.word	0x08022a4c
 801b4b8:	08022a5c 	.word	0x08022a5c

0801b4bc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b4bc:	b590      	push	{r4, r7, lr}
 801b4be:	b085      	sub	sp, #20
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d106      	bne.n	801b4d8 <tcp_send_fin+0x1c>
 801b4ca:	4b21      	ldr	r3, [pc, #132]	@ (801b550 <tcp_send_fin+0x94>)
 801b4cc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801b4d0:	4920      	ldr	r1, [pc, #128]	@ (801b554 <tcp_send_fin+0x98>)
 801b4d2:	4821      	ldr	r0, [pc, #132]	@ (801b558 <tcp_send_fin+0x9c>)
 801b4d4:	f002 fb94 	bl	801dc00 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d02e      	beq.n	801b53e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b4e4:	60fb      	str	r3, [r7, #12]
 801b4e6:	e002      	b.n	801b4ee <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b4ee:	68fb      	ldr	r3, [r7, #12]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d1f8      	bne.n	801b4e8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	68db      	ldr	r3, [r3, #12]
 801b4fa:	899b      	ldrh	r3, [r3, #12]
 801b4fc:	b29b      	uxth	r3, r3
 801b4fe:	4618      	mov	r0, r3
 801b500:	f7f9 f8ac 	bl	801465c <lwip_htons>
 801b504:	4603      	mov	r3, r0
 801b506:	b2db      	uxtb	r3, r3
 801b508:	f003 0307 	and.w	r3, r3, #7
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d116      	bne.n	801b53e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	68db      	ldr	r3, [r3, #12]
 801b514:	899b      	ldrh	r3, [r3, #12]
 801b516:	b29c      	uxth	r4, r3
 801b518:	2001      	movs	r0, #1
 801b51a:	f7f9 f89f 	bl	801465c <lwip_htons>
 801b51e:	4603      	mov	r3, r0
 801b520:	461a      	mov	r2, r3
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	68db      	ldr	r3, [r3, #12]
 801b526:	4322      	orrs	r2, r4
 801b528:	b292      	uxth	r2, r2
 801b52a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	8b5b      	ldrh	r3, [r3, #26]
 801b530:	f043 0320 	orr.w	r3, r3, #32
 801b534:	b29a      	uxth	r2, r3
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b53a:	2300      	movs	r3, #0
 801b53c:	e004      	b.n	801b548 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b53e:	2101      	movs	r1, #1
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f000 f80b 	bl	801b55c <tcp_enqueue_flags>
 801b546:	4603      	mov	r3, r0
}
 801b548:	4618      	mov	r0, r3
 801b54a:	3714      	adds	r7, #20
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd90      	pop	{r4, r7, pc}
 801b550:	08022630 	.word	0x08022630
 801b554:	08022a68 	.word	0x08022a68
 801b558:	080226b4 	.word	0x080226b4

0801b55c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b08a      	sub	sp, #40	@ 0x28
 801b560:	af02      	add	r7, sp, #8
 801b562:	6078      	str	r0, [r7, #4]
 801b564:	460b      	mov	r3, r1
 801b566:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b568:	2300      	movs	r3, #0
 801b56a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b56c:	2300      	movs	r3, #0
 801b56e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b570:	78fb      	ldrb	r3, [r7, #3]
 801b572:	f003 0303 	and.w	r3, r3, #3
 801b576:	2b00      	cmp	r3, #0
 801b578:	d106      	bne.n	801b588 <tcp_enqueue_flags+0x2c>
 801b57a:	4b67      	ldr	r3, [pc, #412]	@ (801b718 <tcp_enqueue_flags+0x1bc>)
 801b57c:	f240 4211 	movw	r2, #1041	@ 0x411
 801b580:	4966      	ldr	r1, [pc, #408]	@ (801b71c <tcp_enqueue_flags+0x1c0>)
 801b582:	4867      	ldr	r0, [pc, #412]	@ (801b720 <tcp_enqueue_flags+0x1c4>)
 801b584:	f002 fb3c 	bl	801dc00 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b588:	687b      	ldr	r3, [r7, #4]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d106      	bne.n	801b59c <tcp_enqueue_flags+0x40>
 801b58e:	4b62      	ldr	r3, [pc, #392]	@ (801b718 <tcp_enqueue_flags+0x1bc>)
 801b590:	f240 4213 	movw	r2, #1043	@ 0x413
 801b594:	4963      	ldr	r1, [pc, #396]	@ (801b724 <tcp_enqueue_flags+0x1c8>)
 801b596:	4862      	ldr	r0, [pc, #392]	@ (801b720 <tcp_enqueue_flags+0x1c4>)
 801b598:	f002 fb32 	bl	801dc00 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b59c:	78fb      	ldrb	r3, [r7, #3]
 801b59e:	f003 0302 	and.w	r3, r3, #2
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d001      	beq.n	801b5aa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b5a6:	2301      	movs	r3, #1
 801b5a8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b5aa:	7ffb      	ldrb	r3, [r7, #31]
 801b5ac:	009b      	lsls	r3, r3, #2
 801b5ae:	b2db      	uxtb	r3, r3
 801b5b0:	f003 0304 	and.w	r3, r3, #4
 801b5b4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b5b6:	7dfb      	ldrb	r3, [r7, #23]
 801b5b8:	b29b      	uxth	r3, r3
 801b5ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b5be:	4619      	mov	r1, r3
 801b5c0:	2036      	movs	r0, #54	@ 0x36
 801b5c2:	f7fa f9e7 	bl	8015994 <pbuf_alloc>
 801b5c6:	6138      	str	r0, [r7, #16]
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d109      	bne.n	801b5e2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	8b5b      	ldrh	r3, [r3, #26]
 801b5d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b5d6:	b29a      	uxth	r2, r3
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b5e0:	e095      	b.n	801b70e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b5e2:	693b      	ldr	r3, [r7, #16]
 801b5e4:	895a      	ldrh	r2, [r3, #10]
 801b5e6:	7dfb      	ldrb	r3, [r7, #23]
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	429a      	cmp	r2, r3
 801b5ec:	d206      	bcs.n	801b5fc <tcp_enqueue_flags+0xa0>
 801b5ee:	4b4a      	ldr	r3, [pc, #296]	@ (801b718 <tcp_enqueue_flags+0x1bc>)
 801b5f0:	f240 4239 	movw	r2, #1081	@ 0x439
 801b5f4:	494c      	ldr	r1, [pc, #304]	@ (801b728 <tcp_enqueue_flags+0x1cc>)
 801b5f6:	484a      	ldr	r0, [pc, #296]	@ (801b720 <tcp_enqueue_flags+0x1c4>)
 801b5f8:	f002 fb02 	bl	801dc00 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801b600:	78fa      	ldrb	r2, [r7, #3]
 801b602:	7ffb      	ldrb	r3, [r7, #31]
 801b604:	9300      	str	r3, [sp, #0]
 801b606:	460b      	mov	r3, r1
 801b608:	6939      	ldr	r1, [r7, #16]
 801b60a:	6878      	ldr	r0, [r7, #4]
 801b60c:	f7ff f91a 	bl	801a844 <tcp_create_segment>
 801b610:	60f8      	str	r0, [r7, #12]
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d109      	bne.n	801b62c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	8b5b      	ldrh	r3, [r3, #26]
 801b61c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b620:	b29a      	uxth	r2, r3
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b626:	f04f 33ff 	mov.w	r3, #4294967295
 801b62a:	e070      	b.n	801b70e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	68db      	ldr	r3, [r3, #12]
 801b630:	f003 0303 	and.w	r3, r3, #3
 801b634:	2b00      	cmp	r3, #0
 801b636:	d006      	beq.n	801b646 <tcp_enqueue_flags+0xea>
 801b638:	4b37      	ldr	r3, [pc, #220]	@ (801b718 <tcp_enqueue_flags+0x1bc>)
 801b63a:	f240 4242 	movw	r2, #1090	@ 0x442
 801b63e:	493b      	ldr	r1, [pc, #236]	@ (801b72c <tcp_enqueue_flags+0x1d0>)
 801b640:	4837      	ldr	r0, [pc, #220]	@ (801b720 <tcp_enqueue_flags+0x1c4>)
 801b642:	f002 fadd 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	891b      	ldrh	r3, [r3, #8]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d006      	beq.n	801b65c <tcp_enqueue_flags+0x100>
 801b64e:	4b32      	ldr	r3, [pc, #200]	@ (801b718 <tcp_enqueue_flags+0x1bc>)
 801b650:	f240 4243 	movw	r2, #1091	@ 0x443
 801b654:	4936      	ldr	r1, [pc, #216]	@ (801b730 <tcp_enqueue_flags+0x1d4>)
 801b656:	4832      	ldr	r0, [pc, #200]	@ (801b720 <tcp_enqueue_flags+0x1c4>)
 801b658:	f002 fad2 	bl	801dc00 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b660:	2b00      	cmp	r3, #0
 801b662:	d103      	bne.n	801b66c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	68fa      	ldr	r2, [r7, #12]
 801b668:	66da      	str	r2, [r3, #108]	@ 0x6c
 801b66a:	e00d      	b.n	801b688 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b670:	61bb      	str	r3, [r7, #24]
 801b672:	e002      	b.n	801b67a <tcp_enqueue_flags+0x11e>
 801b674:	69bb      	ldr	r3, [r7, #24]
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	61bb      	str	r3, [r7, #24]
 801b67a:	69bb      	ldr	r3, [r7, #24]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d1f8      	bne.n	801b674 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b682:	69bb      	ldr	r3, [r7, #24]
 801b684:	68fa      	ldr	r2, [r7, #12]
 801b686:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	2200      	movs	r2, #0
 801b68c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b690:	78fb      	ldrb	r3, [r7, #3]
 801b692:	f003 0302 	and.w	r3, r3, #2
 801b696:	2b00      	cmp	r3, #0
 801b698:	d104      	bne.n	801b6a4 <tcp_enqueue_flags+0x148>
 801b69a:	78fb      	ldrb	r3, [r7, #3]
 801b69c:	f003 0301 	and.w	r3, r3, #1
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	d004      	beq.n	801b6ae <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b6a8:	1c5a      	adds	r2, r3, #1
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b6ae:	78fb      	ldrb	r3, [r7, #3]
 801b6b0:	f003 0301 	and.w	r3, r3, #1
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d006      	beq.n	801b6c6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	8b5b      	ldrh	r3, [r3, #26]
 801b6bc:	f043 0320 	orr.w	r3, r3, #32
 801b6c0:	b29a      	uxth	r2, r3
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	685b      	ldr	r3, [r3, #4]
 801b6ca:	4618      	mov	r0, r3
 801b6cc:	f7fa fd06 	bl	80160dc <pbuf_clen>
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	461a      	mov	r2, r3
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b6da:	4413      	add	r3, r2
 801b6dc:	b29a      	uxth	r2, r3
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d00e      	beq.n	801b70c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d10a      	bne.n	801b70c <tcp_enqueue_flags+0x1b0>
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d106      	bne.n	801b70c <tcp_enqueue_flags+0x1b0>
 801b6fe:	4b06      	ldr	r3, [pc, #24]	@ (801b718 <tcp_enqueue_flags+0x1bc>)
 801b700:	f240 4265 	movw	r2, #1125	@ 0x465
 801b704:	490b      	ldr	r1, [pc, #44]	@ (801b734 <tcp_enqueue_flags+0x1d8>)
 801b706:	4806      	ldr	r0, [pc, #24]	@ (801b720 <tcp_enqueue_flags+0x1c4>)
 801b708:	f002 fa7a 	bl	801dc00 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b70c:	2300      	movs	r3, #0
}
 801b70e:	4618      	mov	r0, r3
 801b710:	3720      	adds	r7, #32
 801b712:	46bd      	mov	sp, r7
 801b714:	bd80      	pop	{r7, pc}
 801b716:	bf00      	nop
 801b718:	08022630 	.word	0x08022630
 801b71c:	08022a84 	.word	0x08022a84
 801b720:	080226b4 	.word	0x080226b4
 801b724:	08022adc 	.word	0x08022adc
 801b728:	08022afc 	.word	0x08022afc
 801b72c:	08022b38 	.word	0x08022b38
 801b730:	08022b50 	.word	0x08022b50
 801b734:	08022b7c 	.word	0x08022b7c

0801b738 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b738:	b5b0      	push	{r4, r5, r7, lr}
 801b73a:	b08a      	sub	sp, #40	@ 0x28
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	2b00      	cmp	r3, #0
 801b744:	d106      	bne.n	801b754 <tcp_output+0x1c>
 801b746:	4b8a      	ldr	r3, [pc, #552]	@ (801b970 <tcp_output+0x238>)
 801b748:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801b74c:	4989      	ldr	r1, [pc, #548]	@ (801b974 <tcp_output+0x23c>)
 801b74e:	488a      	ldr	r0, [pc, #552]	@ (801b978 <tcp_output+0x240>)
 801b750:	f002 fa56 	bl	801dc00 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	7d1b      	ldrb	r3, [r3, #20]
 801b758:	2b01      	cmp	r3, #1
 801b75a:	d106      	bne.n	801b76a <tcp_output+0x32>
 801b75c:	4b84      	ldr	r3, [pc, #528]	@ (801b970 <tcp_output+0x238>)
 801b75e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801b762:	4986      	ldr	r1, [pc, #536]	@ (801b97c <tcp_output+0x244>)
 801b764:	4884      	ldr	r0, [pc, #528]	@ (801b978 <tcp_output+0x240>)
 801b766:	f002 fa4b 	bl	801dc00 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b76a:	4b85      	ldr	r3, [pc, #532]	@ (801b980 <tcp_output+0x248>)
 801b76c:	681b      	ldr	r3, [r3, #0]
 801b76e:	687a      	ldr	r2, [r7, #4]
 801b770:	429a      	cmp	r2, r3
 801b772:	d101      	bne.n	801b778 <tcp_output+0x40>
    return ERR_OK;
 801b774:	2300      	movs	r3, #0
 801b776:	e1ce      	b.n	801bb16 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b784:	4293      	cmp	r3, r2
 801b786:	bf28      	it	cs
 801b788:	4613      	movcs	r3, r2
 801b78a:	b29b      	uxth	r3, r3
 801b78c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b792:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801b794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b796:	2b00      	cmp	r3, #0
 801b798:	d10b      	bne.n	801b7b2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	8b5b      	ldrh	r3, [r3, #26]
 801b79e:	f003 0302 	and.w	r3, r3, #2
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	f000 81aa 	beq.w	801bafc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b7a8:	6878      	ldr	r0, [r7, #4]
 801b7aa:	f000 fdcb 	bl	801c344 <tcp_send_empty_ack>
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	e1b1      	b.n	801bb16 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b7b2:	6879      	ldr	r1, [r7, #4]
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	3304      	adds	r3, #4
 801b7b8:	461a      	mov	r2, r3
 801b7ba:	6878      	ldr	r0, [r7, #4]
 801b7bc:	f7ff f826 	bl	801a80c <tcp_route>
 801b7c0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b7c2:	697b      	ldr	r3, [r7, #20]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d102      	bne.n	801b7ce <tcp_output+0x96>
    return ERR_RTE;
 801b7c8:	f06f 0303 	mvn.w	r3, #3
 801b7cc:	e1a3      	b.n	801bb16 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d003      	beq.n	801b7dc <tcp_output+0xa4>
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d111      	bne.n	801b800 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b7dc:	697b      	ldr	r3, [r7, #20]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d002      	beq.n	801b7e8 <tcp_output+0xb0>
 801b7e2:	697b      	ldr	r3, [r7, #20]
 801b7e4:	3304      	adds	r3, #4
 801b7e6:	e000      	b.n	801b7ea <tcp_output+0xb2>
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b7ec:	693b      	ldr	r3, [r7, #16]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d102      	bne.n	801b7f8 <tcp_output+0xc0>
      return ERR_RTE;
 801b7f2:	f06f 0303 	mvn.w	r3, #3
 801b7f6:	e18e      	b.n	801bb16 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b7f8:	693b      	ldr	r3, [r7, #16]
 801b7fa:	681a      	ldr	r2, [r3, #0]
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b802:	68db      	ldr	r3, [r3, #12]
 801b804:	685b      	ldr	r3, [r3, #4]
 801b806:	4618      	mov	r0, r3
 801b808:	f7f8 ff3d 	bl	8014686 <lwip_htonl>
 801b80c:	4602      	mov	r2, r0
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b812:	1ad3      	subs	r3, r2, r3
 801b814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b816:	8912      	ldrh	r2, [r2, #8]
 801b818:	4413      	add	r3, r2
 801b81a:	69ba      	ldr	r2, [r7, #24]
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d227      	bcs.n	801b870 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801b826:	461a      	mov	r2, r3
 801b828:	69bb      	ldr	r3, [r7, #24]
 801b82a:	4293      	cmp	r3, r2
 801b82c:	d114      	bne.n	801b858 <tcp_output+0x120>
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b832:	2b00      	cmp	r3, #0
 801b834:	d110      	bne.n	801b858 <tcp_output+0x120>
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d10b      	bne.n	801b858 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	2200      	movs	r2, #0
 801b844:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	2201      	movs	r2, #1
 801b84c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	2200      	movs	r2, #0
 801b854:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	8b5b      	ldrh	r3, [r3, #26]
 801b85c:	f003 0302 	and.w	r3, r3, #2
 801b860:	2b00      	cmp	r3, #0
 801b862:	f000 814d 	beq.w	801bb00 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b866:	6878      	ldr	r0, [r7, #4]
 801b868:	f000 fd6c 	bl	801c344 <tcp_send_empty_ack>
 801b86c:	4603      	mov	r3, r0
 801b86e:	e152      	b.n	801bb16 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	2200      	movs	r2, #0
 801b874:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b87c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b87e:	6a3b      	ldr	r3, [r7, #32]
 801b880:	2b00      	cmp	r3, #0
 801b882:	f000 811c 	beq.w	801babe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b886:	e002      	b.n	801b88e <tcp_output+0x156>
 801b888:	6a3b      	ldr	r3, [r7, #32]
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	623b      	str	r3, [r7, #32]
 801b88e:	6a3b      	ldr	r3, [r7, #32]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	2b00      	cmp	r3, #0
 801b894:	d1f8      	bne.n	801b888 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b896:	e112      	b.n	801babe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b89a:	68db      	ldr	r3, [r3, #12]
 801b89c:	899b      	ldrh	r3, [r3, #12]
 801b89e:	b29b      	uxth	r3, r3
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7f8 fedb 	bl	801465c <lwip_htons>
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	b2db      	uxtb	r3, r3
 801b8aa:	f003 0304 	and.w	r3, r3, #4
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d006      	beq.n	801b8c0 <tcp_output+0x188>
 801b8b2:	4b2f      	ldr	r3, [pc, #188]	@ (801b970 <tcp_output+0x238>)
 801b8b4:	f240 5236 	movw	r2, #1334	@ 0x536
 801b8b8:	4932      	ldr	r1, [pc, #200]	@ (801b984 <tcp_output+0x24c>)
 801b8ba:	482f      	ldr	r0, [pc, #188]	@ (801b978 <tcp_output+0x240>)
 801b8bc:	f002 f9a0 	bl	801dc00 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d01f      	beq.n	801b908 <tcp_output+0x1d0>
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	8b5b      	ldrh	r3, [r3, #26]
 801b8cc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d119      	bne.n	801b908 <tcp_output+0x1d0>
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	d00b      	beq.n	801b8f4 <tcp_output+0x1bc>
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d110      	bne.n	801b908 <tcp_output+0x1d0>
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b8ea:	891a      	ldrh	r2, [r3, #8]
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	d209      	bcs.n	801b908 <tcp_output+0x1d0>
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d004      	beq.n	801b908 <tcp_output+0x1d0>
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801b904:	2b0f      	cmp	r3, #15
 801b906:	d901      	bls.n	801b90c <tcp_output+0x1d4>
 801b908:	2301      	movs	r3, #1
 801b90a:	e000      	b.n	801b90e <tcp_output+0x1d6>
 801b90c:	2300      	movs	r3, #0
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d106      	bne.n	801b920 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	8b5b      	ldrh	r3, [r3, #26]
 801b916:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	f000 80e4 	beq.w	801bae8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	7d1b      	ldrb	r3, [r3, #20]
 801b924:	2b02      	cmp	r3, #2
 801b926:	d00d      	beq.n	801b944 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b92a:	68db      	ldr	r3, [r3, #12]
 801b92c:	899b      	ldrh	r3, [r3, #12]
 801b92e:	b29c      	uxth	r4, r3
 801b930:	2010      	movs	r0, #16
 801b932:	f7f8 fe93 	bl	801465c <lwip_htons>
 801b936:	4603      	mov	r3, r0
 801b938:	461a      	mov	r2, r3
 801b93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b93c:	68db      	ldr	r3, [r3, #12]
 801b93e:	4322      	orrs	r2, r4
 801b940:	b292      	uxth	r2, r2
 801b942:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b944:	697a      	ldr	r2, [r7, #20]
 801b946:	6879      	ldr	r1, [r7, #4]
 801b948:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b94a:	f000 f909 	bl	801bb60 <tcp_output_segment>
 801b94e:	4603      	mov	r3, r0
 801b950:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b956:	2b00      	cmp	r3, #0
 801b958:	d016      	beq.n	801b988 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	8b5b      	ldrh	r3, [r3, #26]
 801b95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b962:	b29a      	uxth	r2, r3
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	835a      	strh	r2, [r3, #26]
      return err;
 801b968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b96c:	e0d3      	b.n	801bb16 <tcp_output+0x3de>
 801b96e:	bf00      	nop
 801b970:	08022630 	.word	0x08022630
 801b974:	08022ba4 	.word	0x08022ba4
 801b978:	080226b4 	.word	0x080226b4
 801b97c:	08022bbc 	.word	0x08022bbc
 801b980:	2000f9fc 	.word	0x2000f9fc
 801b984:	08022be4 	.word	0x08022be4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b98a:	681a      	ldr	r2, [r3, #0]
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	7d1b      	ldrb	r3, [r3, #20]
 801b994:	2b02      	cmp	r3, #2
 801b996:	d006      	beq.n	801b9a6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	8b5b      	ldrh	r3, [r3, #26]
 801b99c:	f023 0303 	bic.w	r3, r3, #3
 801b9a0:	b29a      	uxth	r2, r3
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9a8:	68db      	ldr	r3, [r3, #12]
 801b9aa:	685b      	ldr	r3, [r3, #4]
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	f7f8 fe6a 	bl	8014686 <lwip_htonl>
 801b9b2:	4604      	mov	r4, r0
 801b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9b6:	891b      	ldrh	r3, [r3, #8]
 801b9b8:	461d      	mov	r5, r3
 801b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9bc:	68db      	ldr	r3, [r3, #12]
 801b9be:	899b      	ldrh	r3, [r3, #12]
 801b9c0:	b29b      	uxth	r3, r3
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	f7f8 fe4a 	bl	801465c <lwip_htons>
 801b9c8:	4603      	mov	r3, r0
 801b9ca:	b2db      	uxtb	r3, r3
 801b9cc:	f003 0303 	and.w	r3, r3, #3
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	d001      	beq.n	801b9d8 <tcp_output+0x2a0>
 801b9d4:	2301      	movs	r3, #1
 801b9d6:	e000      	b.n	801b9da <tcp_output+0x2a2>
 801b9d8:	2300      	movs	r3, #0
 801b9da:	442b      	add	r3, r5
 801b9dc:	4423      	add	r3, r4
 801b9de:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b9e4:	68bb      	ldr	r3, [r7, #8]
 801b9e6:	1ad3      	subs	r3, r2, r3
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	da02      	bge.n	801b9f2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	68ba      	ldr	r2, [r7, #8]
 801b9f0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9f4:	891b      	ldrh	r3, [r3, #8]
 801b9f6:	461c      	mov	r4, r3
 801b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9fa:	68db      	ldr	r3, [r3, #12]
 801b9fc:	899b      	ldrh	r3, [r3, #12]
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7f8 fe2b 	bl	801465c <lwip_htons>
 801ba06:	4603      	mov	r3, r0
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	f003 0303 	and.w	r3, r3, #3
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d001      	beq.n	801ba16 <tcp_output+0x2de>
 801ba12:	2301      	movs	r3, #1
 801ba14:	e000      	b.n	801ba18 <tcp_output+0x2e0>
 801ba16:	2300      	movs	r3, #0
 801ba18:	4423      	add	r3, r4
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d049      	beq.n	801bab2 <tcp_output+0x37a>
      seg->next = NULL;
 801ba1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba20:	2200      	movs	r2, #0
 801ba22:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d105      	bne.n	801ba38 <tcp_output+0x300>
        pcb->unacked = seg;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ba30:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba34:	623b      	str	r3, [r7, #32]
 801ba36:	e03f      	b.n	801bab8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba3a:	68db      	ldr	r3, [r3, #12]
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f7f8 fe21 	bl	8014686 <lwip_htonl>
 801ba44:	4604      	mov	r4, r0
 801ba46:	6a3b      	ldr	r3, [r7, #32]
 801ba48:	68db      	ldr	r3, [r3, #12]
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	f7f8 fe1a 	bl	8014686 <lwip_htonl>
 801ba52:	4603      	mov	r3, r0
 801ba54:	1ae3      	subs	r3, r4, r3
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	da24      	bge.n	801baa4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	3370      	adds	r3, #112	@ 0x70
 801ba5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba60:	e002      	b.n	801ba68 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801ba62:	69fb      	ldr	r3, [r7, #28]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801ba68:	69fb      	ldr	r3, [r7, #28]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	2b00      	cmp	r3, #0
 801ba6e:	d011      	beq.n	801ba94 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ba70:	69fb      	ldr	r3, [r7, #28]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	68db      	ldr	r3, [r3, #12]
 801ba76:	685b      	ldr	r3, [r3, #4]
 801ba78:	4618      	mov	r0, r3
 801ba7a:	f7f8 fe04 	bl	8014686 <lwip_htonl>
 801ba7e:	4604      	mov	r4, r0
 801ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba82:	68db      	ldr	r3, [r3, #12]
 801ba84:	685b      	ldr	r3, [r3, #4]
 801ba86:	4618      	mov	r0, r3
 801ba88:	f7f8 fdfd 	bl	8014686 <lwip_htonl>
 801ba8c:	4603      	mov	r3, r0
 801ba8e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	dbe6      	blt.n	801ba62 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801ba94:	69fb      	ldr	r3, [r7, #28]
 801ba96:	681a      	ldr	r2, [r3, #0]
 801ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba9a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801ba9c:	69fb      	ldr	r3, [r7, #28]
 801ba9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801baa0:	601a      	str	r2, [r3, #0]
 801baa2:	e009      	b.n	801bab8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801baa4:	6a3b      	ldr	r3, [r7, #32]
 801baa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801baa8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801baaa:	6a3b      	ldr	r3, [r7, #32]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	623b      	str	r3, [r7, #32]
 801bab0:	e002      	b.n	801bab8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801bab2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bab4:	f7fb ff1d 	bl	80178f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801babc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d012      	beq.n	801baea <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801bac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bac6:	68db      	ldr	r3, [r3, #12]
 801bac8:	685b      	ldr	r3, [r3, #4]
 801baca:	4618      	mov	r0, r3
 801bacc:	f7f8 fddb 	bl	8014686 <lwip_htonl>
 801bad0:	4602      	mov	r2, r0
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bad6:	1ad3      	subs	r3, r2, r3
 801bad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bada:	8912      	ldrh	r2, [r2, #8]
 801badc:	4413      	add	r3, r2
  while (seg != NULL &&
 801bade:	69ba      	ldr	r2, [r7, #24]
 801bae0:	429a      	cmp	r2, r3
 801bae2:	f4bf aed9 	bcs.w	801b898 <tcp_output+0x160>
 801bae6:	e000      	b.n	801baea <tcp_output+0x3b2>
      break;
 801bae8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d108      	bne.n	801bb04 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	2200      	movs	r2, #0
 801baf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801bafa:	e004      	b.n	801bb06 <tcp_output+0x3ce>
    goto output_done;
 801bafc:	bf00      	nop
 801bafe:	e002      	b.n	801bb06 <tcp_output+0x3ce>
    goto output_done;
 801bb00:	bf00      	nop
 801bb02:	e000      	b.n	801bb06 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801bb04:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	8b5b      	ldrh	r3, [r3, #26]
 801bb0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801bb0e:	b29a      	uxth	r2, r3
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801bb14:	2300      	movs	r3, #0
}
 801bb16:	4618      	mov	r0, r3
 801bb18:	3728      	adds	r7, #40	@ 0x28
 801bb1a:	46bd      	mov	sp, r7
 801bb1c:	bdb0      	pop	{r4, r5, r7, pc}
 801bb1e:	bf00      	nop

0801bb20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b082      	sub	sp, #8
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d106      	bne.n	801bb3c <tcp_output_segment_busy+0x1c>
 801bb2e:	4b09      	ldr	r3, [pc, #36]	@ (801bb54 <tcp_output_segment_busy+0x34>)
 801bb30:	f240 529a 	movw	r2, #1434	@ 0x59a
 801bb34:	4908      	ldr	r1, [pc, #32]	@ (801bb58 <tcp_output_segment_busy+0x38>)
 801bb36:	4809      	ldr	r0, [pc, #36]	@ (801bb5c <tcp_output_segment_busy+0x3c>)
 801bb38:	f002 f862 	bl	801dc00 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	7b9b      	ldrb	r3, [r3, #14]
 801bb42:	2b01      	cmp	r3, #1
 801bb44:	d001      	beq.n	801bb4a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801bb46:	2301      	movs	r3, #1
 801bb48:	e000      	b.n	801bb4c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801bb4a:	2300      	movs	r3, #0
}
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	3708      	adds	r7, #8
 801bb50:	46bd      	mov	sp, r7
 801bb52:	bd80      	pop	{r7, pc}
 801bb54:	08022630 	.word	0x08022630
 801bb58:	08022bfc 	.word	0x08022bfc
 801bb5c:	080226b4 	.word	0x080226b4

0801bb60 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801bb60:	b5b0      	push	{r4, r5, r7, lr}
 801bb62:	b08c      	sub	sp, #48	@ 0x30
 801bb64:	af04      	add	r7, sp, #16
 801bb66:	60f8      	str	r0, [r7, #12]
 801bb68:	60b9      	str	r1, [r7, #8]
 801bb6a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d106      	bne.n	801bb80 <tcp_output_segment+0x20>
 801bb72:	4b64      	ldr	r3, [pc, #400]	@ (801bd04 <tcp_output_segment+0x1a4>)
 801bb74:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801bb78:	4963      	ldr	r1, [pc, #396]	@ (801bd08 <tcp_output_segment+0x1a8>)
 801bb7a:	4864      	ldr	r0, [pc, #400]	@ (801bd0c <tcp_output_segment+0x1ac>)
 801bb7c:	f002 f840 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801bb80:	68bb      	ldr	r3, [r7, #8]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d106      	bne.n	801bb94 <tcp_output_segment+0x34>
 801bb86:	4b5f      	ldr	r3, [pc, #380]	@ (801bd04 <tcp_output_segment+0x1a4>)
 801bb88:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801bb8c:	4960      	ldr	r1, [pc, #384]	@ (801bd10 <tcp_output_segment+0x1b0>)
 801bb8e:	485f      	ldr	r0, [pc, #380]	@ (801bd0c <tcp_output_segment+0x1ac>)
 801bb90:	f002 f836 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d106      	bne.n	801bba8 <tcp_output_segment+0x48>
 801bb9a:	4b5a      	ldr	r3, [pc, #360]	@ (801bd04 <tcp_output_segment+0x1a4>)
 801bb9c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801bba0:	495c      	ldr	r1, [pc, #368]	@ (801bd14 <tcp_output_segment+0x1b4>)
 801bba2:	485a      	ldr	r0, [pc, #360]	@ (801bd0c <tcp_output_segment+0x1ac>)
 801bba4:	f002 f82c 	bl	801dc00 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801bba8:	68f8      	ldr	r0, [r7, #12]
 801bbaa:	f7ff ffb9 	bl	801bb20 <tcp_output_segment_busy>
 801bbae:	4603      	mov	r3, r0
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d001      	beq.n	801bbb8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	e0a1      	b.n	801bcfc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801bbb8:	68bb      	ldr	r3, [r7, #8]
 801bbba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	68dc      	ldr	r4, [r3, #12]
 801bbc0:	4610      	mov	r0, r2
 801bbc2:	f7f8 fd60 	bl	8014686 <lwip_htonl>
 801bbc6:	4603      	mov	r3, r0
 801bbc8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801bbca:	68bb      	ldr	r3, [r7, #8]
 801bbcc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	68dc      	ldr	r4, [r3, #12]
 801bbd2:	4610      	mov	r0, r2
 801bbd4:	f7f8 fd42 	bl	801465c <lwip_htons>
 801bbd8:	4603      	mov	r3, r0
 801bbda:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bbdc:	68bb      	ldr	r3, [r7, #8]
 801bbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bbe0:	68ba      	ldr	r2, [r7, #8]
 801bbe2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801bbe4:	441a      	add	r2, r3
 801bbe6:	68bb      	ldr	r3, [r7, #8]
 801bbe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801bbea:	68fb      	ldr	r3, [r7, #12]
 801bbec:	68db      	ldr	r3, [r3, #12]
 801bbee:	3314      	adds	r3, #20
 801bbf0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801bbf2:	68fb      	ldr	r3, [r7, #12]
 801bbf4:	7a9b      	ldrb	r3, [r3, #10]
 801bbf6:	f003 0301 	and.w	r3, r3, #1
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d015      	beq.n	801bc2a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801bbfe:	68bb      	ldr	r3, [r7, #8]
 801bc00:	3304      	adds	r3, #4
 801bc02:	461a      	mov	r2, r3
 801bc04:	6879      	ldr	r1, [r7, #4]
 801bc06:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 801bc0a:	f7fc fa37 	bl	801807c <tcp_eff_send_mss_netif>
 801bc0e:	4603      	mov	r3, r0
 801bc10:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801bc12:	8b7b      	ldrh	r3, [r7, #26]
 801bc14:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801bc18:	4618      	mov	r0, r3
 801bc1a:	f7f8 fd34 	bl	8014686 <lwip_htonl>
 801bc1e:	4602      	mov	r2, r0
 801bc20:	69fb      	ldr	r3, [r7, #28]
 801bc22:	601a      	str	r2, [r3, #0]
    opts += 1;
 801bc24:	69fb      	ldr	r3, [r7, #28]
 801bc26:	3304      	adds	r3, #4
 801bc28:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801bc2a:	68bb      	ldr	r3, [r7, #8]
 801bc2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	da02      	bge.n	801bc3a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801bc34:	68bb      	ldr	r3, [r7, #8]
 801bc36:	2200      	movs	r2, #0
 801bc38:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801bc3a:	68bb      	ldr	r3, [r7, #8]
 801bc3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d10c      	bne.n	801bc5c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801bc42:	4b35      	ldr	r3, [pc, #212]	@ (801bd18 <tcp_output_segment+0x1b8>)
 801bc44:	681a      	ldr	r2, [r3, #0]
 801bc46:	68bb      	ldr	r3, [r7, #8]
 801bc48:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	68db      	ldr	r3, [r3, #12]
 801bc4e:	685b      	ldr	r3, [r3, #4]
 801bc50:	4618      	mov	r0, r3
 801bc52:	f7f8 fd18 	bl	8014686 <lwip_htonl>
 801bc56:	4602      	mov	r2, r0
 801bc58:	68bb      	ldr	r3, [r7, #8]
 801bc5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	68da      	ldr	r2, [r3, #12]
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	685b      	ldr	r3, [r3, #4]
 801bc66:	1ad3      	subs	r3, r2, r3
 801bc68:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	685b      	ldr	r3, [r3, #4]
 801bc6e:	8959      	ldrh	r1, [r3, #10]
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	685b      	ldr	r3, [r3, #4]
 801bc74:	8b3a      	ldrh	r2, [r7, #24]
 801bc76:	1a8a      	subs	r2, r1, r2
 801bc78:	b292      	uxth	r2, r2
 801bc7a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	685b      	ldr	r3, [r3, #4]
 801bc80:	8919      	ldrh	r1, [r3, #8]
 801bc82:	68fb      	ldr	r3, [r7, #12]
 801bc84:	685b      	ldr	r3, [r3, #4]
 801bc86:	8b3a      	ldrh	r2, [r7, #24]
 801bc88:	1a8a      	subs	r2, r1, r2
 801bc8a:	b292      	uxth	r2, r2
 801bc8c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	685b      	ldr	r3, [r3, #4]
 801bc92:	68fa      	ldr	r2, [r7, #12]
 801bc94:	68d2      	ldr	r2, [r2, #12]
 801bc96:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801bc98:	68fb      	ldr	r3, [r7, #12]
 801bc9a:	68db      	ldr	r3, [r3, #12]
 801bc9c:	2200      	movs	r2, #0
 801bc9e:	741a      	strb	r2, [r3, #16]
 801bca0:	2200      	movs	r2, #0
 801bca2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801bca4:	68fb      	ldr	r3, [r7, #12]
 801bca6:	68da      	ldr	r2, [r3, #12]
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	7a9b      	ldrb	r3, [r3, #10]
 801bcac:	f003 0301 	and.w	r3, r3, #1
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	d001      	beq.n	801bcb8 <tcp_output_segment+0x158>
 801bcb4:	2318      	movs	r3, #24
 801bcb6:	e000      	b.n	801bcba <tcp_output_segment+0x15a>
 801bcb8:	2314      	movs	r3, #20
 801bcba:	4413      	add	r3, r2
 801bcbc:	69fa      	ldr	r2, [r7, #28]
 801bcbe:	429a      	cmp	r2, r3
 801bcc0:	d006      	beq.n	801bcd0 <tcp_output_segment+0x170>
 801bcc2:	4b10      	ldr	r3, [pc, #64]	@ (801bd04 <tcp_output_segment+0x1a4>)
 801bcc4:	f240 621c 	movw	r2, #1564	@ 0x61c
 801bcc8:	4914      	ldr	r1, [pc, #80]	@ (801bd1c <tcp_output_segment+0x1bc>)
 801bcca:	4810      	ldr	r0, [pc, #64]	@ (801bd0c <tcp_output_segment+0x1ac>)
 801bccc:	f001 ff98 	bl	801dc00 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801bcd0:	68fb      	ldr	r3, [r7, #12]
 801bcd2:	6858      	ldr	r0, [r3, #4]
 801bcd4:	68b9      	ldr	r1, [r7, #8]
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	1d1c      	adds	r4, r3, #4
 801bcda:	68bb      	ldr	r3, [r7, #8]
 801bcdc:	7add      	ldrb	r5, [r3, #11]
 801bcde:	68bb      	ldr	r3, [r7, #8]
 801bce0:	7a9b      	ldrb	r3, [r3, #10]
 801bce2:	687a      	ldr	r2, [r7, #4]
 801bce4:	9202      	str	r2, [sp, #8]
 801bce6:	2206      	movs	r2, #6
 801bce8:	9201      	str	r2, [sp, #4]
 801bcea:	9300      	str	r3, [sp, #0]
 801bcec:	462b      	mov	r3, r5
 801bcee:	4622      	mov	r2, r4
 801bcf0:	f7f7 fce6 	bl	80136c0 <ip4_output_if>
 801bcf4:	4603      	mov	r3, r0
 801bcf6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801bcf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bcfc:	4618      	mov	r0, r3
 801bcfe:	3720      	adds	r7, #32
 801bd00:	46bd      	mov	sp, r7
 801bd02:	bdb0      	pop	{r4, r5, r7, pc}
 801bd04:	08022630 	.word	0x08022630
 801bd08:	08022c24 	.word	0x08022c24
 801bd0c:	080226b4 	.word	0x080226b4
 801bd10:	08022c44 	.word	0x08022c44
 801bd14:	08022c64 	.word	0x08022c64
 801bd18:	2000f9b0 	.word	0x2000f9b0
 801bd1c:	08022c88 	.word	0x08022c88

0801bd20 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801bd20:	b5b0      	push	{r4, r5, r7, lr}
 801bd22:	b084      	sub	sp, #16
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d106      	bne.n	801bd3c <tcp_rexmit_rto_prepare+0x1c>
 801bd2e:	4b31      	ldr	r3, [pc, #196]	@ (801bdf4 <tcp_rexmit_rto_prepare+0xd4>)
 801bd30:	f240 6263 	movw	r2, #1635	@ 0x663
 801bd34:	4930      	ldr	r1, [pc, #192]	@ (801bdf8 <tcp_rexmit_rto_prepare+0xd8>)
 801bd36:	4831      	ldr	r0, [pc, #196]	@ (801bdfc <tcp_rexmit_rto_prepare+0xdc>)
 801bd38:	f001 ff62 	bl	801dc00 <iprintf>

  if (pcb->unacked == NULL) {
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d102      	bne.n	801bd4a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801bd44:	f06f 0305 	mvn.w	r3, #5
 801bd48:	e050      	b.n	801bdec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bd4e:	60fb      	str	r3, [r7, #12]
 801bd50:	e00b      	b.n	801bd6a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801bd52:	68f8      	ldr	r0, [r7, #12]
 801bd54:	f7ff fee4 	bl	801bb20 <tcp_output_segment_busy>
 801bd58:	4603      	mov	r3, r0
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d002      	beq.n	801bd64 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801bd5e:	f06f 0305 	mvn.w	r3, #5
 801bd62:	e043      	b.n	801bdec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801bd64:	68fb      	ldr	r3, [r7, #12]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	60fb      	str	r3, [r7, #12]
 801bd6a:	68fb      	ldr	r3, [r7, #12]
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d1ef      	bne.n	801bd52 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801bd72:	68f8      	ldr	r0, [r7, #12]
 801bd74:	f7ff fed4 	bl	801bb20 <tcp_output_segment_busy>
 801bd78:	4603      	mov	r3, r0
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d002      	beq.n	801bd84 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801bd7e:	f06f 0305 	mvn.w	r3, #5
 801bd82:	e033      	b.n	801bdec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	2200      	movs	r2, #0
 801bd98:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	8b5b      	ldrh	r3, [r3, #26]
 801bd9e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801bda2:	b29a      	uxth	r2, r3
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bda8:	68fb      	ldr	r3, [r7, #12]
 801bdaa:	68db      	ldr	r3, [r3, #12]
 801bdac:	685b      	ldr	r3, [r3, #4]
 801bdae:	4618      	mov	r0, r3
 801bdb0:	f7f8 fc69 	bl	8014686 <lwip_htonl>
 801bdb4:	4604      	mov	r4, r0
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	891b      	ldrh	r3, [r3, #8]
 801bdba:	461d      	mov	r5, r3
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	68db      	ldr	r3, [r3, #12]
 801bdc0:	899b      	ldrh	r3, [r3, #12]
 801bdc2:	b29b      	uxth	r3, r3
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	f7f8 fc49 	bl	801465c <lwip_htons>
 801bdca:	4603      	mov	r3, r0
 801bdcc:	b2db      	uxtb	r3, r3
 801bdce:	f003 0303 	and.w	r3, r3, #3
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d001      	beq.n	801bdda <tcp_rexmit_rto_prepare+0xba>
 801bdd6:	2301      	movs	r3, #1
 801bdd8:	e000      	b.n	801bddc <tcp_rexmit_rto_prepare+0xbc>
 801bdda:	2300      	movs	r3, #0
 801bddc:	442b      	add	r3, r5
 801bdde:	18e2      	adds	r2, r4, r3
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	2200      	movs	r2, #0
 801bde8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801bdea:	2300      	movs	r3, #0
}
 801bdec:	4618      	mov	r0, r3
 801bdee:	3710      	adds	r7, #16
 801bdf0:	46bd      	mov	sp, r7
 801bdf2:	bdb0      	pop	{r4, r5, r7, pc}
 801bdf4:	08022630 	.word	0x08022630
 801bdf8:	08022c9c 	.word	0x08022c9c
 801bdfc:	080226b4 	.word	0x080226b4

0801be00 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801be00:	b580      	push	{r7, lr}
 801be02:	b082      	sub	sp, #8
 801be04:	af00      	add	r7, sp, #0
 801be06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d106      	bne.n	801be1c <tcp_rexmit_rto_commit+0x1c>
 801be0e:	4b0d      	ldr	r3, [pc, #52]	@ (801be44 <tcp_rexmit_rto_commit+0x44>)
 801be10:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801be14:	490c      	ldr	r1, [pc, #48]	@ (801be48 <tcp_rexmit_rto_commit+0x48>)
 801be16:	480d      	ldr	r0, [pc, #52]	@ (801be4c <tcp_rexmit_rto_commit+0x4c>)
 801be18:	f001 fef2 	bl	801dc00 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801be22:	2bff      	cmp	r3, #255	@ 0xff
 801be24:	d007      	beq.n	801be36 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801be2c:	3301      	adds	r3, #1
 801be2e:	b2da      	uxtb	r2, r3
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801be36:	6878      	ldr	r0, [r7, #4]
 801be38:	f7ff fc7e 	bl	801b738 <tcp_output>
}
 801be3c:	bf00      	nop
 801be3e:	3708      	adds	r7, #8
 801be40:	46bd      	mov	sp, r7
 801be42:	bd80      	pop	{r7, pc}
 801be44:	08022630 	.word	0x08022630
 801be48:	08022cc0 	.word	0x08022cc0
 801be4c:	080226b4 	.word	0x080226b4

0801be50 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b082      	sub	sp, #8
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d106      	bne.n	801be6c <tcp_rexmit_rto+0x1c>
 801be5e:	4b0a      	ldr	r3, [pc, #40]	@ (801be88 <tcp_rexmit_rto+0x38>)
 801be60:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801be64:	4909      	ldr	r1, [pc, #36]	@ (801be8c <tcp_rexmit_rto+0x3c>)
 801be66:	480a      	ldr	r0, [pc, #40]	@ (801be90 <tcp_rexmit_rto+0x40>)
 801be68:	f001 feca 	bl	801dc00 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801be6c:	6878      	ldr	r0, [r7, #4]
 801be6e:	f7ff ff57 	bl	801bd20 <tcp_rexmit_rto_prepare>
 801be72:	4603      	mov	r3, r0
 801be74:	2b00      	cmp	r3, #0
 801be76:	d102      	bne.n	801be7e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801be78:	6878      	ldr	r0, [r7, #4]
 801be7a:	f7ff ffc1 	bl	801be00 <tcp_rexmit_rto_commit>
  }
}
 801be7e:	bf00      	nop
 801be80:	3708      	adds	r7, #8
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}
 801be86:	bf00      	nop
 801be88:	08022630 	.word	0x08022630
 801be8c:	08022ce4 	.word	0x08022ce4
 801be90:	080226b4 	.word	0x080226b4

0801be94 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801be94:	b590      	push	{r4, r7, lr}
 801be96:	b085      	sub	sp, #20
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d106      	bne.n	801beb0 <tcp_rexmit+0x1c>
 801bea2:	4b2f      	ldr	r3, [pc, #188]	@ (801bf60 <tcp_rexmit+0xcc>)
 801bea4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801bea8:	492e      	ldr	r1, [pc, #184]	@ (801bf64 <tcp_rexmit+0xd0>)
 801beaa:	482f      	ldr	r0, [pc, #188]	@ (801bf68 <tcp_rexmit+0xd4>)
 801beac:	f001 fea8 	bl	801dc00 <iprintf>

  if (pcb->unacked == NULL) {
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d102      	bne.n	801bebe <tcp_rexmit+0x2a>
    return ERR_VAL;
 801beb8:	f06f 0305 	mvn.w	r3, #5
 801bebc:	e04c      	b.n	801bf58 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bec2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801bec4:	68b8      	ldr	r0, [r7, #8]
 801bec6:	f7ff fe2b 	bl	801bb20 <tcp_output_segment_busy>
 801beca:	4603      	mov	r3, r0
 801becc:	2b00      	cmp	r3, #0
 801bece:	d002      	beq.n	801bed6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801bed0:	f06f 0305 	mvn.w	r3, #5
 801bed4:	e040      	b.n	801bf58 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801bed6:	68bb      	ldr	r3, [r7, #8]
 801bed8:	681a      	ldr	r2, [r3, #0]
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	336c      	adds	r3, #108	@ 0x6c
 801bee2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bee4:	e002      	b.n	801beec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801beec:	68fb      	ldr	r3, [r7, #12]
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d011      	beq.n	801bf18 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	681b      	ldr	r3, [r3, #0]
 801bef8:	68db      	ldr	r3, [r3, #12]
 801befa:	685b      	ldr	r3, [r3, #4]
 801befc:	4618      	mov	r0, r3
 801befe:	f7f8 fbc2 	bl	8014686 <lwip_htonl>
 801bf02:	4604      	mov	r4, r0
 801bf04:	68bb      	ldr	r3, [r7, #8]
 801bf06:	68db      	ldr	r3, [r3, #12]
 801bf08:	685b      	ldr	r3, [r3, #4]
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f7f8 fbbb 	bl	8014686 <lwip_htonl>
 801bf10:	4603      	mov	r3, r0
 801bf12:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	dbe6      	blt.n	801bee6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bf18:	68fb      	ldr	r3, [r7, #12]
 801bf1a:	681a      	ldr	r2, [r3, #0]
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bf20:	68fb      	ldr	r3, [r7, #12]
 801bf22:	68ba      	ldr	r2, [r7, #8]
 801bf24:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bf26:	68bb      	ldr	r3, [r7, #8]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d103      	bne.n	801bf36 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	2200      	movs	r2, #0
 801bf32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bf3c:	2bff      	cmp	r3, #255	@ 0xff
 801bf3e:	d007      	beq.n	801bf50 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801bf46:	3301      	adds	r3, #1
 801bf48:	b2da      	uxtb	r2, r3
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	2200      	movs	r2, #0
 801bf54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bf56:	2300      	movs	r3, #0
}
 801bf58:	4618      	mov	r0, r3
 801bf5a:	3714      	adds	r7, #20
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	bd90      	pop	{r4, r7, pc}
 801bf60:	08022630 	.word	0x08022630
 801bf64:	08022d00 	.word	0x08022d00
 801bf68:	080226b4 	.word	0x080226b4

0801bf6c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bf6c:	b580      	push	{r7, lr}
 801bf6e:	b082      	sub	sp, #8
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d106      	bne.n	801bf88 <tcp_rexmit_fast+0x1c>
 801bf7a:	4b2a      	ldr	r3, [pc, #168]	@ (801c024 <tcp_rexmit_fast+0xb8>)
 801bf7c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801bf80:	4929      	ldr	r1, [pc, #164]	@ (801c028 <tcp_rexmit_fast+0xbc>)
 801bf82:	482a      	ldr	r0, [pc, #168]	@ (801c02c <tcp_rexmit_fast+0xc0>)
 801bf84:	f001 fe3c 	bl	801dc00 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d045      	beq.n	801c01c <tcp_rexmit_fast+0xb0>
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	8b5b      	ldrh	r3, [r3, #26]
 801bf94:	f003 0304 	and.w	r3, r3, #4
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d13f      	bne.n	801c01c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bf9c:	6878      	ldr	r0, [r7, #4]
 801bf9e:	f7ff ff79 	bl	801be94 <tcp_rexmit>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	2b00      	cmp	r3, #0
 801bfa6:	d139      	bne.n	801c01c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801bfb4:	4293      	cmp	r3, r2
 801bfb6:	bf28      	it	cs
 801bfb8:	4613      	movcs	r3, r2
 801bfba:	b29b      	uxth	r3, r3
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	da00      	bge.n	801bfc2 <tcp_rexmit_fast+0x56>
 801bfc0:	3301      	adds	r3, #1
 801bfc2:	105b      	asrs	r3, r3, #1
 801bfc4:	b29a      	uxth	r2, r3
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801bfd2:	461a      	mov	r2, r3
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bfd8:	005b      	lsls	r3, r3, #1
 801bfda:	429a      	cmp	r2, r3
 801bfdc:	d206      	bcs.n	801bfec <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bfe2:	005b      	lsls	r3, r3, #1
 801bfe4:	b29a      	uxth	r2, r3
 801bfe6:	687b      	ldr	r3, [r7, #4]
 801bfe8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801bff6:	4619      	mov	r1, r3
 801bff8:	0049      	lsls	r1, r1, #1
 801bffa:	440b      	add	r3, r1
 801bffc:	b29b      	uxth	r3, r3
 801bffe:	4413      	add	r3, r2
 801c000:	b29a      	uxth	r2, r3
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	8b5b      	ldrh	r3, [r3, #26]
 801c00c:	f043 0304 	orr.w	r3, r3, #4
 801c010:	b29a      	uxth	r2, r3
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	2200      	movs	r2, #0
 801c01a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801c01c:	bf00      	nop
 801c01e:	3708      	adds	r7, #8
 801c020:	46bd      	mov	sp, r7
 801c022:	bd80      	pop	{r7, pc}
 801c024:	08022630 	.word	0x08022630
 801c028:	08022d18 	.word	0x08022d18
 801c02c:	080226b4 	.word	0x080226b4

0801c030 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b086      	sub	sp, #24
 801c034:	af00      	add	r7, sp, #0
 801c036:	60f8      	str	r0, [r7, #12]
 801c038:	607b      	str	r3, [r7, #4]
 801c03a:	460b      	mov	r3, r1
 801c03c:	817b      	strh	r3, [r7, #10]
 801c03e:	4613      	mov	r3, r2
 801c040:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c042:	897a      	ldrh	r2, [r7, #10]
 801c044:	893b      	ldrh	r3, [r7, #8]
 801c046:	4413      	add	r3, r2
 801c048:	b29b      	uxth	r3, r3
 801c04a:	3314      	adds	r3, #20
 801c04c:	b29b      	uxth	r3, r3
 801c04e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c052:	4619      	mov	r1, r3
 801c054:	2022      	movs	r0, #34	@ 0x22
 801c056:	f7f9 fc9d 	bl	8015994 <pbuf_alloc>
 801c05a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801c05c:	697b      	ldr	r3, [r7, #20]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d04d      	beq.n	801c0fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c062:	897b      	ldrh	r3, [r7, #10]
 801c064:	3313      	adds	r3, #19
 801c066:	697a      	ldr	r2, [r7, #20]
 801c068:	8952      	ldrh	r2, [r2, #10]
 801c06a:	4293      	cmp	r3, r2
 801c06c:	db06      	blt.n	801c07c <tcp_output_alloc_header_common+0x4c>
 801c06e:	4b26      	ldr	r3, [pc, #152]	@ (801c108 <tcp_output_alloc_header_common+0xd8>)
 801c070:	f240 7223 	movw	r2, #1827	@ 0x723
 801c074:	4925      	ldr	r1, [pc, #148]	@ (801c10c <tcp_output_alloc_header_common+0xdc>)
 801c076:	4826      	ldr	r0, [pc, #152]	@ (801c110 <tcp_output_alloc_header_common+0xe0>)
 801c078:	f001 fdc2 	bl	801dc00 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801c07c:	697b      	ldr	r3, [r7, #20]
 801c07e:	685b      	ldr	r3, [r3, #4]
 801c080:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801c082:	8c3b      	ldrh	r3, [r7, #32]
 801c084:	4618      	mov	r0, r3
 801c086:	f7f8 fae9 	bl	801465c <lwip_htons>
 801c08a:	4603      	mov	r3, r0
 801c08c:	461a      	mov	r2, r3
 801c08e:	693b      	ldr	r3, [r7, #16]
 801c090:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801c092:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c094:	4618      	mov	r0, r3
 801c096:	f7f8 fae1 	bl	801465c <lwip_htons>
 801c09a:	4603      	mov	r3, r0
 801c09c:	461a      	mov	r2, r3
 801c09e:	693b      	ldr	r3, [r7, #16]
 801c0a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801c0a2:	693b      	ldr	r3, [r7, #16]
 801c0a4:	687a      	ldr	r2, [r7, #4]
 801c0a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801c0a8:	68f8      	ldr	r0, [r7, #12]
 801c0aa:	f7f8 faec 	bl	8014686 <lwip_htonl>
 801c0ae:	4602      	mov	r2, r0
 801c0b0:	693b      	ldr	r3, [r7, #16]
 801c0b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c0b4:	897b      	ldrh	r3, [r7, #10]
 801c0b6:	089b      	lsrs	r3, r3, #2
 801c0b8:	b29b      	uxth	r3, r3
 801c0ba:	3305      	adds	r3, #5
 801c0bc:	b29b      	uxth	r3, r3
 801c0be:	031b      	lsls	r3, r3, #12
 801c0c0:	b29a      	uxth	r2, r3
 801c0c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801c0c6:	b29b      	uxth	r3, r3
 801c0c8:	4313      	orrs	r3, r2
 801c0ca:	b29b      	uxth	r3, r3
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	f7f8 fac5 	bl	801465c <lwip_htons>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	461a      	mov	r2, r3
 801c0d6:	693b      	ldr	r3, [r7, #16]
 801c0d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801c0da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c0dc:	4618      	mov	r0, r3
 801c0de:	f7f8 fabd 	bl	801465c <lwip_htons>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	461a      	mov	r2, r3
 801c0e6:	693b      	ldr	r3, [r7, #16]
 801c0e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801c0ea:	693b      	ldr	r3, [r7, #16]
 801c0ec:	2200      	movs	r2, #0
 801c0ee:	741a      	strb	r2, [r3, #16]
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801c0f4:	693b      	ldr	r3, [r7, #16]
 801c0f6:	2200      	movs	r2, #0
 801c0f8:	749a      	strb	r2, [r3, #18]
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801c0fe:	697b      	ldr	r3, [r7, #20]
}
 801c100:	4618      	mov	r0, r3
 801c102:	3718      	adds	r7, #24
 801c104:	46bd      	mov	sp, r7
 801c106:	bd80      	pop	{r7, pc}
 801c108:	08022630 	.word	0x08022630
 801c10c:	08022d38 	.word	0x08022d38
 801c110:	080226b4 	.word	0x080226b4

0801c114 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801c114:	b5b0      	push	{r4, r5, r7, lr}
 801c116:	b08a      	sub	sp, #40	@ 0x28
 801c118:	af04      	add	r7, sp, #16
 801c11a:	60f8      	str	r0, [r7, #12]
 801c11c:	607b      	str	r3, [r7, #4]
 801c11e:	460b      	mov	r3, r1
 801c120:	817b      	strh	r3, [r7, #10]
 801c122:	4613      	mov	r3, r2
 801c124:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d106      	bne.n	801c13a <tcp_output_alloc_header+0x26>
 801c12c:	4b15      	ldr	r3, [pc, #84]	@ (801c184 <tcp_output_alloc_header+0x70>)
 801c12e:	f240 7242 	movw	r2, #1858	@ 0x742
 801c132:	4915      	ldr	r1, [pc, #84]	@ (801c188 <tcp_output_alloc_header+0x74>)
 801c134:	4815      	ldr	r0, [pc, #84]	@ (801c18c <tcp_output_alloc_header+0x78>)
 801c136:	f001 fd63 	bl	801dc00 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	8adb      	ldrh	r3, [r3, #22]
 801c142:	68fa      	ldr	r2, [r7, #12]
 801c144:	8b12      	ldrh	r2, [r2, #24]
 801c146:	68f9      	ldr	r1, [r7, #12]
 801c148:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801c14a:	893d      	ldrh	r5, [r7, #8]
 801c14c:	897c      	ldrh	r4, [r7, #10]
 801c14e:	9103      	str	r1, [sp, #12]
 801c150:	2110      	movs	r1, #16
 801c152:	9102      	str	r1, [sp, #8]
 801c154:	9201      	str	r2, [sp, #4]
 801c156:	9300      	str	r3, [sp, #0]
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	462a      	mov	r2, r5
 801c15c:	4621      	mov	r1, r4
 801c15e:	f7ff ff67 	bl	801c030 <tcp_output_alloc_header_common>
 801c162:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801c164:	697b      	ldr	r3, [r7, #20]
 801c166:	2b00      	cmp	r3, #0
 801c168:	d006      	beq.n	801c178 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c16a:	68fb      	ldr	r3, [r7, #12]
 801c16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c16e:	68fa      	ldr	r2, [r7, #12]
 801c170:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801c172:	441a      	add	r2, r3
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801c178:	697b      	ldr	r3, [r7, #20]
}
 801c17a:	4618      	mov	r0, r3
 801c17c:	3718      	adds	r7, #24
 801c17e:	46bd      	mov	sp, r7
 801c180:	bdb0      	pop	{r4, r5, r7, pc}
 801c182:	bf00      	nop
 801c184:	08022630 	.word	0x08022630
 801c188:	08022d68 	.word	0x08022d68
 801c18c:	080226b4 	.word	0x080226b4

0801c190 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b088      	sub	sp, #32
 801c194:	af00      	add	r7, sp, #0
 801c196:	60f8      	str	r0, [r7, #12]
 801c198:	60b9      	str	r1, [r7, #8]
 801c19a:	4611      	mov	r1, r2
 801c19c:	461a      	mov	r2, r3
 801c19e:	460b      	mov	r3, r1
 801c1a0:	71fb      	strb	r3, [r7, #7]
 801c1a2:	4613      	mov	r3, r2
 801c1a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c1aa:	68bb      	ldr	r3, [r7, #8]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d106      	bne.n	801c1be <tcp_output_fill_options+0x2e>
 801c1b0:	4b12      	ldr	r3, [pc, #72]	@ (801c1fc <tcp_output_fill_options+0x6c>)
 801c1b2:	f240 7256 	movw	r2, #1878	@ 0x756
 801c1b6:	4912      	ldr	r1, [pc, #72]	@ (801c200 <tcp_output_fill_options+0x70>)
 801c1b8:	4812      	ldr	r0, [pc, #72]	@ (801c204 <tcp_output_fill_options+0x74>)
 801c1ba:	f001 fd21 	bl	801dc00 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801c1be:	68bb      	ldr	r3, [r7, #8]
 801c1c0:	685b      	ldr	r3, [r3, #4]
 801c1c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801c1c4:	69bb      	ldr	r3, [r7, #24]
 801c1c6:	3314      	adds	r3, #20
 801c1c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801c1ca:	8bfb      	ldrh	r3, [r7, #30]
 801c1cc:	009b      	lsls	r3, r3, #2
 801c1ce:	461a      	mov	r2, r3
 801c1d0:	79fb      	ldrb	r3, [r7, #7]
 801c1d2:	009b      	lsls	r3, r3, #2
 801c1d4:	f003 0304 	and.w	r3, r3, #4
 801c1d8:	4413      	add	r3, r2
 801c1da:	3314      	adds	r3, #20
 801c1dc:	69ba      	ldr	r2, [r7, #24]
 801c1de:	4413      	add	r3, r2
 801c1e0:	697a      	ldr	r2, [r7, #20]
 801c1e2:	429a      	cmp	r2, r3
 801c1e4:	d006      	beq.n	801c1f4 <tcp_output_fill_options+0x64>
 801c1e6:	4b05      	ldr	r3, [pc, #20]	@ (801c1fc <tcp_output_fill_options+0x6c>)
 801c1e8:	f240 7275 	movw	r2, #1909	@ 0x775
 801c1ec:	4906      	ldr	r1, [pc, #24]	@ (801c208 <tcp_output_fill_options+0x78>)
 801c1ee:	4805      	ldr	r0, [pc, #20]	@ (801c204 <tcp_output_fill_options+0x74>)
 801c1f0:	f001 fd06 	bl	801dc00 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c1f4:	bf00      	nop
 801c1f6:	3720      	adds	r7, #32
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	bd80      	pop	{r7, pc}
 801c1fc:	08022630 	.word	0x08022630
 801c200:	08022d90 	.word	0x08022d90
 801c204:	080226b4 	.word	0x080226b4
 801c208:	08022c88 	.word	0x08022c88

0801c20c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b08a      	sub	sp, #40	@ 0x28
 801c210:	af04      	add	r7, sp, #16
 801c212:	60f8      	str	r0, [r7, #12]
 801c214:	60b9      	str	r1, [r7, #8]
 801c216:	607a      	str	r2, [r7, #4]
 801c218:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c21a:	68bb      	ldr	r3, [r7, #8]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d106      	bne.n	801c22e <tcp_output_control_segment+0x22>
 801c220:	4b1c      	ldr	r3, [pc, #112]	@ (801c294 <tcp_output_control_segment+0x88>)
 801c222:	f240 7287 	movw	r2, #1927	@ 0x787
 801c226:	491c      	ldr	r1, [pc, #112]	@ (801c298 <tcp_output_control_segment+0x8c>)
 801c228:	481c      	ldr	r0, [pc, #112]	@ (801c29c <tcp_output_control_segment+0x90>)
 801c22a:	f001 fce9 	bl	801dc00 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801c22e:	683a      	ldr	r2, [r7, #0]
 801c230:	6879      	ldr	r1, [r7, #4]
 801c232:	68f8      	ldr	r0, [r7, #12]
 801c234:	f7fe faea 	bl	801a80c <tcp_route>
 801c238:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801c23a:	693b      	ldr	r3, [r7, #16]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d102      	bne.n	801c246 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801c240:	23fc      	movs	r3, #252	@ 0xfc
 801c242:	75fb      	strb	r3, [r7, #23]
 801c244:	e01c      	b.n	801c280 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d006      	beq.n	801c25a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	7adb      	ldrb	r3, [r3, #11]
 801c250:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	7a9b      	ldrb	r3, [r3, #10]
 801c256:	757b      	strb	r3, [r7, #21]
 801c258:	e003      	b.n	801c262 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801c25a:	23ff      	movs	r3, #255	@ 0xff
 801c25c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801c25e:	2300      	movs	r3, #0
 801c260:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c262:	7dba      	ldrb	r2, [r7, #22]
 801c264:	693b      	ldr	r3, [r7, #16]
 801c266:	9302      	str	r3, [sp, #8]
 801c268:	2306      	movs	r3, #6
 801c26a:	9301      	str	r3, [sp, #4]
 801c26c:	7d7b      	ldrb	r3, [r7, #21]
 801c26e:	9300      	str	r3, [sp, #0]
 801c270:	4613      	mov	r3, r2
 801c272:	683a      	ldr	r2, [r7, #0]
 801c274:	6879      	ldr	r1, [r7, #4]
 801c276:	68b8      	ldr	r0, [r7, #8]
 801c278:	f7f7 fa22 	bl	80136c0 <ip4_output_if>
 801c27c:	4603      	mov	r3, r0
 801c27e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c280:	68b8      	ldr	r0, [r7, #8]
 801c282:	f7f9 fe9d 	bl	8015fc0 <pbuf_free>
  return err;
 801c286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c28a:	4618      	mov	r0, r3
 801c28c:	3718      	adds	r7, #24
 801c28e:	46bd      	mov	sp, r7
 801c290:	bd80      	pop	{r7, pc}
 801c292:	bf00      	nop
 801c294:	08022630 	.word	0x08022630
 801c298:	08022db8 	.word	0x08022db8
 801c29c:	080226b4 	.word	0x080226b4

0801c2a0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801c2a0:	b590      	push	{r4, r7, lr}
 801c2a2:	b08b      	sub	sp, #44	@ 0x2c
 801c2a4:	af04      	add	r7, sp, #16
 801c2a6:	60f8      	str	r0, [r7, #12]
 801c2a8:	60b9      	str	r1, [r7, #8]
 801c2aa:	607a      	str	r2, [r7, #4]
 801c2ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801c2ae:	683b      	ldr	r3, [r7, #0]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d106      	bne.n	801c2c2 <tcp_rst+0x22>
 801c2b4:	4b1f      	ldr	r3, [pc, #124]	@ (801c334 <tcp_rst+0x94>)
 801c2b6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801c2ba:	491f      	ldr	r1, [pc, #124]	@ (801c338 <tcp_rst+0x98>)
 801c2bc:	481f      	ldr	r0, [pc, #124]	@ (801c33c <tcp_rst+0x9c>)
 801c2be:	f001 fc9f 	bl	801dc00 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801c2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d106      	bne.n	801c2d6 <tcp_rst+0x36>
 801c2c8:	4b1a      	ldr	r3, [pc, #104]	@ (801c334 <tcp_rst+0x94>)
 801c2ca:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801c2ce:	491c      	ldr	r1, [pc, #112]	@ (801c340 <tcp_rst+0xa0>)
 801c2d0:	481a      	ldr	r0, [pc, #104]	@ (801c33c <tcp_rst+0x9c>)
 801c2d2:	f001 fc95 	bl	801dc00 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801c2da:	f24d 0316 	movw	r3, #53270	@ 0xd016
 801c2de:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801c2e0:	7dfb      	ldrb	r3, [r7, #23]
 801c2e2:	b29c      	uxth	r4, r3
 801c2e4:	68b8      	ldr	r0, [r7, #8]
 801c2e6:	f7f8 f9ce 	bl	8014686 <lwip_htonl>
 801c2ea:	4602      	mov	r2, r0
 801c2ec:	8abb      	ldrh	r3, [r7, #20]
 801c2ee:	9303      	str	r3, [sp, #12]
 801c2f0:	2314      	movs	r3, #20
 801c2f2:	9302      	str	r3, [sp, #8]
 801c2f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801c2f6:	9301      	str	r3, [sp, #4]
 801c2f8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801c2fa:	9300      	str	r3, [sp, #0]
 801c2fc:	4613      	mov	r3, r2
 801c2fe:	2200      	movs	r2, #0
 801c300:	4621      	mov	r1, r4
 801c302:	6878      	ldr	r0, [r7, #4]
 801c304:	f7ff fe94 	bl	801c030 <tcp_output_alloc_header_common>
 801c308:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801c30a:	693b      	ldr	r3, [r7, #16]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d00c      	beq.n	801c32a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c310:	7dfb      	ldrb	r3, [r7, #23]
 801c312:	2200      	movs	r2, #0
 801c314:	6939      	ldr	r1, [r7, #16]
 801c316:	68f8      	ldr	r0, [r7, #12]
 801c318:	f7ff ff3a 	bl	801c190 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801c31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c31e:	683a      	ldr	r2, [r7, #0]
 801c320:	6939      	ldr	r1, [r7, #16]
 801c322:	68f8      	ldr	r0, [r7, #12]
 801c324:	f7ff ff72 	bl	801c20c <tcp_output_control_segment>
 801c328:	e000      	b.n	801c32c <tcp_rst+0x8c>
    return;
 801c32a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801c32c:	371c      	adds	r7, #28
 801c32e:	46bd      	mov	sp, r7
 801c330:	bd90      	pop	{r4, r7, pc}
 801c332:	bf00      	nop
 801c334:	08022630 	.word	0x08022630
 801c338:	08022de4 	.word	0x08022de4
 801c33c:	080226b4 	.word	0x080226b4
 801c340:	08022e00 	.word	0x08022e00

0801c344 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801c344:	b590      	push	{r4, r7, lr}
 801c346:	b087      	sub	sp, #28
 801c348:	af00      	add	r7, sp, #0
 801c34a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801c34c:	2300      	movs	r3, #0
 801c34e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801c350:	2300      	movs	r3, #0
 801c352:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d106      	bne.n	801c368 <tcp_send_empty_ack+0x24>
 801c35a:	4b28      	ldr	r3, [pc, #160]	@ (801c3fc <tcp_send_empty_ack+0xb8>)
 801c35c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801c360:	4927      	ldr	r1, [pc, #156]	@ (801c400 <tcp_send_empty_ack+0xbc>)
 801c362:	4828      	ldr	r0, [pc, #160]	@ (801c404 <tcp_send_empty_ack+0xc0>)
 801c364:	f001 fc4c 	bl	801dc00 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c368:	7dfb      	ldrb	r3, [r7, #23]
 801c36a:	009b      	lsls	r3, r3, #2
 801c36c:	b2db      	uxtb	r3, r3
 801c36e:	f003 0304 	and.w	r3, r3, #4
 801c372:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801c374:	7d7b      	ldrb	r3, [r7, #21]
 801c376:	b29c      	uxth	r4, r3
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c37c:	4618      	mov	r0, r3
 801c37e:	f7f8 f982 	bl	8014686 <lwip_htonl>
 801c382:	4603      	mov	r3, r0
 801c384:	2200      	movs	r2, #0
 801c386:	4621      	mov	r1, r4
 801c388:	6878      	ldr	r0, [r7, #4]
 801c38a:	f7ff fec3 	bl	801c114 <tcp_output_alloc_header>
 801c38e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c390:	693b      	ldr	r3, [r7, #16]
 801c392:	2b00      	cmp	r3, #0
 801c394:	d109      	bne.n	801c3aa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	8b5b      	ldrh	r3, [r3, #26]
 801c39a:	f043 0303 	orr.w	r3, r3, #3
 801c39e:	b29a      	uxth	r2, r3
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c3a4:	f06f 0301 	mvn.w	r3, #1
 801c3a8:	e023      	b.n	801c3f2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c3aa:	7dbb      	ldrb	r3, [r7, #22]
 801c3ac:	7dfa      	ldrb	r2, [r7, #23]
 801c3ae:	6939      	ldr	r1, [r7, #16]
 801c3b0:	6878      	ldr	r0, [r7, #4]
 801c3b2:	f7ff feed 	bl	801c190 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c3b6:	687a      	ldr	r2, [r7, #4]
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	3304      	adds	r3, #4
 801c3bc:	6939      	ldr	r1, [r7, #16]
 801c3be:	6878      	ldr	r0, [r7, #4]
 801c3c0:	f7ff ff24 	bl	801c20c <tcp_output_control_segment>
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d007      	beq.n	801c3e0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	8b5b      	ldrh	r3, [r3, #26]
 801c3d4:	f043 0303 	orr.w	r3, r3, #3
 801c3d8:	b29a      	uxth	r2, r3
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	835a      	strh	r2, [r3, #26]
 801c3de:	e006      	b.n	801c3ee <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	8b5b      	ldrh	r3, [r3, #26]
 801c3e4:	f023 0303 	bic.w	r3, r3, #3
 801c3e8:	b29a      	uxth	r2, r3
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c3f2:	4618      	mov	r0, r3
 801c3f4:	371c      	adds	r7, #28
 801c3f6:	46bd      	mov	sp, r7
 801c3f8:	bd90      	pop	{r4, r7, pc}
 801c3fa:	bf00      	nop
 801c3fc:	08022630 	.word	0x08022630
 801c400:	08022e1c 	.word	0x08022e1c
 801c404:	080226b4 	.word	0x080226b4

0801c408 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c408:	b590      	push	{r4, r7, lr}
 801c40a:	b087      	sub	sp, #28
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c410:	2300      	movs	r3, #0
 801c412:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	2b00      	cmp	r3, #0
 801c418:	d106      	bne.n	801c428 <tcp_keepalive+0x20>
 801c41a:	4b18      	ldr	r3, [pc, #96]	@ (801c47c <tcp_keepalive+0x74>)
 801c41c:	f640 0224 	movw	r2, #2084	@ 0x824
 801c420:	4917      	ldr	r1, [pc, #92]	@ (801c480 <tcp_keepalive+0x78>)
 801c422:	4818      	ldr	r0, [pc, #96]	@ (801c484 <tcp_keepalive+0x7c>)
 801c424:	f001 fbec 	bl	801dc00 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c428:	7dfb      	ldrb	r3, [r7, #23]
 801c42a:	b29c      	uxth	r4, r3
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c430:	3b01      	subs	r3, #1
 801c432:	4618      	mov	r0, r3
 801c434:	f7f8 f927 	bl	8014686 <lwip_htonl>
 801c438:	4603      	mov	r3, r0
 801c43a:	2200      	movs	r2, #0
 801c43c:	4621      	mov	r1, r4
 801c43e:	6878      	ldr	r0, [r7, #4]
 801c440:	f7ff fe68 	bl	801c114 <tcp_output_alloc_header>
 801c444:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c446:	693b      	ldr	r3, [r7, #16]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d102      	bne.n	801c452 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c44c:	f04f 33ff 	mov.w	r3, #4294967295
 801c450:	e010      	b.n	801c474 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c452:	7dfb      	ldrb	r3, [r7, #23]
 801c454:	2200      	movs	r2, #0
 801c456:	6939      	ldr	r1, [r7, #16]
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f7ff fe99 	bl	801c190 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c45e:	687a      	ldr	r2, [r7, #4]
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	3304      	adds	r3, #4
 801c464:	6939      	ldr	r1, [r7, #16]
 801c466:	6878      	ldr	r0, [r7, #4]
 801c468:	f7ff fed0 	bl	801c20c <tcp_output_control_segment>
 801c46c:	4603      	mov	r3, r0
 801c46e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c474:	4618      	mov	r0, r3
 801c476:	371c      	adds	r7, #28
 801c478:	46bd      	mov	sp, r7
 801c47a:	bd90      	pop	{r4, r7, pc}
 801c47c:	08022630 	.word	0x08022630
 801c480:	08022e3c 	.word	0x08022e3c
 801c484:	080226b4 	.word	0x080226b4

0801c488 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c488:	b590      	push	{r4, r7, lr}
 801c48a:	b08b      	sub	sp, #44	@ 0x2c
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c490:	2300      	movs	r3, #0
 801c492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d106      	bne.n	801c4aa <tcp_zero_window_probe+0x22>
 801c49c:	4b4c      	ldr	r3, [pc, #304]	@ (801c5d0 <tcp_zero_window_probe+0x148>)
 801c49e:	f640 024f 	movw	r2, #2127	@ 0x84f
 801c4a2:	494c      	ldr	r1, [pc, #304]	@ (801c5d4 <tcp_zero_window_probe+0x14c>)
 801c4a4:	484c      	ldr	r0, [pc, #304]	@ (801c5d8 <tcp_zero_window_probe+0x150>)
 801c4a6:	f001 fbab 	bl	801dc00 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801c4ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c4b0:	6a3b      	ldr	r3, [r7, #32]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d101      	bne.n	801c4ba <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c4b6:	2300      	movs	r3, #0
 801c4b8:	e086      	b.n	801c5c8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801c4c0:	2bff      	cmp	r3, #255	@ 0xff
 801c4c2:	d007      	beq.n	801c4d4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801c4ca:	3301      	adds	r3, #1
 801c4cc:	b2da      	uxtb	r2, r3
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c4d4:	6a3b      	ldr	r3, [r7, #32]
 801c4d6:	68db      	ldr	r3, [r3, #12]
 801c4d8:	899b      	ldrh	r3, [r3, #12]
 801c4da:	b29b      	uxth	r3, r3
 801c4dc:	4618      	mov	r0, r3
 801c4de:	f7f8 f8bd 	bl	801465c <lwip_htons>
 801c4e2:	4603      	mov	r3, r0
 801c4e4:	b2db      	uxtb	r3, r3
 801c4e6:	f003 0301 	and.w	r3, r3, #1
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d005      	beq.n	801c4fa <tcp_zero_window_probe+0x72>
 801c4ee:	6a3b      	ldr	r3, [r7, #32]
 801c4f0:	891b      	ldrh	r3, [r3, #8]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d101      	bne.n	801c4fa <tcp_zero_window_probe+0x72>
 801c4f6:	2301      	movs	r3, #1
 801c4f8:	e000      	b.n	801c4fc <tcp_zero_window_probe+0x74>
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c4fe:	7ffb      	ldrb	r3, [r7, #31]
 801c500:	2b00      	cmp	r3, #0
 801c502:	bf0c      	ite	eq
 801c504:	2301      	moveq	r3, #1
 801c506:	2300      	movne	r3, #0
 801c508:	b2db      	uxtb	r3, r3
 801c50a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c50c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c510:	b299      	uxth	r1, r3
 801c512:	6a3b      	ldr	r3, [r7, #32]
 801c514:	68db      	ldr	r3, [r3, #12]
 801c516:	685b      	ldr	r3, [r3, #4]
 801c518:	8bba      	ldrh	r2, [r7, #28]
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f7ff fdfa 	bl	801c114 <tcp_output_alloc_header>
 801c520:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c522:	69bb      	ldr	r3, [r7, #24]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d102      	bne.n	801c52e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c528:	f04f 33ff 	mov.w	r3, #4294967295
 801c52c:	e04c      	b.n	801c5c8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c52e:	69bb      	ldr	r3, [r7, #24]
 801c530:	685b      	ldr	r3, [r3, #4]
 801c532:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c534:	7ffb      	ldrb	r3, [r7, #31]
 801c536:	2b00      	cmp	r3, #0
 801c538:	d011      	beq.n	801c55e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	899b      	ldrh	r3, [r3, #12]
 801c53e:	b29b      	uxth	r3, r3
 801c540:	b21b      	sxth	r3, r3
 801c542:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801c546:	b21c      	sxth	r4, r3
 801c548:	2011      	movs	r0, #17
 801c54a:	f7f8 f887 	bl	801465c <lwip_htons>
 801c54e:	4603      	mov	r3, r0
 801c550:	b21b      	sxth	r3, r3
 801c552:	4323      	orrs	r3, r4
 801c554:	b21b      	sxth	r3, r3
 801c556:	b29a      	uxth	r2, r3
 801c558:	697b      	ldr	r3, [r7, #20]
 801c55a:	819a      	strh	r2, [r3, #12]
 801c55c:	e010      	b.n	801c580 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c55e:	69bb      	ldr	r3, [r7, #24]
 801c560:	685b      	ldr	r3, [r3, #4]
 801c562:	3314      	adds	r3, #20
 801c564:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c566:	6a3b      	ldr	r3, [r7, #32]
 801c568:	6858      	ldr	r0, [r3, #4]
 801c56a:	6a3b      	ldr	r3, [r7, #32]
 801c56c:	685b      	ldr	r3, [r3, #4]
 801c56e:	891a      	ldrh	r2, [r3, #8]
 801c570:	6a3b      	ldr	r3, [r7, #32]
 801c572:	891b      	ldrh	r3, [r3, #8]
 801c574:	1ad3      	subs	r3, r2, r3
 801c576:	b29b      	uxth	r3, r3
 801c578:	2201      	movs	r2, #1
 801c57a:	6939      	ldr	r1, [r7, #16]
 801c57c:	f7f9 ff26 	bl	80163cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c580:	6a3b      	ldr	r3, [r7, #32]
 801c582:	68db      	ldr	r3, [r3, #12]
 801c584:	685b      	ldr	r3, [r3, #4]
 801c586:	4618      	mov	r0, r3
 801c588:	f7f8 f87d 	bl	8014686 <lwip_htonl>
 801c58c:	4603      	mov	r3, r0
 801c58e:	3301      	adds	r3, #1
 801c590:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	1ad3      	subs	r3, r2, r3
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	da02      	bge.n	801c5a4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	68fa      	ldr	r2, [r7, #12]
 801c5a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	69b9      	ldr	r1, [r7, #24]
 801c5ac:	6878      	ldr	r0, [r7, #4]
 801c5ae:	f7ff fdef 	bl	801c190 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c5b2:	687a      	ldr	r2, [r7, #4]
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	3304      	adds	r3, #4
 801c5b8:	69b9      	ldr	r1, [r7, #24]
 801c5ba:	6878      	ldr	r0, [r7, #4]
 801c5bc:	f7ff fe26 	bl	801c20c <tcp_output_control_segment>
 801c5c0:	4603      	mov	r3, r0
 801c5c2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c5c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	372c      	adds	r7, #44	@ 0x2c
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd90      	pop	{r4, r7, pc}
 801c5d0:	08022630 	.word	0x08022630
 801c5d4:	08022e58 	.word	0x08022e58
 801c5d8:	080226b4 	.word	0x080226b4

0801c5dc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b082      	sub	sp, #8
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c5e4:	f7f9 ffe0 	bl	80165a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c5e8:	4b0a      	ldr	r3, [pc, #40]	@ (801c614 <tcpip_tcp_timer+0x38>)
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d103      	bne.n	801c5f8 <tcpip_tcp_timer+0x1c>
 801c5f0:	4b09      	ldr	r3, [pc, #36]	@ (801c618 <tcpip_tcp_timer+0x3c>)
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d005      	beq.n	801c604 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c5f8:	2200      	movs	r2, #0
 801c5fa:	4908      	ldr	r1, [pc, #32]	@ (801c61c <tcpip_tcp_timer+0x40>)
 801c5fc:	20fa      	movs	r0, #250	@ 0xfa
 801c5fe:	f000 f8f3 	bl	801c7e8 <sys_timeout>
 801c602:	e003      	b.n	801c60c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c604:	4b06      	ldr	r3, [pc, #24]	@ (801c620 <tcpip_tcp_timer+0x44>)
 801c606:	2200      	movs	r2, #0
 801c608:	601a      	str	r2, [r3, #0]
  }
}
 801c60a:	bf00      	nop
 801c60c:	bf00      	nop
 801c60e:	3708      	adds	r7, #8
 801c610:	46bd      	mov	sp, r7
 801c612:	bd80      	pop	{r7, pc}
 801c614:	2000f9bc 	.word	0x2000f9bc
 801c618:	2000f9c0 	.word	0x2000f9c0
 801c61c:	0801c5dd 	.word	0x0801c5dd
 801c620:	2000fa08 	.word	0x2000fa08

0801c624 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c624:	b580      	push	{r7, lr}
 801c626:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c628:	4b0a      	ldr	r3, [pc, #40]	@ (801c654 <tcp_timer_needed+0x30>)
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d10f      	bne.n	801c650 <tcp_timer_needed+0x2c>
 801c630:	4b09      	ldr	r3, [pc, #36]	@ (801c658 <tcp_timer_needed+0x34>)
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d103      	bne.n	801c640 <tcp_timer_needed+0x1c>
 801c638:	4b08      	ldr	r3, [pc, #32]	@ (801c65c <tcp_timer_needed+0x38>)
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d007      	beq.n	801c650 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c640:	4b04      	ldr	r3, [pc, #16]	@ (801c654 <tcp_timer_needed+0x30>)
 801c642:	2201      	movs	r2, #1
 801c644:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c646:	2200      	movs	r2, #0
 801c648:	4905      	ldr	r1, [pc, #20]	@ (801c660 <tcp_timer_needed+0x3c>)
 801c64a:	20fa      	movs	r0, #250	@ 0xfa
 801c64c:	f000 f8cc 	bl	801c7e8 <sys_timeout>
  }
}
 801c650:	bf00      	nop
 801c652:	bd80      	pop	{r7, pc}
 801c654:	2000fa08 	.word	0x2000fa08
 801c658:	2000f9bc 	.word	0x2000f9bc
 801c65c:	2000f9c0 	.word	0x2000f9c0
 801c660:	0801c5dd 	.word	0x0801c5dd

0801c664 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c664:	b580      	push	{r7, lr}
 801c666:	b086      	sub	sp, #24
 801c668:	af00      	add	r7, sp, #0
 801c66a:	60f8      	str	r0, [r7, #12]
 801c66c:	60b9      	str	r1, [r7, #8]
 801c66e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c670:	200b      	movs	r0, #11
 801c672:	f7f8 fd37 	bl	80150e4 <memp_malloc>
 801c676:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	2b00      	cmp	r3, #0
 801c67c:	d109      	bne.n	801c692 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c67e:	693b      	ldr	r3, [r7, #16]
 801c680:	2b00      	cmp	r3, #0
 801c682:	d151      	bne.n	801c728 <sys_timeout_abs+0xc4>
 801c684:	4b2a      	ldr	r3, [pc, #168]	@ (801c730 <sys_timeout_abs+0xcc>)
 801c686:	22be      	movs	r2, #190	@ 0xbe
 801c688:	492a      	ldr	r1, [pc, #168]	@ (801c734 <sys_timeout_abs+0xd0>)
 801c68a:	482b      	ldr	r0, [pc, #172]	@ (801c738 <sys_timeout_abs+0xd4>)
 801c68c:	f001 fab8 	bl	801dc00 <iprintf>
    return;
 801c690:	e04a      	b.n	801c728 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c692:	693b      	ldr	r3, [r7, #16]
 801c694:	2200      	movs	r2, #0
 801c696:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c698:	693b      	ldr	r3, [r7, #16]
 801c69a:	68ba      	ldr	r2, [r7, #8]
 801c69c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c69e:	693b      	ldr	r3, [r7, #16]
 801c6a0:	687a      	ldr	r2, [r7, #4]
 801c6a2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c6a4:	693b      	ldr	r3, [r7, #16]
 801c6a6:	68fa      	ldr	r2, [r7, #12]
 801c6a8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c6aa:	4b24      	ldr	r3, [pc, #144]	@ (801c73c <sys_timeout_abs+0xd8>)
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d103      	bne.n	801c6ba <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c6b2:	4a22      	ldr	r2, [pc, #136]	@ (801c73c <sys_timeout_abs+0xd8>)
 801c6b4:	693b      	ldr	r3, [r7, #16]
 801c6b6:	6013      	str	r3, [r2, #0]
    return;
 801c6b8:	e037      	b.n	801c72a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c6ba:	693b      	ldr	r3, [r7, #16]
 801c6bc:	685a      	ldr	r2, [r3, #4]
 801c6be:	4b1f      	ldr	r3, [pc, #124]	@ (801c73c <sys_timeout_abs+0xd8>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	1ad3      	subs	r3, r2, r3
 801c6c6:	0fdb      	lsrs	r3, r3, #31
 801c6c8:	f003 0301 	and.w	r3, r3, #1
 801c6cc:	b2db      	uxtb	r3, r3
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d007      	beq.n	801c6e2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c6d2:	4b1a      	ldr	r3, [pc, #104]	@ (801c73c <sys_timeout_abs+0xd8>)
 801c6d4:	681a      	ldr	r2, [r3, #0]
 801c6d6:	693b      	ldr	r3, [r7, #16]
 801c6d8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c6da:	4a18      	ldr	r2, [pc, #96]	@ (801c73c <sys_timeout_abs+0xd8>)
 801c6dc:	693b      	ldr	r3, [r7, #16]
 801c6de:	6013      	str	r3, [r2, #0]
 801c6e0:	e023      	b.n	801c72a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c6e2:	4b16      	ldr	r3, [pc, #88]	@ (801c73c <sys_timeout_abs+0xd8>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	617b      	str	r3, [r7, #20]
 801c6e8:	e01a      	b.n	801c720 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c6ea:	697b      	ldr	r3, [r7, #20]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d00b      	beq.n	801c70a <sys_timeout_abs+0xa6>
 801c6f2:	693b      	ldr	r3, [r7, #16]
 801c6f4:	685a      	ldr	r2, [r3, #4]
 801c6f6:	697b      	ldr	r3, [r7, #20]
 801c6f8:	681b      	ldr	r3, [r3, #0]
 801c6fa:	685b      	ldr	r3, [r3, #4]
 801c6fc:	1ad3      	subs	r3, r2, r3
 801c6fe:	0fdb      	lsrs	r3, r3, #31
 801c700:	f003 0301 	and.w	r3, r3, #1
 801c704:	b2db      	uxtb	r3, r3
 801c706:	2b00      	cmp	r3, #0
 801c708:	d007      	beq.n	801c71a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c70a:	697b      	ldr	r3, [r7, #20]
 801c70c:	681a      	ldr	r2, [r3, #0]
 801c70e:	693b      	ldr	r3, [r7, #16]
 801c710:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c712:	697b      	ldr	r3, [r7, #20]
 801c714:	693a      	ldr	r2, [r7, #16]
 801c716:	601a      	str	r2, [r3, #0]
        break;
 801c718:	e007      	b.n	801c72a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c71a:	697b      	ldr	r3, [r7, #20]
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	617b      	str	r3, [r7, #20]
 801c720:	697b      	ldr	r3, [r7, #20]
 801c722:	2b00      	cmp	r3, #0
 801c724:	d1e1      	bne.n	801c6ea <sys_timeout_abs+0x86>
 801c726:	e000      	b.n	801c72a <sys_timeout_abs+0xc6>
    return;
 801c728:	bf00      	nop
      }
    }
  }
}
 801c72a:	3718      	adds	r7, #24
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}
 801c730:	08022e7c 	.word	0x08022e7c
 801c734:	08022ee0 	.word	0x08022ee0
 801c738:	08022f20 	.word	0x08022f20
 801c73c:	2000fa00 	.word	0x2000fa00

0801c740 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c740:	b580      	push	{r7, lr}
 801c742:	b086      	sub	sp, #24
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c74c:	697b      	ldr	r3, [r7, #20]
 801c74e:	685b      	ldr	r3, [r3, #4]
 801c750:	4798      	blx	r3

  now = sys_now();
 801c752:	f7e4 fc73 	bl	800103c <sys_now>
 801c756:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	681a      	ldr	r2, [r3, #0]
 801c75c:	4b0f      	ldr	r3, [pc, #60]	@ (801c79c <lwip_cyclic_timer+0x5c>)
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	4413      	add	r3, r2
 801c762:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c764:	68fa      	ldr	r2, [r7, #12]
 801c766:	693b      	ldr	r3, [r7, #16]
 801c768:	1ad3      	subs	r3, r2, r3
 801c76a:	0fdb      	lsrs	r3, r3, #31
 801c76c:	f003 0301 	and.w	r3, r3, #1
 801c770:	b2db      	uxtb	r3, r3
 801c772:	2b00      	cmp	r3, #0
 801c774:	d009      	beq.n	801c78a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c776:	697b      	ldr	r3, [r7, #20]
 801c778:	681a      	ldr	r2, [r3, #0]
 801c77a:	693b      	ldr	r3, [r7, #16]
 801c77c:	4413      	add	r3, r2
 801c77e:	687a      	ldr	r2, [r7, #4]
 801c780:	4907      	ldr	r1, [pc, #28]	@ (801c7a0 <lwip_cyclic_timer+0x60>)
 801c782:	4618      	mov	r0, r3
 801c784:	f7ff ff6e 	bl	801c664 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c788:	e004      	b.n	801c794 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c78a:	687a      	ldr	r2, [r7, #4]
 801c78c:	4904      	ldr	r1, [pc, #16]	@ (801c7a0 <lwip_cyclic_timer+0x60>)
 801c78e:	68f8      	ldr	r0, [r7, #12]
 801c790:	f7ff ff68 	bl	801c664 <sys_timeout_abs>
}
 801c794:	bf00      	nop
 801c796:	3718      	adds	r7, #24
 801c798:	46bd      	mov	sp, r7
 801c79a:	bd80      	pop	{r7, pc}
 801c79c:	2000fa04 	.word	0x2000fa04
 801c7a0:	0801c741 	.word	0x0801c741

0801c7a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b082      	sub	sp, #8
 801c7a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c7aa:	2301      	movs	r3, #1
 801c7ac:	607b      	str	r3, [r7, #4]
 801c7ae:	e00e      	b.n	801c7ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c7b0:	4a0b      	ldr	r2, [pc, #44]	@ (801c7e0 <sys_timeouts_init+0x3c>)
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	00db      	lsls	r3, r3, #3
 801c7bc:	4a08      	ldr	r2, [pc, #32]	@ (801c7e0 <sys_timeouts_init+0x3c>)
 801c7be:	4413      	add	r3, r2
 801c7c0:	461a      	mov	r2, r3
 801c7c2:	4908      	ldr	r1, [pc, #32]	@ (801c7e4 <sys_timeouts_init+0x40>)
 801c7c4:	f000 f810 	bl	801c7e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	3301      	adds	r3, #1
 801c7cc:	607b      	str	r3, [r7, #4]
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	2b05      	cmp	r3, #5
 801c7d2:	d9ed      	bls.n	801c7b0 <sys_timeouts_init+0xc>
  }
}
 801c7d4:	bf00      	nop
 801c7d6:	bf00      	nop
 801c7d8:	3708      	adds	r7, #8
 801c7da:	46bd      	mov	sp, r7
 801c7dc:	bd80      	pop	{r7, pc}
 801c7de:	bf00      	nop
 801c7e0:	08023bcc 	.word	0x08023bcc
 801c7e4:	0801c741 	.word	0x0801c741

0801c7e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c7e8:	b580      	push	{r7, lr}
 801c7ea:	b086      	sub	sp, #24
 801c7ec:	af00      	add	r7, sp, #0
 801c7ee:	60f8      	str	r0, [r7, #12]
 801c7f0:	60b9      	str	r1, [r7, #8]
 801c7f2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c7fa:	d306      	bcc.n	801c80a <sys_timeout+0x22>
 801c7fc:	4b0a      	ldr	r3, [pc, #40]	@ (801c828 <sys_timeout+0x40>)
 801c7fe:	f240 1229 	movw	r2, #297	@ 0x129
 801c802:	490a      	ldr	r1, [pc, #40]	@ (801c82c <sys_timeout+0x44>)
 801c804:	480a      	ldr	r0, [pc, #40]	@ (801c830 <sys_timeout+0x48>)
 801c806:	f001 f9fb 	bl	801dc00 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c80a:	f7e4 fc17 	bl	800103c <sys_now>
 801c80e:	4602      	mov	r2, r0
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	4413      	add	r3, r2
 801c814:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c816:	687a      	ldr	r2, [r7, #4]
 801c818:	68b9      	ldr	r1, [r7, #8]
 801c81a:	6978      	ldr	r0, [r7, #20]
 801c81c:	f7ff ff22 	bl	801c664 <sys_timeout_abs>
#endif
}
 801c820:	bf00      	nop
 801c822:	3718      	adds	r7, #24
 801c824:	46bd      	mov	sp, r7
 801c826:	bd80      	pop	{r7, pc}
 801c828:	08022e7c 	.word	0x08022e7c
 801c82c:	08022f48 	.word	0x08022f48
 801c830:	08022f20 	.word	0x08022f20

0801c834 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c834:	b580      	push	{r7, lr}
 801c836:	b084      	sub	sp, #16
 801c838:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c83a:	f7e4 fbff 	bl	800103c <sys_now>
 801c83e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c840:	4b17      	ldr	r3, [pc, #92]	@ (801c8a0 <sys_check_timeouts+0x6c>)
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c846:	68bb      	ldr	r3, [r7, #8]
 801c848:	2b00      	cmp	r3, #0
 801c84a:	d022      	beq.n	801c892 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c84c:	68bb      	ldr	r3, [r7, #8]
 801c84e:	685b      	ldr	r3, [r3, #4]
 801c850:	68fa      	ldr	r2, [r7, #12]
 801c852:	1ad3      	subs	r3, r2, r3
 801c854:	0fdb      	lsrs	r3, r3, #31
 801c856:	f003 0301 	and.w	r3, r3, #1
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	2b00      	cmp	r3, #0
 801c85e:	d11a      	bne.n	801c896 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c860:	68bb      	ldr	r3, [r7, #8]
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	4a0e      	ldr	r2, [pc, #56]	@ (801c8a0 <sys_check_timeouts+0x6c>)
 801c866:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c868:	68bb      	ldr	r3, [r7, #8]
 801c86a:	689b      	ldr	r3, [r3, #8]
 801c86c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c86e:	68bb      	ldr	r3, [r7, #8]
 801c870:	68db      	ldr	r3, [r3, #12]
 801c872:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	685b      	ldr	r3, [r3, #4]
 801c878:	4a0a      	ldr	r2, [pc, #40]	@ (801c8a4 <sys_check_timeouts+0x70>)
 801c87a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c87c:	68b9      	ldr	r1, [r7, #8]
 801c87e:	200b      	movs	r0, #11
 801c880:	f7f8 fca6 	bl	80151d0 <memp_free>
    if (handler != NULL) {
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	2b00      	cmp	r3, #0
 801c888:	d0da      	beq.n	801c840 <sys_check_timeouts+0xc>
      handler(arg);
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	6838      	ldr	r0, [r7, #0]
 801c88e:	4798      	blx	r3
  do {
 801c890:	e7d6      	b.n	801c840 <sys_check_timeouts+0xc>
      return;
 801c892:	bf00      	nop
 801c894:	e000      	b.n	801c898 <sys_check_timeouts+0x64>
      return;
 801c896:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c898:	3710      	adds	r7, #16
 801c89a:	46bd      	mov	sp, r7
 801c89c:	bd80      	pop	{r7, pc}
 801c89e:	bf00      	nop
 801c8a0:	2000fa00 	.word	0x2000fa00
 801c8a4:	2000fa04 	.word	0x2000fa04

0801c8a8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c8a8:	b580      	push	{r7, lr}
 801c8aa:	b082      	sub	sp, #8
 801c8ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c8ae:	4b16      	ldr	r3, [pc, #88]	@ (801c908 <sys_timeouts_sleeptime+0x60>)
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	d102      	bne.n	801c8bc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c8b6:	f04f 33ff 	mov.w	r3, #4294967295
 801c8ba:	e020      	b.n	801c8fe <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c8bc:	f7e4 fbbe 	bl	800103c <sys_now>
 801c8c0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c8c2:	4b11      	ldr	r3, [pc, #68]	@ (801c908 <sys_timeouts_sleeptime+0x60>)
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	685a      	ldr	r2, [r3, #4]
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	1ad3      	subs	r3, r2, r3
 801c8cc:	0fdb      	lsrs	r3, r3, #31
 801c8ce:	f003 0301 	and.w	r3, r3, #1
 801c8d2:	b2db      	uxtb	r3, r3
 801c8d4:	2b00      	cmp	r3, #0
 801c8d6:	d001      	beq.n	801c8dc <sys_timeouts_sleeptime+0x34>
    return 0;
 801c8d8:	2300      	movs	r3, #0
 801c8da:	e010      	b.n	801c8fe <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c8dc:	4b0a      	ldr	r3, [pc, #40]	@ (801c908 <sys_timeouts_sleeptime+0x60>)
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	685a      	ldr	r2, [r3, #4]
 801c8e2:	687b      	ldr	r3, [r7, #4]
 801c8e4:	1ad3      	subs	r3, r2, r3
 801c8e6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c8e8:	683b      	ldr	r3, [r7, #0]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	da06      	bge.n	801c8fc <sys_timeouts_sleeptime+0x54>
 801c8ee:	4b07      	ldr	r3, [pc, #28]	@ (801c90c <sys_timeouts_sleeptime+0x64>)
 801c8f0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801c8f4:	4906      	ldr	r1, [pc, #24]	@ (801c910 <sys_timeouts_sleeptime+0x68>)
 801c8f6:	4807      	ldr	r0, [pc, #28]	@ (801c914 <sys_timeouts_sleeptime+0x6c>)
 801c8f8:	f001 f982 	bl	801dc00 <iprintf>
    return ret;
 801c8fc:	683b      	ldr	r3, [r7, #0]
  }
}
 801c8fe:	4618      	mov	r0, r3
 801c900:	3708      	adds	r7, #8
 801c902:	46bd      	mov	sp, r7
 801c904:	bd80      	pop	{r7, pc}
 801c906:	bf00      	nop
 801c908:	2000fa00 	.word	0x2000fa00
 801c90c:	08022e7c 	.word	0x08022e7c
 801c910:	08022f80 	.word	0x08022f80
 801c914:	08022f20 	.word	0x08022f20

0801c918 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c918:	b580      	push	{r7, lr}
 801c91a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c91c:	f001 f870 	bl	801da00 <rand>
 801c920:	4603      	mov	r3, r0
 801c922:	b29b      	uxth	r3, r3
 801c924:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c928:	b29b      	uxth	r3, r3
 801c92a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801c92e:	b29a      	uxth	r2, r3
 801c930:	4b01      	ldr	r3, [pc, #4]	@ (801c938 <udp_init+0x20>)
 801c932:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c934:	bf00      	nop
 801c936:	bd80      	pop	{r7, pc}
 801c938:	20000040 	.word	0x20000040

0801c93c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801c93c:	b480      	push	{r7}
 801c93e:	b083      	sub	sp, #12
 801c940:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801c942:	2300      	movs	r3, #0
 801c944:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c946:	4b17      	ldr	r3, [pc, #92]	@ (801c9a4 <udp_new_port+0x68>)
 801c948:	881b      	ldrh	r3, [r3, #0]
 801c94a:	1c5a      	adds	r2, r3, #1
 801c94c:	b291      	uxth	r1, r2
 801c94e:	4a15      	ldr	r2, [pc, #84]	@ (801c9a4 <udp_new_port+0x68>)
 801c950:	8011      	strh	r1, [r2, #0]
 801c952:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c956:	4293      	cmp	r3, r2
 801c958:	d103      	bne.n	801c962 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c95a:	4b12      	ldr	r3, [pc, #72]	@ (801c9a4 <udp_new_port+0x68>)
 801c95c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801c960:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c962:	4b11      	ldr	r3, [pc, #68]	@ (801c9a8 <udp_new_port+0x6c>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	603b      	str	r3, [r7, #0]
 801c968:	e011      	b.n	801c98e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c96a:	683b      	ldr	r3, [r7, #0]
 801c96c:	8a5a      	ldrh	r2, [r3, #18]
 801c96e:	4b0d      	ldr	r3, [pc, #52]	@ (801c9a4 <udp_new_port+0x68>)
 801c970:	881b      	ldrh	r3, [r3, #0]
 801c972:	429a      	cmp	r2, r3
 801c974:	d108      	bne.n	801c988 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c976:	88fb      	ldrh	r3, [r7, #6]
 801c978:	3301      	adds	r3, #1
 801c97a:	80fb      	strh	r3, [r7, #6]
 801c97c:	88fb      	ldrh	r3, [r7, #6]
 801c97e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801c982:	d3e0      	bcc.n	801c946 <udp_new_port+0xa>
        return 0;
 801c984:	2300      	movs	r3, #0
 801c986:	e007      	b.n	801c998 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c988:	683b      	ldr	r3, [r7, #0]
 801c98a:	68db      	ldr	r3, [r3, #12]
 801c98c:	603b      	str	r3, [r7, #0]
 801c98e:	683b      	ldr	r3, [r7, #0]
 801c990:	2b00      	cmp	r3, #0
 801c992:	d1ea      	bne.n	801c96a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c994:	4b03      	ldr	r3, [pc, #12]	@ (801c9a4 <udp_new_port+0x68>)
 801c996:	881b      	ldrh	r3, [r3, #0]
}
 801c998:	4618      	mov	r0, r3
 801c99a:	370c      	adds	r7, #12
 801c99c:	46bd      	mov	sp, r7
 801c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9a2:	4770      	bx	lr
 801c9a4:	20000040 	.word	0x20000040
 801c9a8:	2000fa0c 	.word	0x2000fa0c

0801c9ac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b084      	sub	sp, #16
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	60f8      	str	r0, [r7, #12]
 801c9b4:	60b9      	str	r1, [r7, #8]
 801c9b6:	4613      	mov	r3, r2
 801c9b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c9ba:	68fb      	ldr	r3, [r7, #12]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d105      	bne.n	801c9cc <udp_input_local_match+0x20>
 801c9c0:	4b27      	ldr	r3, [pc, #156]	@ (801ca60 <udp_input_local_match+0xb4>)
 801c9c2:	2287      	movs	r2, #135	@ 0x87
 801c9c4:	4927      	ldr	r1, [pc, #156]	@ (801ca64 <udp_input_local_match+0xb8>)
 801c9c6:	4828      	ldr	r0, [pc, #160]	@ (801ca68 <udp_input_local_match+0xbc>)
 801c9c8:	f001 f91a 	bl	801dc00 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c9cc:	68bb      	ldr	r3, [r7, #8]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	d105      	bne.n	801c9de <udp_input_local_match+0x32>
 801c9d2:	4b23      	ldr	r3, [pc, #140]	@ (801ca60 <udp_input_local_match+0xb4>)
 801c9d4:	2288      	movs	r2, #136	@ 0x88
 801c9d6:	4925      	ldr	r1, [pc, #148]	@ (801ca6c <udp_input_local_match+0xc0>)
 801c9d8:	4823      	ldr	r0, [pc, #140]	@ (801ca68 <udp_input_local_match+0xbc>)
 801c9da:	f001 f911 	bl	801dc00 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	7a1b      	ldrb	r3, [r3, #8]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d00b      	beq.n	801c9fe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	7a1a      	ldrb	r2, [r3, #8]
 801c9ea:	4b21      	ldr	r3, [pc, #132]	@ (801ca70 <udp_input_local_match+0xc4>)
 801c9ec:	685b      	ldr	r3, [r3, #4]
 801c9ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801c9f2:	3301      	adds	r3, #1
 801c9f4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c9f6:	429a      	cmp	r2, r3
 801c9f8:	d001      	beq.n	801c9fe <udp_input_local_match+0x52>
    return 0;
 801c9fa:	2300      	movs	r3, #0
 801c9fc:	e02b      	b.n	801ca56 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c9fe:	79fb      	ldrb	r3, [r7, #7]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d018      	beq.n	801ca36 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d013      	beq.n	801ca32 <udp_input_local_match+0x86>
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d00f      	beq.n	801ca32 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ca12:	4b17      	ldr	r3, [pc, #92]	@ (801ca70 <udp_input_local_match+0xc4>)
 801ca14:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ca16:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ca1a:	d00a      	beq.n	801ca32 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	681a      	ldr	r2, [r3, #0]
 801ca20:	4b13      	ldr	r3, [pc, #76]	@ (801ca70 <udp_input_local_match+0xc4>)
 801ca22:	695b      	ldr	r3, [r3, #20]
 801ca24:	405a      	eors	r2, r3
 801ca26:	68bb      	ldr	r3, [r7, #8]
 801ca28:	3308      	adds	r3, #8
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d110      	bne.n	801ca54 <udp_input_local_match+0xa8>
          return 1;
 801ca32:	2301      	movs	r3, #1
 801ca34:	e00f      	b.n	801ca56 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ca36:	68fb      	ldr	r3, [r7, #12]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d009      	beq.n	801ca50 <udp_input_local_match+0xa4>
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d005      	beq.n	801ca50 <udp_input_local_match+0xa4>
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	681a      	ldr	r2, [r3, #0]
 801ca48:	4b09      	ldr	r3, [pc, #36]	@ (801ca70 <udp_input_local_match+0xc4>)
 801ca4a:	695b      	ldr	r3, [r3, #20]
 801ca4c:	429a      	cmp	r2, r3
 801ca4e:	d101      	bne.n	801ca54 <udp_input_local_match+0xa8>
        return 1;
 801ca50:	2301      	movs	r3, #1
 801ca52:	e000      	b.n	801ca56 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ca54:	2300      	movs	r3, #0
}
 801ca56:	4618      	mov	r0, r3
 801ca58:	3710      	adds	r7, #16
 801ca5a:	46bd      	mov	sp, r7
 801ca5c:	bd80      	pop	{r7, pc}
 801ca5e:	bf00      	nop
 801ca60:	08022f94 	.word	0x08022f94
 801ca64:	08022ff4 	.word	0x08022ff4
 801ca68:	08023018 	.word	0x08023018
 801ca6c:	08023040 	.word	0x08023040
 801ca70:	20008854 	.word	0x20008854

0801ca74 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ca74:	b590      	push	{r4, r7, lr}
 801ca76:	b08d      	sub	sp, #52	@ 0x34
 801ca78:	af02      	add	r7, sp, #8
 801ca7a:	6078      	str	r0, [r7, #4]
 801ca7c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801ca7e:	2300      	movs	r3, #0
 801ca80:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ca82:	687b      	ldr	r3, [r7, #4]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d105      	bne.n	801ca94 <udp_input+0x20>
 801ca88:	4b7c      	ldr	r3, [pc, #496]	@ (801cc7c <udp_input+0x208>)
 801ca8a:	22cf      	movs	r2, #207	@ 0xcf
 801ca8c:	497c      	ldr	r1, [pc, #496]	@ (801cc80 <udp_input+0x20c>)
 801ca8e:	487d      	ldr	r0, [pc, #500]	@ (801cc84 <udp_input+0x210>)
 801ca90:	f001 f8b6 	bl	801dc00 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ca94:	683b      	ldr	r3, [r7, #0]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d105      	bne.n	801caa6 <udp_input+0x32>
 801ca9a:	4b78      	ldr	r3, [pc, #480]	@ (801cc7c <udp_input+0x208>)
 801ca9c:	22d0      	movs	r2, #208	@ 0xd0
 801ca9e:	497a      	ldr	r1, [pc, #488]	@ (801cc88 <udp_input+0x214>)
 801caa0:	4878      	ldr	r0, [pc, #480]	@ (801cc84 <udp_input+0x210>)
 801caa2:	f001 f8ad 	bl	801dc00 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	895b      	ldrh	r3, [r3, #10]
 801caaa:	2b07      	cmp	r3, #7
 801caac:	d803      	bhi.n	801cab6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801caae:	6878      	ldr	r0, [r7, #4]
 801cab0:	f7f9 fa86 	bl	8015fc0 <pbuf_free>
    goto end;
 801cab4:	e0de      	b.n	801cc74 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	685b      	ldr	r3, [r3, #4]
 801caba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801cabc:	4b73      	ldr	r3, [pc, #460]	@ (801cc8c <udp_input+0x218>)
 801cabe:	695b      	ldr	r3, [r3, #20]
 801cac0:	4a72      	ldr	r2, [pc, #456]	@ (801cc8c <udp_input+0x218>)
 801cac2:	6812      	ldr	r2, [r2, #0]
 801cac4:	4611      	mov	r1, r2
 801cac6:	4618      	mov	r0, r3
 801cac8:	f7f6 ff48 	bl	801395c <ip4_addr_isbroadcast_u32>
 801cacc:	4603      	mov	r3, r0
 801cace:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801cad0:	697b      	ldr	r3, [r7, #20]
 801cad2:	881b      	ldrh	r3, [r3, #0]
 801cad4:	b29b      	uxth	r3, r3
 801cad6:	4618      	mov	r0, r3
 801cad8:	f7f7 fdc0 	bl	801465c <lwip_htons>
 801cadc:	4603      	mov	r3, r0
 801cade:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801cae0:	697b      	ldr	r3, [r7, #20]
 801cae2:	885b      	ldrh	r3, [r3, #2]
 801cae4:	b29b      	uxth	r3, r3
 801cae6:	4618      	mov	r0, r3
 801cae8:	f7f7 fdb8 	bl	801465c <lwip_htons>
 801caec:	4603      	mov	r3, r0
 801caee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801caf0:	2300      	movs	r3, #0
 801caf2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801caf4:	2300      	movs	r3, #0
 801caf6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801caf8:	2300      	movs	r3, #0
 801cafa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cafc:	4b64      	ldr	r3, [pc, #400]	@ (801cc90 <udp_input+0x21c>)
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	627b      	str	r3, [r7, #36]	@ 0x24
 801cb02:	e054      	b.n	801cbae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb06:	8a5b      	ldrh	r3, [r3, #18]
 801cb08:	89fa      	ldrh	r2, [r7, #14]
 801cb0a:	429a      	cmp	r2, r3
 801cb0c:	d14a      	bne.n	801cba4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801cb0e:	7cfb      	ldrb	r3, [r7, #19]
 801cb10:	461a      	mov	r2, r3
 801cb12:	6839      	ldr	r1, [r7, #0]
 801cb14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb16:	f7ff ff49 	bl	801c9ac <udp_input_local_match>
 801cb1a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d041      	beq.n	801cba4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801cb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb22:	7c1b      	ldrb	r3, [r3, #16]
 801cb24:	f003 0304 	and.w	r3, r3, #4
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d11d      	bne.n	801cb68 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801cb2c:	69fb      	ldr	r3, [r7, #28]
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d102      	bne.n	801cb38 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801cb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb34:	61fb      	str	r3, [r7, #28]
 801cb36:	e017      	b.n	801cb68 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801cb38:	7cfb      	ldrb	r3, [r7, #19]
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d014      	beq.n	801cb68 <udp_input+0xf4>
 801cb3e:	4b53      	ldr	r3, [pc, #332]	@ (801cc8c <udp_input+0x218>)
 801cb40:	695b      	ldr	r3, [r3, #20]
 801cb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb46:	d10f      	bne.n	801cb68 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801cb48:	69fb      	ldr	r3, [r7, #28]
 801cb4a:	681a      	ldr	r2, [r3, #0]
 801cb4c:	683b      	ldr	r3, [r7, #0]
 801cb4e:	3304      	adds	r3, #4
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	429a      	cmp	r2, r3
 801cb54:	d008      	beq.n	801cb68 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801cb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb58:	681a      	ldr	r2, [r3, #0]
 801cb5a:	683b      	ldr	r3, [r7, #0]
 801cb5c:	3304      	adds	r3, #4
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	429a      	cmp	r2, r3
 801cb62:	d101      	bne.n	801cb68 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb66:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801cb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb6a:	8a9b      	ldrh	r3, [r3, #20]
 801cb6c:	8a3a      	ldrh	r2, [r7, #16]
 801cb6e:	429a      	cmp	r2, r3
 801cb70:	d118      	bne.n	801cba4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb74:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d005      	beq.n	801cb86 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb7c:	685a      	ldr	r2, [r3, #4]
 801cb7e:	4b43      	ldr	r3, [pc, #268]	@ (801cc8c <udp_input+0x218>)
 801cb80:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801cb82:	429a      	cmp	r2, r3
 801cb84:	d10e      	bne.n	801cba4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801cb86:	6a3b      	ldr	r3, [r7, #32]
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d014      	beq.n	801cbb6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801cb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb8e:	68da      	ldr	r2, [r3, #12]
 801cb90:	6a3b      	ldr	r3, [r7, #32]
 801cb92:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801cb94:	4b3e      	ldr	r3, [pc, #248]	@ (801cc90 <udp_input+0x21c>)
 801cb96:	681a      	ldr	r2, [r3, #0]
 801cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb9a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801cb9c:	4a3c      	ldr	r2, [pc, #240]	@ (801cc90 <udp_input+0x21c>)
 801cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cba0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801cba2:	e008      	b.n	801cbb6 <udp_input+0x142>
      }
    }

    prev = pcb;
 801cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cba6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801cba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbaa:	68db      	ldr	r3, [r3, #12]
 801cbac:	627b      	str	r3, [r7, #36]	@ 0x24
 801cbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbb0:	2b00      	cmp	r3, #0
 801cbb2:	d1a7      	bne.n	801cb04 <udp_input+0x90>
 801cbb4:	e000      	b.n	801cbb8 <udp_input+0x144>
        break;
 801cbb6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801cbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d101      	bne.n	801cbc2 <udp_input+0x14e>
    pcb = uncon_pcb;
 801cbbe:	69fb      	ldr	r3, [r7, #28]
 801cbc0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801cbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d002      	beq.n	801cbce <udp_input+0x15a>
    for_us = 1;
 801cbc8:	2301      	movs	r3, #1
 801cbca:	76fb      	strb	r3, [r7, #27]
 801cbcc:	e00a      	b.n	801cbe4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801cbce:	683b      	ldr	r3, [r7, #0]
 801cbd0:	3304      	adds	r3, #4
 801cbd2:	681a      	ldr	r2, [r3, #0]
 801cbd4:	4b2d      	ldr	r3, [pc, #180]	@ (801cc8c <udp_input+0x218>)
 801cbd6:	695b      	ldr	r3, [r3, #20]
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	bf0c      	ite	eq
 801cbdc:	2301      	moveq	r3, #1
 801cbde:	2300      	movne	r3, #0
 801cbe0:	b2db      	uxtb	r3, r3
 801cbe2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801cbe4:	7efb      	ldrb	r3, [r7, #27]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d041      	beq.n	801cc6e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801cbea:	2108      	movs	r1, #8
 801cbec:	6878      	ldr	r0, [r7, #4]
 801cbee:	f7f9 f92f 	bl	8015e50 <pbuf_remove_header>
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d00a      	beq.n	801cc0e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801cbf8:	4b20      	ldr	r3, [pc, #128]	@ (801cc7c <udp_input+0x208>)
 801cbfa:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801cbfe:	4925      	ldr	r1, [pc, #148]	@ (801cc94 <udp_input+0x220>)
 801cc00:	4820      	ldr	r0, [pc, #128]	@ (801cc84 <udp_input+0x210>)
 801cc02:	f000 fffd 	bl	801dc00 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801cc06:	6878      	ldr	r0, [r7, #4]
 801cc08:	f7f9 f9da 	bl	8015fc0 <pbuf_free>
      goto end;
 801cc0c:	e032      	b.n	801cc74 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801cc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d012      	beq.n	801cc3a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc16:	6a1b      	ldr	r3, [r3, #32]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	d00a      	beq.n	801cc32 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801cc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc1e:	6a1c      	ldr	r4, [r3, #32]
 801cc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc22:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801cc24:	8a3b      	ldrh	r3, [r7, #16]
 801cc26:	9300      	str	r3, [sp, #0]
 801cc28:	4b1b      	ldr	r3, [pc, #108]	@ (801cc98 <udp_input+0x224>)
 801cc2a:	687a      	ldr	r2, [r7, #4]
 801cc2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cc2e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801cc30:	e021      	b.n	801cc76 <udp_input+0x202>
        pbuf_free(p);
 801cc32:	6878      	ldr	r0, [r7, #4]
 801cc34:	f7f9 f9c4 	bl	8015fc0 <pbuf_free>
        goto end;
 801cc38:	e01c      	b.n	801cc74 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801cc3a:	7cfb      	ldrb	r3, [r7, #19]
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d112      	bne.n	801cc66 <udp_input+0x1f2>
 801cc40:	4b12      	ldr	r3, [pc, #72]	@ (801cc8c <udp_input+0x218>)
 801cc42:	695b      	ldr	r3, [r3, #20]
 801cc44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cc48:	2be0      	cmp	r3, #224	@ 0xe0
 801cc4a:	d00c      	beq.n	801cc66 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801cc4c:	4b0f      	ldr	r3, [pc, #60]	@ (801cc8c <udp_input+0x218>)
 801cc4e:	899b      	ldrh	r3, [r3, #12]
 801cc50:	3308      	adds	r3, #8
 801cc52:	b29b      	uxth	r3, r3
 801cc54:	b21b      	sxth	r3, r3
 801cc56:	4619      	mov	r1, r3
 801cc58:	6878      	ldr	r0, [r7, #4]
 801cc5a:	f7f9 f96c 	bl	8015f36 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801cc5e:	2103      	movs	r1, #3
 801cc60:	6878      	ldr	r0, [r7, #4]
 801cc62:	f7f5 fded 	bl	8012840 <icmp_dest_unreach>
      pbuf_free(p);
 801cc66:	6878      	ldr	r0, [r7, #4]
 801cc68:	f7f9 f9aa 	bl	8015fc0 <pbuf_free>
  return;
 801cc6c:	e003      	b.n	801cc76 <udp_input+0x202>
    pbuf_free(p);
 801cc6e:	6878      	ldr	r0, [r7, #4]
 801cc70:	f7f9 f9a6 	bl	8015fc0 <pbuf_free>
  return;
 801cc74:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801cc76:	372c      	adds	r7, #44	@ 0x2c
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	bd90      	pop	{r4, r7, pc}
 801cc7c:	08022f94 	.word	0x08022f94
 801cc80:	08023068 	.word	0x08023068
 801cc84:	08023018 	.word	0x08023018
 801cc88:	08023080 	.word	0x08023080
 801cc8c:	20008854 	.word	0x20008854
 801cc90:	2000fa0c 	.word	0x2000fa0c
 801cc94:	0802309c 	.word	0x0802309c
 801cc98:	20008864 	.word	0x20008864

0801cc9c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b082      	sub	sp, #8
 801cca0:	af00      	add	r7, sp, #0
 801cca2:	6078      	str	r0, [r7, #4]
 801cca4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d109      	bne.n	801ccc0 <udp_send+0x24>
 801ccac:	4b11      	ldr	r3, [pc, #68]	@ (801ccf4 <udp_send+0x58>)
 801ccae:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801ccb2:	4911      	ldr	r1, [pc, #68]	@ (801ccf8 <udp_send+0x5c>)
 801ccb4:	4811      	ldr	r0, [pc, #68]	@ (801ccfc <udp_send+0x60>)
 801ccb6:	f000 ffa3 	bl	801dc00 <iprintf>
 801ccba:	f06f 030f 	mvn.w	r3, #15
 801ccbe:	e015      	b.n	801ccec <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801ccc0:	683b      	ldr	r3, [r7, #0]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d109      	bne.n	801ccda <udp_send+0x3e>
 801ccc6:	4b0b      	ldr	r3, [pc, #44]	@ (801ccf4 <udp_send+0x58>)
 801ccc8:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801cccc:	490c      	ldr	r1, [pc, #48]	@ (801cd00 <udp_send+0x64>)
 801ccce:	480b      	ldr	r0, [pc, #44]	@ (801ccfc <udp_send+0x60>)
 801ccd0:	f000 ff96 	bl	801dc00 <iprintf>
 801ccd4:	f06f 030f 	mvn.w	r3, #15
 801ccd8:	e008      	b.n	801ccec <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	1d1a      	adds	r2, r3, #4
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	8a9b      	ldrh	r3, [r3, #20]
 801cce2:	6839      	ldr	r1, [r7, #0]
 801cce4:	6878      	ldr	r0, [r7, #4]
 801cce6:	f000 f80d 	bl	801cd04 <udp_sendto>
 801ccea:	4603      	mov	r3, r0
}
 801ccec:	4618      	mov	r0, r3
 801ccee:	3708      	adds	r7, #8
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	bd80      	pop	{r7, pc}
 801ccf4:	08022f94 	.word	0x08022f94
 801ccf8:	080230b8 	.word	0x080230b8
 801ccfc:	08023018 	.word	0x08023018
 801cd00:	080230d0 	.word	0x080230d0

0801cd04 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801cd04:	b580      	push	{r7, lr}
 801cd06:	b088      	sub	sp, #32
 801cd08:	af02      	add	r7, sp, #8
 801cd0a:	60f8      	str	r0, [r7, #12]
 801cd0c:	60b9      	str	r1, [r7, #8]
 801cd0e:	607a      	str	r2, [r7, #4]
 801cd10:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d109      	bne.n	801cd2c <udp_sendto+0x28>
 801cd18:	4b36      	ldr	r3, [pc, #216]	@ (801cdf4 <udp_sendto+0xf0>)
 801cd1a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801cd1e:	4936      	ldr	r1, [pc, #216]	@ (801cdf8 <udp_sendto+0xf4>)
 801cd20:	4836      	ldr	r0, [pc, #216]	@ (801cdfc <udp_sendto+0xf8>)
 801cd22:	f000 ff6d 	bl	801dc00 <iprintf>
 801cd26:	f06f 030f 	mvn.w	r3, #15
 801cd2a:	e05e      	b.n	801cdea <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801cd2c:	68bb      	ldr	r3, [r7, #8]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d109      	bne.n	801cd46 <udp_sendto+0x42>
 801cd32:	4b30      	ldr	r3, [pc, #192]	@ (801cdf4 <udp_sendto+0xf0>)
 801cd34:	f240 2219 	movw	r2, #537	@ 0x219
 801cd38:	4931      	ldr	r1, [pc, #196]	@ (801ce00 <udp_sendto+0xfc>)
 801cd3a:	4830      	ldr	r0, [pc, #192]	@ (801cdfc <udp_sendto+0xf8>)
 801cd3c:	f000 ff60 	bl	801dc00 <iprintf>
 801cd40:	f06f 030f 	mvn.w	r3, #15
 801cd44:	e051      	b.n	801cdea <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	d109      	bne.n	801cd60 <udp_sendto+0x5c>
 801cd4c:	4b29      	ldr	r3, [pc, #164]	@ (801cdf4 <udp_sendto+0xf0>)
 801cd4e:	f240 221a 	movw	r2, #538	@ 0x21a
 801cd52:	492c      	ldr	r1, [pc, #176]	@ (801ce04 <udp_sendto+0x100>)
 801cd54:	4829      	ldr	r0, [pc, #164]	@ (801cdfc <udp_sendto+0xf8>)
 801cd56:	f000 ff53 	bl	801dc00 <iprintf>
 801cd5a:	f06f 030f 	mvn.w	r3, #15
 801cd5e:	e044      	b.n	801cdea <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801cd60:	68fb      	ldr	r3, [r7, #12]
 801cd62:	7a1b      	ldrb	r3, [r3, #8]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d006      	beq.n	801cd76 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	7a1b      	ldrb	r3, [r3, #8]
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	f7f8 fd67 	bl	8015840 <netif_get_by_index>
 801cd72:	6178      	str	r0, [r7, #20]
 801cd74:	e029      	b.n	801cdca <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 801cd76:	2300      	movs	r3, #0
 801cd78:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801cd82:	2be0      	cmp	r3, #224	@ 0xe0
 801cd84:	d11a      	bne.n	801cdbc <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	7f1b      	ldrb	r3, [r3, #28]
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d006      	beq.n	801cd9c <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 801cd8e:	68fb      	ldr	r3, [r7, #12]
 801cd90:	7f1b      	ldrb	r3, [r3, #28]
 801cd92:	4618      	mov	r0, r3
 801cd94:	f7f8 fd54 	bl	8015840 <netif_get_by_index>
 801cd98:	6178      	str	r0, [r7, #20]
 801cd9a:	e00f      	b.n	801cdbc <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	699b      	ldr	r3, [r3, #24]
 801cda0:	2b00      	cmp	r3, #0
 801cda2:	d00b      	beq.n	801cdbc <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	699a      	ldr	r2, [r3, #24]
 801cda8:	4b17      	ldr	r3, [pc, #92]	@ (801ce08 <udp_sendto+0x104>)
 801cdaa:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 801cdac:	429a      	cmp	r2, r3
 801cdae:	d005      	beq.n	801cdbc <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 801cdb0:	68fb      	ldr	r3, [r7, #12]
 801cdb2:	3318      	adds	r3, #24
 801cdb4:	4618      	mov	r0, r3
 801cdb6:	f7f6 fa61 	bl	801327c <ip4_route>
 801cdba:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 801cdbc:	697b      	ldr	r3, [r7, #20]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d103      	bne.n	801cdca <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801cdc2:	6878      	ldr	r0, [r7, #4]
 801cdc4:	f7f6 fa5a 	bl	801327c <ip4_route>
 801cdc8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801cdca:	697b      	ldr	r3, [r7, #20]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d102      	bne.n	801cdd6 <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801cdd0:	f06f 0303 	mvn.w	r3, #3
 801cdd4:	e009      	b.n	801cdea <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801cdd6:	887a      	ldrh	r2, [r7, #2]
 801cdd8:	697b      	ldr	r3, [r7, #20]
 801cdda:	9300      	str	r3, [sp, #0]
 801cddc:	4613      	mov	r3, r2
 801cdde:	687a      	ldr	r2, [r7, #4]
 801cde0:	68b9      	ldr	r1, [r7, #8]
 801cde2:	68f8      	ldr	r0, [r7, #12]
 801cde4:	f000 f812 	bl	801ce0c <udp_sendto_if>
 801cde8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801cdea:	4618      	mov	r0, r3
 801cdec:	3718      	adds	r7, #24
 801cdee:	46bd      	mov	sp, r7
 801cdf0:	bd80      	pop	{r7, pc}
 801cdf2:	bf00      	nop
 801cdf4:	08022f94 	.word	0x08022f94
 801cdf8:	080230e8 	.word	0x080230e8
 801cdfc:	08023018 	.word	0x08023018
 801ce00:	08023100 	.word	0x08023100
 801ce04:	0802311c 	.word	0x0802311c
 801ce08:	08023ac0 	.word	0x08023ac0

0801ce0c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801ce0c:	b580      	push	{r7, lr}
 801ce0e:	b088      	sub	sp, #32
 801ce10:	af02      	add	r7, sp, #8
 801ce12:	60f8      	str	r0, [r7, #12]
 801ce14:	60b9      	str	r1, [r7, #8]
 801ce16:	607a      	str	r2, [r7, #4]
 801ce18:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801ce1a:	68fb      	ldr	r3, [r7, #12]
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d109      	bne.n	801ce34 <udp_sendto_if+0x28>
 801ce20:	4b2e      	ldr	r3, [pc, #184]	@ (801cedc <udp_sendto_if+0xd0>)
 801ce22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ce26:	492e      	ldr	r1, [pc, #184]	@ (801cee0 <udp_sendto_if+0xd4>)
 801ce28:	482e      	ldr	r0, [pc, #184]	@ (801cee4 <udp_sendto_if+0xd8>)
 801ce2a:	f000 fee9 	bl	801dc00 <iprintf>
 801ce2e:	f06f 030f 	mvn.w	r3, #15
 801ce32:	e04f      	b.n	801ced4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801ce34:	68bb      	ldr	r3, [r7, #8]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d109      	bne.n	801ce4e <udp_sendto_if+0x42>
 801ce3a:	4b28      	ldr	r3, [pc, #160]	@ (801cedc <udp_sendto_if+0xd0>)
 801ce3c:	f240 2281 	movw	r2, #641	@ 0x281
 801ce40:	4929      	ldr	r1, [pc, #164]	@ (801cee8 <udp_sendto_if+0xdc>)
 801ce42:	4828      	ldr	r0, [pc, #160]	@ (801cee4 <udp_sendto_if+0xd8>)
 801ce44:	f000 fedc 	bl	801dc00 <iprintf>
 801ce48:	f06f 030f 	mvn.w	r3, #15
 801ce4c:	e042      	b.n	801ced4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d109      	bne.n	801ce68 <udp_sendto_if+0x5c>
 801ce54:	4b21      	ldr	r3, [pc, #132]	@ (801cedc <udp_sendto_if+0xd0>)
 801ce56:	f240 2282 	movw	r2, #642	@ 0x282
 801ce5a:	4924      	ldr	r1, [pc, #144]	@ (801ceec <udp_sendto_if+0xe0>)
 801ce5c:	4821      	ldr	r0, [pc, #132]	@ (801cee4 <udp_sendto_if+0xd8>)
 801ce5e:	f000 fecf 	bl	801dc00 <iprintf>
 801ce62:	f06f 030f 	mvn.w	r3, #15
 801ce66:	e035      	b.n	801ced4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801ce68:	6a3b      	ldr	r3, [r7, #32]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d109      	bne.n	801ce82 <udp_sendto_if+0x76>
 801ce6e:	4b1b      	ldr	r3, [pc, #108]	@ (801cedc <udp_sendto_if+0xd0>)
 801ce70:	f240 2283 	movw	r2, #643	@ 0x283
 801ce74:	491e      	ldr	r1, [pc, #120]	@ (801cef0 <udp_sendto_if+0xe4>)
 801ce76:	481b      	ldr	r0, [pc, #108]	@ (801cee4 <udp_sendto_if+0xd8>)
 801ce78:	f000 fec2 	bl	801dc00 <iprintf>
 801ce7c:	f06f 030f 	mvn.w	r3, #15
 801ce80:	e028      	b.n	801ced4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d009      	beq.n	801ce9c <udp_sendto_if+0x90>
 801ce88:	68fb      	ldr	r3, [r7, #12]
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d005      	beq.n	801ce9c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ce98:	2be0      	cmp	r3, #224	@ 0xe0
 801ce9a:	d103      	bne.n	801cea4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801ce9c:	6a3b      	ldr	r3, [r7, #32]
 801ce9e:	3304      	adds	r3, #4
 801cea0:	617b      	str	r3, [r7, #20]
 801cea2:	e00b      	b.n	801cebc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	681a      	ldr	r2, [r3, #0]
 801cea8:	6a3b      	ldr	r3, [r7, #32]
 801ceaa:	3304      	adds	r3, #4
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	429a      	cmp	r2, r3
 801ceb0:	d002      	beq.n	801ceb8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801ceb2:	f06f 0303 	mvn.w	r3, #3
 801ceb6:	e00d      	b.n	801ced4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801cebc:	887a      	ldrh	r2, [r7, #2]
 801cebe:	697b      	ldr	r3, [r7, #20]
 801cec0:	9301      	str	r3, [sp, #4]
 801cec2:	6a3b      	ldr	r3, [r7, #32]
 801cec4:	9300      	str	r3, [sp, #0]
 801cec6:	4613      	mov	r3, r2
 801cec8:	687a      	ldr	r2, [r7, #4]
 801ceca:	68b9      	ldr	r1, [r7, #8]
 801cecc:	68f8      	ldr	r0, [r7, #12]
 801cece:	f000 f811 	bl	801cef4 <udp_sendto_if_src>
 801ced2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ced4:	4618      	mov	r0, r3
 801ced6:	3718      	adds	r7, #24
 801ced8:	46bd      	mov	sp, r7
 801ceda:	bd80      	pop	{r7, pc}
 801cedc:	08022f94 	.word	0x08022f94
 801cee0:	08023138 	.word	0x08023138
 801cee4:	08023018 	.word	0x08023018
 801cee8:	08023154 	.word	0x08023154
 801ceec:	08023170 	.word	0x08023170
 801cef0:	08023190 	.word	0x08023190

0801cef4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801cef4:	b580      	push	{r7, lr}
 801cef6:	b08c      	sub	sp, #48	@ 0x30
 801cef8:	af04      	add	r7, sp, #16
 801cefa:	60f8      	str	r0, [r7, #12]
 801cefc:	60b9      	str	r1, [r7, #8]
 801cefe:	607a      	str	r2, [r7, #4]
 801cf00:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	d109      	bne.n	801cf1c <udp_sendto_if_src+0x28>
 801cf08:	4b73      	ldr	r3, [pc, #460]	@ (801d0d8 <udp_sendto_if_src+0x1e4>)
 801cf0a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801cf0e:	4973      	ldr	r1, [pc, #460]	@ (801d0dc <udp_sendto_if_src+0x1e8>)
 801cf10:	4873      	ldr	r0, [pc, #460]	@ (801d0e0 <udp_sendto_if_src+0x1ec>)
 801cf12:	f000 fe75 	bl	801dc00 <iprintf>
 801cf16:	f06f 030f 	mvn.w	r3, #15
 801cf1a:	e0d8      	b.n	801d0ce <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801cf1c:	68bb      	ldr	r3, [r7, #8]
 801cf1e:	2b00      	cmp	r3, #0
 801cf20:	d109      	bne.n	801cf36 <udp_sendto_if_src+0x42>
 801cf22:	4b6d      	ldr	r3, [pc, #436]	@ (801d0d8 <udp_sendto_if_src+0x1e4>)
 801cf24:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801cf28:	496e      	ldr	r1, [pc, #440]	@ (801d0e4 <udp_sendto_if_src+0x1f0>)
 801cf2a:	486d      	ldr	r0, [pc, #436]	@ (801d0e0 <udp_sendto_if_src+0x1ec>)
 801cf2c:	f000 fe68 	bl	801dc00 <iprintf>
 801cf30:	f06f 030f 	mvn.w	r3, #15
 801cf34:	e0cb      	b.n	801d0ce <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d109      	bne.n	801cf50 <udp_sendto_if_src+0x5c>
 801cf3c:	4b66      	ldr	r3, [pc, #408]	@ (801d0d8 <udp_sendto_if_src+0x1e4>)
 801cf3e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801cf42:	4969      	ldr	r1, [pc, #420]	@ (801d0e8 <udp_sendto_if_src+0x1f4>)
 801cf44:	4866      	ldr	r0, [pc, #408]	@ (801d0e0 <udp_sendto_if_src+0x1ec>)
 801cf46:	f000 fe5b 	bl	801dc00 <iprintf>
 801cf4a:	f06f 030f 	mvn.w	r3, #15
 801cf4e:	e0be      	b.n	801d0ce <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801cf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d109      	bne.n	801cf6a <udp_sendto_if_src+0x76>
 801cf56:	4b60      	ldr	r3, [pc, #384]	@ (801d0d8 <udp_sendto_if_src+0x1e4>)
 801cf58:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801cf5c:	4963      	ldr	r1, [pc, #396]	@ (801d0ec <udp_sendto_if_src+0x1f8>)
 801cf5e:	4860      	ldr	r0, [pc, #384]	@ (801d0e0 <udp_sendto_if_src+0x1ec>)
 801cf60:	f000 fe4e 	bl	801dc00 <iprintf>
 801cf64:	f06f 030f 	mvn.w	r3, #15
 801cf68:	e0b1      	b.n	801d0ce <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801cf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	d109      	bne.n	801cf84 <udp_sendto_if_src+0x90>
 801cf70:	4b59      	ldr	r3, [pc, #356]	@ (801d0d8 <udp_sendto_if_src+0x1e4>)
 801cf72:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801cf76:	495e      	ldr	r1, [pc, #376]	@ (801d0f0 <udp_sendto_if_src+0x1fc>)
 801cf78:	4859      	ldr	r0, [pc, #356]	@ (801d0e0 <udp_sendto_if_src+0x1ec>)
 801cf7a:	f000 fe41 	bl	801dc00 <iprintf>
 801cf7e:	f06f 030f 	mvn.w	r3, #15
 801cf82:	e0a4      	b.n	801d0ce <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	8a5b      	ldrh	r3, [r3, #18]
 801cf88:	2b00      	cmp	r3, #0
 801cf8a:	d10f      	bne.n	801cfac <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cf8c:	68f9      	ldr	r1, [r7, #12]
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	8a5b      	ldrh	r3, [r3, #18]
 801cf92:	461a      	mov	r2, r3
 801cf94:	68f8      	ldr	r0, [r7, #12]
 801cf96:	f000 f8af 	bl	801d0f8 <udp_bind>
 801cf9a:	4603      	mov	r3, r0
 801cf9c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801cf9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d002      	beq.n	801cfac <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801cfa6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801cfaa:	e090      	b.n	801d0ce <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801cfac:	68bb      	ldr	r3, [r7, #8]
 801cfae:	891b      	ldrh	r3, [r3, #8]
 801cfb0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801cfb4:	4293      	cmp	r3, r2
 801cfb6:	d902      	bls.n	801cfbe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801cfb8:	f04f 33ff 	mov.w	r3, #4294967295
 801cfbc:	e087      	b.n	801d0ce <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801cfbe:	2108      	movs	r1, #8
 801cfc0:	68b8      	ldr	r0, [r7, #8]
 801cfc2:	f7f8 ff35 	bl	8015e30 <pbuf_add_header>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d015      	beq.n	801cff8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801cfcc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cfd0:	2108      	movs	r1, #8
 801cfd2:	2022      	movs	r0, #34	@ 0x22
 801cfd4:	f7f8 fcde 	bl	8015994 <pbuf_alloc>
 801cfd8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801cfda:	69fb      	ldr	r3, [r7, #28]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d102      	bne.n	801cfe6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801cfe0:	f04f 33ff 	mov.w	r3, #4294967295
 801cfe4:	e073      	b.n	801d0ce <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 801cfe6:	68bb      	ldr	r3, [r7, #8]
 801cfe8:	891b      	ldrh	r3, [r3, #8]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d006      	beq.n	801cffc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801cfee:	68b9      	ldr	r1, [r7, #8]
 801cff0:	69f8      	ldr	r0, [r7, #28]
 801cff2:	f7f9 f909 	bl	8016208 <pbuf_chain>
 801cff6:	e001      	b.n	801cffc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801cff8:	68bb      	ldr	r3, [r7, #8]
 801cffa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801cffc:	69fb      	ldr	r3, [r7, #28]
 801cffe:	895b      	ldrh	r3, [r3, #10]
 801d000:	2b07      	cmp	r3, #7
 801d002:	d806      	bhi.n	801d012 <udp_sendto_if_src+0x11e>
 801d004:	4b34      	ldr	r3, [pc, #208]	@ (801d0d8 <udp_sendto_if_src+0x1e4>)
 801d006:	f240 320d 	movw	r2, #781	@ 0x30d
 801d00a:	493a      	ldr	r1, [pc, #232]	@ (801d0f4 <udp_sendto_if_src+0x200>)
 801d00c:	4834      	ldr	r0, [pc, #208]	@ (801d0e0 <udp_sendto_if_src+0x1ec>)
 801d00e:	f000 fdf7 	bl	801dc00 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801d012:	69fb      	ldr	r3, [r7, #28]
 801d014:	685b      	ldr	r3, [r3, #4]
 801d016:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	8a5b      	ldrh	r3, [r3, #18]
 801d01c:	4618      	mov	r0, r3
 801d01e:	f7f7 fb1d 	bl	801465c <lwip_htons>
 801d022:	4603      	mov	r3, r0
 801d024:	461a      	mov	r2, r3
 801d026:	697b      	ldr	r3, [r7, #20]
 801d028:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801d02a:	887b      	ldrh	r3, [r7, #2]
 801d02c:	4618      	mov	r0, r3
 801d02e:	f7f7 fb15 	bl	801465c <lwip_htons>
 801d032:	4603      	mov	r3, r0
 801d034:	461a      	mov	r2, r3
 801d036:	697b      	ldr	r3, [r7, #20]
 801d038:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801d03a:	697b      	ldr	r3, [r7, #20]
 801d03c:	2200      	movs	r2, #0
 801d03e:	719a      	strb	r2, [r3, #6]
 801d040:	2200      	movs	r2, #0
 801d042:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	7c1b      	ldrb	r3, [r3, #16]
 801d048:	f003 0308 	and.w	r3, r3, #8
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	d00c      	beq.n	801d06a <udp_sendto_if_src+0x176>
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d058:	2be0      	cmp	r3, #224	@ 0xe0
 801d05a:	d106      	bne.n	801d06a <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 801d05c:	69fb      	ldr	r3, [r7, #28]
 801d05e:	7b5b      	ldrb	r3, [r3, #13]
 801d060:	f043 0304 	orr.w	r3, r3, #4
 801d064:	b2da      	uxtb	r2, r3
 801d066:	69fb      	ldr	r3, [r7, #28]
 801d068:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801d06a:	69fb      	ldr	r3, [r7, #28]
 801d06c:	891b      	ldrh	r3, [r3, #8]
 801d06e:	4618      	mov	r0, r3
 801d070:	f7f7 faf4 	bl	801465c <lwip_htons>
 801d074:	4603      	mov	r3, r0
 801d076:	461a      	mov	r2, r3
 801d078:	697b      	ldr	r3, [r7, #20]
 801d07a:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801d07c:	2311      	movs	r3, #17
 801d07e:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d088:	2be0      	cmp	r3, #224	@ 0xe0
 801d08a:	d102      	bne.n	801d092 <udp_sendto_if_src+0x19e>
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	7f5b      	ldrb	r3, [r3, #29]
 801d090:	e001      	b.n	801d096 <udp_sendto_if_src+0x1a2>
 801d092:	68fb      	ldr	r3, [r7, #12]
 801d094:	7adb      	ldrb	r3, [r3, #11]
 801d096:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801d098:	68fb      	ldr	r3, [r7, #12]
 801d09a:	7a9b      	ldrb	r3, [r3, #10]
 801d09c:	7cb9      	ldrb	r1, [r7, #18]
 801d09e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d0a0:	9202      	str	r2, [sp, #8]
 801d0a2:	7cfa      	ldrb	r2, [r7, #19]
 801d0a4:	9201      	str	r2, [sp, #4]
 801d0a6:	9300      	str	r3, [sp, #0]
 801d0a8:	460b      	mov	r3, r1
 801d0aa:	687a      	ldr	r2, [r7, #4]
 801d0ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d0ae:	69f8      	ldr	r0, [r7, #28]
 801d0b0:	f7f6 fb51 	bl	8013756 <ip4_output_if_src>
 801d0b4:	4603      	mov	r3, r0
 801d0b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801d0b8:	69fa      	ldr	r2, [r7, #28]
 801d0ba:	68bb      	ldr	r3, [r7, #8]
 801d0bc:	429a      	cmp	r2, r3
 801d0be:	d004      	beq.n	801d0ca <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 801d0c0:	69f8      	ldr	r0, [r7, #28]
 801d0c2:	f7f8 ff7d 	bl	8015fc0 <pbuf_free>
    q = NULL;
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801d0ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	3720      	adds	r7, #32
 801d0d2:	46bd      	mov	sp, r7
 801d0d4:	bd80      	pop	{r7, pc}
 801d0d6:	bf00      	nop
 801d0d8:	08022f94 	.word	0x08022f94
 801d0dc:	080231b0 	.word	0x080231b0
 801d0e0:	08023018 	.word	0x08023018
 801d0e4:	080231d0 	.word	0x080231d0
 801d0e8:	080231f0 	.word	0x080231f0
 801d0ec:	08023214 	.word	0x08023214
 801d0f0:	08023238 	.word	0x08023238
 801d0f4:	0802325c 	.word	0x0802325c

0801d0f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d0f8:	b580      	push	{r7, lr}
 801d0fa:	b086      	sub	sp, #24
 801d0fc:	af00      	add	r7, sp, #0
 801d0fe:	60f8      	str	r0, [r7, #12]
 801d100:	60b9      	str	r1, [r7, #8]
 801d102:	4613      	mov	r3, r2
 801d104:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801d106:	68bb      	ldr	r3, [r7, #8]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d101      	bne.n	801d110 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801d10c:	4b39      	ldr	r3, [pc, #228]	@ (801d1f4 <udp_bind+0xfc>)
 801d10e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801d110:	68fb      	ldr	r3, [r7, #12]
 801d112:	2b00      	cmp	r3, #0
 801d114:	d109      	bne.n	801d12a <udp_bind+0x32>
 801d116:	4b38      	ldr	r3, [pc, #224]	@ (801d1f8 <udp_bind+0x100>)
 801d118:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801d11c:	4937      	ldr	r1, [pc, #220]	@ (801d1fc <udp_bind+0x104>)
 801d11e:	4838      	ldr	r0, [pc, #224]	@ (801d200 <udp_bind+0x108>)
 801d120:	f000 fd6e 	bl	801dc00 <iprintf>
 801d124:	f06f 030f 	mvn.w	r3, #15
 801d128:	e060      	b.n	801d1ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801d12a:	2300      	movs	r3, #0
 801d12c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d12e:	4b35      	ldr	r3, [pc, #212]	@ (801d204 <udp_bind+0x10c>)
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	617b      	str	r3, [r7, #20]
 801d134:	e009      	b.n	801d14a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801d136:	68fa      	ldr	r2, [r7, #12]
 801d138:	697b      	ldr	r3, [r7, #20]
 801d13a:	429a      	cmp	r2, r3
 801d13c:	d102      	bne.n	801d144 <udp_bind+0x4c>
      rebind = 1;
 801d13e:	2301      	movs	r3, #1
 801d140:	74fb      	strb	r3, [r7, #19]
      break;
 801d142:	e005      	b.n	801d150 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d144:	697b      	ldr	r3, [r7, #20]
 801d146:	68db      	ldr	r3, [r3, #12]
 801d148:	617b      	str	r3, [r7, #20]
 801d14a:	697b      	ldr	r3, [r7, #20]
 801d14c:	2b00      	cmp	r3, #0
 801d14e:	d1f2      	bne.n	801d136 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801d150:	88fb      	ldrh	r3, [r7, #6]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d109      	bne.n	801d16a <udp_bind+0x72>
    port = udp_new_port();
 801d156:	f7ff fbf1 	bl	801c93c <udp_new_port>
 801d15a:	4603      	mov	r3, r0
 801d15c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801d15e:	88fb      	ldrh	r3, [r7, #6]
 801d160:	2b00      	cmp	r3, #0
 801d162:	d12c      	bne.n	801d1be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801d164:	f06f 0307 	mvn.w	r3, #7
 801d168:	e040      	b.n	801d1ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d16a:	4b26      	ldr	r3, [pc, #152]	@ (801d204 <udp_bind+0x10c>)
 801d16c:	681b      	ldr	r3, [r3, #0]
 801d16e:	617b      	str	r3, [r7, #20]
 801d170:	e022      	b.n	801d1b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801d172:	68fa      	ldr	r2, [r7, #12]
 801d174:	697b      	ldr	r3, [r7, #20]
 801d176:	429a      	cmp	r2, r3
 801d178:	d01b      	beq.n	801d1b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801d17a:	697b      	ldr	r3, [r7, #20]
 801d17c:	8a5b      	ldrh	r3, [r3, #18]
 801d17e:	88fa      	ldrh	r2, [r7, #6]
 801d180:	429a      	cmp	r2, r3
 801d182:	d116      	bne.n	801d1b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d184:	697b      	ldr	r3, [r7, #20]
 801d186:	681a      	ldr	r2, [r3, #0]
 801d188:	68bb      	ldr	r3, [r7, #8]
 801d18a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801d18c:	429a      	cmp	r2, r3
 801d18e:	d00d      	beq.n	801d1ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d190:	68bb      	ldr	r3, [r7, #8]
 801d192:	2b00      	cmp	r3, #0
 801d194:	d00a      	beq.n	801d1ac <udp_bind+0xb4>
 801d196:	68bb      	ldr	r3, [r7, #8]
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d006      	beq.n	801d1ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d19e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	d003      	beq.n	801d1ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801d1a4:	697b      	ldr	r3, [r7, #20]
 801d1a6:	681b      	ldr	r3, [r3, #0]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d102      	bne.n	801d1b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801d1ac:	f06f 0307 	mvn.w	r3, #7
 801d1b0:	e01c      	b.n	801d1ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d1b2:	697b      	ldr	r3, [r7, #20]
 801d1b4:	68db      	ldr	r3, [r3, #12]
 801d1b6:	617b      	str	r3, [r7, #20]
 801d1b8:	697b      	ldr	r3, [r7, #20]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	d1d9      	bne.n	801d172 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801d1be:	68bb      	ldr	r3, [r7, #8]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d002      	beq.n	801d1ca <udp_bind+0xd2>
 801d1c4:	68bb      	ldr	r3, [r7, #8]
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	e000      	b.n	801d1cc <udp_bind+0xd4>
 801d1ca:	2300      	movs	r3, #0
 801d1cc:	68fa      	ldr	r2, [r7, #12]
 801d1ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	88fa      	ldrh	r2, [r7, #6]
 801d1d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801d1d6:	7cfb      	ldrb	r3, [r7, #19]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d106      	bne.n	801d1ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801d1dc:	4b09      	ldr	r3, [pc, #36]	@ (801d204 <udp_bind+0x10c>)
 801d1de:	681a      	ldr	r2, [r3, #0]
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801d1e4:	4a07      	ldr	r2, [pc, #28]	@ (801d204 <udp_bind+0x10c>)
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801d1ea:	2300      	movs	r3, #0
}
 801d1ec:	4618      	mov	r0, r3
 801d1ee:	3718      	adds	r7, #24
 801d1f0:	46bd      	mov	sp, r7
 801d1f2:	bd80      	pop	{r7, pc}
 801d1f4:	08023abc 	.word	0x08023abc
 801d1f8:	08022f94 	.word	0x08022f94
 801d1fc:	0802328c 	.word	0x0802328c
 801d200:	08023018 	.word	0x08023018
 801d204:	2000fa0c 	.word	0x2000fa0c

0801d208 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801d208:	b580      	push	{r7, lr}
 801d20a:	b086      	sub	sp, #24
 801d20c:	af00      	add	r7, sp, #0
 801d20e:	60f8      	str	r0, [r7, #12]
 801d210:	60b9      	str	r1, [r7, #8]
 801d212:	4613      	mov	r3, r2
 801d214:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d109      	bne.n	801d230 <udp_connect+0x28>
 801d21c:	4b2c      	ldr	r3, [pc, #176]	@ (801d2d0 <udp_connect+0xc8>)
 801d21e:	f240 4235 	movw	r2, #1077	@ 0x435
 801d222:	492c      	ldr	r1, [pc, #176]	@ (801d2d4 <udp_connect+0xcc>)
 801d224:	482c      	ldr	r0, [pc, #176]	@ (801d2d8 <udp_connect+0xd0>)
 801d226:	f000 fceb 	bl	801dc00 <iprintf>
 801d22a:	f06f 030f 	mvn.w	r3, #15
 801d22e:	e04b      	b.n	801d2c8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801d230:	68bb      	ldr	r3, [r7, #8]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d109      	bne.n	801d24a <udp_connect+0x42>
 801d236:	4b26      	ldr	r3, [pc, #152]	@ (801d2d0 <udp_connect+0xc8>)
 801d238:	f240 4236 	movw	r2, #1078	@ 0x436
 801d23c:	4927      	ldr	r1, [pc, #156]	@ (801d2dc <udp_connect+0xd4>)
 801d23e:	4826      	ldr	r0, [pc, #152]	@ (801d2d8 <udp_connect+0xd0>)
 801d240:	f000 fcde 	bl	801dc00 <iprintf>
 801d244:	f06f 030f 	mvn.w	r3, #15
 801d248:	e03e      	b.n	801d2c8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	8a5b      	ldrh	r3, [r3, #18]
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d10f      	bne.n	801d272 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801d252:	68f9      	ldr	r1, [r7, #12]
 801d254:	68fb      	ldr	r3, [r7, #12]
 801d256:	8a5b      	ldrh	r3, [r3, #18]
 801d258:	461a      	mov	r2, r3
 801d25a:	68f8      	ldr	r0, [r7, #12]
 801d25c:	f7ff ff4c 	bl	801d0f8 <udp_bind>
 801d260:	4603      	mov	r3, r0
 801d262:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801d264:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d002      	beq.n	801d272 <udp_connect+0x6a>
      return err;
 801d26c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801d270:	e02a      	b.n	801d2c8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801d272:	68bb      	ldr	r3, [r7, #8]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d002      	beq.n	801d27e <udp_connect+0x76>
 801d278:	68bb      	ldr	r3, [r7, #8]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	e000      	b.n	801d280 <udp_connect+0x78>
 801d27e:	2300      	movs	r3, #0
 801d280:	68fa      	ldr	r2, [r7, #12]
 801d282:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	88fa      	ldrh	r2, [r7, #6]
 801d288:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	7c1b      	ldrb	r3, [r3, #16]
 801d28e:	f043 0304 	orr.w	r3, r3, #4
 801d292:	b2da      	uxtb	r2, r3
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d298:	4b11      	ldr	r3, [pc, #68]	@ (801d2e0 <udp_connect+0xd8>)
 801d29a:	681b      	ldr	r3, [r3, #0]
 801d29c:	617b      	str	r3, [r7, #20]
 801d29e:	e008      	b.n	801d2b2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801d2a0:	68fa      	ldr	r2, [r7, #12]
 801d2a2:	697b      	ldr	r3, [r7, #20]
 801d2a4:	429a      	cmp	r2, r3
 801d2a6:	d101      	bne.n	801d2ac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	e00d      	b.n	801d2c8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801d2ac:	697b      	ldr	r3, [r7, #20]
 801d2ae:	68db      	ldr	r3, [r3, #12]
 801d2b0:	617b      	str	r3, [r7, #20]
 801d2b2:	697b      	ldr	r3, [r7, #20]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	d1f3      	bne.n	801d2a0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801d2b8:	4b09      	ldr	r3, [pc, #36]	@ (801d2e0 <udp_connect+0xd8>)
 801d2ba:	681a      	ldr	r2, [r3, #0]
 801d2bc:	68fb      	ldr	r3, [r7, #12]
 801d2be:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801d2c0:	4a07      	ldr	r2, [pc, #28]	@ (801d2e0 <udp_connect+0xd8>)
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801d2c6:	2300      	movs	r3, #0
}
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	3718      	adds	r7, #24
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	bd80      	pop	{r7, pc}
 801d2d0:	08022f94 	.word	0x08022f94
 801d2d4:	080232a4 	.word	0x080232a4
 801d2d8:	08023018 	.word	0x08023018
 801d2dc:	080232c0 	.word	0x080232c0
 801d2e0:	2000fa0c 	.word	0x2000fa0c

0801d2e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	b084      	sub	sp, #16
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	60f8      	str	r0, [r7, #12]
 801d2ec:	60b9      	str	r1, [r7, #8]
 801d2ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801d2f0:	68fb      	ldr	r3, [r7, #12]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d107      	bne.n	801d306 <udp_recv+0x22>
 801d2f6:	4b08      	ldr	r3, [pc, #32]	@ (801d318 <udp_recv+0x34>)
 801d2f8:	f240 428a 	movw	r2, #1162	@ 0x48a
 801d2fc:	4907      	ldr	r1, [pc, #28]	@ (801d31c <udp_recv+0x38>)
 801d2fe:	4808      	ldr	r0, [pc, #32]	@ (801d320 <udp_recv+0x3c>)
 801d300:	f000 fc7e 	bl	801dc00 <iprintf>
 801d304:	e005      	b.n	801d312 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	68ba      	ldr	r2, [r7, #8]
 801d30a:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	687a      	ldr	r2, [r7, #4]
 801d310:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801d312:	3710      	adds	r7, #16
 801d314:	46bd      	mov	sp, r7
 801d316:	bd80      	pop	{r7, pc}
 801d318:	08022f94 	.word	0x08022f94
 801d31c:	080232f8 	.word	0x080232f8
 801d320:	08023018 	.word	0x08023018

0801d324 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801d324:	b580      	push	{r7, lr}
 801d326:	b084      	sub	sp, #16
 801d328:	af00      	add	r7, sp, #0
 801d32a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d107      	bne.n	801d342 <udp_remove+0x1e>
 801d332:	4b19      	ldr	r3, [pc, #100]	@ (801d398 <udp_remove+0x74>)
 801d334:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801d338:	4918      	ldr	r1, [pc, #96]	@ (801d39c <udp_remove+0x78>)
 801d33a:	4819      	ldr	r0, [pc, #100]	@ (801d3a0 <udp_remove+0x7c>)
 801d33c:	f000 fc60 	bl	801dc00 <iprintf>
 801d340:	e026      	b.n	801d390 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801d342:	4b18      	ldr	r3, [pc, #96]	@ (801d3a4 <udp_remove+0x80>)
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	687a      	ldr	r2, [r7, #4]
 801d348:	429a      	cmp	r2, r3
 801d34a:	d105      	bne.n	801d358 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801d34c:	4b15      	ldr	r3, [pc, #84]	@ (801d3a4 <udp_remove+0x80>)
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	68db      	ldr	r3, [r3, #12]
 801d352:	4a14      	ldr	r2, [pc, #80]	@ (801d3a4 <udp_remove+0x80>)
 801d354:	6013      	str	r3, [r2, #0]
 801d356:	e017      	b.n	801d388 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d358:	4b12      	ldr	r3, [pc, #72]	@ (801d3a4 <udp_remove+0x80>)
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	60fb      	str	r3, [r7, #12]
 801d35e:	e010      	b.n	801d382 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801d360:	68fb      	ldr	r3, [r7, #12]
 801d362:	68db      	ldr	r3, [r3, #12]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d009      	beq.n	801d37c <udp_remove+0x58>
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	68db      	ldr	r3, [r3, #12]
 801d36c:	687a      	ldr	r2, [r7, #4]
 801d36e:	429a      	cmp	r2, r3
 801d370:	d104      	bne.n	801d37c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	68da      	ldr	r2, [r3, #12]
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	60da      	str	r2, [r3, #12]
        break;
 801d37a:	e005      	b.n	801d388 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801d37c:	68fb      	ldr	r3, [r7, #12]
 801d37e:	68db      	ldr	r3, [r3, #12]
 801d380:	60fb      	str	r3, [r7, #12]
 801d382:	68fb      	ldr	r3, [r7, #12]
 801d384:	2b00      	cmp	r3, #0
 801d386:	d1eb      	bne.n	801d360 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801d388:	6879      	ldr	r1, [r7, #4]
 801d38a:	2000      	movs	r0, #0
 801d38c:	f7f7 ff20 	bl	80151d0 <memp_free>
}
 801d390:	3710      	adds	r7, #16
 801d392:	46bd      	mov	sp, r7
 801d394:	bd80      	pop	{r7, pc}
 801d396:	bf00      	nop
 801d398:	08022f94 	.word	0x08022f94
 801d39c:	08023310 	.word	0x08023310
 801d3a0:	08023018 	.word	0x08023018
 801d3a4:	2000fa0c 	.word	0x2000fa0c

0801d3a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801d3a8:	b580      	push	{r7, lr}
 801d3aa:	b082      	sub	sp, #8
 801d3ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801d3ae:	2000      	movs	r0, #0
 801d3b0:	f7f7 fe98 	bl	80150e4 <memp_malloc>
 801d3b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d00a      	beq.n	801d3d2 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801d3bc:	2228      	movs	r2, #40	@ 0x28
 801d3be:	2100      	movs	r1, #0
 801d3c0:	6878      	ldr	r0, [r7, #4]
 801d3c2:	f000 fcbc 	bl	801dd3e <memset>
    pcb->ttl = UDP_TTL;
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	22ff      	movs	r2, #255	@ 0xff
 801d3ca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	22ff      	movs	r2, #255	@ 0xff
 801d3d0:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801d3d2:	687b      	ldr	r3, [r7, #4]
}
 801d3d4:	4618      	mov	r0, r3
 801d3d6:	3708      	adds	r7, #8
 801d3d8:	46bd      	mov	sp, r7
 801d3da:	bd80      	pop	{r7, pc}

0801d3dc <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b084      	sub	sp, #16
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	4603      	mov	r3, r0
 801d3e4:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801d3e6:	f7ff ffdf 	bl	801d3a8 <udp_new>
 801d3ea:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801d3ec:	68fb      	ldr	r3, [r7, #12]
}
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	3710      	adds	r7, #16
 801d3f2:	46bd      	mov	sp, r7
 801d3f4:	bd80      	pop	{r7, pc}
	...

0801d3f8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801d3f8:	b480      	push	{r7}
 801d3fa:	b085      	sub	sp, #20
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	2b00      	cmp	r3, #0
 801d406:	d01e      	beq.n	801d446 <udp_netif_ip_addr_changed+0x4e>
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	681b      	ldr	r3, [r3, #0]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d01a      	beq.n	801d446 <udp_netif_ip_addr_changed+0x4e>
 801d410:	683b      	ldr	r3, [r7, #0]
 801d412:	2b00      	cmp	r3, #0
 801d414:	d017      	beq.n	801d446 <udp_netif_ip_addr_changed+0x4e>
 801d416:	683b      	ldr	r3, [r7, #0]
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d013      	beq.n	801d446 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d41e:	4b0d      	ldr	r3, [pc, #52]	@ (801d454 <udp_netif_ip_addr_changed+0x5c>)
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	60fb      	str	r3, [r7, #12]
 801d424:	e00c      	b.n	801d440 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801d426:	68fb      	ldr	r3, [r7, #12]
 801d428:	681a      	ldr	r2, [r3, #0]
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	429a      	cmp	r2, r3
 801d430:	d103      	bne.n	801d43a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801d432:	683b      	ldr	r3, [r7, #0]
 801d434:	681a      	ldr	r2, [r3, #0]
 801d436:	68fb      	ldr	r3, [r7, #12]
 801d438:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	68db      	ldr	r3, [r3, #12]
 801d43e:	60fb      	str	r3, [r7, #12]
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d1ef      	bne.n	801d426 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801d446:	bf00      	nop
 801d448:	3714      	adds	r7, #20
 801d44a:	46bd      	mov	sp, r7
 801d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d450:	4770      	bx	lr
 801d452:	bf00      	nop
 801d454:	2000fa0c 	.word	0x2000fa0c

0801d458 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	b086      	sub	sp, #24
 801d45c:	af00      	add	r7, sp, #0
 801d45e:	6078      	str	r0, [r7, #4]
 801d460:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d462:	230e      	movs	r3, #14
 801d464:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	895b      	ldrh	r3, [r3, #10]
 801d46a:	2b0e      	cmp	r3, #14
 801d46c:	d96e      	bls.n	801d54c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	7bdb      	ldrb	r3, [r3, #15]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d106      	bne.n	801d484 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d476:	683b      	ldr	r3, [r7, #0]
 801d478:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d47c:	3301      	adds	r3, #1
 801d47e:	b2da      	uxtb	r2, r3
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	685b      	ldr	r3, [r3, #4]
 801d488:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d48a:	693b      	ldr	r3, [r7, #16]
 801d48c:	7b1a      	ldrb	r2, [r3, #12]
 801d48e:	7b5b      	ldrb	r3, [r3, #13]
 801d490:	021b      	lsls	r3, r3, #8
 801d492:	4313      	orrs	r3, r2
 801d494:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d496:	693b      	ldr	r3, [r7, #16]
 801d498:	781b      	ldrb	r3, [r3, #0]
 801d49a:	f003 0301 	and.w	r3, r3, #1
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	d023      	beq.n	801d4ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d4a2:	693b      	ldr	r3, [r7, #16]
 801d4a4:	781b      	ldrb	r3, [r3, #0]
 801d4a6:	2b01      	cmp	r3, #1
 801d4a8:	d10f      	bne.n	801d4ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d4aa:	693b      	ldr	r3, [r7, #16]
 801d4ac:	785b      	ldrb	r3, [r3, #1]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d11b      	bne.n	801d4ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d4b2:	693b      	ldr	r3, [r7, #16]
 801d4b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d4b6:	2b5e      	cmp	r3, #94	@ 0x5e
 801d4b8:	d117      	bne.n	801d4ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	7b5b      	ldrb	r3, [r3, #13]
 801d4be:	f043 0310 	orr.w	r3, r3, #16
 801d4c2:	b2da      	uxtb	r2, r3
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	735a      	strb	r2, [r3, #13]
 801d4c8:	e00f      	b.n	801d4ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d4ca:	693b      	ldr	r3, [r7, #16]
 801d4cc:	2206      	movs	r2, #6
 801d4ce:	4928      	ldr	r1, [pc, #160]	@ (801d570 <ethernet_input+0x118>)
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	f000 fc0a 	bl	801dcea <memcmp>
 801d4d6:	4603      	mov	r3, r0
 801d4d8:	2b00      	cmp	r3, #0
 801d4da:	d106      	bne.n	801d4ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	7b5b      	ldrb	r3, [r3, #13]
 801d4e0:	f043 0308 	orr.w	r3, r3, #8
 801d4e4:	b2da      	uxtb	r2, r3
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d4ea:	89fb      	ldrh	r3, [r7, #14]
 801d4ec:	2b08      	cmp	r3, #8
 801d4ee:	d003      	beq.n	801d4f8 <ethernet_input+0xa0>
 801d4f0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d4f4:	d014      	beq.n	801d520 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d4f6:	e032      	b.n	801d55e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d4f8:	683b      	ldr	r3, [r7, #0]
 801d4fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801d4fe:	f003 0308 	and.w	r3, r3, #8
 801d502:	2b00      	cmp	r3, #0
 801d504:	d024      	beq.n	801d550 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d506:	8afb      	ldrh	r3, [r7, #22]
 801d508:	4619      	mov	r1, r3
 801d50a:	6878      	ldr	r0, [r7, #4]
 801d50c:	f7f8 fca0 	bl	8015e50 <pbuf_remove_header>
 801d510:	4603      	mov	r3, r0
 801d512:	2b00      	cmp	r3, #0
 801d514:	d11e      	bne.n	801d554 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d516:	6839      	ldr	r1, [r7, #0]
 801d518:	6878      	ldr	r0, [r7, #4]
 801d51a:	f7f5 ff57 	bl	80133cc <ip4_input>
      break;
 801d51e:	e013      	b.n	801d548 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d520:	683b      	ldr	r3, [r7, #0]
 801d522:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801d526:	f003 0308 	and.w	r3, r3, #8
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d014      	beq.n	801d558 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d52e:	8afb      	ldrh	r3, [r7, #22]
 801d530:	4619      	mov	r1, r3
 801d532:	6878      	ldr	r0, [r7, #4]
 801d534:	f7f8 fc8c 	bl	8015e50 <pbuf_remove_header>
 801d538:	4603      	mov	r3, r0
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d10e      	bne.n	801d55c <ethernet_input+0x104>
        etharp_input(p, netif);
 801d53e:	6839      	ldr	r1, [r7, #0]
 801d540:	6878      	ldr	r0, [r7, #4]
 801d542:	f7f4 fc3f 	bl	8011dc4 <etharp_input>
      break;
 801d546:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d548:	2300      	movs	r3, #0
 801d54a:	e00c      	b.n	801d566 <ethernet_input+0x10e>
    goto free_and_return;
 801d54c:	bf00      	nop
 801d54e:	e006      	b.n	801d55e <ethernet_input+0x106>
        goto free_and_return;
 801d550:	bf00      	nop
 801d552:	e004      	b.n	801d55e <ethernet_input+0x106>
        goto free_and_return;
 801d554:	bf00      	nop
 801d556:	e002      	b.n	801d55e <ethernet_input+0x106>
        goto free_and_return;
 801d558:	bf00      	nop
 801d55a:	e000      	b.n	801d55e <ethernet_input+0x106>
        goto free_and_return;
 801d55c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d55e:	6878      	ldr	r0, [r7, #4]
 801d560:	f7f8 fd2e 	bl	8015fc0 <pbuf_free>
  return ERR_OK;
 801d564:	2300      	movs	r3, #0
}
 801d566:	4618      	mov	r0, r3
 801d568:	3718      	adds	r7, #24
 801d56a:	46bd      	mov	sp, r7
 801d56c:	bd80      	pop	{r7, pc}
 801d56e:	bf00      	nop
 801d570:	08023bfc 	.word	0x08023bfc

0801d574 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d574:	b580      	push	{r7, lr}
 801d576:	b086      	sub	sp, #24
 801d578:	af00      	add	r7, sp, #0
 801d57a:	60f8      	str	r0, [r7, #12]
 801d57c:	60b9      	str	r1, [r7, #8]
 801d57e:	607a      	str	r2, [r7, #4]
 801d580:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d582:	8c3b      	ldrh	r3, [r7, #32]
 801d584:	4618      	mov	r0, r3
 801d586:	f7f7 f869 	bl	801465c <lwip_htons>
 801d58a:	4603      	mov	r3, r0
 801d58c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d58e:	210e      	movs	r1, #14
 801d590:	68b8      	ldr	r0, [r7, #8]
 801d592:	f7f8 fc4d 	bl	8015e30 <pbuf_add_header>
 801d596:	4603      	mov	r3, r0
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d125      	bne.n	801d5e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d59c:	68bb      	ldr	r3, [r7, #8]
 801d59e:	685b      	ldr	r3, [r3, #4]
 801d5a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d5a2:	693b      	ldr	r3, [r7, #16]
 801d5a4:	8afa      	ldrh	r2, [r7, #22]
 801d5a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d5a8:	693b      	ldr	r3, [r7, #16]
 801d5aa:	2206      	movs	r2, #6
 801d5ac:	6839      	ldr	r1, [r7, #0]
 801d5ae:	4618      	mov	r0, r3
 801d5b0:	f000 fc69 	bl	801de86 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d5b4:	693b      	ldr	r3, [r7, #16]
 801d5b6:	3306      	adds	r3, #6
 801d5b8:	2206      	movs	r2, #6
 801d5ba:	6879      	ldr	r1, [r7, #4]
 801d5bc:	4618      	mov	r0, r3
 801d5be:	f000 fc62 	bl	801de86 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d5c8:	2b06      	cmp	r3, #6
 801d5ca:	d006      	beq.n	801d5da <ethernet_output+0x66>
 801d5cc:	4b0a      	ldr	r3, [pc, #40]	@ (801d5f8 <ethernet_output+0x84>)
 801d5ce:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d5d2:	490a      	ldr	r1, [pc, #40]	@ (801d5fc <ethernet_output+0x88>)
 801d5d4:	480a      	ldr	r0, [pc, #40]	@ (801d600 <ethernet_output+0x8c>)
 801d5d6:	f000 fb13 	bl	801dc00 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	699b      	ldr	r3, [r3, #24]
 801d5de:	68b9      	ldr	r1, [r7, #8]
 801d5e0:	68f8      	ldr	r0, [r7, #12]
 801d5e2:	4798      	blx	r3
 801d5e4:	4603      	mov	r3, r0
 801d5e6:	e002      	b.n	801d5ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d5e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d5ea:	f06f 0301 	mvn.w	r3, #1
}
 801d5ee:	4618      	mov	r0, r3
 801d5f0:	3718      	adds	r7, #24
 801d5f2:	46bd      	mov	sp, r7
 801d5f4:	bd80      	pop	{r7, pc}
 801d5f6:	bf00      	nop
 801d5f8:	08023328 	.word	0x08023328
 801d5fc:	08023390 	.word	0x08023390
 801d600:	080233c4 	.word	0x080233c4

0801d604 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d604:	b580      	push	{r7, lr}
 801d606:	b082      	sub	sp, #8
 801d608:	af00      	add	r7, sp, #0
 801d60a:	6078      	str	r0, [r7, #4]
 801d60c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801d60e:	683b      	ldr	r3, [r7, #0]
 801d610:	2200      	movs	r2, #0
 801d612:	2104      	movs	r1, #4
 801d614:	4618      	mov	r0, r3
 801d616:	f7ed fcad 	bl	800af74 <osMessageQueueNew>
 801d61a:	4602      	mov	r2, r0
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	2b00      	cmp	r3, #0
 801d626:	d102      	bne.n	801d62e <sys_mbox_new+0x2a>
    return ERR_MEM;
 801d628:	f04f 33ff 	mov.w	r3, #4294967295
 801d62c:	e000      	b.n	801d630 <sys_mbox_new+0x2c>

  return ERR_OK;
 801d62e:	2300      	movs	r3, #0
}
 801d630:	4618      	mov	r0, r3
 801d632:	3708      	adds	r7, #8
 801d634:	46bd      	mov	sp, r7
 801d636:	bd80      	pop	{r7, pc}

0801d638 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801d638:	b580      	push	{r7, lr}
 801d63a:	b082      	sub	sp, #8
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	4618      	mov	r0, r3
 801d646:	f7ed fdc7 	bl	800b1d8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	681b      	ldr	r3, [r3, #0]
 801d64e:	4618      	mov	r0, r3
 801d650:	f7ed fde2 	bl	800b218 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801d654:	bf00      	nop
 801d656:	3708      	adds	r7, #8
 801d658:	46bd      	mov	sp, r7
 801d65a:	bd80      	pop	{r7, pc}

0801d65c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d65c:	b580      	push	{r7, lr}
 801d65e:	b084      	sub	sp, #16
 801d660:	af00      	add	r7, sp, #0
 801d662:	6078      	str	r0, [r7, #4]
 801d664:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801d666:	687b      	ldr	r3, [r7, #4]
 801d668:	6818      	ldr	r0, [r3, #0]
 801d66a:	4639      	mov	r1, r7
 801d66c:	2300      	movs	r3, #0
 801d66e:	2200      	movs	r2, #0
 801d670:	f7ed fcf4 	bl	800b05c <osMessageQueuePut>
 801d674:	4603      	mov	r3, r0
 801d676:	2b00      	cmp	r3, #0
 801d678:	d102      	bne.n	801d680 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801d67a:	2300      	movs	r3, #0
 801d67c:	73fb      	strb	r3, [r7, #15]
 801d67e:	e001      	b.n	801d684 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d680:	23ff      	movs	r3, #255	@ 0xff
 801d682:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d688:	4618      	mov	r0, r3
 801d68a:	3710      	adds	r7, #16
 801d68c:	46bd      	mov	sp, r7
 801d68e:	bd80      	pop	{r7, pc}

0801d690 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d690:	b580      	push	{r7, lr}
 801d692:	b086      	sub	sp, #24
 801d694:	af00      	add	r7, sp, #0
 801d696:	60f8      	str	r0, [r7, #12]
 801d698:	60b9      	str	r1, [r7, #8]
 801d69a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801d69c:	f7ed f928 	bl	800a8f0 <osKernelGetTickCount>
 801d6a0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d013      	beq.n	801d6d0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	6818      	ldr	r0, [r3, #0]
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	2200      	movs	r2, #0
 801d6b0:	68b9      	ldr	r1, [r7, #8]
 801d6b2:	f7ed fd33 	bl	800b11c <osMessageQueueGet>
 801d6b6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801d6b8:	693b      	ldr	r3, [r7, #16]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d105      	bne.n	801d6ca <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801d6be:	f7ed f917 	bl	800a8f0 <osKernelGetTickCount>
 801d6c2:	4602      	mov	r2, r0
 801d6c4:	697b      	ldr	r3, [r7, #20]
 801d6c6:	1ad3      	subs	r3, r2, r3
 801d6c8:	e00f      	b.n	801d6ea <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d6ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d6ce:	e00c      	b.n	801d6ea <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801d6d0:	68fb      	ldr	r3, [r7, #12]
 801d6d2:	6818      	ldr	r0, [r3, #0]
 801d6d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d6d8:	2200      	movs	r2, #0
 801d6da:	68b9      	ldr	r1, [r7, #8]
 801d6dc:	f7ed fd1e 	bl	800b11c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801d6e0:	f7ed f906 	bl	800a8f0 <osKernelGetTickCount>
 801d6e4:	4602      	mov	r2, r0
 801d6e6:	697b      	ldr	r3, [r7, #20]
 801d6e8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d6ea:	4618      	mov	r0, r3
 801d6ec:	3718      	adds	r7, #24
 801d6ee:	46bd      	mov	sp, r7
 801d6f0:	bd80      	pop	{r7, pc}

0801d6f2 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801d6f2:	b580      	push	{r7, lr}
 801d6f4:	b082      	sub	sp, #8
 801d6f6:	af00      	add	r7, sp, #0
 801d6f8:	6078      	str	r0, [r7, #4]
 801d6fa:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	6818      	ldr	r0, [r3, #0]
 801d700:	2300      	movs	r3, #0
 801d702:	2200      	movs	r2, #0
 801d704:	6839      	ldr	r1, [r7, #0]
 801d706:	f7ed fd09 	bl	800b11c <osMessageQueueGet>
 801d70a:	4603      	mov	r3, r0
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d101      	bne.n	801d714 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801d710:	2300      	movs	r3, #0
 801d712:	e001      	b.n	801d718 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801d714:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801d718:	4618      	mov	r0, r3
 801d71a:	3708      	adds	r7, #8
 801d71c:	46bd      	mov	sp, r7
 801d71e:	bd80      	pop	{r7, pc}

0801d720 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d720:	b480      	push	{r7}
 801d722:	b083      	sub	sp, #12
 801d724:	af00      	add	r7, sp, #0
 801d726:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d101      	bne.n	801d734 <sys_mbox_valid+0x14>
    return 0;
 801d730:	2300      	movs	r3, #0
 801d732:	e000      	b.n	801d736 <sys_mbox_valid+0x16>
  else
    return 1;
 801d734:	2301      	movs	r3, #1
}
 801d736:	4618      	mov	r0, r3
 801d738:	370c      	adds	r7, #12
 801d73a:	46bd      	mov	sp, r7
 801d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d740:	4770      	bx	lr

0801d742 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801d742:	b480      	push	{r7}
 801d744:	b083      	sub	sp, #12
 801d746:	af00      	add	r7, sp, #0
 801d748:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	2200      	movs	r2, #0
 801d74e:	601a      	str	r2, [r3, #0]
}
 801d750:	bf00      	nop
 801d752:	370c      	adds	r7, #12
 801d754:	46bd      	mov	sp, r7
 801d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d75a:	4770      	bx	lr

0801d75c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801d75c:	b580      	push	{r7, lr}
 801d75e:	b082      	sub	sp, #8
 801d760:	af00      	add	r7, sp, #0
 801d762:	6078      	str	r0, [r7, #4]
 801d764:	460b      	mov	r3, r1
 801d766:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801d768:	78fb      	ldrb	r3, [r7, #3]
 801d76a:	2200      	movs	r2, #0
 801d76c:	4619      	mov	r1, r3
 801d76e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801d772:	f7ed fabb 	bl	800acec <osSemaphoreNew>
 801d776:	4602      	mov	r2, r0
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801d77c:	687b      	ldr	r3, [r7, #4]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d102      	bne.n	801d78a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d784:	f04f 33ff 	mov.w	r3, #4294967295
 801d788:	e009      	b.n	801d79e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801d78a:	78fb      	ldrb	r3, [r7, #3]
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d105      	bne.n	801d79c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	2100      	movs	r1, #0
 801d796:	4618      	mov	r0, r3
 801d798:	f7ed fb32 	bl	800ae00 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801d79c:	2300      	movs	r3, #0
}
 801d79e:	4618      	mov	r0, r3
 801d7a0:	3708      	adds	r7, #8
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd80      	pop	{r7, pc}

0801d7a6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801d7a6:	b580      	push	{r7, lr}
 801d7a8:	b084      	sub	sp, #16
 801d7aa:	af00      	add	r7, sp, #0
 801d7ac:	6078      	str	r0, [r7, #4]
 801d7ae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801d7b0:	f7ed f89e 	bl	800a8f0 <osKernelGetTickCount>
 801d7b4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801d7b6:	683b      	ldr	r3, [r7, #0]
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	d011      	beq.n	801d7e0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	681b      	ldr	r3, [r3, #0]
 801d7c0:	6839      	ldr	r1, [r7, #0]
 801d7c2:	4618      	mov	r0, r3
 801d7c4:	f7ed fb1c 	bl	800ae00 <osSemaphoreAcquire>
 801d7c8:	4603      	mov	r3, r0
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d105      	bne.n	801d7da <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801d7ce:	f7ed f88f 	bl	800a8f0 <osKernelGetTickCount>
 801d7d2:	4602      	mov	r2, r0
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	1ad3      	subs	r3, r2, r3
 801d7d8:	e012      	b.n	801d800 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d7da:	f04f 33ff 	mov.w	r3, #4294967295
 801d7de:	e00f      	b.n	801d800 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801d7e0:	bf00      	nop
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	f04f 31ff 	mov.w	r1, #4294967295
 801d7ea:	4618      	mov	r0, r3
 801d7ec:	f7ed fb08 	bl	800ae00 <osSemaphoreAcquire>
 801d7f0:	4603      	mov	r3, r0
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d1f5      	bne.n	801d7e2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801d7f6:	f7ed f87b 	bl	800a8f0 <osKernelGetTickCount>
 801d7fa:	4602      	mov	r2, r0
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d800:	4618      	mov	r0, r3
 801d802:	3710      	adds	r7, #16
 801d804:	46bd      	mov	sp, r7
 801d806:	bd80      	pop	{r7, pc}

0801d808 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b082      	sub	sp, #8
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	4618      	mov	r0, r3
 801d816:	f7ed fb45 	bl	800aea4 <osSemaphoreRelease>
}
 801d81a:	bf00      	nop
 801d81c:	3708      	adds	r7, #8
 801d81e:	46bd      	mov	sp, r7
 801d820:	bd80      	pop	{r7, pc}

0801d822 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801d822:	b580      	push	{r7, lr}
 801d824:	b082      	sub	sp, #8
 801d826:	af00      	add	r7, sp, #0
 801d828:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	4618      	mov	r0, r3
 801d830:	f7ed fb7c 	bl	800af2c <osSemaphoreDelete>
}
 801d834:	bf00      	nop
 801d836:	3708      	adds	r7, #8
 801d838:	46bd      	mov	sp, r7
 801d83a:	bd80      	pop	{r7, pc}

0801d83c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801d83c:	b480      	push	{r7}
 801d83e:	b083      	sub	sp, #12
 801d840:	af00      	add	r7, sp, #0
 801d842:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	2b00      	cmp	r3, #0
 801d84a:	d101      	bne.n	801d850 <sys_sem_valid+0x14>
    return 0;
 801d84c:	2300      	movs	r3, #0
 801d84e:	e000      	b.n	801d852 <sys_sem_valid+0x16>
  else
    return 1;
 801d850:	2301      	movs	r3, #1
}
 801d852:	4618      	mov	r0, r3
 801d854:	370c      	adds	r7, #12
 801d856:	46bd      	mov	sp, r7
 801d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d85c:	4770      	bx	lr

0801d85e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801d85e:	b480      	push	{r7}
 801d860:	b083      	sub	sp, #12
 801d862:	af00      	add	r7, sp, #0
 801d864:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801d866:	687b      	ldr	r3, [r7, #4]
 801d868:	2200      	movs	r2, #0
 801d86a:	601a      	str	r2, [r3, #0]
}
 801d86c:	bf00      	nop
 801d86e:	370c      	adds	r7, #12
 801d870:	46bd      	mov	sp, r7
 801d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d876:	4770      	bx	lr

0801d878 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d878:	b580      	push	{r7, lr}
 801d87a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d87c:	2000      	movs	r0, #0
 801d87e:	f7ed f927 	bl	800aad0 <osMutexNew>
 801d882:	4603      	mov	r3, r0
 801d884:	4a01      	ldr	r2, [pc, #4]	@ (801d88c <sys_init+0x14>)
 801d886:	6013      	str	r3, [r2, #0]
#endif
}
 801d888:	bf00      	nop
 801d88a:	bd80      	pop	{r7, pc}
 801d88c:	2000fa14 	.word	0x2000fa14

0801d890 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d890:	b580      	push	{r7, lr}
 801d892:	b082      	sub	sp, #8
 801d894:	af00      	add	r7, sp, #0
 801d896:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d898:	2000      	movs	r0, #0
 801d89a:	f7ed f919 	bl	800aad0 <osMutexNew>
 801d89e:	4602      	mov	r2, r0
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	2b00      	cmp	r3, #0
 801d8aa:	d102      	bne.n	801d8b2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d8ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d8b0:	e000      	b.n	801d8b4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d8b2:	2300      	movs	r3, #0
}
 801d8b4:	4618      	mov	r0, r3
 801d8b6:	3708      	adds	r7, #8
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	bd80      	pop	{r7, pc}

0801d8bc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d8bc:	b580      	push	{r7, lr}
 801d8be:	b082      	sub	sp, #8
 801d8c0:	af00      	add	r7, sp, #0
 801d8c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	f04f 31ff 	mov.w	r1, #4294967295
 801d8cc:	4618      	mov	r0, r3
 801d8ce:	f7ed f985 	bl	800abdc <osMutexAcquire>
#endif
}
 801d8d2:	bf00      	nop
 801d8d4:	3708      	adds	r7, #8
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bd80      	pop	{r7, pc}

0801d8da <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d8da:	b580      	push	{r7, lr}
 801d8dc:	b082      	sub	sp, #8
 801d8de:	af00      	add	r7, sp, #0
 801d8e0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	4618      	mov	r0, r3
 801d8e8:	f7ed f9c3 	bl	800ac72 <osMutexRelease>
}
 801d8ec:	bf00      	nop
 801d8ee:	3708      	adds	r7, #8
 801d8f0:	46bd      	mov	sp, r7
 801d8f2:	bd80      	pop	{r7, pc}

0801d8f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d8f4:	b580      	push	{r7, lr}
 801d8f6:	b08e      	sub	sp, #56	@ 0x38
 801d8f8:	af00      	add	r7, sp, #0
 801d8fa:	60f8      	str	r0, [r7, #12]
 801d8fc:	60b9      	str	r1, [r7, #8]
 801d8fe:	607a      	str	r2, [r7, #4]
 801d900:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d902:	f107 0314 	add.w	r3, r7, #20
 801d906:	2224      	movs	r2, #36	@ 0x24
 801d908:	2100      	movs	r1, #0
 801d90a:	4618      	mov	r0, r3
 801d90c:	f000 fa17 	bl	801dd3e <memset>
 801d910:	68fb      	ldr	r3, [r7, #12]
 801d912:	617b      	str	r3, [r7, #20]
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d91c:	f107 0314 	add.w	r3, r7, #20
 801d920:	461a      	mov	r2, r3
 801d922:	6879      	ldr	r1, [r7, #4]
 801d924:	68b8      	ldr	r0, [r7, #8]
 801d926:	f7ec fff8 	bl	800a91a <osThreadNew>
 801d92a:	4603      	mov	r3, r0
#endif
}
 801d92c:	4618      	mov	r0, r3
 801d92e:	3738      	adds	r7, #56	@ 0x38
 801d930:	46bd      	mov	sp, r7
 801d932:	bd80      	pop	{r7, pc}

0801d934 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d934:	b580      	push	{r7, lr}
 801d936:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d938:	4b04      	ldr	r3, [pc, #16]	@ (801d94c <sys_arch_protect+0x18>)
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	f04f 31ff 	mov.w	r1, #4294967295
 801d940:	4618      	mov	r0, r3
 801d942:	f7ed f94b 	bl	800abdc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d946:	2301      	movs	r3, #1
}
 801d948:	4618      	mov	r0, r3
 801d94a:	bd80      	pop	{r7, pc}
 801d94c:	2000fa14 	.word	0x2000fa14

0801d950 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d950:	b580      	push	{r7, lr}
 801d952:	b082      	sub	sp, #8
 801d954:	af00      	add	r7, sp, #0
 801d956:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d958:	4b04      	ldr	r3, [pc, #16]	@ (801d96c <sys_arch_unprotect+0x1c>)
 801d95a:	681b      	ldr	r3, [r3, #0]
 801d95c:	4618      	mov	r0, r3
 801d95e:	f7ed f988 	bl	800ac72 <osMutexRelease>
}
 801d962:	bf00      	nop
 801d964:	3708      	adds	r7, #8
 801d966:	46bd      	mov	sp, r7
 801d968:	bd80      	pop	{r7, pc}
 801d96a:	bf00      	nop
 801d96c:	2000fa14 	.word	0x2000fa14

0801d970 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b084      	sub	sp, #16
 801d974:	af00      	add	r7, sp, #0
 801d976:	6078      	str	r0, [r7, #4]
 801d978:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d002      	beq.n	801d986 <fs_open+0x16>
 801d980:	683b      	ldr	r3, [r7, #0]
 801d982:	2b00      	cmp	r3, #0
 801d984:	d102      	bne.n	801d98c <fs_open+0x1c>
    return ERR_ARG;
 801d986:	f06f 030f 	mvn.w	r3, #15
 801d98a:	e028      	b.n	801d9de <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801d98c:	4b16      	ldr	r3, [pc, #88]	@ (801d9e8 <fs_open+0x78>)
 801d98e:	60fb      	str	r3, [r7, #12]
 801d990:	e020      	b.n	801d9d4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	685b      	ldr	r3, [r3, #4]
 801d996:	4619      	mov	r1, r3
 801d998:	6838      	ldr	r0, [r7, #0]
 801d99a:	f7e2 fcb9 	bl	8000310 <strcmp>
 801d99e:	4603      	mov	r3, r0
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d114      	bne.n	801d9ce <fs_open+0x5e>
      file->data = (const char *)f->data;
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	689a      	ldr	r2, [r3, #8]
 801d9a8:	687b      	ldr	r3, [r7, #4]
 801d9aa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 801d9ac:	68fb      	ldr	r3, [r7, #12]
 801d9ae:	68da      	ldr	r2, [r3, #12]
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	68da      	ldr	r2, [r3, #12]
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	2200      	movs	r2, #0
 801d9c0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	7c1a      	ldrb	r2, [r3, #16]
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	e007      	b.n	801d9de <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	60fb      	str	r3, [r7, #12]
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d1db      	bne.n	801d992 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 801d9da:	f06f 0305 	mvn.w	r3, #5
}
 801d9de:	4618      	mov	r0, r3
 801d9e0:	3710      	adds	r7, #16
 801d9e2:	46bd      	mov	sp, r7
 801d9e4:	bd80      	pop	{r7, pc}
 801d9e6:	bf00      	nop
 801d9e8:	08033cb0 	.word	0x08033cb0

0801d9ec <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 801d9ec:	b480      	push	{r7}
 801d9ee:	b083      	sub	sp, #12
 801d9f0:	af00      	add	r7, sp, #0
 801d9f2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801d9f4:	bf00      	nop
 801d9f6:	370c      	adds	r7, #12
 801d9f8:	46bd      	mov	sp, r7
 801d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9fe:	4770      	bx	lr

0801da00 <rand>:
 801da00:	4b16      	ldr	r3, [pc, #88]	@ (801da5c <rand+0x5c>)
 801da02:	b510      	push	{r4, lr}
 801da04:	681c      	ldr	r4, [r3, #0]
 801da06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801da08:	b9b3      	cbnz	r3, 801da38 <rand+0x38>
 801da0a:	2018      	movs	r0, #24
 801da0c:	f000 fa68 	bl	801dee0 <malloc>
 801da10:	4602      	mov	r2, r0
 801da12:	6320      	str	r0, [r4, #48]	@ 0x30
 801da14:	b920      	cbnz	r0, 801da20 <rand+0x20>
 801da16:	4b12      	ldr	r3, [pc, #72]	@ (801da60 <rand+0x60>)
 801da18:	4812      	ldr	r0, [pc, #72]	@ (801da64 <rand+0x64>)
 801da1a:	2152      	movs	r1, #82	@ 0x52
 801da1c:	f000 fa42 	bl	801dea4 <__assert_func>
 801da20:	4911      	ldr	r1, [pc, #68]	@ (801da68 <rand+0x68>)
 801da22:	4b12      	ldr	r3, [pc, #72]	@ (801da6c <rand+0x6c>)
 801da24:	e9c0 1300 	strd	r1, r3, [r0]
 801da28:	4b11      	ldr	r3, [pc, #68]	@ (801da70 <rand+0x70>)
 801da2a:	6083      	str	r3, [r0, #8]
 801da2c:	230b      	movs	r3, #11
 801da2e:	8183      	strh	r3, [r0, #12]
 801da30:	2100      	movs	r1, #0
 801da32:	2001      	movs	r0, #1
 801da34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801da38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801da3a:	480e      	ldr	r0, [pc, #56]	@ (801da74 <rand+0x74>)
 801da3c:	690b      	ldr	r3, [r1, #16]
 801da3e:	694c      	ldr	r4, [r1, #20]
 801da40:	4a0d      	ldr	r2, [pc, #52]	@ (801da78 <rand+0x78>)
 801da42:	4358      	muls	r0, r3
 801da44:	fb02 0004 	mla	r0, r2, r4, r0
 801da48:	fba3 3202 	umull	r3, r2, r3, r2
 801da4c:	3301      	adds	r3, #1
 801da4e:	eb40 0002 	adc.w	r0, r0, r2
 801da52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801da56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801da5a:	bd10      	pop	{r4, pc}
 801da5c:	20000050 	.word	0x20000050
 801da60:	08033cc4 	.word	0x08033cc4
 801da64:	08033cdb 	.word	0x08033cdb
 801da68:	abcd330e 	.word	0xabcd330e
 801da6c:	e66d1234 	.word	0xe66d1234
 801da70:	0005deec 	.word	0x0005deec
 801da74:	5851f42d 	.word	0x5851f42d
 801da78:	4c957f2d 	.word	0x4c957f2d

0801da7c <std>:
 801da7c:	2300      	movs	r3, #0
 801da7e:	b510      	push	{r4, lr}
 801da80:	4604      	mov	r4, r0
 801da82:	e9c0 3300 	strd	r3, r3, [r0]
 801da86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801da8a:	6083      	str	r3, [r0, #8]
 801da8c:	8181      	strh	r1, [r0, #12]
 801da8e:	6643      	str	r3, [r0, #100]	@ 0x64
 801da90:	81c2      	strh	r2, [r0, #14]
 801da92:	6183      	str	r3, [r0, #24]
 801da94:	4619      	mov	r1, r3
 801da96:	2208      	movs	r2, #8
 801da98:	305c      	adds	r0, #92	@ 0x5c
 801da9a:	f000 f950 	bl	801dd3e <memset>
 801da9e:	4b0d      	ldr	r3, [pc, #52]	@ (801dad4 <std+0x58>)
 801daa0:	6263      	str	r3, [r4, #36]	@ 0x24
 801daa2:	4b0d      	ldr	r3, [pc, #52]	@ (801dad8 <std+0x5c>)
 801daa4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801daa6:	4b0d      	ldr	r3, [pc, #52]	@ (801dadc <std+0x60>)
 801daa8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801daaa:	4b0d      	ldr	r3, [pc, #52]	@ (801dae0 <std+0x64>)
 801daac:	6323      	str	r3, [r4, #48]	@ 0x30
 801daae:	4b0d      	ldr	r3, [pc, #52]	@ (801dae4 <std+0x68>)
 801dab0:	6224      	str	r4, [r4, #32]
 801dab2:	429c      	cmp	r4, r3
 801dab4:	d006      	beq.n	801dac4 <std+0x48>
 801dab6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801daba:	4294      	cmp	r4, r2
 801dabc:	d002      	beq.n	801dac4 <std+0x48>
 801dabe:	33d0      	adds	r3, #208	@ 0xd0
 801dac0:	429c      	cmp	r4, r3
 801dac2:	d105      	bne.n	801dad0 <std+0x54>
 801dac4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dacc:	f000 b9d0 	b.w	801de70 <__retarget_lock_init_recursive>
 801dad0:	bd10      	pop	{r4, pc}
 801dad2:	bf00      	nop
 801dad4:	0801dc65 	.word	0x0801dc65
 801dad8:	0801dc87 	.word	0x0801dc87
 801dadc:	0801dcbf 	.word	0x0801dcbf
 801dae0:	0801dce3 	.word	0x0801dce3
 801dae4:	2000fa18 	.word	0x2000fa18

0801dae8 <stdio_exit_handler>:
 801dae8:	4a02      	ldr	r2, [pc, #8]	@ (801daf4 <stdio_exit_handler+0xc>)
 801daea:	4903      	ldr	r1, [pc, #12]	@ (801daf8 <stdio_exit_handler+0x10>)
 801daec:	4803      	ldr	r0, [pc, #12]	@ (801dafc <stdio_exit_handler+0x14>)
 801daee:	f000 b869 	b.w	801dbc4 <_fwalk_sglue>
 801daf2:	bf00      	nop
 801daf4:	20000044 	.word	0x20000044
 801daf8:	0801e9a5 	.word	0x0801e9a5
 801dafc:	20000054 	.word	0x20000054

0801db00 <cleanup_stdio>:
 801db00:	6841      	ldr	r1, [r0, #4]
 801db02:	4b0c      	ldr	r3, [pc, #48]	@ (801db34 <cleanup_stdio+0x34>)
 801db04:	4299      	cmp	r1, r3
 801db06:	b510      	push	{r4, lr}
 801db08:	4604      	mov	r4, r0
 801db0a:	d001      	beq.n	801db10 <cleanup_stdio+0x10>
 801db0c:	f000 ff4a 	bl	801e9a4 <_fflush_r>
 801db10:	68a1      	ldr	r1, [r4, #8]
 801db12:	4b09      	ldr	r3, [pc, #36]	@ (801db38 <cleanup_stdio+0x38>)
 801db14:	4299      	cmp	r1, r3
 801db16:	d002      	beq.n	801db1e <cleanup_stdio+0x1e>
 801db18:	4620      	mov	r0, r4
 801db1a:	f000 ff43 	bl	801e9a4 <_fflush_r>
 801db1e:	68e1      	ldr	r1, [r4, #12]
 801db20:	4b06      	ldr	r3, [pc, #24]	@ (801db3c <cleanup_stdio+0x3c>)
 801db22:	4299      	cmp	r1, r3
 801db24:	d004      	beq.n	801db30 <cleanup_stdio+0x30>
 801db26:	4620      	mov	r0, r4
 801db28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db2c:	f000 bf3a 	b.w	801e9a4 <_fflush_r>
 801db30:	bd10      	pop	{r4, pc}
 801db32:	bf00      	nop
 801db34:	2000fa18 	.word	0x2000fa18
 801db38:	2000fa80 	.word	0x2000fa80
 801db3c:	2000fae8 	.word	0x2000fae8

0801db40 <global_stdio_init.part.0>:
 801db40:	b510      	push	{r4, lr}
 801db42:	4b0b      	ldr	r3, [pc, #44]	@ (801db70 <global_stdio_init.part.0+0x30>)
 801db44:	4c0b      	ldr	r4, [pc, #44]	@ (801db74 <global_stdio_init.part.0+0x34>)
 801db46:	4a0c      	ldr	r2, [pc, #48]	@ (801db78 <global_stdio_init.part.0+0x38>)
 801db48:	601a      	str	r2, [r3, #0]
 801db4a:	4620      	mov	r0, r4
 801db4c:	2200      	movs	r2, #0
 801db4e:	2104      	movs	r1, #4
 801db50:	f7ff ff94 	bl	801da7c <std>
 801db54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801db58:	2201      	movs	r2, #1
 801db5a:	2109      	movs	r1, #9
 801db5c:	f7ff ff8e 	bl	801da7c <std>
 801db60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801db64:	2202      	movs	r2, #2
 801db66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db6a:	2112      	movs	r1, #18
 801db6c:	f7ff bf86 	b.w	801da7c <std>
 801db70:	2000fb50 	.word	0x2000fb50
 801db74:	2000fa18 	.word	0x2000fa18
 801db78:	0801dae9 	.word	0x0801dae9

0801db7c <__sfp_lock_acquire>:
 801db7c:	4801      	ldr	r0, [pc, #4]	@ (801db84 <__sfp_lock_acquire+0x8>)
 801db7e:	f000 b978 	b.w	801de72 <__retarget_lock_acquire_recursive>
 801db82:	bf00      	nop
 801db84:	2000fb55 	.word	0x2000fb55

0801db88 <__sfp_lock_release>:
 801db88:	4801      	ldr	r0, [pc, #4]	@ (801db90 <__sfp_lock_release+0x8>)
 801db8a:	f000 b973 	b.w	801de74 <__retarget_lock_release_recursive>
 801db8e:	bf00      	nop
 801db90:	2000fb55 	.word	0x2000fb55

0801db94 <__sinit>:
 801db94:	b510      	push	{r4, lr}
 801db96:	4604      	mov	r4, r0
 801db98:	f7ff fff0 	bl	801db7c <__sfp_lock_acquire>
 801db9c:	6a23      	ldr	r3, [r4, #32]
 801db9e:	b11b      	cbz	r3, 801dba8 <__sinit+0x14>
 801dba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dba4:	f7ff bff0 	b.w	801db88 <__sfp_lock_release>
 801dba8:	4b04      	ldr	r3, [pc, #16]	@ (801dbbc <__sinit+0x28>)
 801dbaa:	6223      	str	r3, [r4, #32]
 801dbac:	4b04      	ldr	r3, [pc, #16]	@ (801dbc0 <__sinit+0x2c>)
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	d1f5      	bne.n	801dba0 <__sinit+0xc>
 801dbb4:	f7ff ffc4 	bl	801db40 <global_stdio_init.part.0>
 801dbb8:	e7f2      	b.n	801dba0 <__sinit+0xc>
 801dbba:	bf00      	nop
 801dbbc:	0801db01 	.word	0x0801db01
 801dbc0:	2000fb50 	.word	0x2000fb50

0801dbc4 <_fwalk_sglue>:
 801dbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbc8:	4607      	mov	r7, r0
 801dbca:	4688      	mov	r8, r1
 801dbcc:	4614      	mov	r4, r2
 801dbce:	2600      	movs	r6, #0
 801dbd0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dbd4:	f1b9 0901 	subs.w	r9, r9, #1
 801dbd8:	d505      	bpl.n	801dbe6 <_fwalk_sglue+0x22>
 801dbda:	6824      	ldr	r4, [r4, #0]
 801dbdc:	2c00      	cmp	r4, #0
 801dbde:	d1f7      	bne.n	801dbd0 <_fwalk_sglue+0xc>
 801dbe0:	4630      	mov	r0, r6
 801dbe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbe6:	89ab      	ldrh	r3, [r5, #12]
 801dbe8:	2b01      	cmp	r3, #1
 801dbea:	d907      	bls.n	801dbfc <_fwalk_sglue+0x38>
 801dbec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dbf0:	3301      	adds	r3, #1
 801dbf2:	d003      	beq.n	801dbfc <_fwalk_sglue+0x38>
 801dbf4:	4629      	mov	r1, r5
 801dbf6:	4638      	mov	r0, r7
 801dbf8:	47c0      	blx	r8
 801dbfa:	4306      	orrs	r6, r0
 801dbfc:	3568      	adds	r5, #104	@ 0x68
 801dbfe:	e7e9      	b.n	801dbd4 <_fwalk_sglue+0x10>

0801dc00 <iprintf>:
 801dc00:	b40f      	push	{r0, r1, r2, r3}
 801dc02:	b507      	push	{r0, r1, r2, lr}
 801dc04:	4906      	ldr	r1, [pc, #24]	@ (801dc20 <iprintf+0x20>)
 801dc06:	ab04      	add	r3, sp, #16
 801dc08:	6808      	ldr	r0, [r1, #0]
 801dc0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc0e:	6881      	ldr	r1, [r0, #8]
 801dc10:	9301      	str	r3, [sp, #4]
 801dc12:	f000 fb9d 	bl	801e350 <_vfiprintf_r>
 801dc16:	b003      	add	sp, #12
 801dc18:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc1c:	b004      	add	sp, #16
 801dc1e:	4770      	bx	lr
 801dc20:	20000050 	.word	0x20000050

0801dc24 <siprintf>:
 801dc24:	b40e      	push	{r1, r2, r3}
 801dc26:	b500      	push	{lr}
 801dc28:	b09c      	sub	sp, #112	@ 0x70
 801dc2a:	ab1d      	add	r3, sp, #116	@ 0x74
 801dc2c:	9002      	str	r0, [sp, #8]
 801dc2e:	9006      	str	r0, [sp, #24]
 801dc30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801dc34:	4809      	ldr	r0, [pc, #36]	@ (801dc5c <siprintf+0x38>)
 801dc36:	9107      	str	r1, [sp, #28]
 801dc38:	9104      	str	r1, [sp, #16]
 801dc3a:	4909      	ldr	r1, [pc, #36]	@ (801dc60 <siprintf+0x3c>)
 801dc3c:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc40:	9105      	str	r1, [sp, #20]
 801dc42:	6800      	ldr	r0, [r0, #0]
 801dc44:	9301      	str	r3, [sp, #4]
 801dc46:	a902      	add	r1, sp, #8
 801dc48:	f000 fa5c 	bl	801e104 <_svfiprintf_r>
 801dc4c:	9b02      	ldr	r3, [sp, #8]
 801dc4e:	2200      	movs	r2, #0
 801dc50:	701a      	strb	r2, [r3, #0]
 801dc52:	b01c      	add	sp, #112	@ 0x70
 801dc54:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc58:	b003      	add	sp, #12
 801dc5a:	4770      	bx	lr
 801dc5c:	20000050 	.word	0x20000050
 801dc60:	ffff0208 	.word	0xffff0208

0801dc64 <__sread>:
 801dc64:	b510      	push	{r4, lr}
 801dc66:	460c      	mov	r4, r1
 801dc68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc6c:	f000 f8b2 	bl	801ddd4 <_read_r>
 801dc70:	2800      	cmp	r0, #0
 801dc72:	bfab      	itete	ge
 801dc74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801dc76:	89a3      	ldrhlt	r3, [r4, #12]
 801dc78:	181b      	addge	r3, r3, r0
 801dc7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801dc7e:	bfac      	ite	ge
 801dc80:	6563      	strge	r3, [r4, #84]	@ 0x54
 801dc82:	81a3      	strhlt	r3, [r4, #12]
 801dc84:	bd10      	pop	{r4, pc}

0801dc86 <__swrite>:
 801dc86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc8a:	461f      	mov	r7, r3
 801dc8c:	898b      	ldrh	r3, [r1, #12]
 801dc8e:	05db      	lsls	r3, r3, #23
 801dc90:	4605      	mov	r5, r0
 801dc92:	460c      	mov	r4, r1
 801dc94:	4616      	mov	r6, r2
 801dc96:	d505      	bpl.n	801dca4 <__swrite+0x1e>
 801dc98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dc9c:	2302      	movs	r3, #2
 801dc9e:	2200      	movs	r2, #0
 801dca0:	f000 f886 	bl	801ddb0 <_lseek_r>
 801dca4:	89a3      	ldrh	r3, [r4, #12]
 801dca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dcaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801dcae:	81a3      	strh	r3, [r4, #12]
 801dcb0:	4632      	mov	r2, r6
 801dcb2:	463b      	mov	r3, r7
 801dcb4:	4628      	mov	r0, r5
 801dcb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dcba:	f000 b89d 	b.w	801ddf8 <_write_r>

0801dcbe <__sseek>:
 801dcbe:	b510      	push	{r4, lr}
 801dcc0:	460c      	mov	r4, r1
 801dcc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcc6:	f000 f873 	bl	801ddb0 <_lseek_r>
 801dcca:	1c43      	adds	r3, r0, #1
 801dccc:	89a3      	ldrh	r3, [r4, #12]
 801dcce:	bf15      	itete	ne
 801dcd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801dcd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801dcd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801dcda:	81a3      	strheq	r3, [r4, #12]
 801dcdc:	bf18      	it	ne
 801dcde:	81a3      	strhne	r3, [r4, #12]
 801dce0:	bd10      	pop	{r4, pc}

0801dce2 <__sclose>:
 801dce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dce6:	f000 b853 	b.w	801dd90 <_close_r>

0801dcea <memcmp>:
 801dcea:	b510      	push	{r4, lr}
 801dcec:	3901      	subs	r1, #1
 801dcee:	4402      	add	r2, r0
 801dcf0:	4290      	cmp	r0, r2
 801dcf2:	d101      	bne.n	801dcf8 <memcmp+0xe>
 801dcf4:	2000      	movs	r0, #0
 801dcf6:	e005      	b.n	801dd04 <memcmp+0x1a>
 801dcf8:	7803      	ldrb	r3, [r0, #0]
 801dcfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dcfe:	42a3      	cmp	r3, r4
 801dd00:	d001      	beq.n	801dd06 <memcmp+0x1c>
 801dd02:	1b18      	subs	r0, r3, r4
 801dd04:	bd10      	pop	{r4, pc}
 801dd06:	3001      	adds	r0, #1
 801dd08:	e7f2      	b.n	801dcf0 <memcmp+0x6>

0801dd0a <memmove>:
 801dd0a:	4288      	cmp	r0, r1
 801dd0c:	b510      	push	{r4, lr}
 801dd0e:	eb01 0402 	add.w	r4, r1, r2
 801dd12:	d902      	bls.n	801dd1a <memmove+0x10>
 801dd14:	4284      	cmp	r4, r0
 801dd16:	4623      	mov	r3, r4
 801dd18:	d807      	bhi.n	801dd2a <memmove+0x20>
 801dd1a:	1e43      	subs	r3, r0, #1
 801dd1c:	42a1      	cmp	r1, r4
 801dd1e:	d008      	beq.n	801dd32 <memmove+0x28>
 801dd20:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd24:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dd28:	e7f8      	b.n	801dd1c <memmove+0x12>
 801dd2a:	4402      	add	r2, r0
 801dd2c:	4601      	mov	r1, r0
 801dd2e:	428a      	cmp	r2, r1
 801dd30:	d100      	bne.n	801dd34 <memmove+0x2a>
 801dd32:	bd10      	pop	{r4, pc}
 801dd34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dd38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dd3c:	e7f7      	b.n	801dd2e <memmove+0x24>

0801dd3e <memset>:
 801dd3e:	4402      	add	r2, r0
 801dd40:	4603      	mov	r3, r0
 801dd42:	4293      	cmp	r3, r2
 801dd44:	d100      	bne.n	801dd48 <memset+0xa>
 801dd46:	4770      	bx	lr
 801dd48:	f803 1b01 	strb.w	r1, [r3], #1
 801dd4c:	e7f9      	b.n	801dd42 <memset+0x4>

0801dd4e <strcat>:
 801dd4e:	b510      	push	{r4, lr}
 801dd50:	4602      	mov	r2, r0
 801dd52:	7814      	ldrb	r4, [r2, #0]
 801dd54:	4613      	mov	r3, r2
 801dd56:	3201      	adds	r2, #1
 801dd58:	2c00      	cmp	r4, #0
 801dd5a:	d1fa      	bne.n	801dd52 <strcat+0x4>
 801dd5c:	3b01      	subs	r3, #1
 801dd5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dd66:	2a00      	cmp	r2, #0
 801dd68:	d1f9      	bne.n	801dd5e <strcat+0x10>
 801dd6a:	bd10      	pop	{r4, pc}

0801dd6c <strncmp>:
 801dd6c:	b510      	push	{r4, lr}
 801dd6e:	b16a      	cbz	r2, 801dd8c <strncmp+0x20>
 801dd70:	3901      	subs	r1, #1
 801dd72:	1884      	adds	r4, r0, r2
 801dd74:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801dd7c:	429a      	cmp	r2, r3
 801dd7e:	d103      	bne.n	801dd88 <strncmp+0x1c>
 801dd80:	42a0      	cmp	r0, r4
 801dd82:	d001      	beq.n	801dd88 <strncmp+0x1c>
 801dd84:	2a00      	cmp	r2, #0
 801dd86:	d1f5      	bne.n	801dd74 <strncmp+0x8>
 801dd88:	1ad0      	subs	r0, r2, r3
 801dd8a:	bd10      	pop	{r4, pc}
 801dd8c:	4610      	mov	r0, r2
 801dd8e:	e7fc      	b.n	801dd8a <strncmp+0x1e>

0801dd90 <_close_r>:
 801dd90:	b538      	push	{r3, r4, r5, lr}
 801dd92:	4d06      	ldr	r5, [pc, #24]	@ (801ddac <_close_r+0x1c>)
 801dd94:	2300      	movs	r3, #0
 801dd96:	4604      	mov	r4, r0
 801dd98:	4608      	mov	r0, r1
 801dd9a:	602b      	str	r3, [r5, #0]
 801dd9c:	f7e4 f908 	bl	8001fb0 <_close>
 801dda0:	1c43      	adds	r3, r0, #1
 801dda2:	d102      	bne.n	801ddaa <_close_r+0x1a>
 801dda4:	682b      	ldr	r3, [r5, #0]
 801dda6:	b103      	cbz	r3, 801ddaa <_close_r+0x1a>
 801dda8:	6023      	str	r3, [r4, #0]
 801ddaa:	bd38      	pop	{r3, r4, r5, pc}
 801ddac:	2000fa10 	.word	0x2000fa10

0801ddb0 <_lseek_r>:
 801ddb0:	b538      	push	{r3, r4, r5, lr}
 801ddb2:	4d07      	ldr	r5, [pc, #28]	@ (801ddd0 <_lseek_r+0x20>)
 801ddb4:	4604      	mov	r4, r0
 801ddb6:	4608      	mov	r0, r1
 801ddb8:	4611      	mov	r1, r2
 801ddba:	2200      	movs	r2, #0
 801ddbc:	602a      	str	r2, [r5, #0]
 801ddbe:	461a      	mov	r2, r3
 801ddc0:	f7e4 f91d 	bl	8001ffe <_lseek>
 801ddc4:	1c43      	adds	r3, r0, #1
 801ddc6:	d102      	bne.n	801ddce <_lseek_r+0x1e>
 801ddc8:	682b      	ldr	r3, [r5, #0]
 801ddca:	b103      	cbz	r3, 801ddce <_lseek_r+0x1e>
 801ddcc:	6023      	str	r3, [r4, #0]
 801ddce:	bd38      	pop	{r3, r4, r5, pc}
 801ddd0:	2000fa10 	.word	0x2000fa10

0801ddd4 <_read_r>:
 801ddd4:	b538      	push	{r3, r4, r5, lr}
 801ddd6:	4d07      	ldr	r5, [pc, #28]	@ (801ddf4 <_read_r+0x20>)
 801ddd8:	4604      	mov	r4, r0
 801ddda:	4608      	mov	r0, r1
 801dddc:	4611      	mov	r1, r2
 801ddde:	2200      	movs	r2, #0
 801dde0:	602a      	str	r2, [r5, #0]
 801dde2:	461a      	mov	r2, r3
 801dde4:	f7e4 f8c7 	bl	8001f76 <_read>
 801dde8:	1c43      	adds	r3, r0, #1
 801ddea:	d102      	bne.n	801ddf2 <_read_r+0x1e>
 801ddec:	682b      	ldr	r3, [r5, #0]
 801ddee:	b103      	cbz	r3, 801ddf2 <_read_r+0x1e>
 801ddf0:	6023      	str	r3, [r4, #0]
 801ddf2:	bd38      	pop	{r3, r4, r5, pc}
 801ddf4:	2000fa10 	.word	0x2000fa10

0801ddf8 <_write_r>:
 801ddf8:	b538      	push	{r3, r4, r5, lr}
 801ddfa:	4d07      	ldr	r5, [pc, #28]	@ (801de18 <_write_r+0x20>)
 801ddfc:	4604      	mov	r4, r0
 801ddfe:	4608      	mov	r0, r1
 801de00:	4611      	mov	r1, r2
 801de02:	2200      	movs	r2, #0
 801de04:	602a      	str	r2, [r5, #0]
 801de06:	461a      	mov	r2, r3
 801de08:	f7e2 fcea 	bl	80007e0 <_write>
 801de0c:	1c43      	adds	r3, r0, #1
 801de0e:	d102      	bne.n	801de16 <_write_r+0x1e>
 801de10:	682b      	ldr	r3, [r5, #0]
 801de12:	b103      	cbz	r3, 801de16 <_write_r+0x1e>
 801de14:	6023      	str	r3, [r4, #0]
 801de16:	bd38      	pop	{r3, r4, r5, pc}
 801de18:	2000fa10 	.word	0x2000fa10

0801de1c <__errno>:
 801de1c:	4b01      	ldr	r3, [pc, #4]	@ (801de24 <__errno+0x8>)
 801de1e:	6818      	ldr	r0, [r3, #0]
 801de20:	4770      	bx	lr
 801de22:	bf00      	nop
 801de24:	20000050 	.word	0x20000050

0801de28 <__libc_init_array>:
 801de28:	b570      	push	{r4, r5, r6, lr}
 801de2a:	4d0d      	ldr	r5, [pc, #52]	@ (801de60 <__libc_init_array+0x38>)
 801de2c:	4c0d      	ldr	r4, [pc, #52]	@ (801de64 <__libc_init_array+0x3c>)
 801de2e:	1b64      	subs	r4, r4, r5
 801de30:	10a4      	asrs	r4, r4, #2
 801de32:	2600      	movs	r6, #0
 801de34:	42a6      	cmp	r6, r4
 801de36:	d109      	bne.n	801de4c <__libc_init_array+0x24>
 801de38:	4d0b      	ldr	r5, [pc, #44]	@ (801de68 <__libc_init_array+0x40>)
 801de3a:	4c0c      	ldr	r4, [pc, #48]	@ (801de6c <__libc_init_array+0x44>)
 801de3c:	f000 ffe0 	bl	801ee00 <_init>
 801de40:	1b64      	subs	r4, r4, r5
 801de42:	10a4      	asrs	r4, r4, #2
 801de44:	2600      	movs	r6, #0
 801de46:	42a6      	cmp	r6, r4
 801de48:	d105      	bne.n	801de56 <__libc_init_array+0x2e>
 801de4a:	bd70      	pop	{r4, r5, r6, pc}
 801de4c:	f855 3b04 	ldr.w	r3, [r5], #4
 801de50:	4798      	blx	r3
 801de52:	3601      	adds	r6, #1
 801de54:	e7ee      	b.n	801de34 <__libc_init_array+0xc>
 801de56:	f855 3b04 	ldr.w	r3, [r5], #4
 801de5a:	4798      	blx	r3
 801de5c:	3601      	adds	r6, #1
 801de5e:	e7f2      	b.n	801de46 <__libc_init_array+0x1e>
 801de60:	08033dac 	.word	0x08033dac
 801de64:	08033dac 	.word	0x08033dac
 801de68:	08033dac 	.word	0x08033dac
 801de6c:	08033db0 	.word	0x08033db0

0801de70 <__retarget_lock_init_recursive>:
 801de70:	4770      	bx	lr

0801de72 <__retarget_lock_acquire_recursive>:
 801de72:	4770      	bx	lr

0801de74 <__retarget_lock_release_recursive>:
 801de74:	4770      	bx	lr

0801de76 <strcpy>:
 801de76:	4603      	mov	r3, r0
 801de78:	f811 2b01 	ldrb.w	r2, [r1], #1
 801de7c:	f803 2b01 	strb.w	r2, [r3], #1
 801de80:	2a00      	cmp	r2, #0
 801de82:	d1f9      	bne.n	801de78 <strcpy+0x2>
 801de84:	4770      	bx	lr

0801de86 <memcpy>:
 801de86:	440a      	add	r2, r1
 801de88:	4291      	cmp	r1, r2
 801de8a:	f100 33ff 	add.w	r3, r0, #4294967295
 801de8e:	d100      	bne.n	801de92 <memcpy+0xc>
 801de90:	4770      	bx	lr
 801de92:	b510      	push	{r4, lr}
 801de94:	f811 4b01 	ldrb.w	r4, [r1], #1
 801de98:	f803 4f01 	strb.w	r4, [r3, #1]!
 801de9c:	4291      	cmp	r1, r2
 801de9e:	d1f9      	bne.n	801de94 <memcpy+0xe>
 801dea0:	bd10      	pop	{r4, pc}
	...

0801dea4 <__assert_func>:
 801dea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dea6:	4614      	mov	r4, r2
 801dea8:	461a      	mov	r2, r3
 801deaa:	4b09      	ldr	r3, [pc, #36]	@ (801ded0 <__assert_func+0x2c>)
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	4605      	mov	r5, r0
 801deb0:	68d8      	ldr	r0, [r3, #12]
 801deb2:	b954      	cbnz	r4, 801deca <__assert_func+0x26>
 801deb4:	4b07      	ldr	r3, [pc, #28]	@ (801ded4 <__assert_func+0x30>)
 801deb6:	461c      	mov	r4, r3
 801deb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801debc:	9100      	str	r1, [sp, #0]
 801debe:	462b      	mov	r3, r5
 801dec0:	4905      	ldr	r1, [pc, #20]	@ (801ded8 <__assert_func+0x34>)
 801dec2:	f000 fd97 	bl	801e9f4 <fiprintf>
 801dec6:	f000 fe4b 	bl	801eb60 <abort>
 801deca:	4b04      	ldr	r3, [pc, #16]	@ (801dedc <__assert_func+0x38>)
 801decc:	e7f4      	b.n	801deb8 <__assert_func+0x14>
 801dece:	bf00      	nop
 801ded0:	20000050 	.word	0x20000050
 801ded4:	08033d6e 	.word	0x08033d6e
 801ded8:	08033d40 	.word	0x08033d40
 801dedc:	08033d33 	.word	0x08033d33

0801dee0 <malloc>:
 801dee0:	4b02      	ldr	r3, [pc, #8]	@ (801deec <malloc+0xc>)
 801dee2:	4601      	mov	r1, r0
 801dee4:	6818      	ldr	r0, [r3, #0]
 801dee6:	f000 b825 	b.w	801df34 <_malloc_r>
 801deea:	bf00      	nop
 801deec:	20000050 	.word	0x20000050

0801def0 <sbrk_aligned>:
 801def0:	b570      	push	{r4, r5, r6, lr}
 801def2:	4e0f      	ldr	r6, [pc, #60]	@ (801df30 <sbrk_aligned+0x40>)
 801def4:	460c      	mov	r4, r1
 801def6:	6831      	ldr	r1, [r6, #0]
 801def8:	4605      	mov	r5, r0
 801defa:	b911      	cbnz	r1, 801df02 <sbrk_aligned+0x12>
 801defc:	f000 fe20 	bl	801eb40 <_sbrk_r>
 801df00:	6030      	str	r0, [r6, #0]
 801df02:	4621      	mov	r1, r4
 801df04:	4628      	mov	r0, r5
 801df06:	f000 fe1b 	bl	801eb40 <_sbrk_r>
 801df0a:	1c43      	adds	r3, r0, #1
 801df0c:	d103      	bne.n	801df16 <sbrk_aligned+0x26>
 801df0e:	f04f 34ff 	mov.w	r4, #4294967295
 801df12:	4620      	mov	r0, r4
 801df14:	bd70      	pop	{r4, r5, r6, pc}
 801df16:	1cc4      	adds	r4, r0, #3
 801df18:	f024 0403 	bic.w	r4, r4, #3
 801df1c:	42a0      	cmp	r0, r4
 801df1e:	d0f8      	beq.n	801df12 <sbrk_aligned+0x22>
 801df20:	1a21      	subs	r1, r4, r0
 801df22:	4628      	mov	r0, r5
 801df24:	f000 fe0c 	bl	801eb40 <_sbrk_r>
 801df28:	3001      	adds	r0, #1
 801df2a:	d1f2      	bne.n	801df12 <sbrk_aligned+0x22>
 801df2c:	e7ef      	b.n	801df0e <sbrk_aligned+0x1e>
 801df2e:	bf00      	nop
 801df30:	2000fb58 	.word	0x2000fb58

0801df34 <_malloc_r>:
 801df34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df38:	1ccd      	adds	r5, r1, #3
 801df3a:	f025 0503 	bic.w	r5, r5, #3
 801df3e:	3508      	adds	r5, #8
 801df40:	2d0c      	cmp	r5, #12
 801df42:	bf38      	it	cc
 801df44:	250c      	movcc	r5, #12
 801df46:	2d00      	cmp	r5, #0
 801df48:	4606      	mov	r6, r0
 801df4a:	db01      	blt.n	801df50 <_malloc_r+0x1c>
 801df4c:	42a9      	cmp	r1, r5
 801df4e:	d904      	bls.n	801df5a <_malloc_r+0x26>
 801df50:	230c      	movs	r3, #12
 801df52:	6033      	str	r3, [r6, #0]
 801df54:	2000      	movs	r0, #0
 801df56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e030 <_malloc_r+0xfc>
 801df5e:	f000 f869 	bl	801e034 <__malloc_lock>
 801df62:	f8d8 3000 	ldr.w	r3, [r8]
 801df66:	461c      	mov	r4, r3
 801df68:	bb44      	cbnz	r4, 801dfbc <_malloc_r+0x88>
 801df6a:	4629      	mov	r1, r5
 801df6c:	4630      	mov	r0, r6
 801df6e:	f7ff ffbf 	bl	801def0 <sbrk_aligned>
 801df72:	1c43      	adds	r3, r0, #1
 801df74:	4604      	mov	r4, r0
 801df76:	d158      	bne.n	801e02a <_malloc_r+0xf6>
 801df78:	f8d8 4000 	ldr.w	r4, [r8]
 801df7c:	4627      	mov	r7, r4
 801df7e:	2f00      	cmp	r7, #0
 801df80:	d143      	bne.n	801e00a <_malloc_r+0xd6>
 801df82:	2c00      	cmp	r4, #0
 801df84:	d04b      	beq.n	801e01e <_malloc_r+0xea>
 801df86:	6823      	ldr	r3, [r4, #0]
 801df88:	4639      	mov	r1, r7
 801df8a:	4630      	mov	r0, r6
 801df8c:	eb04 0903 	add.w	r9, r4, r3
 801df90:	f000 fdd6 	bl	801eb40 <_sbrk_r>
 801df94:	4581      	cmp	r9, r0
 801df96:	d142      	bne.n	801e01e <_malloc_r+0xea>
 801df98:	6821      	ldr	r1, [r4, #0]
 801df9a:	1a6d      	subs	r5, r5, r1
 801df9c:	4629      	mov	r1, r5
 801df9e:	4630      	mov	r0, r6
 801dfa0:	f7ff ffa6 	bl	801def0 <sbrk_aligned>
 801dfa4:	3001      	adds	r0, #1
 801dfa6:	d03a      	beq.n	801e01e <_malloc_r+0xea>
 801dfa8:	6823      	ldr	r3, [r4, #0]
 801dfaa:	442b      	add	r3, r5
 801dfac:	6023      	str	r3, [r4, #0]
 801dfae:	f8d8 3000 	ldr.w	r3, [r8]
 801dfb2:	685a      	ldr	r2, [r3, #4]
 801dfb4:	bb62      	cbnz	r2, 801e010 <_malloc_r+0xdc>
 801dfb6:	f8c8 7000 	str.w	r7, [r8]
 801dfba:	e00f      	b.n	801dfdc <_malloc_r+0xa8>
 801dfbc:	6822      	ldr	r2, [r4, #0]
 801dfbe:	1b52      	subs	r2, r2, r5
 801dfc0:	d420      	bmi.n	801e004 <_malloc_r+0xd0>
 801dfc2:	2a0b      	cmp	r2, #11
 801dfc4:	d917      	bls.n	801dff6 <_malloc_r+0xc2>
 801dfc6:	1961      	adds	r1, r4, r5
 801dfc8:	42a3      	cmp	r3, r4
 801dfca:	6025      	str	r5, [r4, #0]
 801dfcc:	bf18      	it	ne
 801dfce:	6059      	strne	r1, [r3, #4]
 801dfd0:	6863      	ldr	r3, [r4, #4]
 801dfd2:	bf08      	it	eq
 801dfd4:	f8c8 1000 	streq.w	r1, [r8]
 801dfd8:	5162      	str	r2, [r4, r5]
 801dfda:	604b      	str	r3, [r1, #4]
 801dfdc:	4630      	mov	r0, r6
 801dfde:	f000 f82f 	bl	801e040 <__malloc_unlock>
 801dfe2:	f104 000b 	add.w	r0, r4, #11
 801dfe6:	1d23      	adds	r3, r4, #4
 801dfe8:	f020 0007 	bic.w	r0, r0, #7
 801dfec:	1ac2      	subs	r2, r0, r3
 801dfee:	bf1c      	itt	ne
 801dff0:	1a1b      	subne	r3, r3, r0
 801dff2:	50a3      	strne	r3, [r4, r2]
 801dff4:	e7af      	b.n	801df56 <_malloc_r+0x22>
 801dff6:	6862      	ldr	r2, [r4, #4]
 801dff8:	42a3      	cmp	r3, r4
 801dffa:	bf0c      	ite	eq
 801dffc:	f8c8 2000 	streq.w	r2, [r8]
 801e000:	605a      	strne	r2, [r3, #4]
 801e002:	e7eb      	b.n	801dfdc <_malloc_r+0xa8>
 801e004:	4623      	mov	r3, r4
 801e006:	6864      	ldr	r4, [r4, #4]
 801e008:	e7ae      	b.n	801df68 <_malloc_r+0x34>
 801e00a:	463c      	mov	r4, r7
 801e00c:	687f      	ldr	r7, [r7, #4]
 801e00e:	e7b6      	b.n	801df7e <_malloc_r+0x4a>
 801e010:	461a      	mov	r2, r3
 801e012:	685b      	ldr	r3, [r3, #4]
 801e014:	42a3      	cmp	r3, r4
 801e016:	d1fb      	bne.n	801e010 <_malloc_r+0xdc>
 801e018:	2300      	movs	r3, #0
 801e01a:	6053      	str	r3, [r2, #4]
 801e01c:	e7de      	b.n	801dfdc <_malloc_r+0xa8>
 801e01e:	230c      	movs	r3, #12
 801e020:	6033      	str	r3, [r6, #0]
 801e022:	4630      	mov	r0, r6
 801e024:	f000 f80c 	bl	801e040 <__malloc_unlock>
 801e028:	e794      	b.n	801df54 <_malloc_r+0x20>
 801e02a:	6005      	str	r5, [r0, #0]
 801e02c:	e7d6      	b.n	801dfdc <_malloc_r+0xa8>
 801e02e:	bf00      	nop
 801e030:	2000fb5c 	.word	0x2000fb5c

0801e034 <__malloc_lock>:
 801e034:	4801      	ldr	r0, [pc, #4]	@ (801e03c <__malloc_lock+0x8>)
 801e036:	f7ff bf1c 	b.w	801de72 <__retarget_lock_acquire_recursive>
 801e03a:	bf00      	nop
 801e03c:	2000fb54 	.word	0x2000fb54

0801e040 <__malloc_unlock>:
 801e040:	4801      	ldr	r0, [pc, #4]	@ (801e048 <__malloc_unlock+0x8>)
 801e042:	f7ff bf17 	b.w	801de74 <__retarget_lock_release_recursive>
 801e046:	bf00      	nop
 801e048:	2000fb54 	.word	0x2000fb54

0801e04c <__ssputs_r>:
 801e04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e050:	688e      	ldr	r6, [r1, #8]
 801e052:	461f      	mov	r7, r3
 801e054:	42be      	cmp	r6, r7
 801e056:	680b      	ldr	r3, [r1, #0]
 801e058:	4682      	mov	sl, r0
 801e05a:	460c      	mov	r4, r1
 801e05c:	4690      	mov	r8, r2
 801e05e:	d82d      	bhi.n	801e0bc <__ssputs_r+0x70>
 801e060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e064:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801e068:	d026      	beq.n	801e0b8 <__ssputs_r+0x6c>
 801e06a:	6965      	ldr	r5, [r4, #20]
 801e06c:	6909      	ldr	r1, [r1, #16]
 801e06e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e072:	eba3 0901 	sub.w	r9, r3, r1
 801e076:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e07a:	1c7b      	adds	r3, r7, #1
 801e07c:	444b      	add	r3, r9
 801e07e:	106d      	asrs	r5, r5, #1
 801e080:	429d      	cmp	r5, r3
 801e082:	bf38      	it	cc
 801e084:	461d      	movcc	r5, r3
 801e086:	0553      	lsls	r3, r2, #21
 801e088:	d527      	bpl.n	801e0da <__ssputs_r+0x8e>
 801e08a:	4629      	mov	r1, r5
 801e08c:	f7ff ff52 	bl	801df34 <_malloc_r>
 801e090:	4606      	mov	r6, r0
 801e092:	b360      	cbz	r0, 801e0ee <__ssputs_r+0xa2>
 801e094:	6921      	ldr	r1, [r4, #16]
 801e096:	464a      	mov	r2, r9
 801e098:	f7ff fef5 	bl	801de86 <memcpy>
 801e09c:	89a3      	ldrh	r3, [r4, #12]
 801e09e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801e0a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e0a6:	81a3      	strh	r3, [r4, #12]
 801e0a8:	6126      	str	r6, [r4, #16]
 801e0aa:	6165      	str	r5, [r4, #20]
 801e0ac:	444e      	add	r6, r9
 801e0ae:	eba5 0509 	sub.w	r5, r5, r9
 801e0b2:	6026      	str	r6, [r4, #0]
 801e0b4:	60a5      	str	r5, [r4, #8]
 801e0b6:	463e      	mov	r6, r7
 801e0b8:	42be      	cmp	r6, r7
 801e0ba:	d900      	bls.n	801e0be <__ssputs_r+0x72>
 801e0bc:	463e      	mov	r6, r7
 801e0be:	6820      	ldr	r0, [r4, #0]
 801e0c0:	4632      	mov	r2, r6
 801e0c2:	4641      	mov	r1, r8
 801e0c4:	f7ff fe21 	bl	801dd0a <memmove>
 801e0c8:	68a3      	ldr	r3, [r4, #8]
 801e0ca:	1b9b      	subs	r3, r3, r6
 801e0cc:	60a3      	str	r3, [r4, #8]
 801e0ce:	6823      	ldr	r3, [r4, #0]
 801e0d0:	4433      	add	r3, r6
 801e0d2:	6023      	str	r3, [r4, #0]
 801e0d4:	2000      	movs	r0, #0
 801e0d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e0da:	462a      	mov	r2, r5
 801e0dc:	f000 fd92 	bl	801ec04 <_realloc_r>
 801e0e0:	4606      	mov	r6, r0
 801e0e2:	2800      	cmp	r0, #0
 801e0e4:	d1e0      	bne.n	801e0a8 <__ssputs_r+0x5c>
 801e0e6:	6921      	ldr	r1, [r4, #16]
 801e0e8:	4650      	mov	r0, sl
 801e0ea:	f000 fd41 	bl	801eb70 <_free_r>
 801e0ee:	230c      	movs	r3, #12
 801e0f0:	f8ca 3000 	str.w	r3, [sl]
 801e0f4:	89a3      	ldrh	r3, [r4, #12]
 801e0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e0fa:	81a3      	strh	r3, [r4, #12]
 801e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e100:	e7e9      	b.n	801e0d6 <__ssputs_r+0x8a>
	...

0801e104 <_svfiprintf_r>:
 801e104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e108:	4698      	mov	r8, r3
 801e10a:	898b      	ldrh	r3, [r1, #12]
 801e10c:	061b      	lsls	r3, r3, #24
 801e10e:	b09d      	sub	sp, #116	@ 0x74
 801e110:	4607      	mov	r7, r0
 801e112:	460d      	mov	r5, r1
 801e114:	4614      	mov	r4, r2
 801e116:	d510      	bpl.n	801e13a <_svfiprintf_r+0x36>
 801e118:	690b      	ldr	r3, [r1, #16]
 801e11a:	b973      	cbnz	r3, 801e13a <_svfiprintf_r+0x36>
 801e11c:	2140      	movs	r1, #64	@ 0x40
 801e11e:	f7ff ff09 	bl	801df34 <_malloc_r>
 801e122:	6028      	str	r0, [r5, #0]
 801e124:	6128      	str	r0, [r5, #16]
 801e126:	b930      	cbnz	r0, 801e136 <_svfiprintf_r+0x32>
 801e128:	230c      	movs	r3, #12
 801e12a:	603b      	str	r3, [r7, #0]
 801e12c:	f04f 30ff 	mov.w	r0, #4294967295
 801e130:	b01d      	add	sp, #116	@ 0x74
 801e132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e136:	2340      	movs	r3, #64	@ 0x40
 801e138:	616b      	str	r3, [r5, #20]
 801e13a:	2300      	movs	r3, #0
 801e13c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e13e:	2320      	movs	r3, #32
 801e140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e144:	f8cd 800c 	str.w	r8, [sp, #12]
 801e148:	2330      	movs	r3, #48	@ 0x30
 801e14a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801e2e8 <_svfiprintf_r+0x1e4>
 801e14e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e152:	f04f 0901 	mov.w	r9, #1
 801e156:	4623      	mov	r3, r4
 801e158:	469a      	mov	sl, r3
 801e15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e15e:	b10a      	cbz	r2, 801e164 <_svfiprintf_r+0x60>
 801e160:	2a25      	cmp	r2, #37	@ 0x25
 801e162:	d1f9      	bne.n	801e158 <_svfiprintf_r+0x54>
 801e164:	ebba 0b04 	subs.w	fp, sl, r4
 801e168:	d00b      	beq.n	801e182 <_svfiprintf_r+0x7e>
 801e16a:	465b      	mov	r3, fp
 801e16c:	4622      	mov	r2, r4
 801e16e:	4629      	mov	r1, r5
 801e170:	4638      	mov	r0, r7
 801e172:	f7ff ff6b 	bl	801e04c <__ssputs_r>
 801e176:	3001      	adds	r0, #1
 801e178:	f000 80a7 	beq.w	801e2ca <_svfiprintf_r+0x1c6>
 801e17c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e17e:	445a      	add	r2, fp
 801e180:	9209      	str	r2, [sp, #36]	@ 0x24
 801e182:	f89a 3000 	ldrb.w	r3, [sl]
 801e186:	2b00      	cmp	r3, #0
 801e188:	f000 809f 	beq.w	801e2ca <_svfiprintf_r+0x1c6>
 801e18c:	2300      	movs	r3, #0
 801e18e:	f04f 32ff 	mov.w	r2, #4294967295
 801e192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e196:	f10a 0a01 	add.w	sl, sl, #1
 801e19a:	9304      	str	r3, [sp, #16]
 801e19c:	9307      	str	r3, [sp, #28]
 801e19e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e1a2:	931a      	str	r3, [sp, #104]	@ 0x68
 801e1a4:	4654      	mov	r4, sl
 801e1a6:	2205      	movs	r2, #5
 801e1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1ac:	484e      	ldr	r0, [pc, #312]	@ (801e2e8 <_svfiprintf_r+0x1e4>)
 801e1ae:	f7e2 f8c7 	bl	8000340 <memchr>
 801e1b2:	9a04      	ldr	r2, [sp, #16]
 801e1b4:	b9d8      	cbnz	r0, 801e1ee <_svfiprintf_r+0xea>
 801e1b6:	06d0      	lsls	r0, r2, #27
 801e1b8:	bf44      	itt	mi
 801e1ba:	2320      	movmi	r3, #32
 801e1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1c0:	0711      	lsls	r1, r2, #28
 801e1c2:	bf44      	itt	mi
 801e1c4:	232b      	movmi	r3, #43	@ 0x2b
 801e1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e1ca:	f89a 3000 	ldrb.w	r3, [sl]
 801e1ce:	2b2a      	cmp	r3, #42	@ 0x2a
 801e1d0:	d015      	beq.n	801e1fe <_svfiprintf_r+0xfa>
 801e1d2:	9a07      	ldr	r2, [sp, #28]
 801e1d4:	4654      	mov	r4, sl
 801e1d6:	2000      	movs	r0, #0
 801e1d8:	f04f 0c0a 	mov.w	ip, #10
 801e1dc:	4621      	mov	r1, r4
 801e1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e1e2:	3b30      	subs	r3, #48	@ 0x30
 801e1e4:	2b09      	cmp	r3, #9
 801e1e6:	d94b      	bls.n	801e280 <_svfiprintf_r+0x17c>
 801e1e8:	b1b0      	cbz	r0, 801e218 <_svfiprintf_r+0x114>
 801e1ea:	9207      	str	r2, [sp, #28]
 801e1ec:	e014      	b.n	801e218 <_svfiprintf_r+0x114>
 801e1ee:	eba0 0308 	sub.w	r3, r0, r8
 801e1f2:	fa09 f303 	lsl.w	r3, r9, r3
 801e1f6:	4313      	orrs	r3, r2
 801e1f8:	9304      	str	r3, [sp, #16]
 801e1fa:	46a2      	mov	sl, r4
 801e1fc:	e7d2      	b.n	801e1a4 <_svfiprintf_r+0xa0>
 801e1fe:	9b03      	ldr	r3, [sp, #12]
 801e200:	1d19      	adds	r1, r3, #4
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	9103      	str	r1, [sp, #12]
 801e206:	2b00      	cmp	r3, #0
 801e208:	bfbb      	ittet	lt
 801e20a:	425b      	neglt	r3, r3
 801e20c:	f042 0202 	orrlt.w	r2, r2, #2
 801e210:	9307      	strge	r3, [sp, #28]
 801e212:	9307      	strlt	r3, [sp, #28]
 801e214:	bfb8      	it	lt
 801e216:	9204      	strlt	r2, [sp, #16]
 801e218:	7823      	ldrb	r3, [r4, #0]
 801e21a:	2b2e      	cmp	r3, #46	@ 0x2e
 801e21c:	d10a      	bne.n	801e234 <_svfiprintf_r+0x130>
 801e21e:	7863      	ldrb	r3, [r4, #1]
 801e220:	2b2a      	cmp	r3, #42	@ 0x2a
 801e222:	d132      	bne.n	801e28a <_svfiprintf_r+0x186>
 801e224:	9b03      	ldr	r3, [sp, #12]
 801e226:	1d1a      	adds	r2, r3, #4
 801e228:	681b      	ldr	r3, [r3, #0]
 801e22a:	9203      	str	r2, [sp, #12]
 801e22c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e230:	3402      	adds	r4, #2
 801e232:	9305      	str	r3, [sp, #20]
 801e234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801e2f8 <_svfiprintf_r+0x1f4>
 801e238:	7821      	ldrb	r1, [r4, #0]
 801e23a:	2203      	movs	r2, #3
 801e23c:	4650      	mov	r0, sl
 801e23e:	f7e2 f87f 	bl	8000340 <memchr>
 801e242:	b138      	cbz	r0, 801e254 <_svfiprintf_r+0x150>
 801e244:	9b04      	ldr	r3, [sp, #16]
 801e246:	eba0 000a 	sub.w	r0, r0, sl
 801e24a:	2240      	movs	r2, #64	@ 0x40
 801e24c:	4082      	lsls	r2, r0
 801e24e:	4313      	orrs	r3, r2
 801e250:	3401      	adds	r4, #1
 801e252:	9304      	str	r3, [sp, #16]
 801e254:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e258:	4824      	ldr	r0, [pc, #144]	@ (801e2ec <_svfiprintf_r+0x1e8>)
 801e25a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e25e:	2206      	movs	r2, #6
 801e260:	f7e2 f86e 	bl	8000340 <memchr>
 801e264:	2800      	cmp	r0, #0
 801e266:	d036      	beq.n	801e2d6 <_svfiprintf_r+0x1d2>
 801e268:	4b21      	ldr	r3, [pc, #132]	@ (801e2f0 <_svfiprintf_r+0x1ec>)
 801e26a:	bb1b      	cbnz	r3, 801e2b4 <_svfiprintf_r+0x1b0>
 801e26c:	9b03      	ldr	r3, [sp, #12]
 801e26e:	3307      	adds	r3, #7
 801e270:	f023 0307 	bic.w	r3, r3, #7
 801e274:	3308      	adds	r3, #8
 801e276:	9303      	str	r3, [sp, #12]
 801e278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e27a:	4433      	add	r3, r6
 801e27c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e27e:	e76a      	b.n	801e156 <_svfiprintf_r+0x52>
 801e280:	fb0c 3202 	mla	r2, ip, r2, r3
 801e284:	460c      	mov	r4, r1
 801e286:	2001      	movs	r0, #1
 801e288:	e7a8      	b.n	801e1dc <_svfiprintf_r+0xd8>
 801e28a:	2300      	movs	r3, #0
 801e28c:	3401      	adds	r4, #1
 801e28e:	9305      	str	r3, [sp, #20]
 801e290:	4619      	mov	r1, r3
 801e292:	f04f 0c0a 	mov.w	ip, #10
 801e296:	4620      	mov	r0, r4
 801e298:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e29c:	3a30      	subs	r2, #48	@ 0x30
 801e29e:	2a09      	cmp	r2, #9
 801e2a0:	d903      	bls.n	801e2aa <_svfiprintf_r+0x1a6>
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d0c6      	beq.n	801e234 <_svfiprintf_r+0x130>
 801e2a6:	9105      	str	r1, [sp, #20]
 801e2a8:	e7c4      	b.n	801e234 <_svfiprintf_r+0x130>
 801e2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801e2ae:	4604      	mov	r4, r0
 801e2b0:	2301      	movs	r3, #1
 801e2b2:	e7f0      	b.n	801e296 <_svfiprintf_r+0x192>
 801e2b4:	ab03      	add	r3, sp, #12
 801e2b6:	9300      	str	r3, [sp, #0]
 801e2b8:	462a      	mov	r2, r5
 801e2ba:	4b0e      	ldr	r3, [pc, #56]	@ (801e2f4 <_svfiprintf_r+0x1f0>)
 801e2bc:	a904      	add	r1, sp, #16
 801e2be:	4638      	mov	r0, r7
 801e2c0:	f3af 8000 	nop.w
 801e2c4:	1c42      	adds	r2, r0, #1
 801e2c6:	4606      	mov	r6, r0
 801e2c8:	d1d6      	bne.n	801e278 <_svfiprintf_r+0x174>
 801e2ca:	89ab      	ldrh	r3, [r5, #12]
 801e2cc:	065b      	lsls	r3, r3, #25
 801e2ce:	f53f af2d 	bmi.w	801e12c <_svfiprintf_r+0x28>
 801e2d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e2d4:	e72c      	b.n	801e130 <_svfiprintf_r+0x2c>
 801e2d6:	ab03      	add	r3, sp, #12
 801e2d8:	9300      	str	r3, [sp, #0]
 801e2da:	462a      	mov	r2, r5
 801e2dc:	4b05      	ldr	r3, [pc, #20]	@ (801e2f4 <_svfiprintf_r+0x1f0>)
 801e2de:	a904      	add	r1, sp, #16
 801e2e0:	4638      	mov	r0, r7
 801e2e2:	f000 f9bb 	bl	801e65c <_printf_i>
 801e2e6:	e7ed      	b.n	801e2c4 <_svfiprintf_r+0x1c0>
 801e2e8:	08033d6f 	.word	0x08033d6f
 801e2ec:	08033d79 	.word	0x08033d79
 801e2f0:	00000000 	.word	0x00000000
 801e2f4:	0801e04d 	.word	0x0801e04d
 801e2f8:	08033d75 	.word	0x08033d75

0801e2fc <__sfputc_r>:
 801e2fc:	6893      	ldr	r3, [r2, #8]
 801e2fe:	3b01      	subs	r3, #1
 801e300:	2b00      	cmp	r3, #0
 801e302:	b410      	push	{r4}
 801e304:	6093      	str	r3, [r2, #8]
 801e306:	da08      	bge.n	801e31a <__sfputc_r+0x1e>
 801e308:	6994      	ldr	r4, [r2, #24]
 801e30a:	42a3      	cmp	r3, r4
 801e30c:	db01      	blt.n	801e312 <__sfputc_r+0x16>
 801e30e:	290a      	cmp	r1, #10
 801e310:	d103      	bne.n	801e31a <__sfputc_r+0x1e>
 801e312:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e316:	f000 bb7f 	b.w	801ea18 <__swbuf_r>
 801e31a:	6813      	ldr	r3, [r2, #0]
 801e31c:	1c58      	adds	r0, r3, #1
 801e31e:	6010      	str	r0, [r2, #0]
 801e320:	7019      	strb	r1, [r3, #0]
 801e322:	4608      	mov	r0, r1
 801e324:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e328:	4770      	bx	lr

0801e32a <__sfputs_r>:
 801e32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e32c:	4606      	mov	r6, r0
 801e32e:	460f      	mov	r7, r1
 801e330:	4614      	mov	r4, r2
 801e332:	18d5      	adds	r5, r2, r3
 801e334:	42ac      	cmp	r4, r5
 801e336:	d101      	bne.n	801e33c <__sfputs_r+0x12>
 801e338:	2000      	movs	r0, #0
 801e33a:	e007      	b.n	801e34c <__sfputs_r+0x22>
 801e33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e340:	463a      	mov	r2, r7
 801e342:	4630      	mov	r0, r6
 801e344:	f7ff ffda 	bl	801e2fc <__sfputc_r>
 801e348:	1c43      	adds	r3, r0, #1
 801e34a:	d1f3      	bne.n	801e334 <__sfputs_r+0xa>
 801e34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e350 <_vfiprintf_r>:
 801e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e354:	460d      	mov	r5, r1
 801e356:	b09d      	sub	sp, #116	@ 0x74
 801e358:	4614      	mov	r4, r2
 801e35a:	4698      	mov	r8, r3
 801e35c:	4606      	mov	r6, r0
 801e35e:	b118      	cbz	r0, 801e368 <_vfiprintf_r+0x18>
 801e360:	6a03      	ldr	r3, [r0, #32]
 801e362:	b90b      	cbnz	r3, 801e368 <_vfiprintf_r+0x18>
 801e364:	f7ff fc16 	bl	801db94 <__sinit>
 801e368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e36a:	07d9      	lsls	r1, r3, #31
 801e36c:	d405      	bmi.n	801e37a <_vfiprintf_r+0x2a>
 801e36e:	89ab      	ldrh	r3, [r5, #12]
 801e370:	059a      	lsls	r2, r3, #22
 801e372:	d402      	bmi.n	801e37a <_vfiprintf_r+0x2a>
 801e374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e376:	f7ff fd7c 	bl	801de72 <__retarget_lock_acquire_recursive>
 801e37a:	89ab      	ldrh	r3, [r5, #12]
 801e37c:	071b      	lsls	r3, r3, #28
 801e37e:	d501      	bpl.n	801e384 <_vfiprintf_r+0x34>
 801e380:	692b      	ldr	r3, [r5, #16]
 801e382:	b99b      	cbnz	r3, 801e3ac <_vfiprintf_r+0x5c>
 801e384:	4629      	mov	r1, r5
 801e386:	4630      	mov	r0, r6
 801e388:	f000 fb84 	bl	801ea94 <__swsetup_r>
 801e38c:	b170      	cbz	r0, 801e3ac <_vfiprintf_r+0x5c>
 801e38e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e390:	07dc      	lsls	r4, r3, #31
 801e392:	d504      	bpl.n	801e39e <_vfiprintf_r+0x4e>
 801e394:	f04f 30ff 	mov.w	r0, #4294967295
 801e398:	b01d      	add	sp, #116	@ 0x74
 801e39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e39e:	89ab      	ldrh	r3, [r5, #12]
 801e3a0:	0598      	lsls	r0, r3, #22
 801e3a2:	d4f7      	bmi.n	801e394 <_vfiprintf_r+0x44>
 801e3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e3a6:	f7ff fd65 	bl	801de74 <__retarget_lock_release_recursive>
 801e3aa:	e7f3      	b.n	801e394 <_vfiprintf_r+0x44>
 801e3ac:	2300      	movs	r3, #0
 801e3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3b0:	2320      	movs	r3, #32
 801e3b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e3ba:	2330      	movs	r3, #48	@ 0x30
 801e3bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e56c <_vfiprintf_r+0x21c>
 801e3c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e3c4:	f04f 0901 	mov.w	r9, #1
 801e3c8:	4623      	mov	r3, r4
 801e3ca:	469a      	mov	sl, r3
 801e3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e3d0:	b10a      	cbz	r2, 801e3d6 <_vfiprintf_r+0x86>
 801e3d2:	2a25      	cmp	r2, #37	@ 0x25
 801e3d4:	d1f9      	bne.n	801e3ca <_vfiprintf_r+0x7a>
 801e3d6:	ebba 0b04 	subs.w	fp, sl, r4
 801e3da:	d00b      	beq.n	801e3f4 <_vfiprintf_r+0xa4>
 801e3dc:	465b      	mov	r3, fp
 801e3de:	4622      	mov	r2, r4
 801e3e0:	4629      	mov	r1, r5
 801e3e2:	4630      	mov	r0, r6
 801e3e4:	f7ff ffa1 	bl	801e32a <__sfputs_r>
 801e3e8:	3001      	adds	r0, #1
 801e3ea:	f000 80a7 	beq.w	801e53c <_vfiprintf_r+0x1ec>
 801e3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3f0:	445a      	add	r2, fp
 801e3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e3f4:	f89a 3000 	ldrb.w	r3, [sl]
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	f000 809f 	beq.w	801e53c <_vfiprintf_r+0x1ec>
 801e3fe:	2300      	movs	r3, #0
 801e400:	f04f 32ff 	mov.w	r2, #4294967295
 801e404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e408:	f10a 0a01 	add.w	sl, sl, #1
 801e40c:	9304      	str	r3, [sp, #16]
 801e40e:	9307      	str	r3, [sp, #28]
 801e410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e414:	931a      	str	r3, [sp, #104]	@ 0x68
 801e416:	4654      	mov	r4, sl
 801e418:	2205      	movs	r2, #5
 801e41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e41e:	4853      	ldr	r0, [pc, #332]	@ (801e56c <_vfiprintf_r+0x21c>)
 801e420:	f7e1 ff8e 	bl	8000340 <memchr>
 801e424:	9a04      	ldr	r2, [sp, #16]
 801e426:	b9d8      	cbnz	r0, 801e460 <_vfiprintf_r+0x110>
 801e428:	06d1      	lsls	r1, r2, #27
 801e42a:	bf44      	itt	mi
 801e42c:	2320      	movmi	r3, #32
 801e42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e432:	0713      	lsls	r3, r2, #28
 801e434:	bf44      	itt	mi
 801e436:	232b      	movmi	r3, #43	@ 0x2b
 801e438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e43c:	f89a 3000 	ldrb.w	r3, [sl]
 801e440:	2b2a      	cmp	r3, #42	@ 0x2a
 801e442:	d015      	beq.n	801e470 <_vfiprintf_r+0x120>
 801e444:	9a07      	ldr	r2, [sp, #28]
 801e446:	4654      	mov	r4, sl
 801e448:	2000      	movs	r0, #0
 801e44a:	f04f 0c0a 	mov.w	ip, #10
 801e44e:	4621      	mov	r1, r4
 801e450:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e454:	3b30      	subs	r3, #48	@ 0x30
 801e456:	2b09      	cmp	r3, #9
 801e458:	d94b      	bls.n	801e4f2 <_vfiprintf_r+0x1a2>
 801e45a:	b1b0      	cbz	r0, 801e48a <_vfiprintf_r+0x13a>
 801e45c:	9207      	str	r2, [sp, #28]
 801e45e:	e014      	b.n	801e48a <_vfiprintf_r+0x13a>
 801e460:	eba0 0308 	sub.w	r3, r0, r8
 801e464:	fa09 f303 	lsl.w	r3, r9, r3
 801e468:	4313      	orrs	r3, r2
 801e46a:	9304      	str	r3, [sp, #16]
 801e46c:	46a2      	mov	sl, r4
 801e46e:	e7d2      	b.n	801e416 <_vfiprintf_r+0xc6>
 801e470:	9b03      	ldr	r3, [sp, #12]
 801e472:	1d19      	adds	r1, r3, #4
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	9103      	str	r1, [sp, #12]
 801e478:	2b00      	cmp	r3, #0
 801e47a:	bfbb      	ittet	lt
 801e47c:	425b      	neglt	r3, r3
 801e47e:	f042 0202 	orrlt.w	r2, r2, #2
 801e482:	9307      	strge	r3, [sp, #28]
 801e484:	9307      	strlt	r3, [sp, #28]
 801e486:	bfb8      	it	lt
 801e488:	9204      	strlt	r2, [sp, #16]
 801e48a:	7823      	ldrb	r3, [r4, #0]
 801e48c:	2b2e      	cmp	r3, #46	@ 0x2e
 801e48e:	d10a      	bne.n	801e4a6 <_vfiprintf_r+0x156>
 801e490:	7863      	ldrb	r3, [r4, #1]
 801e492:	2b2a      	cmp	r3, #42	@ 0x2a
 801e494:	d132      	bne.n	801e4fc <_vfiprintf_r+0x1ac>
 801e496:	9b03      	ldr	r3, [sp, #12]
 801e498:	1d1a      	adds	r2, r3, #4
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	9203      	str	r2, [sp, #12]
 801e49e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e4a2:	3402      	adds	r4, #2
 801e4a4:	9305      	str	r3, [sp, #20]
 801e4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e57c <_vfiprintf_r+0x22c>
 801e4aa:	7821      	ldrb	r1, [r4, #0]
 801e4ac:	2203      	movs	r2, #3
 801e4ae:	4650      	mov	r0, sl
 801e4b0:	f7e1 ff46 	bl	8000340 <memchr>
 801e4b4:	b138      	cbz	r0, 801e4c6 <_vfiprintf_r+0x176>
 801e4b6:	9b04      	ldr	r3, [sp, #16]
 801e4b8:	eba0 000a 	sub.w	r0, r0, sl
 801e4bc:	2240      	movs	r2, #64	@ 0x40
 801e4be:	4082      	lsls	r2, r0
 801e4c0:	4313      	orrs	r3, r2
 801e4c2:	3401      	adds	r4, #1
 801e4c4:	9304      	str	r3, [sp, #16]
 801e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4ca:	4829      	ldr	r0, [pc, #164]	@ (801e570 <_vfiprintf_r+0x220>)
 801e4cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e4d0:	2206      	movs	r2, #6
 801e4d2:	f7e1 ff35 	bl	8000340 <memchr>
 801e4d6:	2800      	cmp	r0, #0
 801e4d8:	d03f      	beq.n	801e55a <_vfiprintf_r+0x20a>
 801e4da:	4b26      	ldr	r3, [pc, #152]	@ (801e574 <_vfiprintf_r+0x224>)
 801e4dc:	bb1b      	cbnz	r3, 801e526 <_vfiprintf_r+0x1d6>
 801e4de:	9b03      	ldr	r3, [sp, #12]
 801e4e0:	3307      	adds	r3, #7
 801e4e2:	f023 0307 	bic.w	r3, r3, #7
 801e4e6:	3308      	adds	r3, #8
 801e4e8:	9303      	str	r3, [sp, #12]
 801e4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4ec:	443b      	add	r3, r7
 801e4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4f0:	e76a      	b.n	801e3c8 <_vfiprintf_r+0x78>
 801e4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801e4f6:	460c      	mov	r4, r1
 801e4f8:	2001      	movs	r0, #1
 801e4fa:	e7a8      	b.n	801e44e <_vfiprintf_r+0xfe>
 801e4fc:	2300      	movs	r3, #0
 801e4fe:	3401      	adds	r4, #1
 801e500:	9305      	str	r3, [sp, #20]
 801e502:	4619      	mov	r1, r3
 801e504:	f04f 0c0a 	mov.w	ip, #10
 801e508:	4620      	mov	r0, r4
 801e50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e50e:	3a30      	subs	r2, #48	@ 0x30
 801e510:	2a09      	cmp	r2, #9
 801e512:	d903      	bls.n	801e51c <_vfiprintf_r+0x1cc>
 801e514:	2b00      	cmp	r3, #0
 801e516:	d0c6      	beq.n	801e4a6 <_vfiprintf_r+0x156>
 801e518:	9105      	str	r1, [sp, #20]
 801e51a:	e7c4      	b.n	801e4a6 <_vfiprintf_r+0x156>
 801e51c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e520:	4604      	mov	r4, r0
 801e522:	2301      	movs	r3, #1
 801e524:	e7f0      	b.n	801e508 <_vfiprintf_r+0x1b8>
 801e526:	ab03      	add	r3, sp, #12
 801e528:	9300      	str	r3, [sp, #0]
 801e52a:	462a      	mov	r2, r5
 801e52c:	4b12      	ldr	r3, [pc, #72]	@ (801e578 <_vfiprintf_r+0x228>)
 801e52e:	a904      	add	r1, sp, #16
 801e530:	4630      	mov	r0, r6
 801e532:	f3af 8000 	nop.w
 801e536:	4607      	mov	r7, r0
 801e538:	1c78      	adds	r0, r7, #1
 801e53a:	d1d6      	bne.n	801e4ea <_vfiprintf_r+0x19a>
 801e53c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e53e:	07d9      	lsls	r1, r3, #31
 801e540:	d405      	bmi.n	801e54e <_vfiprintf_r+0x1fe>
 801e542:	89ab      	ldrh	r3, [r5, #12]
 801e544:	059a      	lsls	r2, r3, #22
 801e546:	d402      	bmi.n	801e54e <_vfiprintf_r+0x1fe>
 801e548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e54a:	f7ff fc93 	bl	801de74 <__retarget_lock_release_recursive>
 801e54e:	89ab      	ldrh	r3, [r5, #12]
 801e550:	065b      	lsls	r3, r3, #25
 801e552:	f53f af1f 	bmi.w	801e394 <_vfiprintf_r+0x44>
 801e556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e558:	e71e      	b.n	801e398 <_vfiprintf_r+0x48>
 801e55a:	ab03      	add	r3, sp, #12
 801e55c:	9300      	str	r3, [sp, #0]
 801e55e:	462a      	mov	r2, r5
 801e560:	4b05      	ldr	r3, [pc, #20]	@ (801e578 <_vfiprintf_r+0x228>)
 801e562:	a904      	add	r1, sp, #16
 801e564:	4630      	mov	r0, r6
 801e566:	f000 f879 	bl	801e65c <_printf_i>
 801e56a:	e7e4      	b.n	801e536 <_vfiprintf_r+0x1e6>
 801e56c:	08033d6f 	.word	0x08033d6f
 801e570:	08033d79 	.word	0x08033d79
 801e574:	00000000 	.word	0x00000000
 801e578:	0801e32b 	.word	0x0801e32b
 801e57c:	08033d75 	.word	0x08033d75

0801e580 <_printf_common>:
 801e580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e584:	4616      	mov	r6, r2
 801e586:	4698      	mov	r8, r3
 801e588:	688a      	ldr	r2, [r1, #8]
 801e58a:	690b      	ldr	r3, [r1, #16]
 801e58c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e590:	4293      	cmp	r3, r2
 801e592:	bfb8      	it	lt
 801e594:	4613      	movlt	r3, r2
 801e596:	6033      	str	r3, [r6, #0]
 801e598:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e59c:	4607      	mov	r7, r0
 801e59e:	460c      	mov	r4, r1
 801e5a0:	b10a      	cbz	r2, 801e5a6 <_printf_common+0x26>
 801e5a2:	3301      	adds	r3, #1
 801e5a4:	6033      	str	r3, [r6, #0]
 801e5a6:	6823      	ldr	r3, [r4, #0]
 801e5a8:	0699      	lsls	r1, r3, #26
 801e5aa:	bf42      	ittt	mi
 801e5ac:	6833      	ldrmi	r3, [r6, #0]
 801e5ae:	3302      	addmi	r3, #2
 801e5b0:	6033      	strmi	r3, [r6, #0]
 801e5b2:	6825      	ldr	r5, [r4, #0]
 801e5b4:	f015 0506 	ands.w	r5, r5, #6
 801e5b8:	d106      	bne.n	801e5c8 <_printf_common+0x48>
 801e5ba:	f104 0a19 	add.w	sl, r4, #25
 801e5be:	68e3      	ldr	r3, [r4, #12]
 801e5c0:	6832      	ldr	r2, [r6, #0]
 801e5c2:	1a9b      	subs	r3, r3, r2
 801e5c4:	42ab      	cmp	r3, r5
 801e5c6:	dc26      	bgt.n	801e616 <_printf_common+0x96>
 801e5c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e5cc:	6822      	ldr	r2, [r4, #0]
 801e5ce:	3b00      	subs	r3, #0
 801e5d0:	bf18      	it	ne
 801e5d2:	2301      	movne	r3, #1
 801e5d4:	0692      	lsls	r2, r2, #26
 801e5d6:	d42b      	bmi.n	801e630 <_printf_common+0xb0>
 801e5d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e5dc:	4641      	mov	r1, r8
 801e5de:	4638      	mov	r0, r7
 801e5e0:	47c8      	blx	r9
 801e5e2:	3001      	adds	r0, #1
 801e5e4:	d01e      	beq.n	801e624 <_printf_common+0xa4>
 801e5e6:	6823      	ldr	r3, [r4, #0]
 801e5e8:	6922      	ldr	r2, [r4, #16]
 801e5ea:	f003 0306 	and.w	r3, r3, #6
 801e5ee:	2b04      	cmp	r3, #4
 801e5f0:	bf02      	ittt	eq
 801e5f2:	68e5      	ldreq	r5, [r4, #12]
 801e5f4:	6833      	ldreq	r3, [r6, #0]
 801e5f6:	1aed      	subeq	r5, r5, r3
 801e5f8:	68a3      	ldr	r3, [r4, #8]
 801e5fa:	bf0c      	ite	eq
 801e5fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e600:	2500      	movne	r5, #0
 801e602:	4293      	cmp	r3, r2
 801e604:	bfc4      	itt	gt
 801e606:	1a9b      	subgt	r3, r3, r2
 801e608:	18ed      	addgt	r5, r5, r3
 801e60a:	2600      	movs	r6, #0
 801e60c:	341a      	adds	r4, #26
 801e60e:	42b5      	cmp	r5, r6
 801e610:	d11a      	bne.n	801e648 <_printf_common+0xc8>
 801e612:	2000      	movs	r0, #0
 801e614:	e008      	b.n	801e628 <_printf_common+0xa8>
 801e616:	2301      	movs	r3, #1
 801e618:	4652      	mov	r2, sl
 801e61a:	4641      	mov	r1, r8
 801e61c:	4638      	mov	r0, r7
 801e61e:	47c8      	blx	r9
 801e620:	3001      	adds	r0, #1
 801e622:	d103      	bne.n	801e62c <_printf_common+0xac>
 801e624:	f04f 30ff 	mov.w	r0, #4294967295
 801e628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e62c:	3501      	adds	r5, #1
 801e62e:	e7c6      	b.n	801e5be <_printf_common+0x3e>
 801e630:	18e1      	adds	r1, r4, r3
 801e632:	1c5a      	adds	r2, r3, #1
 801e634:	2030      	movs	r0, #48	@ 0x30
 801e636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e63a:	4422      	add	r2, r4
 801e63c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e644:	3302      	adds	r3, #2
 801e646:	e7c7      	b.n	801e5d8 <_printf_common+0x58>
 801e648:	2301      	movs	r3, #1
 801e64a:	4622      	mov	r2, r4
 801e64c:	4641      	mov	r1, r8
 801e64e:	4638      	mov	r0, r7
 801e650:	47c8      	blx	r9
 801e652:	3001      	adds	r0, #1
 801e654:	d0e6      	beq.n	801e624 <_printf_common+0xa4>
 801e656:	3601      	adds	r6, #1
 801e658:	e7d9      	b.n	801e60e <_printf_common+0x8e>
	...

0801e65c <_printf_i>:
 801e65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e660:	7e0f      	ldrb	r7, [r1, #24]
 801e662:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e664:	2f78      	cmp	r7, #120	@ 0x78
 801e666:	4691      	mov	r9, r2
 801e668:	4680      	mov	r8, r0
 801e66a:	460c      	mov	r4, r1
 801e66c:	469a      	mov	sl, r3
 801e66e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e672:	d807      	bhi.n	801e684 <_printf_i+0x28>
 801e674:	2f62      	cmp	r7, #98	@ 0x62
 801e676:	d80a      	bhi.n	801e68e <_printf_i+0x32>
 801e678:	2f00      	cmp	r7, #0
 801e67a:	f000 80d2 	beq.w	801e822 <_printf_i+0x1c6>
 801e67e:	2f58      	cmp	r7, #88	@ 0x58
 801e680:	f000 80b9 	beq.w	801e7f6 <_printf_i+0x19a>
 801e684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e68c:	e03a      	b.n	801e704 <_printf_i+0xa8>
 801e68e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e692:	2b15      	cmp	r3, #21
 801e694:	d8f6      	bhi.n	801e684 <_printf_i+0x28>
 801e696:	a101      	add	r1, pc, #4	@ (adr r1, 801e69c <_printf_i+0x40>)
 801e698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e69c:	0801e6f5 	.word	0x0801e6f5
 801e6a0:	0801e709 	.word	0x0801e709
 801e6a4:	0801e685 	.word	0x0801e685
 801e6a8:	0801e685 	.word	0x0801e685
 801e6ac:	0801e685 	.word	0x0801e685
 801e6b0:	0801e685 	.word	0x0801e685
 801e6b4:	0801e709 	.word	0x0801e709
 801e6b8:	0801e685 	.word	0x0801e685
 801e6bc:	0801e685 	.word	0x0801e685
 801e6c0:	0801e685 	.word	0x0801e685
 801e6c4:	0801e685 	.word	0x0801e685
 801e6c8:	0801e809 	.word	0x0801e809
 801e6cc:	0801e733 	.word	0x0801e733
 801e6d0:	0801e7c3 	.word	0x0801e7c3
 801e6d4:	0801e685 	.word	0x0801e685
 801e6d8:	0801e685 	.word	0x0801e685
 801e6dc:	0801e82b 	.word	0x0801e82b
 801e6e0:	0801e685 	.word	0x0801e685
 801e6e4:	0801e733 	.word	0x0801e733
 801e6e8:	0801e685 	.word	0x0801e685
 801e6ec:	0801e685 	.word	0x0801e685
 801e6f0:	0801e7cb 	.word	0x0801e7cb
 801e6f4:	6833      	ldr	r3, [r6, #0]
 801e6f6:	1d1a      	adds	r2, r3, #4
 801e6f8:	681b      	ldr	r3, [r3, #0]
 801e6fa:	6032      	str	r2, [r6, #0]
 801e6fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e704:	2301      	movs	r3, #1
 801e706:	e09d      	b.n	801e844 <_printf_i+0x1e8>
 801e708:	6833      	ldr	r3, [r6, #0]
 801e70a:	6820      	ldr	r0, [r4, #0]
 801e70c:	1d19      	adds	r1, r3, #4
 801e70e:	6031      	str	r1, [r6, #0]
 801e710:	0606      	lsls	r6, r0, #24
 801e712:	d501      	bpl.n	801e718 <_printf_i+0xbc>
 801e714:	681d      	ldr	r5, [r3, #0]
 801e716:	e003      	b.n	801e720 <_printf_i+0xc4>
 801e718:	0645      	lsls	r5, r0, #25
 801e71a:	d5fb      	bpl.n	801e714 <_printf_i+0xb8>
 801e71c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e720:	2d00      	cmp	r5, #0
 801e722:	da03      	bge.n	801e72c <_printf_i+0xd0>
 801e724:	232d      	movs	r3, #45	@ 0x2d
 801e726:	426d      	negs	r5, r5
 801e728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e72c:	4859      	ldr	r0, [pc, #356]	@ (801e894 <_printf_i+0x238>)
 801e72e:	230a      	movs	r3, #10
 801e730:	e011      	b.n	801e756 <_printf_i+0xfa>
 801e732:	6821      	ldr	r1, [r4, #0]
 801e734:	6833      	ldr	r3, [r6, #0]
 801e736:	0608      	lsls	r0, r1, #24
 801e738:	f853 5b04 	ldr.w	r5, [r3], #4
 801e73c:	d402      	bmi.n	801e744 <_printf_i+0xe8>
 801e73e:	0649      	lsls	r1, r1, #25
 801e740:	bf48      	it	mi
 801e742:	b2ad      	uxthmi	r5, r5
 801e744:	2f6f      	cmp	r7, #111	@ 0x6f
 801e746:	4853      	ldr	r0, [pc, #332]	@ (801e894 <_printf_i+0x238>)
 801e748:	6033      	str	r3, [r6, #0]
 801e74a:	bf14      	ite	ne
 801e74c:	230a      	movne	r3, #10
 801e74e:	2308      	moveq	r3, #8
 801e750:	2100      	movs	r1, #0
 801e752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e756:	6866      	ldr	r6, [r4, #4]
 801e758:	60a6      	str	r6, [r4, #8]
 801e75a:	2e00      	cmp	r6, #0
 801e75c:	bfa2      	ittt	ge
 801e75e:	6821      	ldrge	r1, [r4, #0]
 801e760:	f021 0104 	bicge.w	r1, r1, #4
 801e764:	6021      	strge	r1, [r4, #0]
 801e766:	b90d      	cbnz	r5, 801e76c <_printf_i+0x110>
 801e768:	2e00      	cmp	r6, #0
 801e76a:	d04b      	beq.n	801e804 <_printf_i+0x1a8>
 801e76c:	4616      	mov	r6, r2
 801e76e:	fbb5 f1f3 	udiv	r1, r5, r3
 801e772:	fb03 5711 	mls	r7, r3, r1, r5
 801e776:	5dc7      	ldrb	r7, [r0, r7]
 801e778:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e77c:	462f      	mov	r7, r5
 801e77e:	42bb      	cmp	r3, r7
 801e780:	460d      	mov	r5, r1
 801e782:	d9f4      	bls.n	801e76e <_printf_i+0x112>
 801e784:	2b08      	cmp	r3, #8
 801e786:	d10b      	bne.n	801e7a0 <_printf_i+0x144>
 801e788:	6823      	ldr	r3, [r4, #0]
 801e78a:	07df      	lsls	r7, r3, #31
 801e78c:	d508      	bpl.n	801e7a0 <_printf_i+0x144>
 801e78e:	6923      	ldr	r3, [r4, #16]
 801e790:	6861      	ldr	r1, [r4, #4]
 801e792:	4299      	cmp	r1, r3
 801e794:	bfde      	ittt	le
 801e796:	2330      	movle	r3, #48	@ 0x30
 801e798:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e79c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e7a0:	1b92      	subs	r2, r2, r6
 801e7a2:	6122      	str	r2, [r4, #16]
 801e7a4:	f8cd a000 	str.w	sl, [sp]
 801e7a8:	464b      	mov	r3, r9
 801e7aa:	aa03      	add	r2, sp, #12
 801e7ac:	4621      	mov	r1, r4
 801e7ae:	4640      	mov	r0, r8
 801e7b0:	f7ff fee6 	bl	801e580 <_printf_common>
 801e7b4:	3001      	adds	r0, #1
 801e7b6:	d14a      	bne.n	801e84e <_printf_i+0x1f2>
 801e7b8:	f04f 30ff 	mov.w	r0, #4294967295
 801e7bc:	b004      	add	sp, #16
 801e7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7c2:	6823      	ldr	r3, [r4, #0]
 801e7c4:	f043 0320 	orr.w	r3, r3, #32
 801e7c8:	6023      	str	r3, [r4, #0]
 801e7ca:	4833      	ldr	r0, [pc, #204]	@ (801e898 <_printf_i+0x23c>)
 801e7cc:	2778      	movs	r7, #120	@ 0x78
 801e7ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e7d2:	6823      	ldr	r3, [r4, #0]
 801e7d4:	6831      	ldr	r1, [r6, #0]
 801e7d6:	061f      	lsls	r7, r3, #24
 801e7d8:	f851 5b04 	ldr.w	r5, [r1], #4
 801e7dc:	d402      	bmi.n	801e7e4 <_printf_i+0x188>
 801e7de:	065f      	lsls	r7, r3, #25
 801e7e0:	bf48      	it	mi
 801e7e2:	b2ad      	uxthmi	r5, r5
 801e7e4:	6031      	str	r1, [r6, #0]
 801e7e6:	07d9      	lsls	r1, r3, #31
 801e7e8:	bf44      	itt	mi
 801e7ea:	f043 0320 	orrmi.w	r3, r3, #32
 801e7ee:	6023      	strmi	r3, [r4, #0]
 801e7f0:	b11d      	cbz	r5, 801e7fa <_printf_i+0x19e>
 801e7f2:	2310      	movs	r3, #16
 801e7f4:	e7ac      	b.n	801e750 <_printf_i+0xf4>
 801e7f6:	4827      	ldr	r0, [pc, #156]	@ (801e894 <_printf_i+0x238>)
 801e7f8:	e7e9      	b.n	801e7ce <_printf_i+0x172>
 801e7fa:	6823      	ldr	r3, [r4, #0]
 801e7fc:	f023 0320 	bic.w	r3, r3, #32
 801e800:	6023      	str	r3, [r4, #0]
 801e802:	e7f6      	b.n	801e7f2 <_printf_i+0x196>
 801e804:	4616      	mov	r6, r2
 801e806:	e7bd      	b.n	801e784 <_printf_i+0x128>
 801e808:	6833      	ldr	r3, [r6, #0]
 801e80a:	6825      	ldr	r5, [r4, #0]
 801e80c:	6961      	ldr	r1, [r4, #20]
 801e80e:	1d18      	adds	r0, r3, #4
 801e810:	6030      	str	r0, [r6, #0]
 801e812:	062e      	lsls	r6, r5, #24
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	d501      	bpl.n	801e81c <_printf_i+0x1c0>
 801e818:	6019      	str	r1, [r3, #0]
 801e81a:	e002      	b.n	801e822 <_printf_i+0x1c6>
 801e81c:	0668      	lsls	r0, r5, #25
 801e81e:	d5fb      	bpl.n	801e818 <_printf_i+0x1bc>
 801e820:	8019      	strh	r1, [r3, #0]
 801e822:	2300      	movs	r3, #0
 801e824:	6123      	str	r3, [r4, #16]
 801e826:	4616      	mov	r6, r2
 801e828:	e7bc      	b.n	801e7a4 <_printf_i+0x148>
 801e82a:	6833      	ldr	r3, [r6, #0]
 801e82c:	1d1a      	adds	r2, r3, #4
 801e82e:	6032      	str	r2, [r6, #0]
 801e830:	681e      	ldr	r6, [r3, #0]
 801e832:	6862      	ldr	r2, [r4, #4]
 801e834:	2100      	movs	r1, #0
 801e836:	4630      	mov	r0, r6
 801e838:	f7e1 fd82 	bl	8000340 <memchr>
 801e83c:	b108      	cbz	r0, 801e842 <_printf_i+0x1e6>
 801e83e:	1b80      	subs	r0, r0, r6
 801e840:	6060      	str	r0, [r4, #4]
 801e842:	6863      	ldr	r3, [r4, #4]
 801e844:	6123      	str	r3, [r4, #16]
 801e846:	2300      	movs	r3, #0
 801e848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e84c:	e7aa      	b.n	801e7a4 <_printf_i+0x148>
 801e84e:	6923      	ldr	r3, [r4, #16]
 801e850:	4632      	mov	r2, r6
 801e852:	4649      	mov	r1, r9
 801e854:	4640      	mov	r0, r8
 801e856:	47d0      	blx	sl
 801e858:	3001      	adds	r0, #1
 801e85a:	d0ad      	beq.n	801e7b8 <_printf_i+0x15c>
 801e85c:	6823      	ldr	r3, [r4, #0]
 801e85e:	079b      	lsls	r3, r3, #30
 801e860:	d413      	bmi.n	801e88a <_printf_i+0x22e>
 801e862:	68e0      	ldr	r0, [r4, #12]
 801e864:	9b03      	ldr	r3, [sp, #12]
 801e866:	4298      	cmp	r0, r3
 801e868:	bfb8      	it	lt
 801e86a:	4618      	movlt	r0, r3
 801e86c:	e7a6      	b.n	801e7bc <_printf_i+0x160>
 801e86e:	2301      	movs	r3, #1
 801e870:	4632      	mov	r2, r6
 801e872:	4649      	mov	r1, r9
 801e874:	4640      	mov	r0, r8
 801e876:	47d0      	blx	sl
 801e878:	3001      	adds	r0, #1
 801e87a:	d09d      	beq.n	801e7b8 <_printf_i+0x15c>
 801e87c:	3501      	adds	r5, #1
 801e87e:	68e3      	ldr	r3, [r4, #12]
 801e880:	9903      	ldr	r1, [sp, #12]
 801e882:	1a5b      	subs	r3, r3, r1
 801e884:	42ab      	cmp	r3, r5
 801e886:	dcf2      	bgt.n	801e86e <_printf_i+0x212>
 801e888:	e7eb      	b.n	801e862 <_printf_i+0x206>
 801e88a:	2500      	movs	r5, #0
 801e88c:	f104 0619 	add.w	r6, r4, #25
 801e890:	e7f5      	b.n	801e87e <_printf_i+0x222>
 801e892:	bf00      	nop
 801e894:	08033d80 	.word	0x08033d80
 801e898:	08033d91 	.word	0x08033d91

0801e89c <__sflush_r>:
 801e89c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8a4:	0716      	lsls	r6, r2, #28
 801e8a6:	4605      	mov	r5, r0
 801e8a8:	460c      	mov	r4, r1
 801e8aa:	d454      	bmi.n	801e956 <__sflush_r+0xba>
 801e8ac:	684b      	ldr	r3, [r1, #4]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	dc02      	bgt.n	801e8b8 <__sflush_r+0x1c>
 801e8b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	dd48      	ble.n	801e94a <__sflush_r+0xae>
 801e8b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e8ba:	2e00      	cmp	r6, #0
 801e8bc:	d045      	beq.n	801e94a <__sflush_r+0xae>
 801e8be:	2300      	movs	r3, #0
 801e8c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e8c4:	682f      	ldr	r7, [r5, #0]
 801e8c6:	6a21      	ldr	r1, [r4, #32]
 801e8c8:	602b      	str	r3, [r5, #0]
 801e8ca:	d030      	beq.n	801e92e <__sflush_r+0x92>
 801e8cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e8ce:	89a3      	ldrh	r3, [r4, #12]
 801e8d0:	0759      	lsls	r1, r3, #29
 801e8d2:	d505      	bpl.n	801e8e0 <__sflush_r+0x44>
 801e8d4:	6863      	ldr	r3, [r4, #4]
 801e8d6:	1ad2      	subs	r2, r2, r3
 801e8d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e8da:	b10b      	cbz	r3, 801e8e0 <__sflush_r+0x44>
 801e8dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e8de:	1ad2      	subs	r2, r2, r3
 801e8e0:	2300      	movs	r3, #0
 801e8e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e8e4:	6a21      	ldr	r1, [r4, #32]
 801e8e6:	4628      	mov	r0, r5
 801e8e8:	47b0      	blx	r6
 801e8ea:	1c43      	adds	r3, r0, #1
 801e8ec:	89a3      	ldrh	r3, [r4, #12]
 801e8ee:	d106      	bne.n	801e8fe <__sflush_r+0x62>
 801e8f0:	6829      	ldr	r1, [r5, #0]
 801e8f2:	291d      	cmp	r1, #29
 801e8f4:	d82b      	bhi.n	801e94e <__sflush_r+0xb2>
 801e8f6:	4a2a      	ldr	r2, [pc, #168]	@ (801e9a0 <__sflush_r+0x104>)
 801e8f8:	410a      	asrs	r2, r1
 801e8fa:	07d6      	lsls	r6, r2, #31
 801e8fc:	d427      	bmi.n	801e94e <__sflush_r+0xb2>
 801e8fe:	2200      	movs	r2, #0
 801e900:	6062      	str	r2, [r4, #4]
 801e902:	04d9      	lsls	r1, r3, #19
 801e904:	6922      	ldr	r2, [r4, #16]
 801e906:	6022      	str	r2, [r4, #0]
 801e908:	d504      	bpl.n	801e914 <__sflush_r+0x78>
 801e90a:	1c42      	adds	r2, r0, #1
 801e90c:	d101      	bne.n	801e912 <__sflush_r+0x76>
 801e90e:	682b      	ldr	r3, [r5, #0]
 801e910:	b903      	cbnz	r3, 801e914 <__sflush_r+0x78>
 801e912:	6560      	str	r0, [r4, #84]	@ 0x54
 801e914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e916:	602f      	str	r7, [r5, #0]
 801e918:	b1b9      	cbz	r1, 801e94a <__sflush_r+0xae>
 801e91a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e91e:	4299      	cmp	r1, r3
 801e920:	d002      	beq.n	801e928 <__sflush_r+0x8c>
 801e922:	4628      	mov	r0, r5
 801e924:	f000 f924 	bl	801eb70 <_free_r>
 801e928:	2300      	movs	r3, #0
 801e92a:	6363      	str	r3, [r4, #52]	@ 0x34
 801e92c:	e00d      	b.n	801e94a <__sflush_r+0xae>
 801e92e:	2301      	movs	r3, #1
 801e930:	4628      	mov	r0, r5
 801e932:	47b0      	blx	r6
 801e934:	4602      	mov	r2, r0
 801e936:	1c50      	adds	r0, r2, #1
 801e938:	d1c9      	bne.n	801e8ce <__sflush_r+0x32>
 801e93a:	682b      	ldr	r3, [r5, #0]
 801e93c:	2b00      	cmp	r3, #0
 801e93e:	d0c6      	beq.n	801e8ce <__sflush_r+0x32>
 801e940:	2b1d      	cmp	r3, #29
 801e942:	d001      	beq.n	801e948 <__sflush_r+0xac>
 801e944:	2b16      	cmp	r3, #22
 801e946:	d11e      	bne.n	801e986 <__sflush_r+0xea>
 801e948:	602f      	str	r7, [r5, #0]
 801e94a:	2000      	movs	r0, #0
 801e94c:	e022      	b.n	801e994 <__sflush_r+0xf8>
 801e94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e952:	b21b      	sxth	r3, r3
 801e954:	e01b      	b.n	801e98e <__sflush_r+0xf2>
 801e956:	690f      	ldr	r7, [r1, #16]
 801e958:	2f00      	cmp	r7, #0
 801e95a:	d0f6      	beq.n	801e94a <__sflush_r+0xae>
 801e95c:	0793      	lsls	r3, r2, #30
 801e95e:	680e      	ldr	r6, [r1, #0]
 801e960:	bf08      	it	eq
 801e962:	694b      	ldreq	r3, [r1, #20]
 801e964:	600f      	str	r7, [r1, #0]
 801e966:	bf18      	it	ne
 801e968:	2300      	movne	r3, #0
 801e96a:	eba6 0807 	sub.w	r8, r6, r7
 801e96e:	608b      	str	r3, [r1, #8]
 801e970:	f1b8 0f00 	cmp.w	r8, #0
 801e974:	dde9      	ble.n	801e94a <__sflush_r+0xae>
 801e976:	6a21      	ldr	r1, [r4, #32]
 801e978:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e97a:	4643      	mov	r3, r8
 801e97c:	463a      	mov	r2, r7
 801e97e:	4628      	mov	r0, r5
 801e980:	47b0      	blx	r6
 801e982:	2800      	cmp	r0, #0
 801e984:	dc08      	bgt.n	801e998 <__sflush_r+0xfc>
 801e986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e98e:	81a3      	strh	r3, [r4, #12]
 801e990:	f04f 30ff 	mov.w	r0, #4294967295
 801e994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e998:	4407      	add	r7, r0
 801e99a:	eba8 0800 	sub.w	r8, r8, r0
 801e99e:	e7e7      	b.n	801e970 <__sflush_r+0xd4>
 801e9a0:	dfbffffe 	.word	0xdfbffffe

0801e9a4 <_fflush_r>:
 801e9a4:	b538      	push	{r3, r4, r5, lr}
 801e9a6:	690b      	ldr	r3, [r1, #16]
 801e9a8:	4605      	mov	r5, r0
 801e9aa:	460c      	mov	r4, r1
 801e9ac:	b913      	cbnz	r3, 801e9b4 <_fflush_r+0x10>
 801e9ae:	2500      	movs	r5, #0
 801e9b0:	4628      	mov	r0, r5
 801e9b2:	bd38      	pop	{r3, r4, r5, pc}
 801e9b4:	b118      	cbz	r0, 801e9be <_fflush_r+0x1a>
 801e9b6:	6a03      	ldr	r3, [r0, #32]
 801e9b8:	b90b      	cbnz	r3, 801e9be <_fflush_r+0x1a>
 801e9ba:	f7ff f8eb 	bl	801db94 <__sinit>
 801e9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d0f3      	beq.n	801e9ae <_fflush_r+0xa>
 801e9c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e9c8:	07d0      	lsls	r0, r2, #31
 801e9ca:	d404      	bmi.n	801e9d6 <_fflush_r+0x32>
 801e9cc:	0599      	lsls	r1, r3, #22
 801e9ce:	d402      	bmi.n	801e9d6 <_fflush_r+0x32>
 801e9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9d2:	f7ff fa4e 	bl	801de72 <__retarget_lock_acquire_recursive>
 801e9d6:	4628      	mov	r0, r5
 801e9d8:	4621      	mov	r1, r4
 801e9da:	f7ff ff5f 	bl	801e89c <__sflush_r>
 801e9de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e9e0:	07da      	lsls	r2, r3, #31
 801e9e2:	4605      	mov	r5, r0
 801e9e4:	d4e4      	bmi.n	801e9b0 <_fflush_r+0xc>
 801e9e6:	89a3      	ldrh	r3, [r4, #12]
 801e9e8:	059b      	lsls	r3, r3, #22
 801e9ea:	d4e1      	bmi.n	801e9b0 <_fflush_r+0xc>
 801e9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e9ee:	f7ff fa41 	bl	801de74 <__retarget_lock_release_recursive>
 801e9f2:	e7dd      	b.n	801e9b0 <_fflush_r+0xc>

0801e9f4 <fiprintf>:
 801e9f4:	b40e      	push	{r1, r2, r3}
 801e9f6:	b503      	push	{r0, r1, lr}
 801e9f8:	4601      	mov	r1, r0
 801e9fa:	ab03      	add	r3, sp, #12
 801e9fc:	4805      	ldr	r0, [pc, #20]	@ (801ea14 <fiprintf+0x20>)
 801e9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 801ea02:	6800      	ldr	r0, [r0, #0]
 801ea04:	9301      	str	r3, [sp, #4]
 801ea06:	f7ff fca3 	bl	801e350 <_vfiprintf_r>
 801ea0a:	b002      	add	sp, #8
 801ea0c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ea10:	b003      	add	sp, #12
 801ea12:	4770      	bx	lr
 801ea14:	20000050 	.word	0x20000050

0801ea18 <__swbuf_r>:
 801ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea1a:	460e      	mov	r6, r1
 801ea1c:	4614      	mov	r4, r2
 801ea1e:	4605      	mov	r5, r0
 801ea20:	b118      	cbz	r0, 801ea2a <__swbuf_r+0x12>
 801ea22:	6a03      	ldr	r3, [r0, #32]
 801ea24:	b90b      	cbnz	r3, 801ea2a <__swbuf_r+0x12>
 801ea26:	f7ff f8b5 	bl	801db94 <__sinit>
 801ea2a:	69a3      	ldr	r3, [r4, #24]
 801ea2c:	60a3      	str	r3, [r4, #8]
 801ea2e:	89a3      	ldrh	r3, [r4, #12]
 801ea30:	071a      	lsls	r2, r3, #28
 801ea32:	d501      	bpl.n	801ea38 <__swbuf_r+0x20>
 801ea34:	6923      	ldr	r3, [r4, #16]
 801ea36:	b943      	cbnz	r3, 801ea4a <__swbuf_r+0x32>
 801ea38:	4621      	mov	r1, r4
 801ea3a:	4628      	mov	r0, r5
 801ea3c:	f000 f82a 	bl	801ea94 <__swsetup_r>
 801ea40:	b118      	cbz	r0, 801ea4a <__swbuf_r+0x32>
 801ea42:	f04f 37ff 	mov.w	r7, #4294967295
 801ea46:	4638      	mov	r0, r7
 801ea48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ea4a:	6823      	ldr	r3, [r4, #0]
 801ea4c:	6922      	ldr	r2, [r4, #16]
 801ea4e:	1a98      	subs	r0, r3, r2
 801ea50:	6963      	ldr	r3, [r4, #20]
 801ea52:	b2f6      	uxtb	r6, r6
 801ea54:	4283      	cmp	r3, r0
 801ea56:	4637      	mov	r7, r6
 801ea58:	dc05      	bgt.n	801ea66 <__swbuf_r+0x4e>
 801ea5a:	4621      	mov	r1, r4
 801ea5c:	4628      	mov	r0, r5
 801ea5e:	f7ff ffa1 	bl	801e9a4 <_fflush_r>
 801ea62:	2800      	cmp	r0, #0
 801ea64:	d1ed      	bne.n	801ea42 <__swbuf_r+0x2a>
 801ea66:	68a3      	ldr	r3, [r4, #8]
 801ea68:	3b01      	subs	r3, #1
 801ea6a:	60a3      	str	r3, [r4, #8]
 801ea6c:	6823      	ldr	r3, [r4, #0]
 801ea6e:	1c5a      	adds	r2, r3, #1
 801ea70:	6022      	str	r2, [r4, #0]
 801ea72:	701e      	strb	r6, [r3, #0]
 801ea74:	6962      	ldr	r2, [r4, #20]
 801ea76:	1c43      	adds	r3, r0, #1
 801ea78:	429a      	cmp	r2, r3
 801ea7a:	d004      	beq.n	801ea86 <__swbuf_r+0x6e>
 801ea7c:	89a3      	ldrh	r3, [r4, #12]
 801ea7e:	07db      	lsls	r3, r3, #31
 801ea80:	d5e1      	bpl.n	801ea46 <__swbuf_r+0x2e>
 801ea82:	2e0a      	cmp	r6, #10
 801ea84:	d1df      	bne.n	801ea46 <__swbuf_r+0x2e>
 801ea86:	4621      	mov	r1, r4
 801ea88:	4628      	mov	r0, r5
 801ea8a:	f7ff ff8b 	bl	801e9a4 <_fflush_r>
 801ea8e:	2800      	cmp	r0, #0
 801ea90:	d0d9      	beq.n	801ea46 <__swbuf_r+0x2e>
 801ea92:	e7d6      	b.n	801ea42 <__swbuf_r+0x2a>

0801ea94 <__swsetup_r>:
 801ea94:	b538      	push	{r3, r4, r5, lr}
 801ea96:	4b29      	ldr	r3, [pc, #164]	@ (801eb3c <__swsetup_r+0xa8>)
 801ea98:	4605      	mov	r5, r0
 801ea9a:	6818      	ldr	r0, [r3, #0]
 801ea9c:	460c      	mov	r4, r1
 801ea9e:	b118      	cbz	r0, 801eaa8 <__swsetup_r+0x14>
 801eaa0:	6a03      	ldr	r3, [r0, #32]
 801eaa2:	b90b      	cbnz	r3, 801eaa8 <__swsetup_r+0x14>
 801eaa4:	f7ff f876 	bl	801db94 <__sinit>
 801eaa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eaac:	0719      	lsls	r1, r3, #28
 801eaae:	d422      	bmi.n	801eaf6 <__swsetup_r+0x62>
 801eab0:	06da      	lsls	r2, r3, #27
 801eab2:	d407      	bmi.n	801eac4 <__swsetup_r+0x30>
 801eab4:	2209      	movs	r2, #9
 801eab6:	602a      	str	r2, [r5, #0]
 801eab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eabc:	81a3      	strh	r3, [r4, #12]
 801eabe:	f04f 30ff 	mov.w	r0, #4294967295
 801eac2:	e033      	b.n	801eb2c <__swsetup_r+0x98>
 801eac4:	0758      	lsls	r0, r3, #29
 801eac6:	d512      	bpl.n	801eaee <__swsetup_r+0x5a>
 801eac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801eaca:	b141      	cbz	r1, 801eade <__swsetup_r+0x4a>
 801eacc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ead0:	4299      	cmp	r1, r3
 801ead2:	d002      	beq.n	801eada <__swsetup_r+0x46>
 801ead4:	4628      	mov	r0, r5
 801ead6:	f000 f84b 	bl	801eb70 <_free_r>
 801eada:	2300      	movs	r3, #0
 801eadc:	6363      	str	r3, [r4, #52]	@ 0x34
 801eade:	89a3      	ldrh	r3, [r4, #12]
 801eae0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801eae4:	81a3      	strh	r3, [r4, #12]
 801eae6:	2300      	movs	r3, #0
 801eae8:	6063      	str	r3, [r4, #4]
 801eaea:	6923      	ldr	r3, [r4, #16]
 801eaec:	6023      	str	r3, [r4, #0]
 801eaee:	89a3      	ldrh	r3, [r4, #12]
 801eaf0:	f043 0308 	orr.w	r3, r3, #8
 801eaf4:	81a3      	strh	r3, [r4, #12]
 801eaf6:	6923      	ldr	r3, [r4, #16]
 801eaf8:	b94b      	cbnz	r3, 801eb0e <__swsetup_r+0x7a>
 801eafa:	89a3      	ldrh	r3, [r4, #12]
 801eafc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801eb00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801eb04:	d003      	beq.n	801eb0e <__swsetup_r+0x7a>
 801eb06:	4621      	mov	r1, r4
 801eb08:	4628      	mov	r0, r5
 801eb0a:	f000 f8cf 	bl	801ecac <__smakebuf_r>
 801eb0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb12:	f013 0201 	ands.w	r2, r3, #1
 801eb16:	d00a      	beq.n	801eb2e <__swsetup_r+0x9a>
 801eb18:	2200      	movs	r2, #0
 801eb1a:	60a2      	str	r2, [r4, #8]
 801eb1c:	6962      	ldr	r2, [r4, #20]
 801eb1e:	4252      	negs	r2, r2
 801eb20:	61a2      	str	r2, [r4, #24]
 801eb22:	6922      	ldr	r2, [r4, #16]
 801eb24:	b942      	cbnz	r2, 801eb38 <__swsetup_r+0xa4>
 801eb26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801eb2a:	d1c5      	bne.n	801eab8 <__swsetup_r+0x24>
 801eb2c:	bd38      	pop	{r3, r4, r5, pc}
 801eb2e:	0799      	lsls	r1, r3, #30
 801eb30:	bf58      	it	pl
 801eb32:	6962      	ldrpl	r2, [r4, #20]
 801eb34:	60a2      	str	r2, [r4, #8]
 801eb36:	e7f4      	b.n	801eb22 <__swsetup_r+0x8e>
 801eb38:	2000      	movs	r0, #0
 801eb3a:	e7f7      	b.n	801eb2c <__swsetup_r+0x98>
 801eb3c:	20000050 	.word	0x20000050

0801eb40 <_sbrk_r>:
 801eb40:	b538      	push	{r3, r4, r5, lr}
 801eb42:	4d06      	ldr	r5, [pc, #24]	@ (801eb5c <_sbrk_r+0x1c>)
 801eb44:	2300      	movs	r3, #0
 801eb46:	4604      	mov	r4, r0
 801eb48:	4608      	mov	r0, r1
 801eb4a:	602b      	str	r3, [r5, #0]
 801eb4c:	f7e3 fa64 	bl	8002018 <_sbrk>
 801eb50:	1c43      	adds	r3, r0, #1
 801eb52:	d102      	bne.n	801eb5a <_sbrk_r+0x1a>
 801eb54:	682b      	ldr	r3, [r5, #0]
 801eb56:	b103      	cbz	r3, 801eb5a <_sbrk_r+0x1a>
 801eb58:	6023      	str	r3, [r4, #0]
 801eb5a:	bd38      	pop	{r3, r4, r5, pc}
 801eb5c:	2000fa10 	.word	0x2000fa10

0801eb60 <abort>:
 801eb60:	b508      	push	{r3, lr}
 801eb62:	2006      	movs	r0, #6
 801eb64:	f000 f906 	bl	801ed74 <raise>
 801eb68:	2001      	movs	r0, #1
 801eb6a:	f7e3 f9f9 	bl	8001f60 <_exit>
	...

0801eb70 <_free_r>:
 801eb70:	b538      	push	{r3, r4, r5, lr}
 801eb72:	4605      	mov	r5, r0
 801eb74:	2900      	cmp	r1, #0
 801eb76:	d041      	beq.n	801ebfc <_free_r+0x8c>
 801eb78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eb7c:	1f0c      	subs	r4, r1, #4
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	bfb8      	it	lt
 801eb82:	18e4      	addlt	r4, r4, r3
 801eb84:	f7ff fa56 	bl	801e034 <__malloc_lock>
 801eb88:	4a1d      	ldr	r2, [pc, #116]	@ (801ec00 <_free_r+0x90>)
 801eb8a:	6813      	ldr	r3, [r2, #0]
 801eb8c:	b933      	cbnz	r3, 801eb9c <_free_r+0x2c>
 801eb8e:	6063      	str	r3, [r4, #4]
 801eb90:	6014      	str	r4, [r2, #0]
 801eb92:	4628      	mov	r0, r5
 801eb94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb98:	f7ff ba52 	b.w	801e040 <__malloc_unlock>
 801eb9c:	42a3      	cmp	r3, r4
 801eb9e:	d908      	bls.n	801ebb2 <_free_r+0x42>
 801eba0:	6820      	ldr	r0, [r4, #0]
 801eba2:	1821      	adds	r1, r4, r0
 801eba4:	428b      	cmp	r3, r1
 801eba6:	bf01      	itttt	eq
 801eba8:	6819      	ldreq	r1, [r3, #0]
 801ebaa:	685b      	ldreq	r3, [r3, #4]
 801ebac:	1809      	addeq	r1, r1, r0
 801ebae:	6021      	streq	r1, [r4, #0]
 801ebb0:	e7ed      	b.n	801eb8e <_free_r+0x1e>
 801ebb2:	461a      	mov	r2, r3
 801ebb4:	685b      	ldr	r3, [r3, #4]
 801ebb6:	b10b      	cbz	r3, 801ebbc <_free_r+0x4c>
 801ebb8:	42a3      	cmp	r3, r4
 801ebba:	d9fa      	bls.n	801ebb2 <_free_r+0x42>
 801ebbc:	6811      	ldr	r1, [r2, #0]
 801ebbe:	1850      	adds	r0, r2, r1
 801ebc0:	42a0      	cmp	r0, r4
 801ebc2:	d10b      	bne.n	801ebdc <_free_r+0x6c>
 801ebc4:	6820      	ldr	r0, [r4, #0]
 801ebc6:	4401      	add	r1, r0
 801ebc8:	1850      	adds	r0, r2, r1
 801ebca:	4283      	cmp	r3, r0
 801ebcc:	6011      	str	r1, [r2, #0]
 801ebce:	d1e0      	bne.n	801eb92 <_free_r+0x22>
 801ebd0:	6818      	ldr	r0, [r3, #0]
 801ebd2:	685b      	ldr	r3, [r3, #4]
 801ebd4:	6053      	str	r3, [r2, #4]
 801ebd6:	4408      	add	r0, r1
 801ebd8:	6010      	str	r0, [r2, #0]
 801ebda:	e7da      	b.n	801eb92 <_free_r+0x22>
 801ebdc:	d902      	bls.n	801ebe4 <_free_r+0x74>
 801ebde:	230c      	movs	r3, #12
 801ebe0:	602b      	str	r3, [r5, #0]
 801ebe2:	e7d6      	b.n	801eb92 <_free_r+0x22>
 801ebe4:	6820      	ldr	r0, [r4, #0]
 801ebe6:	1821      	adds	r1, r4, r0
 801ebe8:	428b      	cmp	r3, r1
 801ebea:	bf04      	itt	eq
 801ebec:	6819      	ldreq	r1, [r3, #0]
 801ebee:	685b      	ldreq	r3, [r3, #4]
 801ebf0:	6063      	str	r3, [r4, #4]
 801ebf2:	bf04      	itt	eq
 801ebf4:	1809      	addeq	r1, r1, r0
 801ebf6:	6021      	streq	r1, [r4, #0]
 801ebf8:	6054      	str	r4, [r2, #4]
 801ebfa:	e7ca      	b.n	801eb92 <_free_r+0x22>
 801ebfc:	bd38      	pop	{r3, r4, r5, pc}
 801ebfe:	bf00      	nop
 801ec00:	2000fb5c 	.word	0x2000fb5c

0801ec04 <_realloc_r>:
 801ec04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec08:	4680      	mov	r8, r0
 801ec0a:	4615      	mov	r5, r2
 801ec0c:	460c      	mov	r4, r1
 801ec0e:	b921      	cbnz	r1, 801ec1a <_realloc_r+0x16>
 801ec10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ec14:	4611      	mov	r1, r2
 801ec16:	f7ff b98d 	b.w	801df34 <_malloc_r>
 801ec1a:	b92a      	cbnz	r2, 801ec28 <_realloc_r+0x24>
 801ec1c:	f7ff ffa8 	bl	801eb70 <_free_r>
 801ec20:	2400      	movs	r4, #0
 801ec22:	4620      	mov	r0, r4
 801ec24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec28:	f000 f8e2 	bl	801edf0 <_malloc_usable_size_r>
 801ec2c:	4285      	cmp	r5, r0
 801ec2e:	4606      	mov	r6, r0
 801ec30:	d802      	bhi.n	801ec38 <_realloc_r+0x34>
 801ec32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ec36:	d8f4      	bhi.n	801ec22 <_realloc_r+0x1e>
 801ec38:	4629      	mov	r1, r5
 801ec3a:	4640      	mov	r0, r8
 801ec3c:	f7ff f97a 	bl	801df34 <_malloc_r>
 801ec40:	4607      	mov	r7, r0
 801ec42:	2800      	cmp	r0, #0
 801ec44:	d0ec      	beq.n	801ec20 <_realloc_r+0x1c>
 801ec46:	42b5      	cmp	r5, r6
 801ec48:	462a      	mov	r2, r5
 801ec4a:	4621      	mov	r1, r4
 801ec4c:	bf28      	it	cs
 801ec4e:	4632      	movcs	r2, r6
 801ec50:	f7ff f919 	bl	801de86 <memcpy>
 801ec54:	4621      	mov	r1, r4
 801ec56:	4640      	mov	r0, r8
 801ec58:	f7ff ff8a 	bl	801eb70 <_free_r>
 801ec5c:	463c      	mov	r4, r7
 801ec5e:	e7e0      	b.n	801ec22 <_realloc_r+0x1e>

0801ec60 <__swhatbuf_r>:
 801ec60:	b570      	push	{r4, r5, r6, lr}
 801ec62:	460c      	mov	r4, r1
 801ec64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec68:	2900      	cmp	r1, #0
 801ec6a:	b096      	sub	sp, #88	@ 0x58
 801ec6c:	4615      	mov	r5, r2
 801ec6e:	461e      	mov	r6, r3
 801ec70:	da0d      	bge.n	801ec8e <__swhatbuf_r+0x2e>
 801ec72:	89a3      	ldrh	r3, [r4, #12]
 801ec74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ec78:	f04f 0100 	mov.w	r1, #0
 801ec7c:	bf14      	ite	ne
 801ec7e:	2340      	movne	r3, #64	@ 0x40
 801ec80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ec84:	2000      	movs	r0, #0
 801ec86:	6031      	str	r1, [r6, #0]
 801ec88:	602b      	str	r3, [r5, #0]
 801ec8a:	b016      	add	sp, #88	@ 0x58
 801ec8c:	bd70      	pop	{r4, r5, r6, pc}
 801ec8e:	466a      	mov	r2, sp
 801ec90:	f000 f878 	bl	801ed84 <_fstat_r>
 801ec94:	2800      	cmp	r0, #0
 801ec96:	dbec      	blt.n	801ec72 <__swhatbuf_r+0x12>
 801ec98:	9901      	ldr	r1, [sp, #4]
 801ec9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ec9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801eca2:	4259      	negs	r1, r3
 801eca4:	4159      	adcs	r1, r3
 801eca6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ecaa:	e7eb      	b.n	801ec84 <__swhatbuf_r+0x24>

0801ecac <__smakebuf_r>:
 801ecac:	898b      	ldrh	r3, [r1, #12]
 801ecae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ecb0:	079d      	lsls	r5, r3, #30
 801ecb2:	4606      	mov	r6, r0
 801ecb4:	460c      	mov	r4, r1
 801ecb6:	d507      	bpl.n	801ecc8 <__smakebuf_r+0x1c>
 801ecb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ecbc:	6023      	str	r3, [r4, #0]
 801ecbe:	6123      	str	r3, [r4, #16]
 801ecc0:	2301      	movs	r3, #1
 801ecc2:	6163      	str	r3, [r4, #20]
 801ecc4:	b003      	add	sp, #12
 801ecc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ecc8:	ab01      	add	r3, sp, #4
 801ecca:	466a      	mov	r2, sp
 801eccc:	f7ff ffc8 	bl	801ec60 <__swhatbuf_r>
 801ecd0:	9f00      	ldr	r7, [sp, #0]
 801ecd2:	4605      	mov	r5, r0
 801ecd4:	4639      	mov	r1, r7
 801ecd6:	4630      	mov	r0, r6
 801ecd8:	f7ff f92c 	bl	801df34 <_malloc_r>
 801ecdc:	b948      	cbnz	r0, 801ecf2 <__smakebuf_r+0x46>
 801ecde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ece2:	059a      	lsls	r2, r3, #22
 801ece4:	d4ee      	bmi.n	801ecc4 <__smakebuf_r+0x18>
 801ece6:	f023 0303 	bic.w	r3, r3, #3
 801ecea:	f043 0302 	orr.w	r3, r3, #2
 801ecee:	81a3      	strh	r3, [r4, #12]
 801ecf0:	e7e2      	b.n	801ecb8 <__smakebuf_r+0xc>
 801ecf2:	89a3      	ldrh	r3, [r4, #12]
 801ecf4:	6020      	str	r0, [r4, #0]
 801ecf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ecfa:	81a3      	strh	r3, [r4, #12]
 801ecfc:	9b01      	ldr	r3, [sp, #4]
 801ecfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ed02:	b15b      	cbz	r3, 801ed1c <__smakebuf_r+0x70>
 801ed04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ed08:	4630      	mov	r0, r6
 801ed0a:	f000 f84d 	bl	801eda8 <_isatty_r>
 801ed0e:	b128      	cbz	r0, 801ed1c <__smakebuf_r+0x70>
 801ed10:	89a3      	ldrh	r3, [r4, #12]
 801ed12:	f023 0303 	bic.w	r3, r3, #3
 801ed16:	f043 0301 	orr.w	r3, r3, #1
 801ed1a:	81a3      	strh	r3, [r4, #12]
 801ed1c:	89a3      	ldrh	r3, [r4, #12]
 801ed1e:	431d      	orrs	r5, r3
 801ed20:	81a5      	strh	r5, [r4, #12]
 801ed22:	e7cf      	b.n	801ecc4 <__smakebuf_r+0x18>

0801ed24 <_raise_r>:
 801ed24:	291f      	cmp	r1, #31
 801ed26:	b538      	push	{r3, r4, r5, lr}
 801ed28:	4605      	mov	r5, r0
 801ed2a:	460c      	mov	r4, r1
 801ed2c:	d904      	bls.n	801ed38 <_raise_r+0x14>
 801ed2e:	2316      	movs	r3, #22
 801ed30:	6003      	str	r3, [r0, #0]
 801ed32:	f04f 30ff 	mov.w	r0, #4294967295
 801ed36:	bd38      	pop	{r3, r4, r5, pc}
 801ed38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ed3a:	b112      	cbz	r2, 801ed42 <_raise_r+0x1e>
 801ed3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ed40:	b94b      	cbnz	r3, 801ed56 <_raise_r+0x32>
 801ed42:	4628      	mov	r0, r5
 801ed44:	f000 f852 	bl	801edec <_getpid_r>
 801ed48:	4622      	mov	r2, r4
 801ed4a:	4601      	mov	r1, r0
 801ed4c:	4628      	mov	r0, r5
 801ed4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ed52:	f000 b839 	b.w	801edc8 <_kill_r>
 801ed56:	2b01      	cmp	r3, #1
 801ed58:	d00a      	beq.n	801ed70 <_raise_r+0x4c>
 801ed5a:	1c59      	adds	r1, r3, #1
 801ed5c:	d103      	bne.n	801ed66 <_raise_r+0x42>
 801ed5e:	2316      	movs	r3, #22
 801ed60:	6003      	str	r3, [r0, #0]
 801ed62:	2001      	movs	r0, #1
 801ed64:	e7e7      	b.n	801ed36 <_raise_r+0x12>
 801ed66:	2100      	movs	r1, #0
 801ed68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ed6c:	4620      	mov	r0, r4
 801ed6e:	4798      	blx	r3
 801ed70:	2000      	movs	r0, #0
 801ed72:	e7e0      	b.n	801ed36 <_raise_r+0x12>

0801ed74 <raise>:
 801ed74:	4b02      	ldr	r3, [pc, #8]	@ (801ed80 <raise+0xc>)
 801ed76:	4601      	mov	r1, r0
 801ed78:	6818      	ldr	r0, [r3, #0]
 801ed7a:	f7ff bfd3 	b.w	801ed24 <_raise_r>
 801ed7e:	bf00      	nop
 801ed80:	20000050 	.word	0x20000050

0801ed84 <_fstat_r>:
 801ed84:	b538      	push	{r3, r4, r5, lr}
 801ed86:	4d07      	ldr	r5, [pc, #28]	@ (801eda4 <_fstat_r+0x20>)
 801ed88:	2300      	movs	r3, #0
 801ed8a:	4604      	mov	r4, r0
 801ed8c:	4608      	mov	r0, r1
 801ed8e:	4611      	mov	r1, r2
 801ed90:	602b      	str	r3, [r5, #0]
 801ed92:	f7e3 f919 	bl	8001fc8 <_fstat>
 801ed96:	1c43      	adds	r3, r0, #1
 801ed98:	d102      	bne.n	801eda0 <_fstat_r+0x1c>
 801ed9a:	682b      	ldr	r3, [r5, #0]
 801ed9c:	b103      	cbz	r3, 801eda0 <_fstat_r+0x1c>
 801ed9e:	6023      	str	r3, [r4, #0]
 801eda0:	bd38      	pop	{r3, r4, r5, pc}
 801eda2:	bf00      	nop
 801eda4:	2000fa10 	.word	0x2000fa10

0801eda8 <_isatty_r>:
 801eda8:	b538      	push	{r3, r4, r5, lr}
 801edaa:	4d06      	ldr	r5, [pc, #24]	@ (801edc4 <_isatty_r+0x1c>)
 801edac:	2300      	movs	r3, #0
 801edae:	4604      	mov	r4, r0
 801edb0:	4608      	mov	r0, r1
 801edb2:	602b      	str	r3, [r5, #0]
 801edb4:	f7e3 f918 	bl	8001fe8 <_isatty>
 801edb8:	1c43      	adds	r3, r0, #1
 801edba:	d102      	bne.n	801edc2 <_isatty_r+0x1a>
 801edbc:	682b      	ldr	r3, [r5, #0]
 801edbe:	b103      	cbz	r3, 801edc2 <_isatty_r+0x1a>
 801edc0:	6023      	str	r3, [r4, #0]
 801edc2:	bd38      	pop	{r3, r4, r5, pc}
 801edc4:	2000fa10 	.word	0x2000fa10

0801edc8 <_kill_r>:
 801edc8:	b538      	push	{r3, r4, r5, lr}
 801edca:	4d07      	ldr	r5, [pc, #28]	@ (801ede8 <_kill_r+0x20>)
 801edcc:	2300      	movs	r3, #0
 801edce:	4604      	mov	r4, r0
 801edd0:	4608      	mov	r0, r1
 801edd2:	4611      	mov	r1, r2
 801edd4:	602b      	str	r3, [r5, #0]
 801edd6:	f7e3 f8b3 	bl	8001f40 <_kill>
 801edda:	1c43      	adds	r3, r0, #1
 801eddc:	d102      	bne.n	801ede4 <_kill_r+0x1c>
 801edde:	682b      	ldr	r3, [r5, #0]
 801ede0:	b103      	cbz	r3, 801ede4 <_kill_r+0x1c>
 801ede2:	6023      	str	r3, [r4, #0]
 801ede4:	bd38      	pop	{r3, r4, r5, pc}
 801ede6:	bf00      	nop
 801ede8:	2000fa10 	.word	0x2000fa10

0801edec <_getpid_r>:
 801edec:	f7e3 b8a0 	b.w	8001f30 <_getpid>

0801edf0 <_malloc_usable_size_r>:
 801edf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801edf4:	1f18      	subs	r0, r3, #4
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	bfbc      	itt	lt
 801edfa:	580b      	ldrlt	r3, [r1, r0]
 801edfc:	18c0      	addlt	r0, r0, r3
 801edfe:	4770      	bx	lr

0801ee00 <_init>:
 801ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee02:	bf00      	nop
 801ee04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee06:	bc08      	pop	{r3}
 801ee08:	469e      	mov	lr, r3
 801ee0a:	4770      	bx	lr

0801ee0c <_fini>:
 801ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee0e:	bf00      	nop
 801ee10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ee12:	bc08      	pop	{r3}
 801ee14:	469e      	mov	lr, r3
 801ee16:	4770      	bx	lr
